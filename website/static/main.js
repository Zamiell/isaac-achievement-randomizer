"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a2, b2) => (typeof require !== "undefined" ? require : a2)[b2]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/isaac-typescript-definitions/dist/enums/ActiveSlot.js
  var require_ActiveSlot = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ActiveSlot.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ActiveSlot = void 0;
      var ActiveSlot;
      (function(ActiveSlot2) {
        ActiveSlot2[ActiveSlot2["PRIMARY"] = 0] = "PRIMARY";
        ActiveSlot2[ActiveSlot2["SECONDARY"] = 1] = "SECONDARY";
        ActiveSlot2[ActiveSlot2["POCKET"] = 2] = "POCKET";
        ActiveSlot2[ActiveSlot2["POCKET_SINGLE_USE"] = 3] = "POCKET_SINGLE_USE";
      })(ActiveSlot || (exports2.ActiveSlot = ActiveSlot = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/BackdropType.js
  var require_BackdropType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/BackdropType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BackdropType = void 0;
      var BackdropType;
      (function(BackdropType2) {
        BackdropType2[BackdropType2["BASEMENT"] = 1] = "BASEMENT";
        BackdropType2[BackdropType2["CELLAR"] = 2] = "CELLAR";
        BackdropType2[BackdropType2["BURNING_BASEMENT"] = 3] = "BURNING_BASEMENT";
        BackdropType2[BackdropType2["CAVES"] = 4] = "CAVES";
        BackdropType2[BackdropType2["CATACOMBS"] = 5] = "CATACOMBS";
        BackdropType2[BackdropType2["FLOODED_CAVES"] = 6] = "FLOODED_CAVES";
        BackdropType2[BackdropType2["DEPTHS"] = 7] = "DEPTHS";
        BackdropType2[BackdropType2["NECROPOLIS"] = 8] = "NECROPOLIS";
        BackdropType2[BackdropType2["DANK_DEPTHS"] = 9] = "DANK_DEPTHS";
        BackdropType2[BackdropType2["WOMB"] = 10] = "WOMB";
        BackdropType2[BackdropType2["UTERO"] = 11] = "UTERO";
        BackdropType2[BackdropType2["SCARRED_WOMB"] = 12] = "SCARRED_WOMB";
        BackdropType2[BackdropType2["BLUE_WOMB"] = 13] = "BLUE_WOMB";
        BackdropType2[BackdropType2["SHEOL"] = 14] = "SHEOL";
        BackdropType2[BackdropType2["CATHEDRAL"] = 15] = "CATHEDRAL";
        BackdropType2[BackdropType2["DARK_ROOM"] = 16] = "DARK_ROOM";
        BackdropType2[BackdropType2["CHEST"] = 17] = "CHEST";
        BackdropType2[BackdropType2["MEGA_SATAN"] = 18] = "MEGA_SATAN";
        BackdropType2[BackdropType2["LIBRARY"] = 19] = "LIBRARY";
        BackdropType2[BackdropType2["SHOP"] = 20] = "SHOP";
        BackdropType2[BackdropType2["CLEAN_BEDROOM"] = 21] = "CLEAN_BEDROOM";
        BackdropType2[BackdropType2["DIRTY_BEDROOM"] = 22] = "DIRTY_BEDROOM";
        BackdropType2[BackdropType2["SECRET"] = 23] = "SECRET";
        BackdropType2[BackdropType2["DICE"] = 24] = "DICE";
        BackdropType2[BackdropType2["ARCADE"] = 25] = "ARCADE";
        BackdropType2[BackdropType2["ERROR_ROOM"] = 26] = "ERROR_ROOM";
        BackdropType2[BackdropType2["BLUE_WOMB_PASS"] = 27] = "BLUE_WOMB_PASS";
        BackdropType2[BackdropType2["GREED_SHOP"] = 28] = "GREED_SHOP";
        BackdropType2[BackdropType2["DUNGEON"] = 29] = "DUNGEON";
        BackdropType2[BackdropType2["SACRIFICE"] = 30] = "SACRIFICE";
        BackdropType2[BackdropType2["DOWNPOUR"] = 31] = "DOWNPOUR";
        BackdropType2[BackdropType2["MINES"] = 32] = "MINES";
        BackdropType2[BackdropType2["MAUSOLEUM"] = 33] = "MAUSOLEUM";
        BackdropType2[BackdropType2["CORPSE"] = 34] = "CORPSE";
        BackdropType2[BackdropType2["PLANETARIUM"] = 35] = "PLANETARIUM";
        BackdropType2[BackdropType2["DOWNPOUR_ENTRANCE"] = 36] = "DOWNPOUR_ENTRANCE";
        BackdropType2[BackdropType2["MINES_ENTRANCE"] = 37] = "MINES_ENTRANCE";
        BackdropType2[BackdropType2["MAUSOLEUM_ENTRANCE"] = 38] = "MAUSOLEUM_ENTRANCE";
        BackdropType2[BackdropType2["CORPSE_ENTRANCE"] = 39] = "CORPSE_ENTRANCE";
        BackdropType2[BackdropType2["MAUSOLEUM_2"] = 40] = "MAUSOLEUM_2";
        BackdropType2[BackdropType2["MAUSOLEUM_3"] = 41] = "MAUSOLEUM_3";
        BackdropType2[BackdropType2["MAUSOLEUM_4"] = 42] = "MAUSOLEUM_4";
        BackdropType2[BackdropType2["CORPSE_2"] = 43] = "CORPSE_2";
        BackdropType2[BackdropType2["CORPSE_3"] = 44] = "CORPSE_3";
        BackdropType2[BackdropType2["DROSS"] = 45] = "DROSS";
        BackdropType2[BackdropType2["ASHPIT"] = 46] = "ASHPIT";
        BackdropType2[BackdropType2["GEHENNA"] = 47] = "GEHENNA";
        BackdropType2[BackdropType2["MORTIS"] = 48] = "MORTIS";
        BackdropType2[BackdropType2["ISAACS_BEDROOM"] = 49] = "ISAACS_BEDROOM";
        BackdropType2[BackdropType2["HALLWAY"] = 50] = "HALLWAY";
        BackdropType2[BackdropType2["MOMS_BEDROOM"] = 51] = "MOMS_BEDROOM";
        BackdropType2[BackdropType2["CLOSET"] = 52] = "CLOSET";
        BackdropType2[BackdropType2["CLOSET_B"] = 53] = "CLOSET_B";
        BackdropType2[BackdropType2["DOGMA"] = 54] = "DOGMA";
        BackdropType2[BackdropType2["DUNGEON_GIDEON"] = 55] = "DUNGEON_GIDEON";
        BackdropType2[BackdropType2["DUNGEON_ROTGUT"] = 56] = "DUNGEON_ROTGUT";
        BackdropType2[BackdropType2["DUNGEON_BEAST"] = 57] = "DUNGEON_BEAST";
        BackdropType2[BackdropType2["MINES_SHAFT"] = 58] = "MINES_SHAFT";
        BackdropType2[BackdropType2["ASHPIT_SHAFT"] = 59] = "ASHPIT_SHAFT";
        BackdropType2[BackdropType2["DARK_CLOSET"] = 60] = "DARK_CLOSET";
      })(BackdropType || (exports2.BackdropType = BackdropType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/BrokenWatchState.js
  var require_BrokenWatchState = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/BrokenWatchState.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BrokenWatchState = void 0;
      var BrokenWatchState;
      (function(BrokenWatchState2) {
        BrokenWatchState2[BrokenWatchState2["NONE"] = 0] = "NONE";
        BrokenWatchState2[BrokenWatchState2["SLOW"] = 1] = "SLOW";
        BrokenWatchState2[BrokenWatchState2["FAST"] = 2] = "FAST";
      })(BrokenWatchState || (exports2.BrokenWatchState = BrokenWatchState = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ButtonAction.js
  var require_ButtonAction = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ButtonAction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ButtonAction = void 0;
      var ButtonAction;
      (function(ButtonAction2) {
        ButtonAction2[ButtonAction2["LEFT"] = 0] = "LEFT";
        ButtonAction2[ButtonAction2["RIGHT"] = 1] = "RIGHT";
        ButtonAction2[ButtonAction2["UP"] = 2] = "UP";
        ButtonAction2[ButtonAction2["DOWN"] = 3] = "DOWN";
        ButtonAction2[ButtonAction2["SHOOT_LEFT"] = 4] = "SHOOT_LEFT";
        ButtonAction2[ButtonAction2["SHOOT_RIGHT"] = 5] = "SHOOT_RIGHT";
        ButtonAction2[ButtonAction2["SHOOT_UP"] = 6] = "SHOOT_UP";
        ButtonAction2[ButtonAction2["SHOOT_DOWN"] = 7] = "SHOOT_DOWN";
        ButtonAction2[ButtonAction2["BOMB"] = 8] = "BOMB";
        ButtonAction2[ButtonAction2["ITEM"] = 9] = "ITEM";
        ButtonAction2[ButtonAction2["PILL_CARD"] = 10] = "PILL_CARD";
        ButtonAction2[ButtonAction2["DROP"] = 11] = "DROP";
        ButtonAction2[ButtonAction2["PAUSE"] = 12] = "PAUSE";
        ButtonAction2[ButtonAction2["MAP"] = 13] = "MAP";
        ButtonAction2[ButtonAction2["MENU_CONFIRM"] = 14] = "MENU_CONFIRM";
        ButtonAction2[ButtonAction2["MENU_BACK"] = 15] = "MENU_BACK";
        ButtonAction2[ButtonAction2["RESTART"] = 16] = "RESTART";
        ButtonAction2[ButtonAction2["FULLSCREEN"] = 17] = "FULLSCREEN";
        ButtonAction2[ButtonAction2["MUTE"] = 18] = "MUTE";
        ButtonAction2[ButtonAction2["JOIN_MULTIPLAYER"] = 19] = "JOIN_MULTIPLAYER";
        ButtonAction2[ButtonAction2["MENU_LEFT"] = 20] = "MENU_LEFT";
        ButtonAction2[ButtonAction2["MENU_RIGHT"] = 21] = "MENU_RIGHT";
        ButtonAction2[ButtonAction2["MENU_UP"] = 22] = "MENU_UP";
        ButtonAction2[ButtonAction2["MENU_DOWN"] = 23] = "MENU_DOWN";
        ButtonAction2[ButtonAction2["MENU_LT"] = 24] = "MENU_LT";
        ButtonAction2[ButtonAction2["MENU_RT"] = 25] = "MENU_RT";
        ButtonAction2[ButtonAction2["MENU_TAB"] = 26] = "MENU_TAB";
        ButtonAction2[ButtonAction2["CONSOLE"] = 28] = "CONSOLE";
      })(ButtonAction || (exports2.ButtonAction = ButtonAction = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/CallbackPriority.js
  var require_CallbackPriority = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/CallbackPriority.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CallbackPriority = void 0;
      var CallbackPriority;
      (function(CallbackPriority2) {
        CallbackPriority2[CallbackPriority2["IMPORTANT"] = -200] = "IMPORTANT";
        CallbackPriority2[CallbackPriority2["EARLY"] = -100] = "EARLY";
        CallbackPriority2[CallbackPriority2["DEFAULT"] = 0] = "DEFAULT";
        CallbackPriority2[CallbackPriority2["LATE"] = 100] = "LATE";
      })(CallbackPriority || (exports2.CallbackPriority = CallbackPriority = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Challenge.js
  var require_Challenge = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Challenge.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Challenge = void 0;
      var Challenge3;
      (function(Challenge4) {
        Challenge4[Challenge4["NULL"] = 0] = "NULL";
        Challenge4[Challenge4["PITCH_BLACK"] = 1] = "PITCH_BLACK";
        Challenge4[Challenge4["HIGH_BROW"] = 2] = "HIGH_BROW";
        Challenge4[Challenge4["HEAD_TRAUMA"] = 3] = "HEAD_TRAUMA";
        Challenge4[Challenge4["DARKNESS_FALLS"] = 4] = "DARKNESS_FALLS";
        Challenge4[Challenge4["TANK"] = 5] = "TANK";
        Challenge4[Challenge4["SOLAR_SYSTEM"] = 6] = "SOLAR_SYSTEM";
        Challenge4[Challenge4["SUICIDE_KING"] = 7] = "SUICIDE_KING";
        Challenge4[Challenge4["CAT_GOT_YOUR_TONGUE"] = 8] = "CAT_GOT_YOUR_TONGUE";
        Challenge4[Challenge4["DEMO_MAN"] = 9] = "DEMO_MAN";
        Challenge4[Challenge4["CURSED"] = 10] = "CURSED";
        Challenge4[Challenge4["GLASS_CANNON"] = 11] = "GLASS_CANNON";
        Challenge4[Challenge4["WHEN_LIFE_GIVES_YOU_LEMONS"] = 12] = "WHEN_LIFE_GIVES_YOU_LEMONS";
        Challenge4[Challenge4["BEANS"] = 13] = "BEANS";
        Challenge4[Challenge4["ITS_IN_THE_CARDS"] = 14] = "ITS_IN_THE_CARDS";
        Challenge4[Challenge4["SLOW_ROLL"] = 15] = "SLOW_ROLL";
        Challenge4[Challenge4["COMPUTER_SAVY"] = 16] = "COMPUTER_SAVY";
        Challenge4[Challenge4["WAKA_WAKA"] = 17] = "WAKA_WAKA";
        Challenge4[Challenge4["HOST"] = 18] = "HOST";
        Challenge4[Challenge4["FAMILY_MAN"] = 19] = "FAMILY_MAN";
        Challenge4[Challenge4["PURIST"] = 20] = "PURIST";
        Challenge4[Challenge4["XXXXXXXXL"] = 21] = "XXXXXXXXL";
        Challenge4[Challenge4["SPEED"] = 22] = "SPEED";
        Challenge4[Challenge4["BLUE_BOMBER"] = 23] = "BLUE_BOMBER";
        Challenge4[Challenge4["PAY_TO_PLAY"] = 24] = "PAY_TO_PLAY";
        Challenge4[Challenge4["HAVE_A_HEART"] = 25] = "HAVE_A_HEART";
        Challenge4[Challenge4["I_RULE"] = 26] = "I_RULE";
        Challenge4[Challenge4["BRAINS"] = 27] = "BRAINS";
        Challenge4[Challenge4["PRIDE_DAY"] = 28] = "PRIDE_DAY";
        Challenge4[Challenge4["ONANS_STREAK"] = 29] = "ONANS_STREAK";
        Challenge4[Challenge4["GUARDIAN"] = 30] = "GUARDIAN";
        Challenge4[Challenge4["BACKASSWARDS"] = 31] = "BACKASSWARDS";
        Challenge4[Challenge4["APRILS_FOOL"] = 32] = "APRILS_FOOL";
        Challenge4[Challenge4["POKEY_MANS"] = 33] = "POKEY_MANS";
        Challenge4[Challenge4["ULTRA_HARD"] = 34] = "ULTRA_HARD";
        Challenge4[Challenge4["PONG"] = 35] = "PONG";
        Challenge4[Challenge4["SCAT_MAN"] = 36] = "SCAT_MAN";
        Challenge4[Challenge4["BLOODY_MARY"] = 37] = "BLOODY_MARY";
        Challenge4[Challenge4["BAPTISM_BY_FIRE"] = 38] = "BAPTISM_BY_FIRE";
        Challenge4[Challenge4["ISAACS_AWAKENING"] = 39] = "ISAACS_AWAKENING";
        Challenge4[Challenge4["SEEING_DOUBLE"] = 40] = "SEEING_DOUBLE";
        Challenge4[Challenge4["PICA_RUN"] = 41] = "PICA_RUN";
        Challenge4[Challenge4["HOT_POTATO"] = 42] = "HOT_POTATO";
        Challenge4[Challenge4["CANTRIPPED"] = 43] = "CANTRIPPED";
        Challenge4[Challenge4["RED_REDEMPTION"] = 44] = "RED_REDEMPTION";
        Challenge4[Challenge4["DELETE_THIS"] = 45] = "DELETE_THIS";
      })(Challenge3 || (exports2.Challenge = Challenge3 = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ChampionColor.js
  var require_ChampionColor = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ChampionColor.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ChampionColor = void 0;
      var ChampionColor;
      (function(ChampionColor2) {
        ChampionColor2[ChampionColor2["RED"] = 0] = "RED";
        ChampionColor2[ChampionColor2["YELLOW"] = 1] = "YELLOW";
        ChampionColor2[ChampionColor2["GREEN"] = 2] = "GREEN";
        ChampionColor2[ChampionColor2["ORANGE"] = 3] = "ORANGE";
        ChampionColor2[ChampionColor2["BLUE"] = 4] = "BLUE";
        ChampionColor2[ChampionColor2["BLACK"] = 5] = "BLACK";
        ChampionColor2[ChampionColor2["WHITE"] = 6] = "WHITE";
        ChampionColor2[ChampionColor2["GREY"] = 7] = "GREY";
        ChampionColor2[ChampionColor2["TRANSPARENT"] = 8] = "TRANSPARENT";
        ChampionColor2[ChampionColor2["FLICKER"] = 9] = "FLICKER";
        ChampionColor2[ChampionColor2["PINK"] = 10] = "PINK";
        ChampionColor2[ChampionColor2["PURPLE"] = 11] = "PURPLE";
        ChampionColor2[ChampionColor2["DARK_RED"] = 12] = "DARK_RED";
        ChampionColor2[ChampionColor2["LIGHT_BLUE"] = 13] = "LIGHT_BLUE";
        ChampionColor2[ChampionColor2["CAMO"] = 14] = "CAMO";
        ChampionColor2[ChampionColor2["PULSE_GREEN"] = 15] = "PULSE_GREEN";
        ChampionColor2[ChampionColor2["PULSE_GREY"] = 16] = "PULSE_GREY";
        ChampionColor2[ChampionColor2["FLY_PROTECTED"] = 17] = "FLY_PROTECTED";
        ChampionColor2[ChampionColor2["TINY"] = 18] = "TINY";
        ChampionColor2[ChampionColor2["GIANT"] = 19] = "GIANT";
        ChampionColor2[ChampionColor2["PULSE_RED"] = 20] = "PULSE_RED";
        ChampionColor2[ChampionColor2["SIZE_PULSE"] = 21] = "SIZE_PULSE";
        ChampionColor2[ChampionColor2["KING"] = 22] = "KING";
        ChampionColor2[ChampionColor2["DEATH"] = 23] = "DEATH";
        ChampionColor2[ChampionColor2["BROWN"] = 24] = "BROWN";
        ChampionColor2[ChampionColor2["RAINBOW"] = 25] = "RAINBOW";
      })(ChampionColor || (exports2.ChampionColor = ChampionColor = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/CollectibleAnimation.js
  var require_CollectibleAnimation = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/CollectibleAnimation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CollectibleAnimation = void 0;
      var CollectibleAnimation;
      (function(CollectibleAnimation2) {
        CollectibleAnimation2["IDLE"] = "Idle";
        CollectibleAnimation2["EMPTY"] = "Empty";
        CollectibleAnimation2["SHOP_IDLE"] = "ShopIdle";
        CollectibleAnimation2["PLAYER_PICKUP"] = "PlayerPickup";
        CollectibleAnimation2["PLAYER_PICKUP_SPARKLE"] = "PlayerPickupSparkle";
        CollectibleAnimation2["ALTERNATE"] = "Alternates";
      })(CollectibleAnimation || (exports2.CollectibleAnimation = CollectibleAnimation = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/CollectiblePedestalType.js
  var require_CollectiblePedestalType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/CollectiblePedestalType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CollectiblePedestalType = void 0;
      var CollectiblePedestalType;
      (function(CollectiblePedestalType2) {
        CollectiblePedestalType2[CollectiblePedestalType2["NONE"] = -1] = "NONE";
        CollectiblePedestalType2[CollectiblePedestalType2["NORMAL"] = 0] = "NORMAL";
        CollectiblePedestalType2[CollectiblePedestalType2["FORTUNE_TELLING_MACHINE"] = 1] = "FORTUNE_TELLING_MACHINE";
        CollectiblePedestalType2[CollectiblePedestalType2["BLOOD_DONATION_MACHINE"] = 2] = "BLOOD_DONATION_MACHINE";
        CollectiblePedestalType2[CollectiblePedestalType2["SLOT_MACHINE"] = 3] = "SLOT_MACHINE";
        CollectiblePedestalType2[CollectiblePedestalType2["LOCKED_CHEST"] = 4] = "LOCKED_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["RED_CHEST"] = 5] = "RED_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["BOMB_CHEST"] = 6] = "BOMB_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["SPIKED_CHEST"] = 7] = "SPIKED_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["ETERNAL_CHEST"] = 8] = "ETERNAL_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["MOMS_DRESSING_TABLE"] = 9] = "MOMS_DRESSING_TABLE";
        CollectiblePedestalType2[CollectiblePedestalType2["CHEST"] = 10] = "CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["MOMS_CHEST"] = 11] = "MOMS_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["OLD_CHEST"] = 12] = "OLD_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["WOODEN_CHEST"] = 13] = "WOODEN_CHEST";
        CollectiblePedestalType2[CollectiblePedestalType2["MEGA_CHEST"] = 14] = "MEGA_CHEST";
      })(CollectiblePedestalType || (exports2.CollectiblePedestalType = CollectiblePedestalType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/CollectibleSpriteLayer.js
  var require_CollectibleSpriteLayer = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/CollectibleSpriteLayer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CollectibleSpriteLayer = void 0;
      var CollectibleSpriteLayer;
      (function(CollectibleSpriteLayer2) {
        CollectibleSpriteLayer2[CollectibleSpriteLayer2["BODY"] = 0] = "BODY";
        CollectibleSpriteLayer2[CollectibleSpriteLayer2["HEAD"] = 1] = "HEAD";
        CollectibleSpriteLayer2[CollectibleSpriteLayer2["SPARKLE"] = 2] = "SPARKLE";
        CollectibleSpriteLayer2[CollectibleSpriteLayer2["SHADOW"] = 3] = "SHADOW";
        CollectibleSpriteLayer2[CollectibleSpriteLayer2["ITEM_SHADOW"] = 4] = "ITEM_SHADOW";
        CollectibleSpriteLayer2[CollectibleSpriteLayer2["ALTAR"] = 5] = "ALTAR";
      })(CollectibleSpriteLayer || (exports2.CollectibleSpriteLayer = CollectibleSpriteLayer = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Controller.js
  var require_Controller = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Controller.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Controller = void 0;
      var Controller;
      (function(Controller2) {
        Controller2[Controller2["D_PAD_LEFT"] = 0] = "D_PAD_LEFT";
        Controller2[Controller2["D_PAD_RIGHT"] = 1] = "D_PAD_RIGHT";
        Controller2[Controller2["D_PAD_UP"] = 2] = "D_PAD_UP";
        Controller2[Controller2["D_PAD_DOWN"] = 3] = "D_PAD_DOWN";
        Controller2[Controller2["BUTTON_A"] = 4] = "BUTTON_A";
        Controller2[Controller2["BUTTON_B"] = 5] = "BUTTON_B";
        Controller2[Controller2["BUTTON_X"] = 6] = "BUTTON_X";
        Controller2[Controller2["BUTTON_Y"] = 7] = "BUTTON_Y";
        Controller2[Controller2["BUMPER_LEFT"] = 8] = "BUMPER_LEFT";
        Controller2[Controller2["TRIGGER_LEFT"] = 9] = "TRIGGER_LEFT";
        Controller2[Controller2["STICK_LEFT"] = 10] = "STICK_LEFT";
        Controller2[Controller2["BUMPER_RIGHT"] = 11] = "BUMPER_RIGHT";
        Controller2[Controller2["TRIGGER_RIGHT"] = 12] = "TRIGGER_RIGHT";
        Controller2[Controller2["STICK_RIGHT"] = 13] = "STICK_RIGHT";
        Controller2[Controller2["BUTTON_BACK"] = 14] = "BUTTON_BACK";
        Controller2[Controller2["BUTTON_START"] = 15] = "BUTTON_START";
      })(Controller || (exports2.Controller = Controller = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ControllerIndex.js
  var require_ControllerIndex = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ControllerIndex.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ControllerIndex = void 0;
      var ControllerIndex;
      (function(ControllerIndex2) {
        ControllerIndex2[ControllerIndex2["KEYBOARD"] = 0] = "KEYBOARD";
        ControllerIndex2[ControllerIndex2["CONTROLLER_1"] = 1] = "CONTROLLER_1";
        ControllerIndex2[ControllerIndex2["CONTROLLER_2"] = 2] = "CONTROLLER_2";
        ControllerIndex2[ControllerIndex2["CONTROLLER_3"] = 3] = "CONTROLLER_3";
      })(ControllerIndex || (exports2.ControllerIndex = ControllerIndex = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/CopyableIsaacAPIClassType.js
  var require_CopyableIsaacAPIClassType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/CopyableIsaacAPIClassType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CopyableIsaacAPIClassType = void 0;
      var CopyableIsaacAPIClassType;
      (function(CopyableIsaacAPIClassType2) {
        CopyableIsaacAPIClassType2["BIT_SET_128"] = "BitSet128";
        CopyableIsaacAPIClassType2["COLOR"] = "Color";
        CopyableIsaacAPIClassType2["K_COLOR"] = "KColor";
        CopyableIsaacAPIClassType2["RNG"] = "RNG";
        CopyableIsaacAPIClassType2["VECTOR"] = "Vector";
      })(CopyableIsaacAPIClassType || (exports2.CopyableIsaacAPIClassType = CopyableIsaacAPIClassType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/CurseID.js
  var require_CurseID = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/CurseID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CurseID = void 0;
      var CurseID;
      (function(CurseID2) {
        CurseID2[CurseID2["DARKNESS"] = 1] = "DARKNESS";
        CurseID2[CurseID2["LABYRINTH"] = 2] = "LABYRINTH";
        CurseID2[CurseID2["LOST"] = 3] = "LOST";
        CurseID2[CurseID2["UNKNOWN"] = 4] = "UNKNOWN";
        CurseID2[CurseID2["CURSED"] = 5] = "CURSED";
        CurseID2[CurseID2["MAZE"] = 6] = "MAZE";
        CurseID2[CurseID2["BLIND"] = 7] = "BLIND";
        CurseID2[CurseID2["GIANT"] = 8] = "GIANT";
      })(CurseID || (exports2.CurseID = CurseID = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/DebugCommand.js
  var require_DebugCommand = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/DebugCommand.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugCommand = void 0;
      var DebugCommand;
      (function(DebugCommand2) {
        DebugCommand2[DebugCommand2["ENTITY_POSITIONS"] = 1] = "ENTITY_POSITIONS";
        DebugCommand2[DebugCommand2["GRID_COST"] = 2] = "GRID_COST";
        DebugCommand2[DebugCommand2["INFINITE_HP"] = 3] = "INFINITE_HP";
        DebugCommand2[DebugCommand2["HIGH_DAMAGE"] = 4] = "HIGH_DAMAGE";
        DebugCommand2[DebugCommand2["SHOW_ROOM_INFO"] = 5] = "SHOW_ROOM_INFO";
        DebugCommand2[DebugCommand2["SHOW_HITSPHERES"] = 6] = "SHOW_HITSPHERES";
        DebugCommand2[DebugCommand2["SHOW_DAMAGE_VALUES"] = 7] = "SHOW_DAMAGE_VALUES";
        DebugCommand2[DebugCommand2["INFINITE_ITEM_CHARGES"] = 8] = "INFINITE_ITEM_CHARGES";
        DebugCommand2[DebugCommand2["HIGH_LUCK"] = 9] = "HIGH_LUCK";
        DebugCommand2[DebugCommand2["QUICK_KILL"] = 10] = "QUICK_KILL";
        DebugCommand2[DebugCommand2["GRID_INFO"] = 11] = "GRID_INFO";
        DebugCommand2[DebugCommand2["PLAYER_ITEM_INFO"] = 12] = "PLAYER_ITEM_INFO";
        DebugCommand2[DebugCommand2["SHOW_GRID_COLLISION_POINTS"] = 13] = "SHOW_GRID_COLLISION_POINTS";
      })(DebugCommand || (exports2.DebugCommand = DebugCommand = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Difficulty.js
  var require_Difficulty = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Difficulty.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Difficulty = void 0;
      var Difficulty3;
      (function(Difficulty4) {
        Difficulty4[Difficulty4["NORMAL"] = 0] = "NORMAL";
        Difficulty4[Difficulty4["HARD"] = 1] = "HARD";
        Difficulty4[Difficulty4["GREED"] = 2] = "GREED";
        Difficulty4[Difficulty4["GREEDIER"] = 3] = "GREEDIER";
      })(Difficulty3 || (exports2.Difficulty = Difficulty3 = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Dimension.js
  var require_Dimension = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Dimension.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Dimension = void 0;
      var Dimension;
      (function(Dimension2) {
        Dimension2[Dimension2["CURRENT"] = -1] = "CURRENT";
        Dimension2[Dimension2["MAIN"] = 0] = "MAIN";
        Dimension2[Dimension2["SECONDARY"] = 1] = "SECONDARY";
        Dimension2[Dimension2["DEATH_CERTIFICATE"] = 2] = "DEATH_CERTIFICATE";
      })(Dimension || (exports2.Dimension = Dimension = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Direction.js
  var require_Direction = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Direction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Direction = void 0;
      var Direction;
      (function(Direction2) {
        Direction2[Direction2["NO_DIRECTION"] = -1] = "NO_DIRECTION";
        Direction2[Direction2["LEFT"] = 0] = "LEFT";
        Direction2[Direction2["UP"] = 1] = "UP";
        Direction2[Direction2["RIGHT"] = 2] = "RIGHT";
        Direction2[Direction2["DOWN"] = 3] = "DOWN";
      })(Direction || (exports2.Direction = Direction = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/DoorSlot.js
  var require_DoorSlot = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/DoorSlot.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DoorSlot = void 0;
      var DoorSlot;
      (function(DoorSlot2) {
        DoorSlot2[DoorSlot2["NO_DOOR_SLOT"] = -1] = "NO_DOOR_SLOT";
        DoorSlot2[DoorSlot2["LEFT_0"] = 0] = "LEFT_0";
        DoorSlot2[DoorSlot2["UP_0"] = 1] = "UP_0";
        DoorSlot2[DoorSlot2["RIGHT_0"] = 2] = "RIGHT_0";
        DoorSlot2[DoorSlot2["DOWN_0"] = 3] = "DOWN_0";
        DoorSlot2[DoorSlot2["LEFT_1"] = 4] = "LEFT_1";
        DoorSlot2[DoorSlot2["UP_1"] = 5] = "UP_1";
        DoorSlot2[DoorSlot2["RIGHT_1"] = 6] = "RIGHT_1";
        DoorSlot2[DoorSlot2["DOWN_1"] = 7] = "DOWN_1";
      })(DoorSlot || (exports2.DoorSlot = DoorSlot = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Ending.js
  var require_Ending = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Ending.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Ending = void 0;
      var Ending;
      (function(Ending2) {
        Ending2[Ending2["INTRO"] = 1] = "INTRO";
        Ending2[Ending2["CREDITS"] = 2] = "CREDITS";
        Ending2[Ending2["EPILOGUE"] = 3] = "EPILOGUE";
        Ending2[Ending2["WOMB_EDEN"] = 4] = "WOMB_EDEN";
        Ending2[Ending2["WOMB_RUBBER_CEMENT"] = 5] = "WOMB_RUBBER_CEMENT";
        Ending2[Ending2["WOMB_NOOSE"] = 6] = "WOMB_NOOSE";
        Ending2[Ending2["WOMB_WIRE_COAT_HANGER"] = 7] = "WOMB_WIRE_COAT_HANGER";
        Ending2[Ending2["WOMB_EVERYTHING_IS_TERRIBLE"] = 8] = "WOMB_EVERYTHING_IS_TERRIBLE";
        Ending2[Ending2["WOMB_IPECAC"] = 9] = "WOMB_IPECAC";
        Ending2[Ending2["WOMB_EXPERIMENTAL_TREATMENT"] = 10] = "WOMB_EXPERIMENTAL_TREATMENT";
        Ending2[Ending2["WOMB_A_QUARTER"] = 11] = "WOMB_A_QUARTER";
        Ending2[Ending2["WOMB_DR_FETUS"] = 12] = "WOMB_DR_FETUS";
        Ending2[Ending2["WOMB_BLUE_BABY"] = 13] = "WOMB_BLUE_BABY";
        Ending2[Ending2["WOMB_IT_LIVES"] = 14] = "WOMB_IT_LIVES";
        Ending2[Ending2["SHEOL"] = 15] = "SHEOL";
        Ending2[Ending2["CATHEDRAL"] = 16] = "CATHEDRAL";
        Ending2[Ending2["CHEST"] = 17] = "CHEST";
        Ending2[Ending2["DARK_ROOM"] = 18] = "DARK_ROOM";
        Ending2[Ending2["MEGA_SATAN"] = 19] = "MEGA_SATAN";
        Ending2[Ending2["BLUE_WOMB"] = 20] = "BLUE_WOMB";
        Ending2[Ending2["GREED_MODE"] = 21] = "GREED_MODE";
        Ending2[Ending2["VOID"] = 22] = "VOID";
        Ending2[Ending2["GREEDIER"] = 23] = "GREEDIER";
        Ending2[Ending2["MOTHER"] = 24] = "MOTHER";
        Ending2[Ending2["DOGMA"] = 25] = "DOGMA";
        Ending2[Ending2["BEAST"] = 26] = "BEAST";
      })(Ending || (exports2.Ending = Ending = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/EntityCollisionClass.js
  var require_EntityCollisionClass = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/EntityCollisionClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityCollisionClass = void 0;
      var EntityCollisionClass;
      (function(EntityCollisionClass2) {
        EntityCollisionClass2[EntityCollisionClass2["NONE"] = 0] = "NONE";
        EntityCollisionClass2[EntityCollisionClass2["PLAYER_ONLY"] = 1] = "PLAYER_ONLY";
        EntityCollisionClass2[EntityCollisionClass2["PLAYER_OBJECTS"] = 2] = "PLAYER_OBJECTS";
        EntityCollisionClass2[EntityCollisionClass2["ENEMIES"] = 3] = "ENEMIES";
        EntityCollisionClass2[EntityCollisionClass2["ALL"] = 4] = "ALL";
      })(EntityCollisionClass || (exports2.EntityCollisionClass = EntityCollisionClass = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/EntityGridCollisionClass.js
  var require_EntityGridCollisionClass = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/EntityGridCollisionClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityGridCollisionClass = void 0;
      var EntityGridCollisionClass;
      (function(EntityGridCollisionClass2) {
        EntityGridCollisionClass2[EntityGridCollisionClass2["NONE"] = 0] = "NONE";
        EntityGridCollisionClass2[EntityGridCollisionClass2["WALLS_X"] = 1] = "WALLS_X";
        EntityGridCollisionClass2[EntityGridCollisionClass2["WALLS_Y"] = 2] = "WALLS_Y";
        EntityGridCollisionClass2[EntityGridCollisionClass2["WALLS"] = 3] = "WALLS";
        EntityGridCollisionClass2[EntityGridCollisionClass2["BULLET"] = 4] = "BULLET";
        EntityGridCollisionClass2[EntityGridCollisionClass2["GROUND"] = 5] = "GROUND";
        EntityGridCollisionClass2[EntityGridCollisionClass2["NO_PITS"] = 6] = "NO_PITS";
        EntityGridCollisionClass2[EntityGridCollisionClass2["PITS_ONLY"] = 7] = "PITS_ONLY";
      })(EntityGridCollisionClass || (exports2.EntityGridCollisionClass = EntityGridCollisionClass = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/EntityType.js
  var require_EntityType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/EntityType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityType = void 0;
      var EntityType;
      (function(EntityType2) {
        EntityType2[EntityType2["NULL"] = 0] = "NULL";
        EntityType2[EntityType2["PLAYER"] = 1] = "PLAYER";
        EntityType2[EntityType2["TEAR"] = 2] = "TEAR";
        EntityType2[EntityType2["FAMILIAR"] = 3] = "FAMILIAR";
        EntityType2[EntityType2["BOMB"] = 4] = "BOMB";
        EntityType2[EntityType2["PICKUP"] = 5] = "PICKUP";
        EntityType2[EntityType2["SLOT"] = 6] = "SLOT";
        EntityType2[EntityType2["LASER"] = 7] = "LASER";
        EntityType2[EntityType2["KNIFE"] = 8] = "KNIFE";
        EntityType2[EntityType2["PROJECTILE"] = 9] = "PROJECTILE";
        EntityType2[EntityType2["GAPER"] = 10] = "GAPER";
        EntityType2[EntityType2["GUSHER"] = 11] = "GUSHER";
        EntityType2[EntityType2["HORF"] = 12] = "HORF";
        EntityType2[EntityType2["FLY"] = 13] = "FLY";
        EntityType2[EntityType2["POOTER"] = 14] = "POOTER";
        EntityType2[EntityType2["CLOTTY"] = 15] = "CLOTTY";
        EntityType2[EntityType2["MULLIGAN"] = 16] = "MULLIGAN";
        EntityType2[EntityType2["SHOPKEEPER"] = 17] = "SHOPKEEPER";
        EntityType2[EntityType2["ATTACK_FLY"] = 18] = "ATTACK_FLY";
        EntityType2[EntityType2["LARRY_JR"] = 19] = "LARRY_JR";
        EntityType2[EntityType2["MONSTRO"] = 20] = "MONSTRO";
        EntityType2[EntityType2["MAGGOT"] = 21] = "MAGGOT";
        EntityType2[EntityType2["HIVE"] = 22] = "HIVE";
        EntityType2[EntityType2["CHARGER"] = 23] = "CHARGER";
        EntityType2[EntityType2["GLOBIN"] = 24] = "GLOBIN";
        EntityType2[EntityType2["BOOM_FLY"] = 25] = "BOOM_FLY";
        EntityType2[EntityType2["MAW"] = 26] = "MAW";
        EntityType2[EntityType2["HOST"] = 27] = "HOST";
        EntityType2[EntityType2["CHUB"] = 28] = "CHUB";
        EntityType2[EntityType2["HOPPER"] = 29] = "HOPPER";
        EntityType2[EntityType2["BOIL"] = 30] = "BOIL";
        EntityType2[EntityType2["SPITTY"] = 31] = "SPITTY";
        EntityType2[EntityType2["BRAIN"] = 32] = "BRAIN";
        EntityType2[EntityType2["FIREPLACE"] = 33] = "FIREPLACE";
        EntityType2[EntityType2["LEAPER"] = 34] = "LEAPER";
        EntityType2[EntityType2["MR_MAW"] = 35] = "MR_MAW";
        EntityType2[EntityType2["GURDY"] = 36] = "GURDY";
        EntityType2[EntityType2["BABY"] = 38] = "BABY";
        EntityType2[EntityType2["VIS"] = 39] = "VIS";
        EntityType2[EntityType2["GUTS"] = 40] = "GUTS";
        EntityType2[EntityType2["KNIGHT"] = 41] = "KNIGHT";
        EntityType2[EntityType2["GRIMACE"] = 42] = "GRIMACE";
        EntityType2[EntityType2["MONSTRO_2"] = 43] = "MONSTRO_2";
        EntityType2[EntityType2["POKY"] = 44] = "POKY";
        EntityType2[EntityType2["MOM"] = 45] = "MOM";
        EntityType2[EntityType2["SLOTH"] = 46] = "SLOTH";
        EntityType2[EntityType2["LUST"] = 47] = "LUST";
        EntityType2[EntityType2["WRATH"] = 48] = "WRATH";
        EntityType2[EntityType2["GLUTTONY"] = 49] = "GLUTTONY";
        EntityType2[EntityType2["GREED"] = 50] = "GREED";
        EntityType2[EntityType2["ENVY"] = 51] = "ENVY";
        EntityType2[EntityType2["PRIDE"] = 52] = "PRIDE";
        EntityType2[EntityType2["DOPLE"] = 53] = "DOPLE";
        EntityType2[EntityType2["FLAMING_HOPPER"] = 54] = "FLAMING_HOPPER";
        EntityType2[EntityType2["LEECH"] = 55] = "LEECH";
        EntityType2[EntityType2["LUMP"] = 56] = "LUMP";
        EntityType2[EntityType2["MEMBRAIN"] = 57] = "MEMBRAIN";
        EntityType2[EntityType2["PARA_BITE"] = 58] = "PARA_BITE";
        EntityType2[EntityType2["FRED"] = 59] = "FRED";
        EntityType2[EntityType2["EYE"] = 60] = "EYE";
        EntityType2[EntityType2["SUCKER"] = 61] = "SUCKER";
        EntityType2[EntityType2["PIN"] = 62] = "PIN";
        EntityType2[EntityType2["FAMINE"] = 63] = "FAMINE";
        EntityType2[EntityType2["PESTILENCE"] = 64] = "PESTILENCE";
        EntityType2[EntityType2["WAR"] = 65] = "WAR";
        EntityType2[EntityType2["DEATH"] = 66] = "DEATH";
        EntityType2[EntityType2["DUKE_OF_FLIES"] = 67] = "DUKE_OF_FLIES";
        EntityType2[EntityType2["PEEP"] = 68] = "PEEP";
        EntityType2[EntityType2["LOKI"] = 69] = "LOKI";
        EntityType2[EntityType2["FISTULA_BIG"] = 71] = "FISTULA_BIG";
        EntityType2[EntityType2["FISTULA_MEDIUM"] = 72] = "FISTULA_MEDIUM";
        EntityType2[EntityType2["FISTULA_SMALL"] = 73] = "FISTULA_SMALL";
        EntityType2[EntityType2["BLASTOCYST_BIG"] = 74] = "BLASTOCYST_BIG";
        EntityType2[EntityType2["BLASTOCYST_MEDIUM"] = 75] = "BLASTOCYST_MEDIUM";
        EntityType2[EntityType2["BLASTOCYST_SMALL"] = 76] = "BLASTOCYST_SMALL";
        EntityType2[EntityType2["EMBRYO"] = 77] = "EMBRYO";
        EntityType2[EntityType2["MOMS_HEART"] = 78] = "MOMS_HEART";
        EntityType2[EntityType2["GEMINI"] = 79] = "GEMINI";
        EntityType2[EntityType2["MOTER"] = 80] = "MOTER";
        EntityType2[EntityType2["FALLEN"] = 81] = "FALLEN";
        EntityType2[EntityType2["HEADLESS_HORSEMAN"] = 82] = "HEADLESS_HORSEMAN";
        EntityType2[EntityType2["HORSEMAN_HEAD"] = 83] = "HORSEMAN_HEAD";
        EntityType2[EntityType2["SATAN"] = 84] = "SATAN";
        EntityType2[EntityType2["SPIDER"] = 85] = "SPIDER";
        EntityType2[EntityType2["KEEPER"] = 86] = "KEEPER";
        EntityType2[EntityType2["GURGLE"] = 87] = "GURGLE";
        EntityType2[EntityType2["WALKING_BOIL"] = 88] = "WALKING_BOIL";
        EntityType2[EntityType2["BUTTLICKER"] = 89] = "BUTTLICKER";
        EntityType2[EntityType2["HANGER"] = 90] = "HANGER";
        EntityType2[EntityType2["SWARMER"] = 91] = "SWARMER";
        EntityType2[EntityType2["HEART"] = 92] = "HEART";
        EntityType2[EntityType2["MASK"] = 93] = "MASK";
        EntityType2[EntityType2["BIG_SPIDER"] = 94] = "BIG_SPIDER";
        EntityType2[EntityType2["ETERNAL_FLY"] = 96] = "ETERNAL_FLY";
        EntityType2[EntityType2["MASK_OF_INFAMY"] = 97] = "MASK_OF_INFAMY";
        EntityType2[EntityType2["HEART_OF_INFAMY"] = 98] = "HEART_OF_INFAMY";
        EntityType2[EntityType2["GURDY_JR"] = 99] = "GURDY_JR";
        EntityType2[EntityType2["WIDOW"] = 100] = "WIDOW";
        EntityType2[EntityType2["DADDY_LONG_LEGS"] = 101] = "DADDY_LONG_LEGS";
        EntityType2[EntityType2["ISAAC"] = 102] = "ISAAC";
        EntityType2[EntityType2["STONE_EYE"] = 201] = "STONE_EYE";
        EntityType2[EntityType2["CONSTANT_STONE_SHOOTER"] = 202] = "CONSTANT_STONE_SHOOTER";
        EntityType2[EntityType2["BRIMSTONE_HEAD"] = 203] = "BRIMSTONE_HEAD";
        EntityType2[EntityType2["MOBILE_HOST"] = 204] = "MOBILE_HOST";
        EntityType2[EntityType2["NEST"] = 205] = "NEST";
        EntityType2[EntityType2["BABY_LONG_LEGS"] = 206] = "BABY_LONG_LEGS";
        EntityType2[EntityType2["CRAZY_LONG_LEGS"] = 207] = "CRAZY_LONG_LEGS";
        EntityType2[EntityType2["FATTY"] = 208] = "FATTY";
        EntityType2[EntityType2["FAT_SACK"] = 209] = "FAT_SACK";
        EntityType2[EntityType2["BLUBBER"] = 210] = "BLUBBER";
        EntityType2[EntityType2["HALF_SACK"] = 211] = "HALF_SACK";
        EntityType2[EntityType2["DEATHS_HEAD"] = 212] = "DEATHS_HEAD";
        EntityType2[EntityType2["MOMS_HAND"] = 213] = "MOMS_HAND";
        EntityType2[EntityType2["FLY_LVL_2"] = 214] = "FLY_LVL_2";
        EntityType2[EntityType2["SPIDER_LVL_2"] = 215] = "SPIDER_LVL_2";
        EntityType2[EntityType2["SWINGER"] = 216] = "SWINGER";
        EntityType2[EntityType2["DIP"] = 217] = "DIP";
        EntityType2[EntityType2["WALL_HUGGER"] = 218] = "WALL_HUGGER";
        EntityType2[EntityType2["WIZOOB"] = 219] = "WIZOOB";
        EntityType2[EntityType2["SQUIRT"] = 220] = "SQUIRT";
        EntityType2[EntityType2["COD_WORM"] = 221] = "COD_WORM";
        EntityType2[EntityType2["RING_OF_FLIES"] = 222] = "RING_OF_FLIES";
        EntityType2[EntityType2["DINGA"] = 223] = "DINGA";
        EntityType2[EntityType2["OOB"] = 224] = "OOB";
        EntityType2[EntityType2["BLACK_MAW"] = 225] = "BLACK_MAW";
        EntityType2[EntityType2["SKINNY"] = 226] = "SKINNY";
        EntityType2[EntityType2["BONY"] = 227] = "BONY";
        EntityType2[EntityType2["HOMUNCULUS"] = 228] = "HOMUNCULUS";
        EntityType2[EntityType2["TUMOR"] = 229] = "TUMOR";
        EntityType2[EntityType2["CAMILLO_JR"] = 230] = "CAMILLO_JR";
        EntityType2[EntityType2["NERVE_ENDING"] = 231] = "NERVE_ENDING";
        EntityType2[EntityType2["ONE_TOOTH"] = 234] = "ONE_TOOTH";
        EntityType2[EntityType2["GAPING_MAW"] = 235] = "GAPING_MAW";
        EntityType2[EntityType2["BROKEN_GAPING_MAW"] = 236] = "BROKEN_GAPING_MAW";
        EntityType2[EntityType2["GURGLING"] = 237] = "GURGLING";
        EntityType2[EntityType2["SPLASHER"] = 238] = "SPLASHER";
        EntityType2[EntityType2["GRUB"] = 239] = "GRUB";
        EntityType2[EntityType2["WALL_CREEP"] = 240] = "WALL_CREEP";
        EntityType2[EntityType2["RAGE_CREEP"] = 241] = "RAGE_CREEP";
        EntityType2[EntityType2["BLIND_CREEP"] = 242] = "BLIND_CREEP";
        EntityType2[EntityType2["CONJOINED_SPITTY"] = 243] = "CONJOINED_SPITTY";
        EntityType2[EntityType2["ROUND_WORM"] = 244] = "ROUND_WORM";
        EntityType2[EntityType2["POOP"] = 245] = "POOP";
        EntityType2[EntityType2["RAGLING"] = 246] = "RAGLING";
        EntityType2[EntityType2["FLESH_MOBILE_HOST"] = 247] = "FLESH_MOBILE_HOST";
        EntityType2[EntityType2["PSY_HORF"] = 248] = "PSY_HORF";
        EntityType2[EntityType2["FULL_FLY"] = 249] = "FULL_FLY";
        EntityType2[EntityType2["TICKING_SPIDER"] = 250] = "TICKING_SPIDER";
        EntityType2[EntityType2["BEGOTTEN"] = 251] = "BEGOTTEN";
        EntityType2[EntityType2["NULLS"] = 252] = "NULLS";
        EntityType2[EntityType2["PSY_TUMOR"] = 253] = "PSY_TUMOR";
        EntityType2[EntityType2["FLOATING_KNIGHT"] = 254] = "FLOATING_KNIGHT";
        EntityType2[EntityType2["NIGHT_CRAWLER"] = 255] = "NIGHT_CRAWLER";
        EntityType2[EntityType2["DART_FLY"] = 256] = "DART_FLY";
        EntityType2[EntityType2["CONJOINED_FATTY"] = 257] = "CONJOINED_FATTY";
        EntityType2[EntityType2["FAT_BAT"] = 258] = "FAT_BAT";
        EntityType2[EntityType2["IMP"] = 259] = "IMP";
        EntityType2[EntityType2["HAUNT"] = 260] = "HAUNT";
        EntityType2[EntityType2["DINGLE"] = 261] = "DINGLE";
        EntityType2[EntityType2["MEGA_MAW"] = 262] = "MEGA_MAW";
        EntityType2[EntityType2["GATE"] = 263] = "GATE";
        EntityType2[EntityType2["MEGA_FATTY"] = 264] = "MEGA_FATTY";
        EntityType2[EntityType2["CAGE"] = 265] = "CAGE";
        EntityType2[EntityType2["MAMA_GURDY"] = 266] = "MAMA_GURDY";
        EntityType2[EntityType2["DARK_ONE"] = 267] = "DARK_ONE";
        EntityType2[EntityType2["ADVERSARY"] = 268] = "ADVERSARY";
        EntityType2[EntityType2["POLYCEPHALUS"] = 269] = "POLYCEPHALUS";
        EntityType2[EntityType2["MR_FRED"] = 270] = "MR_FRED";
        EntityType2[EntityType2["URIEL"] = 271] = "URIEL";
        EntityType2[EntityType2["GABRIEL"] = 272] = "GABRIEL";
        EntityType2[EntityType2["LAMB"] = 273] = "LAMB";
        EntityType2[EntityType2["MEGA_SATAN"] = 274] = "MEGA_SATAN";
        EntityType2[EntityType2["MEGA_SATAN_2"] = 275] = "MEGA_SATAN_2";
        EntityType2[EntityType2["ROUNDY"] = 276] = "ROUNDY";
        EntityType2[EntityType2["BLACK_BONY"] = 277] = "BLACK_BONY";
        EntityType2[EntityType2["BLACK_GLOBIN"] = 278] = "BLACK_GLOBIN";
        EntityType2[EntityType2["BLACK_GLOBIN_HEAD"] = 279] = "BLACK_GLOBIN_HEAD";
        EntityType2[EntityType2["BLACK_GLOBIN_BODY"] = 280] = "BLACK_GLOBIN_BODY";
        EntityType2[EntityType2["SWARM"] = 281] = "SWARM";
        EntityType2[EntityType2["MEGA_CLOTTY"] = 282] = "MEGA_CLOTTY";
        EntityType2[EntityType2["BONE_KNIGHT"] = 283] = "BONE_KNIGHT";
        EntityType2[EntityType2["CYCLOPIA"] = 284] = "CYCLOPIA";
        EntityType2[EntityType2["RED_GHOST"] = 285] = "RED_GHOST";
        EntityType2[EntityType2["FLESH_DEATHS_HEAD"] = 286] = "FLESH_DEATHS_HEAD";
        EntityType2[EntityType2["MOMS_DEAD_HAND"] = 287] = "MOMS_DEAD_HAND";
        EntityType2[EntityType2["DUKIE"] = 288] = "DUKIE";
        EntityType2[EntityType2["ULCER"] = 289] = "ULCER";
        EntityType2[EntityType2["MEATBALL"] = 290] = "MEATBALL";
        EntityType2[EntityType2["PITFALL"] = 291] = "PITFALL";
        EntityType2[EntityType2["MOVABLE_TNT"] = 292] = "MOVABLE_TNT";
        EntityType2[EntityType2["ULTRA_COIN"] = 293] = "ULTRA_COIN";
        EntityType2[EntityType2["ULTRA_DOOR"] = 294] = "ULTRA_DOOR";
        EntityType2[EntityType2["CORN_MINE"] = 295] = "CORN_MINE";
        EntityType2[EntityType2["HUSH_FLY"] = 296] = "HUSH_FLY";
        EntityType2[EntityType2["HUSH_GAPER"] = 297] = "HUSH_GAPER";
        EntityType2[EntityType2["HUSH_BOIL"] = 298] = "HUSH_BOIL";
        EntityType2[EntityType2["GREED_GAPER"] = 299] = "GREED_GAPER";
        EntityType2[EntityType2["MUSHROOM"] = 300] = "MUSHROOM";
        EntityType2[EntityType2["POISON_MIND"] = 301] = "POISON_MIND";
        EntityType2[EntityType2["STONEY"] = 302] = "STONEY";
        EntityType2[EntityType2["BLISTER"] = 303] = "BLISTER";
        EntityType2[EntityType2["THING"] = 304] = "THING";
        EntityType2[EntityType2["MINISTRO"] = 305] = "MINISTRO";
        EntityType2[EntityType2["PORTAL"] = 306] = "PORTAL";
        EntityType2[EntityType2["TAR_BOY"] = 307] = "TAR_BOY";
        EntityType2[EntityType2["FISTULOID"] = 308] = "FISTULOID";
        EntityType2[EntityType2["GUSH"] = 309] = "GUSH";
        EntityType2[EntityType2["LEPER"] = 310] = "LEPER";
        EntityType2[EntityType2["MR_MINE"] = 311] = "MR_MINE";
        EntityType2[EntityType2["STAIN"] = 401] = "STAIN";
        EntityType2[EntityType2["BROWNIE"] = 402] = "BROWNIE";
        EntityType2[EntityType2["FORSAKEN"] = 403] = "FORSAKEN";
        EntityType2[EntityType2["LITTLE_HORN"] = 404] = "LITTLE_HORN";
        EntityType2[EntityType2["RAG_MAN"] = 405] = "RAG_MAN";
        EntityType2[EntityType2["ULTRA_GREED"] = 406] = "ULTRA_GREED";
        EntityType2[EntityType2["HUSH"] = 407] = "HUSH";
        EntityType2[EntityType2["HUSH_SKINLESS"] = 408] = "HUSH_SKINLESS";
        EntityType2[EntityType2["RAG_MEGA"] = 409] = "RAG_MEGA";
        EntityType2[EntityType2["SISTERS_VIS"] = 410] = "SISTERS_VIS";
        EntityType2[EntityType2["BIG_HORN"] = 411] = "BIG_HORN";
        EntityType2[EntityType2["DELIRIUM"] = 412] = "DELIRIUM";
        EntityType2[EntityType2["MATRIARCH"] = 413] = "MATRIARCH";
        EntityType2[EntityType2["BLOOD_PUPPY"] = 802] = "BLOOD_PUPPY";
        EntityType2[EntityType2["QUAKE_GRIMACE"] = 804] = "QUAKE_GRIMACE";
        EntityType2[EntityType2["BISHOP"] = 805] = "BISHOP";
        EntityType2[EntityType2["BUBBLES"] = 806] = "BUBBLES";
        EntityType2[EntityType2["WRAITH"] = 807] = "WRAITH";
        EntityType2[EntityType2["WILLO"] = 808] = "WILLO";
        EntityType2[EntityType2["BOMB_GRIMACE"] = 809] = "BOMB_GRIMACE";
        EntityType2[EntityType2["SMALL_LEECH"] = 810] = "SMALL_LEECH";
        EntityType2[EntityType2["DEEP_GAPER"] = 811] = "DEEP_GAPER";
        EntityType2[EntityType2["SUB_HORF"] = 812] = "SUB_HORF";
        EntityType2[EntityType2["BLURB"] = 813] = "BLURB";
        EntityType2[EntityType2["STRIDER"] = 814] = "STRIDER";
        EntityType2[EntityType2["FISSURE"] = 815] = "FISSURE";
        EntityType2[EntityType2["POLTY"] = 816] = "POLTY";
        EntityType2[EntityType2["PREY"] = 817] = "PREY";
        EntityType2[EntityType2["ROCK_SPIDER"] = 818] = "ROCK_SPIDER";
        EntityType2[EntityType2["FLY_BOMB"] = 819] = "FLY_BOMB";
        EntityType2[EntityType2["DANNY"] = 820] = "DANNY";
        EntityType2[EntityType2["BLASTER"] = 821] = "BLASTER";
        EntityType2[EntityType2["BOUNCER"] = 822] = "BOUNCER";
        EntityType2[EntityType2["QUAKEY"] = 823] = "QUAKEY";
        EntityType2[EntityType2["GYRO"] = 824] = "GYRO";
        EntityType2[EntityType2["FIRE_WORM"] = 825] = "FIRE_WORM";
        EntityType2[EntityType2["HARDY"] = 826] = "HARDY";
        EntityType2[EntityType2["FACELESS"] = 827] = "FACELESS";
        EntityType2[EntityType2["NECRO"] = 828] = "NECRO";
        EntityType2[EntityType2["MOLE"] = 829] = "MOLE";
        EntityType2[EntityType2["BIG_BONY"] = 830] = "BIG_BONY";
        EntityType2[EntityType2["GUTTED_FATTY"] = 831] = "GUTTED_FATTY";
        EntityType2[EntityType2["EXORCIST"] = 832] = "EXORCIST";
        EntityType2[EntityType2["CANDLER"] = 833] = "CANDLER";
        EntityType2[EntityType2["WHIPPER"] = 834] = "WHIPPER";
        EntityType2[EntityType2["PEEPER_FATTY"] = 835] = "PEEPER_FATTY";
        EntityType2[EntityType2["VIS_VERSA"] = 836] = "VIS_VERSA";
        EntityType2[EntityType2["HENRY"] = 837] = "HENRY";
        EntityType2[EntityType2["WILLO_LVL_2"] = 838] = "WILLO_LVL_2";
        EntityType2[EntityType2["PON"] = 840] = "PON";
        EntityType2[EntityType2["REVENANT"] = 841] = "REVENANT";
        EntityType2[EntityType2["BOMBGAGGER"] = 844] = "BOMBGAGGER";
        EntityType2[EntityType2["GAPER_LVL_2"] = 850] = "GAPER_LVL_2";
        EntityType2[EntityType2["TWITCHY"] = 851] = "TWITCHY";
        EntityType2[EntityType2["SPIKEBALL"] = 852] = "SPIKEBALL";
        EntityType2[EntityType2["SMALL_MAGGOT"] = 853] = "SMALL_MAGGOT";
        EntityType2[EntityType2["ADULT_LEECH"] = 854] = "ADULT_LEECH";
        EntityType2[EntityType2["CHARGER_LVL_2"] = 855] = "CHARGER_LVL_2";
        EntityType2[EntityType2["GASBAG"] = 856] = "GASBAG";
        EntityType2[EntityType2["COHORT"] = 857] = "COHORT";
        EntityType2[EntityType2["FLOATING_HOST"] = 859] = "FLOATING_HOST";
        EntityType2[EntityType2["UNBORN"] = 860] = "UNBORN";
        EntityType2[EntityType2["PUSTULE"] = 861] = "PUSTULE";
        EntityType2[EntityType2["CYST"] = 862] = "CYST";
        EntityType2[EntityType2["MORNINGSTAR"] = 863] = "MORNINGSTAR";
        EntityType2[EntityType2["MOCKULUS"] = 864] = "MOCKULUS";
        EntityType2[EntityType2["EVIS"] = 865] = "EVIS";
        EntityType2[EntityType2["DARK_ESAU"] = 866] = "DARK_ESAU";
        EntityType2[EntityType2["MOTHERS_SHADOW"] = 867] = "MOTHERS_SHADOW";
        EntityType2[EntityType2["ARMY_FLY"] = 868] = "ARMY_FLY";
        EntityType2[EntityType2["MIGRAINE"] = 869] = "MIGRAINE";
        EntityType2[EntityType2["DRIP"] = 870] = "DRIP";
        EntityType2[EntityType2["SPLURT"] = 871] = "SPLURT";
        EntityType2[EntityType2["CLOGGY"] = 872] = "CLOGGY";
        EntityType2[EntityType2["FLY_TRAP"] = 873] = "FLY_TRAP";
        EntityType2[EntityType2["GAS_DWARF"] = 874] = "GAS_DWARF";
        EntityType2[EntityType2["POOT_MINE"] = 875] = "POOT_MINE";
        EntityType2[EntityType2["DUMP"] = 876] = "DUMP";
        EntityType2[EntityType2["GRUDGE"] = 877] = "GRUDGE";
        EntityType2[EntityType2["BUTT_SLICKER"] = 878] = "BUTT_SLICKER";
        EntityType2[EntityType2["BLOATY"] = 879] = "BLOATY";
        EntityType2[EntityType2["FLESH_MAIDEN"] = 880] = "FLESH_MAIDEN";
        EntityType2[EntityType2["NEEDLE"] = 881] = "NEEDLE";
        EntityType2[EntityType2["DUST"] = 882] = "DUST";
        EntityType2[EntityType2["BABY_BEGOTTEN"] = 883] = "BABY_BEGOTTEN";
        EntityType2[EntityType2["SWARM_SPIDER"] = 884] = "SWARM_SPIDER";
        EntityType2[EntityType2["CULTIST"] = 885] = "CULTIST";
        EntityType2[EntityType2["VIS_FATTY"] = 886] = "VIS_FATTY";
        EntityType2[EntityType2["DUSTY_DEATHS_HEAD"] = 887] = "DUSTY_DEATHS_HEAD";
        EntityType2[EntityType2["SHADY"] = 888] = "SHADY";
        EntityType2[EntityType2["CLICKETY_CLACK"] = 889] = "CLICKETY_CLACK";
        EntityType2[EntityType2["MAZE_ROAMER"] = 890] = "MAZE_ROAMER";
        EntityType2[EntityType2["GOAT"] = 891] = "GOAT";
        EntityType2[EntityType2["POOFER"] = 892] = "POOFER";
        EntityType2[EntityType2["BALL_AND_CHAIN"] = 893] = "BALL_AND_CHAIN";
        EntityType2[EntityType2["REAP_CREEP"] = 900] = "REAP_CREEP";
        EntityType2[EntityType2["LIL_BLUB"] = 901] = "LIL_BLUB";
        EntityType2[EntityType2["RAINMAKER"] = 902] = "RAINMAKER";
        EntityType2[EntityType2["VISAGE"] = 903] = "VISAGE";
        EntityType2[EntityType2["SIREN"] = 904] = "SIREN";
        EntityType2[EntityType2["HERETIC"] = 905] = "HERETIC";
        EntityType2[EntityType2["HORNFEL"] = 906] = "HORNFEL";
        EntityType2[EntityType2["GREAT_GIDEON"] = 907] = "GREAT_GIDEON";
        EntityType2[EntityType2["BABY_PLUM"] = 908] = "BABY_PLUM";
        EntityType2[EntityType2["SCOURGE"] = 909] = "SCOURGE";
        EntityType2[EntityType2["CHIMERA"] = 910] = "CHIMERA";
        EntityType2[EntityType2["ROTGUT"] = 911] = "ROTGUT";
        EntityType2[EntityType2["MOTHER"] = 912] = "MOTHER";
        EntityType2[EntityType2["MIN_MIN"] = 913] = "MIN_MIN";
        EntityType2[EntityType2["CLOG"] = 914] = "CLOG";
        EntityType2[EntityType2["SINGE"] = 915] = "SINGE";
        EntityType2[EntityType2["BUMBINO"] = 916] = "BUMBINO";
        EntityType2[EntityType2["COLOSTOMIA"] = 917] = "COLOSTOMIA";
        EntityType2[EntityType2["TURDLET"] = 918] = "TURDLET";
        EntityType2[EntityType2["RAGLICH"] = 919] = "RAGLICH";
        EntityType2[EntityType2["HORNY_BOYS"] = 920] = "HORNY_BOYS";
        EntityType2[EntityType2["CLUTCH"] = 921] = "CLUTCH";
        EntityType2[EntityType2["DOGMA"] = 950] = "DOGMA";
        EntityType2[EntityType2["BEAST"] = 951] = "BEAST";
        EntityType2[EntityType2["GENERIC_PROP"] = 960] = "GENERIC_PROP";
        EntityType2[EntityType2["FROZEN_ENEMY"] = 963] = "FROZEN_ENEMY";
        EntityType2[EntityType2["DUMMY"] = 964] = "DUMMY";
        EntityType2[EntityType2["MINECART"] = 965] = "MINECART";
        EntityType2[EntityType2["SIREN_HELPER"] = 966] = "SIREN_HELPER";
        EntityType2[EntityType2["HORNFEL_DOOR"] = 967] = "HORNFEL_DOOR";
        EntityType2[EntityType2["EFFECT"] = 1e3] = "EFFECT";
        EntityType2[EntityType2["TEXT"] = 9001] = "TEXT";
      })(EntityType || (exports2.EntityType = EntityType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/FadeoutTarget.js
  var require_FadeoutTarget = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/FadeoutTarget.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FadeoutTarget = void 0;
      var FadeoutTarget;
      (function(FadeoutTarget2) {
        FadeoutTarget2[FadeoutTarget2["NONE"] = 0] = "NONE";
        FadeoutTarget2[FadeoutTarget2["FILE_SELECT"] = 1] = "FILE_SELECT";
        FadeoutTarget2[FadeoutTarget2["MAIN_MENU"] = 2] = "MAIN_MENU";
        FadeoutTarget2[FadeoutTarget2["TITLE_SCREEN"] = 3] = "TITLE_SCREEN";
        FadeoutTarget2[FadeoutTarget2["RESTART_RUN"] = 4] = "RESTART_RUN";
      })(FadeoutTarget || (exports2.FadeoutTarget = FadeoutTarget = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/GameStateFlag.js
  var require_GameStateFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/GameStateFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GameStateFlag = void 0;
      var GameStateFlag;
      (function(GameStateFlag2) {
        GameStateFlag2[GameStateFlag2["FAMINE_SPAWNED"] = 0] = "FAMINE_SPAWNED";
        GameStateFlag2[GameStateFlag2["PESTILENCE_SPAWNED"] = 1] = "PESTILENCE_SPAWNED";
        GameStateFlag2[GameStateFlag2["WAR_SPAWNED"] = 2] = "WAR_SPAWNED";
        GameStateFlag2[GameStateFlag2["DEATH_SPAWNED"] = 3] = "DEATH_SPAWNED";
        GameStateFlag2[GameStateFlag2["BOSS_POOL_SWITCHED"] = 4] = "BOSS_POOL_SWITCHED";
        GameStateFlag2[GameStateFlag2["DEVIL_ROOM_SPAWNED"] = 5] = "DEVIL_ROOM_SPAWNED";
        GameStateFlag2[GameStateFlag2["DEVIL_ROOM_VISITED"] = 6] = "DEVIL_ROOM_VISITED";
        GameStateFlag2[GameStateFlag2["BOOK_REVELATIONS_USED"] = 7] = "BOOK_REVELATIONS_USED";
        GameStateFlag2[GameStateFlag2["BOOK_PICKED_UP"] = 8] = "BOOK_PICKED_UP";
        GameStateFlag2[GameStateFlag2["WRATH_SPAWNED"] = 9] = "WRATH_SPAWNED";
        GameStateFlag2[GameStateFlag2["GLUTTONY_SPAWNED"] = 10] = "GLUTTONY_SPAWNED";
        GameStateFlag2[GameStateFlag2["LUST_SPAWNED"] = 11] = "LUST_SPAWNED";
        GameStateFlag2[GameStateFlag2["SLOTH_SPAWNED"] = 12] = "SLOTH_SPAWNED";
        GameStateFlag2[GameStateFlag2["ENVY_SPAWNED"] = 13] = "ENVY_SPAWNED";
        GameStateFlag2[GameStateFlag2["PRIDE_SPAWNED"] = 14] = "PRIDE_SPAWNED";
        GameStateFlag2[GameStateFlag2["GREED_SPAWNED"] = 15] = "GREED_SPAWNED";
        GameStateFlag2[GameStateFlag2["SUPER_GREED_SPAWNED"] = 16] = "SUPER_GREED_SPAWNED";
        GameStateFlag2[GameStateFlag2["DONATION_SLOT_BROKEN"] = 17] = "DONATION_SLOT_BROKEN";
        GameStateFlag2[GameStateFlag2["DONATION_SLOT_JAMMED"] = 18] = "DONATION_SLOT_JAMMED";
        GameStateFlag2[GameStateFlag2["HEAVEN_PATH"] = 19] = "HEAVEN_PATH";
        GameStateFlag2[GameStateFlag2["REBIRTH_BOSS_SWITCHED"] = 20] = "REBIRTH_BOSS_SWITCHED";
        GameStateFlag2[GameStateFlag2["HAUNT_SELECTED"] = 21] = "HAUNT_SELECTED";
        GameStateFlag2[GameStateFlag2["ADVERSARY_SELECTED"] = 22] = "ADVERSARY_SELECTED";
        GameStateFlag2[GameStateFlag2["MR_FRED_SELECTED"] = 23] = "MR_FRED_SELECTED";
        GameStateFlag2[GameStateFlag2["MAMA_GURDY_SELECTED"] = 24] = "MAMA_GURDY_SELECTED";
        GameStateFlag2[GameStateFlag2["URIEL_SPAWNED"] = 25] = "URIEL_SPAWNED";
        GameStateFlag2[GameStateFlag2["GABRIEL_SPAWNED"] = 26] = "GABRIEL_SPAWNED";
        GameStateFlag2[GameStateFlag2["FALLEN_SPAWNED"] = 27] = "FALLEN_SPAWNED";
        GameStateFlag2[GameStateFlag2["HEADLESS_HORSEMAN_SPAWNED"] = 28] = "HEADLESS_HORSEMAN_SPAWNED";
        GameStateFlag2[GameStateFlag2["KRAMPUS_SPAWNED"] = 29] = "KRAMPUS_SPAWNED";
        GameStateFlag2[GameStateFlag2["DONATION_SLOT_BLOWN"] = 30] = "DONATION_SLOT_BLOWN";
        GameStateFlag2[GameStateFlag2["SHOPKEEPER_KILLED"] = 31] = "SHOPKEEPER_KILLED";
        GameStateFlag2[GameStateFlag2["ULTRA_PRIDE_SPAWNED"] = 32] = "ULTRA_PRIDE_SPAWNED";
        GameStateFlag2[GameStateFlag2["BOSS_RUSH_DONE"] = 33] = "BOSS_RUSH_DONE";
        GameStateFlag2[GameStateFlag2["GREED_SLOT_JAMMED"] = 34] = "GREED_SLOT_JAMMED";
        GameStateFlag2[GameStateFlag2["AFTERBIRTH_BOSS_SWITCHED"] = 35] = "AFTERBIRTH_BOSS_SWITCHED";
        GameStateFlag2[GameStateFlag2["BROWNIE_SELECTED"] = 36] = "BROWNIE_SELECTED";
        GameStateFlag2[GameStateFlag2["SUPER_BUM_APPEARED"] = 37] = "SUPER_BUM_APPEARED";
        GameStateFlag2[GameStateFlag2["BOSS_RUSH_DOOR_SPAWNED"] = 38] = "BOSS_RUSH_DOOR_SPAWNED";
        GameStateFlag2[GameStateFlag2["BLUE_WOMB_DOOR_SPAWNED"] = 39] = "BLUE_WOMB_DOOR_SPAWNED";
        GameStateFlag2[GameStateFlag2["BLUE_WOMB_DONE"] = 40] = "BLUE_WOMB_DONE";
        GameStateFlag2[GameStateFlag2["HEART_BOMB_COIN_PICKED"] = 41] = "HEART_BOMB_COIN_PICKED";
        GameStateFlag2[GameStateFlag2["AFTERBIRTH_PLUS_BOSS_SWITCHED"] = 42] = "AFTERBIRTH_PLUS_BOSS_SWITCHED";
        GameStateFlag2[GameStateFlag2["MAX_COINS_OBTAINED"] = 43] = "MAX_COINS_OBTAINED";
        GameStateFlag2[GameStateFlag2["SECRET_PATH"] = 44] = "SECRET_PATH";
        GameStateFlag2[GameStateFlag2["PERFECTION_SPAWNED"] = 45] = "PERFECTION_SPAWNED";
        GameStateFlag2[GameStateFlag2["MAUSOLEUM_HEART_KILLED"] = 46] = "MAUSOLEUM_HEART_KILLED";
        GameStateFlag2[GameStateFlag2["BACKWARDS_PATH_INIT"] = 47] = "BACKWARDS_PATH_INIT";
        GameStateFlag2[GameStateFlag2["BACKWARDS_PATH"] = 48] = "BACKWARDS_PATH";
      })(GameStateFlag || (exports2.GameStateFlag = GameStateFlag = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/GridCollisionClass.js
  var require_GridCollisionClass = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/GridCollisionClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridCollisionClass = void 0;
      var GridCollisionClass;
      (function(GridCollisionClass2) {
        GridCollisionClass2[GridCollisionClass2["NONE"] = 0] = "NONE";
        GridCollisionClass2[GridCollisionClass2["PIT"] = 1] = "PIT";
        GridCollisionClass2[GridCollisionClass2["OBJECT"] = 2] = "OBJECT";
        GridCollisionClass2[GridCollisionClass2["SOLID"] = 3] = "SOLID";
        GridCollisionClass2[GridCollisionClass2["WALL"] = 4] = "WALL";
        GridCollisionClass2[GridCollisionClass2["WALL_EXCEPT_PLAYER"] = 5] = "WALL_EXCEPT_PLAYER";
      })(GridCollisionClass || (exports2.GridCollisionClass = GridCollisionClass = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/GridEntityType.js
  var require_GridEntityType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/GridEntityType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridEntityType = void 0;
      var GridEntityType;
      (function(GridEntityType2) {
        GridEntityType2[GridEntityType2["NULL"] = 0] = "NULL";
        GridEntityType2[GridEntityType2["DECORATION"] = 1] = "DECORATION";
        GridEntityType2[GridEntityType2["ROCK"] = 2] = "ROCK";
        GridEntityType2[GridEntityType2["BLOCK"] = 3] = "BLOCK";
        GridEntityType2[GridEntityType2["ROCK_TINTED"] = 4] = "ROCK_TINTED";
        GridEntityType2[GridEntityType2["ROCK_BOMB"] = 5] = "ROCK_BOMB";
        GridEntityType2[GridEntityType2["ROCK_ALT"] = 6] = "ROCK_ALT";
        GridEntityType2[GridEntityType2["PIT"] = 7] = "PIT";
        GridEntityType2[GridEntityType2["SPIKES"] = 8] = "SPIKES";
        GridEntityType2[GridEntityType2["SPIKES_ON_OFF"] = 9] = "SPIKES_ON_OFF";
        GridEntityType2[GridEntityType2["SPIDER_WEB"] = 10] = "SPIDER_WEB";
        GridEntityType2[GridEntityType2["LOCK"] = 11] = "LOCK";
        GridEntityType2[GridEntityType2["TNT"] = 12] = "TNT";
        GridEntityType2[GridEntityType2["FIREPLACE"] = 13] = "FIREPLACE";
        GridEntityType2[GridEntityType2["POOP"] = 14] = "POOP";
        GridEntityType2[GridEntityType2["WALL"] = 15] = "WALL";
        GridEntityType2[GridEntityType2["DOOR"] = 16] = "DOOR";
        GridEntityType2[GridEntityType2["TRAPDOOR"] = 17] = "TRAPDOOR";
        GridEntityType2[GridEntityType2["CRAWL_SPACE"] = 18] = "CRAWL_SPACE";
        GridEntityType2[GridEntityType2["GRAVITY"] = 19] = "GRAVITY";
        GridEntityType2[GridEntityType2["PRESSURE_PLATE"] = 20] = "PRESSURE_PLATE";
        GridEntityType2[GridEntityType2["STATUE"] = 21] = "STATUE";
        GridEntityType2[GridEntityType2["ROCK_SUPER_SPECIAL"] = 22] = "ROCK_SUPER_SPECIAL";
        GridEntityType2[GridEntityType2["TELEPORTER"] = 23] = "TELEPORTER";
        GridEntityType2[GridEntityType2["PILLAR"] = 24] = "PILLAR";
        GridEntityType2[GridEntityType2["ROCK_SPIKED"] = 25] = "ROCK_SPIKED";
        GridEntityType2[GridEntityType2["ROCK_ALT_2"] = 26] = "ROCK_ALT_2";
        GridEntityType2[GridEntityType2["ROCK_GOLD"] = 27] = "ROCK_GOLD";
      })(GridEntityType || (exports2.GridEntityType = GridEntityType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/GridEntityXMLType.js
  var require_GridEntityXMLType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/GridEntityXMLType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridEntityXMLType = void 0;
      var GridEntityXMLType;
      (function(GridEntityXMLType2) {
        GridEntityXMLType2[GridEntityXMLType2["DECORATION"] = 0] = "DECORATION";
        GridEntityXMLType2[GridEntityXMLType2["EFFECT"] = 999] = "EFFECT";
        GridEntityXMLType2[GridEntityXMLType2["ROCK"] = 1e3] = "ROCK";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_BOMB"] = 1001] = "ROCK_BOMB";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_ALT"] = 1002] = "ROCK_ALT";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_TINTED"] = 1003] = "ROCK_TINTED";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_ALT_2"] = 1008] = "ROCK_ALT_2";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_EVENT"] = 1009] = "ROCK_EVENT";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_SPIKED"] = 1010] = "ROCK_SPIKED";
        GridEntityXMLType2[GridEntityXMLType2["ROCK_GOLD"] = 1011] = "ROCK_GOLD";
        GridEntityXMLType2[GridEntityXMLType2["TNT"] = 1300] = "TNT";
        GridEntityXMLType2[GridEntityXMLType2["FIREPLACE"] = 1400] = "FIREPLACE";
        GridEntityXMLType2[GridEntityXMLType2["RED_FIREPLACE"] = 1410] = "RED_FIREPLACE";
        GridEntityXMLType2[GridEntityXMLType2["POOP_RED"] = 1490] = "POOP_RED";
        GridEntityXMLType2[GridEntityXMLType2["POOP_RAINBOW"] = 1494] = "POOP_RAINBOW";
        GridEntityXMLType2[GridEntityXMLType2["POOP_CORNY"] = 1495] = "POOP_CORNY";
        GridEntityXMLType2[GridEntityXMLType2["POOP_GOLDEN"] = 1496] = "POOP_GOLDEN";
        GridEntityXMLType2[GridEntityXMLType2["POOP_BLACK"] = 1497] = "POOP_BLACK";
        GridEntityXMLType2[GridEntityXMLType2["POOP_WHITE"] = 1498] = "POOP_WHITE";
        GridEntityXMLType2[GridEntityXMLType2["POOP_GIGA"] = 1499] = "POOP_GIGA";
        GridEntityXMLType2[GridEntityXMLType2["POOP"] = 1500] = "POOP";
        GridEntityXMLType2[GridEntityXMLType2["POOP_CHARMING"] = 1501] = "POOP_CHARMING";
        GridEntityXMLType2[GridEntityXMLType2["BLOCK"] = 1900] = "BLOCK";
        GridEntityXMLType2[GridEntityXMLType2["PILLAR"] = 1901] = "PILLAR";
        GridEntityXMLType2[GridEntityXMLType2["SPIKES"] = 1930] = "SPIKES";
        GridEntityXMLType2[GridEntityXMLType2["SPIKES_ON_OFF"] = 1931] = "SPIKES_ON_OFF";
        GridEntityXMLType2[GridEntityXMLType2["SPIDER_WEB"] = 1940] = "SPIDER_WEB";
        GridEntityXMLType2[GridEntityXMLType2["WALL"] = 1999] = "WALL";
        GridEntityXMLType2[GridEntityXMLType2["PIT"] = 3e3] = "PIT";
        GridEntityXMLType2[GridEntityXMLType2["FISSURE_SPAWNER"] = 3001] = "FISSURE_SPAWNER";
        GridEntityXMLType2[GridEntityXMLType2["PIT_EVENT"] = 3009] = "PIT_EVENT";
        GridEntityXMLType2[GridEntityXMLType2["LOCK"] = 4e3] = "LOCK";
        GridEntityXMLType2[GridEntityXMLType2["PRESSURE_PLATE"] = 4500] = "PRESSURE_PLATE";
        GridEntityXMLType2[GridEntityXMLType2["STATUE_DEVIL"] = 5e3] = "STATUE_DEVIL";
        GridEntityXMLType2[GridEntityXMLType2["STATUE_ANGEL"] = 5001] = "STATUE_ANGEL";
        GridEntityXMLType2[GridEntityXMLType2["TELEPORTER"] = 6100] = "TELEPORTER";
        GridEntityXMLType2[GridEntityXMLType2["TRAPDOOR"] = 9e3] = "TRAPDOOR";
        GridEntityXMLType2[GridEntityXMLType2["CRAWL_SPACE"] = 9100] = "CRAWL_SPACE";
        GridEntityXMLType2[GridEntityXMLType2["GRAVITY"] = 1e4] = "GRAVITY";
      })(GridEntityXMLType || (exports2.GridEntityXMLType = GridEntityXMLType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/GridPath.js
  var require_GridPath = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/GridPath.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridPath = void 0;
      var GridPath;
      (function(GridPath2) {
        GridPath2[GridPath2["NONE"] = 0] = "NONE";
        GridPath2[GridPath2["WALKED_TILE"] = 900] = "WALKED_TILE";
        GridPath2[GridPath2["FIREPLACE"] = 950] = "FIREPLACE";
        GridPath2[GridPath2["ROCK"] = 1e3] = "ROCK";
        GridPath2[GridPath2["PIT"] = 3e3] = "PIT";
        GridPath2[GridPath2["GRIMACE"] = 3999] = "GRIMACE";
      })(GridPath || (exports2.GridPath = GridPath = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/GridRoom.js
  var require_GridRoom = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/GridRoom.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridRoom = void 0;
      var GridRoom;
      (function(GridRoom2) {
        GridRoom2[GridRoom2["DEVIL"] = -1] = "DEVIL";
        GridRoom2[GridRoom2["ERROR"] = -2] = "ERROR";
        GridRoom2[GridRoom2["DEBUG"] = -3] = "DEBUG";
        GridRoom2[GridRoom2["DUNGEON"] = -4] = "DUNGEON";
        GridRoom2[GridRoom2["BOSS_RUSH"] = -5] = "BOSS_RUSH";
        GridRoom2[GridRoom2["BLACK_MARKET"] = -6] = "BLACK_MARKET";
        GridRoom2[GridRoom2["MEGA_SATAN"] = -7] = "MEGA_SATAN";
        GridRoom2[GridRoom2["BLUE_WOMB"] = -8] = "BLUE_WOMB";
        GridRoom2[GridRoom2["VOID"] = -9] = "VOID";
        GridRoom2[GridRoom2["SECRET_EXIT"] = -10] = "SECRET_EXIT";
        GridRoom2[GridRoom2["GIDEON_DUNGEON"] = -11] = "GIDEON_DUNGEON";
        GridRoom2[GridRoom2["GENESIS"] = -12] = "GENESIS";
        GridRoom2[GridRoom2["SECRET_SHOP"] = -13] = "SECRET_SHOP";
        GridRoom2[GridRoom2["ROTGUT_DUNGEON_1"] = -14] = "ROTGUT_DUNGEON_1";
        GridRoom2[GridRoom2["ROTGUT_DUNGEON_2"] = -15] = "ROTGUT_DUNGEON_2";
        GridRoom2[GridRoom2["BLUE_ROOM"] = -16] = "BLUE_ROOM";
        GridRoom2[GridRoom2["EXTRA_BOSS"] = -17] = "EXTRA_BOSS";
        GridRoom2[GridRoom2["ANGEL_SHOP"] = -18] = "ANGEL_SHOP";
      })(GridRoom || (exports2.GridRoom = GridRoom = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/InputHook.js
  var require_InputHook = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/InputHook.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.InputHook = void 0;
      var InputHook;
      (function(InputHook2) {
        InputHook2[InputHook2["IS_ACTION_PRESSED"] = 0] = "IS_ACTION_PRESSED";
        InputHook2[InputHook2["IS_ACTION_TRIGGERED"] = 1] = "IS_ACTION_TRIGGERED";
        InputHook2[InputHook2["GET_ACTION_VALUE"] = 2] = "GET_ACTION_VALUE";
      })(InputHook || (exports2.InputHook = InputHook = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ItemConfigCardType.js
  var require_ItemConfigCardType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ItemConfigCardType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemConfigCardType = void 0;
      var ItemConfigCardType;
      (function(ItemConfigCardType2) {
        ItemConfigCardType2[ItemConfigCardType2["NULL"] = -1] = "NULL";
        ItemConfigCardType2[ItemConfigCardType2["TAROT"] = 0] = "TAROT";
        ItemConfigCardType2[ItemConfigCardType2["SUIT"] = 1] = "SUIT";
        ItemConfigCardType2[ItemConfigCardType2["RUNE"] = 2] = "RUNE";
        ItemConfigCardType2[ItemConfigCardType2["SPECIAL"] = 3] = "SPECIAL";
        ItemConfigCardType2[ItemConfigCardType2["SPECIAL_OBJECT"] = 4] = "SPECIAL_OBJECT";
        ItemConfigCardType2[ItemConfigCardType2["TAROT_REVERSE"] = 5] = "TAROT_REVERSE";
        ItemConfigCardType2[ItemConfigCardType2["MODDED"] = 6] = "MODDED";
      })(ItemConfigCardType || (exports2.ItemConfigCardType = ItemConfigCardType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ItemConfigChargeType.js
  var require_ItemConfigChargeType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ItemConfigChargeType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemConfigChargeType = void 0;
      var ItemConfigChargeType;
      (function(ItemConfigChargeType2) {
        ItemConfigChargeType2[ItemConfigChargeType2["NORMAL"] = 0] = "NORMAL";
        ItemConfigChargeType2[ItemConfigChargeType2["TIMED"] = 1] = "TIMED";
        ItemConfigChargeType2[ItemConfigChargeType2["SPECIAL"] = 2] = "SPECIAL";
      })(ItemConfigChargeType || (exports2.ItemConfigChargeType = ItemConfigChargeType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ItemConfigPillEffectClass.js
  var require_ItemConfigPillEffectClass = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ItemConfigPillEffectClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemConfigPillEffectClass = void 0;
      var ItemConfigPillEffectClass;
      (function(ItemConfigPillEffectClass2) {
        ItemConfigPillEffectClass2[ItemConfigPillEffectClass2["JOKE"] = 0] = "JOKE";
        ItemConfigPillEffectClass2[ItemConfigPillEffectClass2["MINOR"] = 1] = "MINOR";
        ItemConfigPillEffectClass2[ItemConfigPillEffectClass2["MEDIUM"] = 2] = "MEDIUM";
        ItemConfigPillEffectClass2[ItemConfigPillEffectClass2["MAJOR"] = 3] = "MAJOR";
        ItemConfigPillEffectClass2[ItemConfigPillEffectClass2["MODDED"] = 4] = "MODDED";
      })(ItemConfigPillEffectClass || (exports2.ItemConfigPillEffectClass = ItemConfigPillEffectClass = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ItemConfigPillEffectType.js
  var require_ItemConfigPillEffectType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ItemConfigPillEffectType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemConfigPillEffectType = void 0;
      var ItemConfigPillEffectType;
      (function(ItemConfigPillEffectType2) {
        ItemConfigPillEffectType2[ItemConfigPillEffectType2["POSITIVE"] = 0] = "POSITIVE";
        ItemConfigPillEffectType2[ItemConfigPillEffectType2["NEGATIVE"] = 1] = "NEGATIVE";
        ItemConfigPillEffectType2[ItemConfigPillEffectType2["NEUTRAL"] = 2] = "NEUTRAL";
        ItemConfigPillEffectType2[ItemConfigPillEffectType2["MODDED"] = 3] = "MODDED";
      })(ItemConfigPillEffectType || (exports2.ItemConfigPillEffectType = ItemConfigPillEffectType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ItemPoolType.js
  var require_ItemPoolType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ItemPoolType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemPoolType = void 0;
      var ItemPoolType;
      (function(ItemPoolType2) {
        ItemPoolType2[ItemPoolType2["TREASURE"] = 0] = "TREASURE";
        ItemPoolType2[ItemPoolType2["SHOP"] = 1] = "SHOP";
        ItemPoolType2[ItemPoolType2["BOSS"] = 2] = "BOSS";
        ItemPoolType2[ItemPoolType2["DEVIL"] = 3] = "DEVIL";
        ItemPoolType2[ItemPoolType2["ANGEL"] = 4] = "ANGEL";
        ItemPoolType2[ItemPoolType2["SECRET"] = 5] = "SECRET";
        ItemPoolType2[ItemPoolType2["LIBRARY"] = 6] = "LIBRARY";
        ItemPoolType2[ItemPoolType2["SHELL_GAME"] = 7] = "SHELL_GAME";
        ItemPoolType2[ItemPoolType2["GOLDEN_CHEST"] = 8] = "GOLDEN_CHEST";
        ItemPoolType2[ItemPoolType2["RED_CHEST"] = 9] = "RED_CHEST";
        ItemPoolType2[ItemPoolType2["BEGGAR"] = 10] = "BEGGAR";
        ItemPoolType2[ItemPoolType2["DEMON_BEGGAR"] = 11] = "DEMON_BEGGAR";
        ItemPoolType2[ItemPoolType2["CURSE"] = 12] = "CURSE";
        ItemPoolType2[ItemPoolType2["KEY_MASTER"] = 13] = "KEY_MASTER";
        ItemPoolType2[ItemPoolType2["BATTERY_BUM"] = 14] = "BATTERY_BUM";
        ItemPoolType2[ItemPoolType2["MOMS_CHEST"] = 15] = "MOMS_CHEST";
        ItemPoolType2[ItemPoolType2["GREED_TREASURE"] = 16] = "GREED_TREASURE";
        ItemPoolType2[ItemPoolType2["GREED_BOSS"] = 17] = "GREED_BOSS";
        ItemPoolType2[ItemPoolType2["GREED_SHOP"] = 18] = "GREED_SHOP";
        ItemPoolType2[ItemPoolType2["GREED_DEVIL"] = 19] = "GREED_DEVIL";
        ItemPoolType2[ItemPoolType2["GREED_ANGEL"] = 20] = "GREED_ANGEL";
        ItemPoolType2[ItemPoolType2["GREED_CURSE"] = 21] = "GREED_CURSE";
        ItemPoolType2[ItemPoolType2["GREED_SECRET"] = 22] = "GREED_SECRET";
        ItemPoolType2[ItemPoolType2["CRANE_GAME"] = 23] = "CRANE_GAME";
        ItemPoolType2[ItemPoolType2["ULTRA_SECRET"] = 24] = "ULTRA_SECRET";
        ItemPoolType2[ItemPoolType2["BOMB_BUM"] = 25] = "BOMB_BUM";
        ItemPoolType2[ItemPoolType2["PLANETARIUM"] = 26] = "PLANETARIUM";
        ItemPoolType2[ItemPoolType2["OLD_CHEST"] = 27] = "OLD_CHEST";
        ItemPoolType2[ItemPoolType2["BABY_SHOP"] = 28] = "BABY_SHOP";
        ItemPoolType2[ItemPoolType2["WOODEN_CHEST"] = 29] = "WOODEN_CHEST";
        ItemPoolType2[ItemPoolType2["ROTTEN_BEGGAR"] = 30] = "ROTTEN_BEGGAR";
      })(ItemPoolType || (exports2.ItemPoolType = ItemPoolType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ItemType.js
  var require_ItemType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ItemType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemType = void 0;
      var ItemType;
      (function(ItemType2) {
        ItemType2[ItemType2["NULL"] = 0] = "NULL";
        ItemType2[ItemType2["PASSIVE"] = 1] = "PASSIVE";
        ItemType2[ItemType2["TRINKET"] = 2] = "TRINKET";
        ItemType2[ItemType2["ACTIVE"] = 3] = "ACTIVE";
        ItemType2[ItemType2["FAMILIAR"] = 4] = "FAMILIAR";
      })(ItemType || (exports2.ItemType = ItemType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Keyboard.js
  var require_Keyboard = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Keyboard.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Keyboard = void 0;
      var Keyboard;
      (function(Keyboard2) {
        Keyboard2[Keyboard2["SPACE"] = 32] = "SPACE";
        Keyboard2[Keyboard2["APOSTROPHE"] = 39] = "APOSTROPHE";
        Keyboard2[Keyboard2["COMMA"] = 44] = "COMMA";
        Keyboard2[Keyboard2["MINUS"] = 45] = "MINUS";
        Keyboard2[Keyboard2["PERIOD"] = 46] = "PERIOD";
        Keyboard2[Keyboard2["SLASH"] = 47] = "SLASH";
        Keyboard2[Keyboard2["ZERO"] = 48] = "ZERO";
        Keyboard2[Keyboard2["ONE"] = 49] = "ONE";
        Keyboard2[Keyboard2["TWO"] = 50] = "TWO";
        Keyboard2[Keyboard2["THREE"] = 51] = "THREE";
        Keyboard2[Keyboard2["FOUR"] = 52] = "FOUR";
        Keyboard2[Keyboard2["FIVE"] = 53] = "FIVE";
        Keyboard2[Keyboard2["SIX"] = 54] = "SIX";
        Keyboard2[Keyboard2["SEVEN"] = 55] = "SEVEN";
        Keyboard2[Keyboard2["EIGHT"] = 56] = "EIGHT";
        Keyboard2[Keyboard2["NINE"] = 57] = "NINE";
        Keyboard2[Keyboard2["SEMICOLON"] = 59] = "SEMICOLON";
        Keyboard2[Keyboard2["EQUAL"] = 61] = "EQUAL";
        Keyboard2[Keyboard2["A"] = 65] = "A";
        Keyboard2[Keyboard2["B"] = 66] = "B";
        Keyboard2[Keyboard2["C"] = 67] = "C";
        Keyboard2[Keyboard2["D"] = 68] = "D";
        Keyboard2[Keyboard2["E"] = 69] = "E";
        Keyboard2[Keyboard2["F"] = 70] = "F";
        Keyboard2[Keyboard2["G"] = 71] = "G";
        Keyboard2[Keyboard2["H"] = 72] = "H";
        Keyboard2[Keyboard2["I"] = 73] = "I";
        Keyboard2[Keyboard2["J"] = 74] = "J";
        Keyboard2[Keyboard2["K"] = 75] = "K";
        Keyboard2[Keyboard2["L"] = 76] = "L";
        Keyboard2[Keyboard2["M"] = 77] = "M";
        Keyboard2[Keyboard2["N"] = 78] = "N";
        Keyboard2[Keyboard2["O"] = 79] = "O";
        Keyboard2[Keyboard2["P"] = 80] = "P";
        Keyboard2[Keyboard2["Q"] = 81] = "Q";
        Keyboard2[Keyboard2["R"] = 82] = "R";
        Keyboard2[Keyboard2["S"] = 83] = "S";
        Keyboard2[Keyboard2["T"] = 84] = "T";
        Keyboard2[Keyboard2["U"] = 85] = "U";
        Keyboard2[Keyboard2["V"] = 86] = "V";
        Keyboard2[Keyboard2["W"] = 87] = "W";
        Keyboard2[Keyboard2["X"] = 88] = "X";
        Keyboard2[Keyboard2["Y"] = 89] = "Y";
        Keyboard2[Keyboard2["Z"] = 90] = "Z";
        Keyboard2[Keyboard2["LEFT_BRACKET"] = 91] = "LEFT_BRACKET";
        Keyboard2[Keyboard2["BACKSLASH"] = 92] = "BACKSLASH";
        Keyboard2[Keyboard2["RIGHT_BRACKET"] = 93] = "RIGHT_BRACKET";
        Keyboard2[Keyboard2["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
        Keyboard2[Keyboard2["WORLD_1"] = 161] = "WORLD_1";
        Keyboard2[Keyboard2["WORLD_2"] = 162] = "WORLD_2";
        Keyboard2[Keyboard2["ESCAPE"] = 256] = "ESCAPE";
        Keyboard2[Keyboard2["ENTER"] = 257] = "ENTER";
        Keyboard2[Keyboard2["TAB"] = 258] = "TAB";
        Keyboard2[Keyboard2["BACKSPACE"] = 259] = "BACKSPACE";
        Keyboard2[Keyboard2["INSERT"] = 260] = "INSERT";
        Keyboard2[Keyboard2["DELETE"] = 261] = "DELETE";
        Keyboard2[Keyboard2["RIGHT"] = 262] = "RIGHT";
        Keyboard2[Keyboard2["LEFT"] = 263] = "LEFT";
        Keyboard2[Keyboard2["DOWN"] = 264] = "DOWN";
        Keyboard2[Keyboard2["UP"] = 265] = "UP";
        Keyboard2[Keyboard2["PAGE_UP"] = 266] = "PAGE_UP";
        Keyboard2[Keyboard2["PAGE_DOWN"] = 267] = "PAGE_DOWN";
        Keyboard2[Keyboard2["HOME"] = 268] = "HOME";
        Keyboard2[Keyboard2["END"] = 269] = "END";
        Keyboard2[Keyboard2["CAPS_LOCK"] = 280] = "CAPS_LOCK";
        Keyboard2[Keyboard2["SCROLL_LOCK"] = 281] = "SCROLL_LOCK";
        Keyboard2[Keyboard2["NUM_LOCK"] = 282] = "NUM_LOCK";
        Keyboard2[Keyboard2["PRINT_SCREEN"] = 283] = "PRINT_SCREEN";
        Keyboard2[Keyboard2["PAUSE"] = 284] = "PAUSE";
        Keyboard2[Keyboard2["F1"] = 290] = "F1";
        Keyboard2[Keyboard2["F2"] = 291] = "F2";
        Keyboard2[Keyboard2["F3"] = 292] = "F3";
        Keyboard2[Keyboard2["F4"] = 293] = "F4";
        Keyboard2[Keyboard2["F5"] = 294] = "F5";
        Keyboard2[Keyboard2["F6"] = 295] = "F6";
        Keyboard2[Keyboard2["F7"] = 296] = "F7";
        Keyboard2[Keyboard2["F8"] = 297] = "F8";
        Keyboard2[Keyboard2["F9"] = 298] = "F9";
        Keyboard2[Keyboard2["F10"] = 299] = "F10";
        Keyboard2[Keyboard2["F11"] = 300] = "F11";
        Keyboard2[Keyboard2["F12"] = 301] = "F12";
        Keyboard2[Keyboard2["F13"] = 302] = "F13";
        Keyboard2[Keyboard2["F14"] = 303] = "F14";
        Keyboard2[Keyboard2["F15"] = 304] = "F15";
        Keyboard2[Keyboard2["F16"] = 305] = "F16";
        Keyboard2[Keyboard2["F17"] = 306] = "F17";
        Keyboard2[Keyboard2["F18"] = 307] = "F18";
        Keyboard2[Keyboard2["F19"] = 308] = "F19";
        Keyboard2[Keyboard2["F20"] = 309] = "F20";
        Keyboard2[Keyboard2["F21"] = 310] = "F21";
        Keyboard2[Keyboard2["F22"] = 311] = "F22";
        Keyboard2[Keyboard2["F23"] = 312] = "F23";
        Keyboard2[Keyboard2["F24"] = 313] = "F24";
        Keyboard2[Keyboard2["F25"] = 314] = "F25";
        Keyboard2[Keyboard2["KP_0"] = 320] = "KP_0";
        Keyboard2[Keyboard2["KP_1"] = 321] = "KP_1";
        Keyboard2[Keyboard2["KP_2"] = 322] = "KP_2";
        Keyboard2[Keyboard2["KP_3"] = 323] = "KP_3";
        Keyboard2[Keyboard2["KP_4"] = 324] = "KP_4";
        Keyboard2[Keyboard2["KP_5"] = 325] = "KP_5";
        Keyboard2[Keyboard2["KP_6"] = 326] = "KP_6";
        Keyboard2[Keyboard2["KP_7"] = 327] = "KP_7";
        Keyboard2[Keyboard2["KP_8"] = 328] = "KP_8";
        Keyboard2[Keyboard2["KP_9"] = 329] = "KP_9";
        Keyboard2[Keyboard2["KP_DECIMAL"] = 330] = "KP_DECIMAL";
        Keyboard2[Keyboard2["KP_DIVIDE"] = 331] = "KP_DIVIDE";
        Keyboard2[Keyboard2["KP_MULTIPLY"] = 332] = "KP_MULTIPLY";
        Keyboard2[Keyboard2["KP_SUBTRACT"] = 333] = "KP_SUBTRACT";
        Keyboard2[Keyboard2["KP_ADD"] = 334] = "KP_ADD";
        Keyboard2[Keyboard2["KP_ENTER"] = 335] = "KP_ENTER";
        Keyboard2[Keyboard2["KP_EQUAL"] = 336] = "KP_EQUAL";
        Keyboard2[Keyboard2["LEFT_SHIFT"] = 340] = "LEFT_SHIFT";
        Keyboard2[Keyboard2["LEFT_CONTROL"] = 341] = "LEFT_CONTROL";
        Keyboard2[Keyboard2["LEFT_ALT"] = 342] = "LEFT_ALT";
        Keyboard2[Keyboard2["LEFT_SUPER"] = 343] = "LEFT_SUPER";
        Keyboard2[Keyboard2["RIGHT_SHIFT"] = 344] = "RIGHT_SHIFT";
        Keyboard2[Keyboard2["RIGHT_CONTROL"] = 345] = "RIGHT_CONTROL";
        Keyboard2[Keyboard2["RIGHT_ALT"] = 346] = "RIGHT_ALT";
        Keyboard2[Keyboard2["RIGHT_SUPER"] = 347] = "RIGHT_SUPER";
        Keyboard2[Keyboard2["MENU"] = 348] = "MENU";
      })(Keyboard || (exports2.Keyboard = Keyboard = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/LanguageAbbreviation.js
  var require_LanguageAbbreviation = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/LanguageAbbreviation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LanguageAbbreviation = void 0;
      var LanguageAbbreviation;
      (function(LanguageAbbreviation2) {
        LanguageAbbreviation2["ENGLISH"] = "en";
        LanguageAbbreviation2["JAPANESE"] = "jp";
        LanguageAbbreviation2["SPANISH"] = "es";
        LanguageAbbreviation2["GERMAN"] = "de";
        LanguageAbbreviation2["RUSSIAN"] = "ru";
        LanguageAbbreviation2["KOREAN"] = "kr";
        LanguageAbbreviation2["CHINESE_SIMPLE"] = "zh";
      })(LanguageAbbreviation || (exports2.LanguageAbbreviation = LanguageAbbreviation = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/LaserOffset.js
  var require_LaserOffset = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/LaserOffset.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LaserOffset = void 0;
      var LaserOffset;
      (function(LaserOffset2) {
        LaserOffset2[LaserOffset2["TECH_1"] = 0] = "TECH_1";
        LaserOffset2[LaserOffset2["TECH_2"] = 1] = "TECH_2";
        LaserOffset2[LaserOffset2["TECH_5"] = 2] = "TECH_5";
        LaserOffset2[LaserOffset2["SHOOP"] = 3] = "SHOOP";
        LaserOffset2[LaserOffset2["BRIMSTONE"] = 4] = "BRIMSTONE";
        LaserOffset2[LaserOffset2["MOMS_EYE"] = 5] = "MOMS_EYE";
        LaserOffset2[LaserOffset2["TRACTOR_BEAM"] = 6] = "TRACTOR_BEAM";
      })(LaserOffset || (exports2.LaserOffset = LaserOffset = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/LevelStage.js
  var require_LevelStage = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/LevelStage.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LevelStage = void 0;
      var LevelStage;
      (function(LevelStage2) {
        LevelStage2[LevelStage2["BASEMENT_1"] = 1] = "BASEMENT_1";
        LevelStage2[LevelStage2["BASEMENT_2"] = 2] = "BASEMENT_2";
        LevelStage2[LevelStage2["CAVES_1"] = 3] = "CAVES_1";
        LevelStage2[LevelStage2["CAVES_2"] = 4] = "CAVES_2";
        LevelStage2[LevelStage2["DEPTHS_1"] = 5] = "DEPTHS_1";
        LevelStage2[LevelStage2["DEPTHS_2"] = 6] = "DEPTHS_2";
        LevelStage2[LevelStage2["WOMB_1"] = 7] = "WOMB_1";
        LevelStage2[LevelStage2["WOMB_2"] = 8] = "WOMB_2";
        LevelStage2[LevelStage2["BLUE_WOMB"] = 9] = "BLUE_WOMB";
        LevelStage2[LevelStage2["SHEOL_CATHEDRAL"] = 10] = "SHEOL_CATHEDRAL";
        LevelStage2[LevelStage2["DARK_ROOM_CHEST"] = 11] = "DARK_ROOM_CHEST";
        LevelStage2[LevelStage2["VOID"] = 12] = "VOID";
        LevelStage2[LevelStage2["HOME"] = 13] = "HOME";
        LevelStage2[LevelStage2["BASEMENT_GREED_MODE"] = 1] = "BASEMENT_GREED_MODE";
        LevelStage2[LevelStage2["CAVES_GREED_MODE"] = 2] = "CAVES_GREED_MODE";
        LevelStage2[LevelStage2["DEPTHS_GREED_MODE"] = 3] = "DEPTHS_GREED_MODE";
        LevelStage2[LevelStage2["WOMB_GREED_MODE"] = 4] = "WOMB_GREED_MODE";
        LevelStage2[LevelStage2["SHEOL_GREED_MODE"] = 5] = "SHEOL_GREED_MODE";
        LevelStage2[LevelStage2["SHOP_GREED_MODE"] = 6] = "SHOP_GREED_MODE";
        LevelStage2[LevelStage2["ULTRA_GREED_GREED_MODE"] = 7] = "ULTRA_GREED_GREED_MODE";
      })(LevelStage || (exports2.LevelStage = LevelStage = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/LevelStateFlag.js
  var require_LevelStateFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/LevelStateFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LevelStateFlag = void 0;
      var LevelStateFlag;
      (function(LevelStateFlag2) {
        LevelStateFlag2[LevelStateFlag2["BUM_KILLED"] = 0] = "BUM_KILLED";
        LevelStateFlag2[LevelStateFlag2["EVIL_BUM_KILLED"] = 1] = "EVIL_BUM_KILLED";
        LevelStateFlag2[LevelStateFlag2["RED_HEART_DAMAGED"] = 2] = "RED_HEART_DAMAGED";
        LevelStateFlag2[LevelStateFlag2["BUM_LEFT"] = 3] = "BUM_LEFT";
        LevelStateFlag2[LevelStateFlag2["EVIL_BUM_LEFT"] = 4] = "EVIL_BUM_LEFT";
        LevelStateFlag2[LevelStateFlag2["DAMAGED"] = 5] = "DAMAGED";
        LevelStateFlag2[LevelStateFlag2["SHOPKEEPER_KILLED_LVL"] = 6] = "SHOPKEEPER_KILLED_LVL";
        LevelStateFlag2[LevelStateFlag2["COMPASS_EFFECT"] = 7] = "COMPASS_EFFECT";
        LevelStateFlag2[LevelStateFlag2["MAP_EFFECT"] = 8] = "MAP_EFFECT";
        LevelStateFlag2[LevelStateFlag2["BLUE_MAP_EFFECT"] = 9] = "BLUE_MAP_EFFECT";
        LevelStateFlag2[LevelStateFlag2["FULL_MAP_EFFECT"] = 10] = "FULL_MAP_EFFECT";
        LevelStateFlag2[LevelStateFlag2["GREED_LOST_PENALTY"] = 11] = "GREED_LOST_PENALTY";
        LevelStateFlag2[LevelStateFlag2["GREED_MONSTRO_SPAWNED"] = 12] = "GREED_MONSTRO_SPAWNED";
        LevelStateFlag2[LevelStateFlag2["ITEM_DUNGEON_FOUND"] = 13] = "ITEM_DUNGEON_FOUND";
        LevelStateFlag2[LevelStateFlag2["MAMA_MEGA_USED"] = 14] = "MAMA_MEGA_USED";
        LevelStateFlag2[LevelStateFlag2["WOODEN_CROSS_REMOVED"] = 15] = "WOODEN_CROSS_REMOVED";
        LevelStateFlag2[LevelStateFlag2["SHOVEL_QUEST_TRIGGERED"] = 16] = "SHOVEL_QUEST_TRIGGERED";
        LevelStateFlag2[LevelStateFlag2["SATANIC_BIBLE_USED"] = 17] = "SATANIC_BIBLE_USED";
        LevelStateFlag2[LevelStateFlag2["SOL_EFFECT"] = 18] = "SOL_EFFECT";
        LevelStateFlag2[LevelStateFlag2["LEVEL_START_TRIGGERED"] = 19] = "LEVEL_START_TRIGGERED";
        LevelStateFlag2[LevelStateFlag2["LUNA_EFFECT"] = 20] = "LUNA_EFFECT";
        LevelStateFlag2[LevelStateFlag2["VOID_DOOR_DISABLED"] = 21] = "VOID_DOOR_DISABLED";
        LevelStateFlag2[LevelStateFlag2["MINESHAFT_ESCAPE"] = 22] = "MINESHAFT_ESCAPE";
        LevelStateFlag2[LevelStateFlag2["MIRROR_BROKEN"] = 23] = "MIRROR_BROKEN";
      })(LevelStateFlag || (exports2.LevelStateFlag = LevelStateFlag = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/LineCheckMode.js
  var require_LineCheckMode = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/LineCheckMode.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LineCheckMode = void 0;
      var LineCheckMode;
      (function(LineCheckMode2) {
        LineCheckMode2[LineCheckMode2["NORMAL"] = 0] = "NORMAL";
        LineCheckMode2[LineCheckMode2["ECONOMIC"] = 1] = "ECONOMIC";
        LineCheckMode2[LineCheckMode2["EXPLOSION"] = 2] = "EXPLOSION";
        LineCheckMode2[LineCheckMode2["PROJECTILE"] = 3] = "PROJECTILE";
      })(LineCheckMode || (exports2.LineCheckMode = LineCheckMode = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ModCallback.js
  var require_ModCallback = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ModCallback.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModCallback = void 0;
      var ModCallback;
      (function(ModCallback2) {
        ModCallback2[ModCallback2["POST_NPC_UPDATE"] = 0] = "POST_NPC_UPDATE";
        ModCallback2[ModCallback2["POST_UPDATE"] = 1] = "POST_UPDATE";
        ModCallback2[ModCallback2["POST_RENDER"] = 2] = "POST_RENDER";
        ModCallback2[ModCallback2["POST_USE_ITEM"] = 3] = "POST_USE_ITEM";
        ModCallback2[ModCallback2["POST_PEFFECT_UPDATE"] = 4] = "POST_PEFFECT_UPDATE";
        ModCallback2[ModCallback2["POST_USE_CARD"] = 5] = "POST_USE_CARD";
        ModCallback2[ModCallback2["POST_FAMILIAR_UPDATE"] = 6] = "POST_FAMILIAR_UPDATE";
        ModCallback2[ModCallback2["POST_FAMILIAR_INIT"] = 7] = "POST_FAMILIAR_INIT";
        ModCallback2[ModCallback2["EVALUATE_CACHE"] = 8] = "EVALUATE_CACHE";
        ModCallback2[ModCallback2["POST_PLAYER_INIT"] = 9] = "POST_PLAYER_INIT";
        ModCallback2[ModCallback2["POST_USE_PILL"] = 10] = "POST_USE_PILL";
        ModCallback2[ModCallback2["ENTITY_TAKE_DMG"] = 11] = "ENTITY_TAKE_DMG";
        ModCallback2[ModCallback2["POST_CURSE_EVAL"] = 12] = "POST_CURSE_EVAL";
        ModCallback2[ModCallback2["INPUT_ACTION"] = 13] = "INPUT_ACTION";
        ModCallback2[ModCallback2["POST_GAME_STARTED"] = 15] = "POST_GAME_STARTED";
        ModCallback2[ModCallback2["POST_GAME_END"] = 16] = "POST_GAME_END";
        ModCallback2[ModCallback2["PRE_GAME_EXIT"] = 17] = "PRE_GAME_EXIT";
        ModCallback2[ModCallback2["POST_NEW_LEVEL"] = 18] = "POST_NEW_LEVEL";
        ModCallback2[ModCallback2["POST_NEW_ROOM"] = 19] = "POST_NEW_ROOM";
        ModCallback2[ModCallback2["GET_CARD"] = 20] = "GET_CARD";
        ModCallback2[ModCallback2["GET_SHADER_PARAMS"] = 21] = "GET_SHADER_PARAMS";
        ModCallback2[ModCallback2["EXECUTE_CMD"] = 22] = "EXECUTE_CMD";
        ModCallback2[ModCallback2["PRE_USE_ITEM"] = 23] = "PRE_USE_ITEM";
        ModCallback2[ModCallback2["PRE_ENTITY_SPAWN"] = 24] = "PRE_ENTITY_SPAWN";
        ModCallback2[ModCallback2["POST_FAMILIAR_RENDER"] = 25] = "POST_FAMILIAR_RENDER";
        ModCallback2[ModCallback2["PRE_FAMILIAR_COLLISION"] = 26] = "PRE_FAMILIAR_COLLISION";
        ModCallback2[ModCallback2["POST_NPC_INIT"] = 27] = "POST_NPC_INIT";
        ModCallback2[ModCallback2["POST_NPC_RENDER"] = 28] = "POST_NPC_RENDER";
        ModCallback2[ModCallback2["POST_NPC_DEATH"] = 29] = "POST_NPC_DEATH";
        ModCallback2[ModCallback2["PRE_NPC_COLLISION"] = 30] = "PRE_NPC_COLLISION";
        ModCallback2[ModCallback2["POST_PLAYER_UPDATE"] = 31] = "POST_PLAYER_UPDATE";
        ModCallback2[ModCallback2["POST_PLAYER_RENDER"] = 32] = "POST_PLAYER_RENDER";
        ModCallback2[ModCallback2["PRE_PLAYER_COLLISION"] = 33] = "PRE_PLAYER_COLLISION";
        ModCallback2[ModCallback2["POST_PICKUP_INIT"] = 34] = "POST_PICKUP_INIT";
        ModCallback2[ModCallback2["POST_PICKUP_UPDATE"] = 35] = "POST_PICKUP_UPDATE";
        ModCallback2[ModCallback2["POST_PICKUP_RENDER"] = 36] = "POST_PICKUP_RENDER";
        ModCallback2[ModCallback2["POST_PICKUP_SELECTION"] = 37] = "POST_PICKUP_SELECTION";
        ModCallback2[ModCallback2["PRE_PICKUP_COLLISION"] = 38] = "PRE_PICKUP_COLLISION";
        ModCallback2[ModCallback2["POST_TEAR_INIT"] = 39] = "POST_TEAR_INIT";
        ModCallback2[ModCallback2["POST_TEAR_UPDATE"] = 40] = "POST_TEAR_UPDATE";
        ModCallback2[ModCallback2["POST_TEAR_RENDER"] = 41] = "POST_TEAR_RENDER";
        ModCallback2[ModCallback2["PRE_TEAR_COLLISION"] = 42] = "PRE_TEAR_COLLISION";
        ModCallback2[ModCallback2["POST_PROJECTILE_INIT"] = 43] = "POST_PROJECTILE_INIT";
        ModCallback2[ModCallback2["POST_PROJECTILE_UPDATE"] = 44] = "POST_PROJECTILE_UPDATE";
        ModCallback2[ModCallback2["POST_PROJECTILE_RENDER"] = 45] = "POST_PROJECTILE_RENDER";
        ModCallback2[ModCallback2["PRE_PROJECTILE_COLLISION"] = 46] = "PRE_PROJECTILE_COLLISION";
        ModCallback2[ModCallback2["POST_LASER_INIT"] = 47] = "POST_LASER_INIT";
        ModCallback2[ModCallback2["POST_LASER_UPDATE"] = 48] = "POST_LASER_UPDATE";
        ModCallback2[ModCallback2["POST_LASER_RENDER"] = 49] = "POST_LASER_RENDER";
        ModCallback2[ModCallback2["POST_KNIFE_INIT"] = 50] = "POST_KNIFE_INIT";
        ModCallback2[ModCallback2["POST_KNIFE_UPDATE"] = 51] = "POST_KNIFE_UPDATE";
        ModCallback2[ModCallback2["POST_KNIFE_RENDER"] = 52] = "POST_KNIFE_RENDER";
        ModCallback2[ModCallback2["PRE_KNIFE_COLLISION"] = 53] = "PRE_KNIFE_COLLISION";
        ModCallback2[ModCallback2["POST_EFFECT_INIT"] = 54] = "POST_EFFECT_INIT";
        ModCallback2[ModCallback2["POST_EFFECT_UPDATE"] = 55] = "POST_EFFECT_UPDATE";
        ModCallback2[ModCallback2["POST_EFFECT_RENDER"] = 56] = "POST_EFFECT_RENDER";
        ModCallback2[ModCallback2["POST_BOMB_INIT"] = 57] = "POST_BOMB_INIT";
        ModCallback2[ModCallback2["POST_BOMB_UPDATE"] = 58] = "POST_BOMB_UPDATE";
        ModCallback2[ModCallback2["POST_BOMB_RENDER"] = 59] = "POST_BOMB_RENDER";
        ModCallback2[ModCallback2["PRE_BOMB_COLLISION"] = 60] = "PRE_BOMB_COLLISION";
        ModCallback2[ModCallback2["POST_FIRE_TEAR"] = 61] = "POST_FIRE_TEAR";
        ModCallback2[ModCallback2["PRE_GET_COLLECTIBLE"] = 62] = "PRE_GET_COLLECTIBLE";
        ModCallback2[ModCallback2["POST_GET_COLLECTIBLE"] = 63] = "POST_GET_COLLECTIBLE";
        ModCallback2[ModCallback2["GET_PILL_COLOR"] = 64] = "GET_PILL_COLOR";
        ModCallback2[ModCallback2["GET_PILL_EFFECT"] = 65] = "GET_PILL_EFFECT";
        ModCallback2[ModCallback2["GET_TRINKET"] = 66] = "GET_TRINKET";
        ModCallback2[ModCallback2["POST_ENTITY_REMOVE"] = 67] = "POST_ENTITY_REMOVE";
        ModCallback2[ModCallback2["POST_ENTITY_KILL"] = 68] = "POST_ENTITY_KILL";
        ModCallback2[ModCallback2["PRE_NPC_UPDATE"] = 69] = "PRE_NPC_UPDATE";
        ModCallback2[ModCallback2["PRE_SPAWN_CLEAR_AWARD"] = 70] = "PRE_SPAWN_CLEAR_AWARD";
        ModCallback2[ModCallback2["PRE_ROOM_ENTITY_SPAWN"] = 71] = "PRE_ROOM_ENTITY_SPAWN";
        ModCallback2[ModCallback2["PRE_ENTITY_DEVOLVE"] = 72] = "PRE_ENTITY_DEVOLVE";
        ModCallback2[ModCallback2["PRE_MOD_UNLOAD"] = 73] = "PRE_MOD_UNLOAD";
      })(ModCallback || (exports2.ModCallback = ModCallback = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Mouse.js
  var require_Mouse = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Mouse.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Mouse = void 0;
      var Mouse;
      (function(Mouse2) {
        Mouse2[Mouse2["BUTTON_LEFT"] = 0] = "BUTTON_LEFT";
        Mouse2[Mouse2["BUTTON_RIGHT"] = 1] = "BUTTON_RIGHT";
        Mouse2[Mouse2["BUTTON_MIDDLE"] = 2] = "BUTTON_MIDDLE";
        Mouse2[Mouse2["BUTTON_4"] = 3] = "BUTTON_4";
        Mouse2[Mouse2["BUTTON_5"] = 4] = "BUTTON_5";
        Mouse2[Mouse2["BUTTON_6"] = 5] = "BUTTON_6";
        Mouse2[Mouse2["BUTTON_7"] = 6] = "BUTTON_7";
        Mouse2[Mouse2["BUTTON_8"] = 7] = "BUTTON_8";
      })(Mouse || (exports2.Mouse = Mouse = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/Music.js
  var require_Music = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/Music.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Music = void 0;
      var Music;
      (function(Music2) {
        Music2[Music2["NULL"] = 0] = "NULL";
        Music2[Music2["BASEMENT"] = 1] = "BASEMENT";
        Music2[Music2["CAVES"] = 2] = "CAVES";
        Music2[Music2["DEPTHS"] = 3] = "DEPTHS";
        Music2[Music2["CELLAR"] = 4] = "CELLAR";
        Music2[Music2["CATACOMBS"] = 5] = "CATACOMBS";
        Music2[Music2["NECROPOLIS"] = 6] = "NECROPOLIS";
        Music2[Music2["WOMB"] = 7] = "WOMB";
        Music2[Music2["GAME_OVER"] = 8] = "GAME_OVER";
        Music2[Music2["BOSS"] = 9] = "BOSS";
        Music2[Music2["CATHEDRAL"] = 10] = "CATHEDRAL";
        Music2[Music2["SHEOL"] = 11] = "SHEOL";
        Music2[Music2["DARK_ROOM"] = 12] = "DARK_ROOM";
        Music2[Music2["CHEST"] = 13] = "CHEST";
        Music2[Music2["BURNING_BASEMENT"] = 14] = "BURNING_BASEMENT";
        Music2[Music2["FLOODED_CAVES"] = 15] = "FLOODED_CAVES";
        Music2[Music2["DANK_DEPTHS"] = 16] = "DANK_DEPTHS";
        Music2[Music2["SCARRED_WOMB"] = 17] = "SCARRED_WOMB";
        Music2[Music2["BLUE_WOMB"] = 18] = "BLUE_WOMB";
        Music2[Music2["UTERO"] = 19] = "UTERO";
        Music2[Music2["MOM_BOSS"] = 20] = "MOM_BOSS";
        Music2[Music2["MOMS_HEART_BOSS"] = 21] = "MOMS_HEART_BOSS";
        Music2[Music2["ISAAC_BOSS"] = 22] = "ISAAC_BOSS";
        Music2[Music2["SATAN_BOSS"] = 23] = "SATAN_BOSS";
        Music2[Music2["DARK_ROOM_BOSS"] = 24] = "DARK_ROOM_BOSS";
        Music2[Music2["BLUE_BABY_BOSS"] = 25] = "BLUE_BABY_BOSS";
        Music2[Music2["BOSS_2"] = 26] = "BOSS_2";
        Music2[Music2["HUSH_BOSS"] = 27] = "HUSH_BOSS";
        Music2[Music2["ULTRA_GREED_BOSS"] = 28] = "ULTRA_GREED_BOSS";
        Music2[Music2["LIBRARY_ROOM"] = 30] = "LIBRARY_ROOM";
        Music2[Music2["SECRET_ROOM"] = 31] = "SECRET_ROOM";
        Music2[Music2["SECRET_ROOM_2"] = 32] = "SECRET_ROOM_2";
        Music2[Music2["DEVIL_ROOM"] = 33] = "DEVIL_ROOM";
        Music2[Music2["ANGEL_ROOM"] = 34] = "ANGEL_ROOM";
        Music2[Music2["SHOP_ROOM"] = 35] = "SHOP_ROOM";
        Music2[Music2["ARCADE_ROOM"] = 36] = "ARCADE_ROOM";
        Music2[Music2["BOSS_OVER"] = 37] = "BOSS_OVER";
        Music2[Music2["CHALLENGE_FIGHT"] = 38] = "CHALLENGE_FIGHT";
        Music2[Music2["BOSS_RUSH"] = 39] = "BOSS_RUSH";
        Music2[Music2["JINGLE_BOSS_RUSH_OUTRO"] = 40] = "JINGLE_BOSS_RUSH_OUTRO";
        Music2[Music2["BOSS_3"] = 41] = "BOSS_3";
        Music2[Music2["JINGLE_BOSS_OVER_3"] = 42] = "JINGLE_BOSS_OVER_3";
        Music2[Music2["MOTHER_BOSS"] = 43] = "MOTHER_BOSS";
        Music2[Music2["DOGMA_BOSS"] = 44] = "DOGMA_BOSS";
        Music2[Music2["BEAST_BOSS"] = 45] = "BEAST_BOSS";
        Music2[Music2["JINGLE_MOTHER_OVER"] = 47] = "JINGLE_MOTHER_OVER";
        Music2[Music2["JINGLE_DOGMA_OVER"] = 48] = "JINGLE_DOGMA_OVER";
        Music2[Music2["JINGLE_BEAST_OVER"] = 49] = "JINGLE_BEAST_OVER";
        Music2[Music2["PLANETARIUM"] = 50] = "PLANETARIUM";
        Music2[Music2["SECRET_ROOM_ALT_ALT"] = 51] = "SECRET_ROOM_ALT_ALT";
        Music2[Music2["BOSS_OVER_TWISTED"] = 52] = "BOSS_OVER_TWISTED";
        Music2[Music2["CREDITS"] = 60] = "CREDITS";
        Music2[Music2["TITLE"] = 61] = "TITLE";
        Music2[Music2["TITLE_AFTERBIRTH"] = 62] = "TITLE_AFTERBIRTH";
        Music2[Music2["TITLE_REPENTANCE"] = 63] = "TITLE_REPENTANCE";
        Music2[Music2["JINGLE_GAME_START_ALT"] = 64] = "JINGLE_GAME_START_ALT";
        Music2[Music2["JINGLE_NIGHTMARE_ALT"] = 65] = "JINGLE_NIGHTMARE_ALT";
        Music2[Music2["MOTHERS_SHADOW_INTRO"] = 66] = "MOTHERS_SHADOW_INTRO";
        Music2[Music2["DOGMA_INTRO"] = 67] = "DOGMA_INTRO";
        Music2[Music2["STRANGE_DOOR_JINGLE"] = 68] = "STRANGE_DOOR_JINGLE";
        Music2[Music2["DARK_CLOSET"] = 69] = "DARK_CLOSET";
        Music2[Music2["CREDITS_ALT"] = 70] = "CREDITS_ALT";
        Music2[Music2["CREDITS_ALT_FINAL"] = 71] = "CREDITS_ALT_FINAL";
        Music2[Music2["JINGLE_BOSS"] = 81] = "JINGLE_BOSS";
        Music2[Music2["JINGLE_BOSS_OVER_1"] = 83] = "JINGLE_BOSS_OVER_1";
        Music2[Music2["JINGLE_HOLY_ROOM_FIND"] = 84] = "JINGLE_HOLY_ROOM_FIND";
        Music2[Music2["JINGLE_SECRET_ROOM_FIND"] = 85] = "JINGLE_SECRET_ROOM_FIND";
        Music2[Music2["JINGLE_TREASURE_ROOM_ENTRY_0"] = 87] = "JINGLE_TREASURE_ROOM_ENTRY_0";
        Music2[Music2["JINGLE_TREASURE_ROOM_ENTRY_1"] = 88] = "JINGLE_TREASURE_ROOM_ENTRY_1";
        Music2[Music2["JINGLE_TREASURE_ROOM_ENTRY_2"] = 89] = "JINGLE_TREASURE_ROOM_ENTRY_2";
        Music2[Music2["JINGLE_TREASURE_ROOM_ENTRY_3"] = 90] = "JINGLE_TREASURE_ROOM_ENTRY_3";
        Music2[Music2["JINGLE_CHALLENGE_ENTRY"] = 91] = "JINGLE_CHALLENGE_ENTRY";
        Music2[Music2["JINGLE_CHALLENGE_OUTRO"] = 92] = "JINGLE_CHALLENGE_OUTRO";
        Music2[Music2["JINGLE_GAME_OVER"] = 93] = "JINGLE_GAME_OVER";
        Music2[Music2["JINGLE_DEVIL_ROOM_FIND"] = 94] = "JINGLE_DEVIL_ROOM_FIND";
        Music2[Music2["JINGLE_GAME_START"] = 95] = "JINGLE_GAME_START";
        Music2[Music2["JINGLE_NIGHTMARE"] = 96] = "JINGLE_NIGHTMARE";
        Music2[Music2["JINGLE_BOSS_OVER_2"] = 97] = "JINGLE_BOSS_OVER_2";
        Music2[Music2["JINGLE_HUSH_OVER"] = 98] = "JINGLE_HUSH_OVER";
        Music2[Music2["INTRO_VOICEOVER"] = 100] = "INTRO_VOICEOVER";
        Music2[Music2["EPILOGUE_VOICEOVER"] = 101] = "EPILOGUE_VOICEOVER";
        Music2[Music2["VOID"] = 102] = "VOID";
        Music2[Music2["VOID_BOSS"] = 103] = "VOID_BOSS";
        Music2[Music2["DOWNPOUR"] = 104] = "DOWNPOUR";
        Music2[Music2["MINES"] = 105] = "MINES";
        Music2[Music2["MAUSOLEUM"] = 106] = "MAUSOLEUM";
        Music2[Music2["CORPSE"] = 107] = "CORPSE";
        Music2[Music2["DROSS"] = 108] = "DROSS";
        Music2[Music2["ASHPIT"] = 109] = "ASHPIT";
        Music2[Music2["GEHENNA"] = 110] = "GEHENNA";
        Music2[Music2["MORTIS"] = 111] = "MORTIS";
        Music2[Music2["ISAACS_HOUSE"] = 112] = "ISAACS_HOUSE";
        Music2[Music2["FINAL_VOICEOVER"] = 113] = "FINAL_VOICEOVER";
        Music2[Music2["DOWNPOUR_REVERSE"] = 114] = "DOWNPOUR_REVERSE";
        Music2[Music2["DROSS_REVERSE"] = 115] = "DROSS_REVERSE";
        Music2[Music2["MINESHAFT_AMBIENT"] = 116] = "MINESHAFT_AMBIENT";
        Music2[Music2["MINESHAFT_ESCAPE"] = 117] = "MINESHAFT_ESCAPE";
        Music2[Music2["REVERSE_GENESIS"] = 118] = "REVERSE_GENESIS";
      })(Music || (exports2.Music = Music = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/NPCID.js
  var require_NPCID = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/NPCID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NPCID = void 0;
      var NPCID;
      (function(NPCID2) {
        NPCID2["FROWNING_GAPER"] = "10.0.0";
        NPCID2["GAPER"] = "10.1.0";
        NPCID2["FLAMING_GAPER"] = "10.2.0";
        NPCID2["ROTTEN_GAPER"] = "10.3.0";
        NPCID2["ROTTEN_GAPER_2"] = "10.3.1";
        NPCID2["ROTTEN_GAPER_3"] = "10.3.2";
        NPCID2["ROTTEN_GAPER_4"] = "10.3.3";
        NPCID2["ROTTEN_GAPER_5"] = "10.3.4";
        NPCID2["ROTTEN_GAPER_6"] = "10.3.5";
        NPCID2["GUSHER"] = "11.0.0";
        NPCID2["PACER"] = "11.1.0";
        NPCID2["HORF"] = "12.0.0";
        NPCID2["FLY"] = "13.0.0";
        NPCID2["POOTER"] = "14.0.0";
        NPCID2["SUPER_POOTER"] = "14.1.0";
        NPCID2["TAINTED_POOTER"] = "14.2.0";
        NPCID2["CLOTTY"] = "15.0.0";
        NPCID2["CLOT"] = "15.1.0";
        NPCID2["I_BLOB"] = "15.2.0";
        NPCID2["GRILLED_CLOTTY"] = "15.3.0";
        NPCID2["MULLIGAN"] = "16.0.0";
        NPCID2["MULLIGOON"] = "16.1.0";
        NPCID2["MULLIBOOM"] = "16.2.0";
        NPCID2["SHOPKEEPER"] = "17.0.0";
        NPCID2["SECRET_ROOM_KEEPER"] = "17.1.0";
        NPCID2["ERROR_ROOM_KEEPER"] = "17.2.0";
        NPCID2["SPECIAL_SHOPKEEPER"] = "17.3.0";
        NPCID2["SPECIAL_SECRET_ROOM_KEEPER"] = "17.4.0";
        NPCID2["ATTACK_FLY"] = "18.0.0";
        NPCID2["LARRY_JR"] = "19.0.0";
        NPCID2["LARRY_JR_GREEN"] = "19.0.1";
        NPCID2["LARRY_JR_BLUE"] = "19.0.2";
        NPCID2["THE_HOLLOW"] = "19.1.0";
        NPCID2["THE_HOLLOW_GREEN"] = "19.1.1";
        NPCID2["THE_HOLLOW_BLACK"] = "19.1.2";
        NPCID2["THE_HOLLOW_YELLOW"] = "19.1.3";
        NPCID2["TUFF_TWIN"] = "19.2.0";
        NPCID2["THE_SHELL"] = "19.3.0";
        NPCID2["MONSTRO"] = "20.0.0";
        NPCID2["MONSTRO_RED"] = "20.0.1";
        NPCID2["MONSTRO_GREY"] = "20.0.2";
        NPCID2["MAGGOT"] = "21.0.0";
        NPCID2["HIVE"] = "22.0.0";
        NPCID2["DROWNED_HIVE"] = "22.1.0";
        NPCID2["HOLY_MULLIGAN"] = "22.2.0";
        NPCID2["TAINTED_MULLIGAN"] = "22.3.0";
        NPCID2["CHARGER"] = "23.0.0";
        NPCID2["MY_SHADOW"] = "23.0.1";
        NPCID2["DROWNED_CHARGER"] = "23.1.0";
        NPCID2["DANK_CHARGER"] = "23.2.0";
        NPCID2["CARRION_PRINCESS"] = "23.3.0";
        NPCID2["GLOBIN"] = "24.0.0";
        NPCID2["GAZING_GLOBIN"] = "24.1.0";
        NPCID2["DANK_GLOBIN"] = "24.2.0";
        NPCID2["CURSED_GLOBIN"] = "24.3.0";
        NPCID2["BOOM_FLY"] = "25.0.0";
        NPCID2["RED_BOOM_FLY"] = "25.1.0";
        NPCID2["DROWNED_BOOM_FLY"] = "25.2.0";
        NPCID2["DRAGON_FLY"] = "25.3.0";
        NPCID2["DRAGON_FLY_X"] = "25.3.1";
        NPCID2["BONE_FLY"] = "25.4.0";
        NPCID2["SICK_BOOM_FLY"] = "25.5.0";
        NPCID2["TAINTED_BOOM_FLY"] = "25.6.0";
        NPCID2["MAW"] = "26.0.0";
        NPCID2["RED_MAW"] = "26.1.0";
        NPCID2["PSYCHIC_MAW"] = "26.2.0";
        NPCID2["HOST"] = "27.0.0";
        NPCID2["RED_HOST"] = "27.1.0";
        NPCID2["HARD_HOST"] = "27.3.0";
        NPCID2["CHUB"] = "28.0.0";
        NPCID2["CHUB_BLUE"] = "28.0.1";
        NPCID2["CHUB_ORANGE"] = "28.0.2";
        NPCID2["CHAD"] = "28.1.0";
        NPCID2["THE_CARRION_QUEEN"] = "28.2.0";
        NPCID2["THE_CARRION_QUEEN_PINK"] = "28.2.1";
        NPCID2["HOPPER"] = "29.0.0";
        NPCID2["TRITE"] = "29.1.0";
        NPCID2["EGGY"] = "29.2.0";
        NPCID2["TAINTED_HOPPER"] = "29.3.0";
        NPCID2["BOIL"] = "30.0.0";
        NPCID2["BOIL_BLUE"] = "30.0.1";
        NPCID2["GUT"] = "30.1.0";
        NPCID2["SACK"] = "30.2.0";
        NPCID2["SPITTY"] = "31.0.0";
        NPCID2["TAINTED_SPITTY"] = "31.1.0";
        NPCID2["BRAIN"] = "32.0.0";
        NPCID2["FIRE_PLACE"] = "33.0.0";
        NPCID2["RED_FIRE_PLACE"] = "33.1.0";
        NPCID2["BLUE_FIRE_PLACE"] = "33.2.0";
        NPCID2["PURPLE_FIRE_PLACE"] = "33.3.0";
        NPCID2["WHITE_FIRE_PLACE"] = "33.4.0";
        NPCID2["MOVEABLE_FIREPLACE"] = "33.10.0";
        NPCID2["COAL"] = "33.11.0";
        NPCID2["COAL_2"] = "33.11.1";
        NPCID2["COAL_3"] = "33.11.2";
        NPCID2["COAL_4"] = "33.11.3";
        NPCID2["MOVEABLE_BLUE_FIREPLACE"] = "33.12.0";
        NPCID2["MOVEABLE_PURPLE_FIREPLACE"] = "33.13.0";
        NPCID2["LEAPER"] = "34.0.0";
        NPCID2["STICKY_LEAPER"] = "34.1.0";
        NPCID2["MR_MAW"] = "35.0.0";
        NPCID2["MR_MAW_HEAD"] = "35.1.0";
        NPCID2["MR_RED_MAW"] = "35.2.0";
        NPCID2["MR_RED_MAW_HEAD"] = "35.3.0";
        NPCID2["MR_MAW_NECK"] = "35.10.0";
        NPCID2["GURDY"] = "36.0.0";
        NPCID2["GURDY_GREEN"] = "36.0.1";
        NPCID2["BABY"] = "38.0.0";
        NPCID2["ANGELIC_BABY"] = "38.1.0";
        NPCID2["ANGELIC_BABY_SMALL"] = "38.1.1";
        NPCID2["ULTRA_PRIDE_BABY"] = "38.2.0";
        NPCID2["WRINKLY_BABY"] = "38.3.0";
        NPCID2["VIS"] = "39.0.0";
        NPCID2["DOUBLE_VIS"] = "39.1.0";
        NPCID2["CHUBBER"] = "39.2.0";
        NPCID2["SCARRED_DOUBLE_VIS"] = "39.3.0";
        NPCID2["CHUBBER_PROJECTILE"] = "39.22.0";
        NPCID2["GUTS"] = "40.0.0";
        NPCID2["SCARRED_GUTS"] = "40.1.0";
        NPCID2["SLOG"] = "40.2.0";
        NPCID2["KNIGHT"] = "41.0.0";
        NPCID2["SELFLESS_KNIGHT"] = "41.1.0";
        NPCID2["LOOSE_KNIGHT"] = "41.2.0";
        NPCID2["BRAINLESS_KNIGHT"] = "41.3.0";
        NPCID2["BLACK_KNIGHT"] = "41.4.0";
        NPCID2["STONE_GRIMACE"] = "42.0.0";
        NPCID2["VOMIT_GRIMACE"] = "42.1.0";
        NPCID2["TRIPLE_GRIMACE"] = "42.2.0";
        NPCID2["MONSTRO_II"] = "43.0.0";
        NPCID2["MONSTRO_II_RED"] = "43.0.1";
        NPCID2["GISH"] = "43.1.0";
        NPCID2["POKY"] = "44.0.0";
        NPCID2["SLIDE"] = "44.1.0";
        NPCID2["MOM"] = "45.0.0";
        NPCID2["MOM_BLUE"] = "45.0.1";
        NPCID2["MOM_RED"] = "45.0.2";
        NPCID2["MOM_STOMP"] = "45.10.0";
        NPCID2["MOM_STOMP_BLUE"] = "45.10.1";
        NPCID2["MOM_STOMP_RED"] = "45.10.2";
        NPCID2["SLOTH"] = "46.0.0";
        NPCID2["SUPER_SLOTH"] = "46.1.0";
        NPCID2["ULTRA_PRIDE"] = "46.2.0";
        NPCID2["LUST"] = "47.0.0";
        NPCID2["SUPER_LUST"] = "47.1.0";
        NPCID2["WRATH"] = "48.0.0";
        NPCID2["SUPER_WRATH"] = "48.1.0";
        NPCID2["GLUTTONY"] = "49.0.0";
        NPCID2["SUPER_GLUTTONY"] = "49.1.0";
        NPCID2["GREED"] = "50.0.0";
        NPCID2["SUPER_GREED"] = "50.1.0";
        NPCID2["ENVY"] = "51.0.0";
        NPCID2["SUPER_ENVY"] = "51.1.0";
        NPCID2["ENVY_BIG"] = "51.10.0";
        NPCID2["SUPER_ENVY_BIG"] = "51.11.0";
        NPCID2["ENVY_MEDIUM"] = "51.20.0";
        NPCID2["SUPER_ENVY_MEDIUM"] = "51.21.0";
        NPCID2["ENVY_SMALL"] = "51.30.0";
        NPCID2["SUPER_ENVY_SMALL"] = "51.31.0";
        NPCID2["PRIDE"] = "52.0.0";
        NPCID2["SUPER_PRIDE"] = "52.1.0";
        NPCID2["DOPLE"] = "53.0.0";
        NPCID2["EVIL_TWIN"] = "53.1.0";
        NPCID2["FLAMING_HOPPER"] = "54.0.0";
        NPCID2["LEECH"] = "55.0.0";
        NPCID2["KAMIKAZE_LEECH"] = "55.1.0";
        NPCID2["HOLY_LEECH"] = "55.2.0";
        NPCID2["LUMP"] = "56.0.0";
        NPCID2["MEMBRAIN"] = "57.0.0";
        NPCID2["MAMA_GUTS"] = "57.1.0";
        NPCID2["DEAD_MEAT"] = "57.2.0";
        NPCID2["PARA_BITE"] = "58.0.0";
        NPCID2["SCARRED_PARA_BITE"] = "58.1.0";
        NPCID2["FRED"] = "59.0.0";
        NPCID2["EYE"] = "60.0.0";
        NPCID2["BLOODSHOT_EYE"] = "60.1.0";
        NPCID2["HOLY_EYE"] = "60.2.0";
        NPCID2["SUCKER"] = "61.0.0";
        NPCID2["SPIT"] = "61.1.0";
        NPCID2["SOUL_SUCKER"] = "61.2.0";
        NPCID2["INK"] = "61.3.0";
        NPCID2["MAMA_FLY"] = "61.4.0";
        NPCID2["BULB"] = "61.5.0";
        NPCID2["BLOODFLY"] = "61.6.0";
        NPCID2["TAINTED_SUCKER"] = "61.7.0";
        NPCID2["PIN"] = "62.0.0";
        NPCID2["PIN_GREY"] = "62.0.1";
        NPCID2["SCOLEX"] = "62.1.0";
        NPCID2["THE_FRAIL"] = "62.2.0";
        NPCID2["THE_FRAIL_BLACK"] = "62.2.1";
        NPCID2["WORMWOOD"] = "62.3.0";
        NPCID2["FAMINE"] = "63.0.0";
        NPCID2["FAMINE_BLUE"] = "63.0.1";
        NPCID2["PESTILENCE"] = "64.0.0";
        NPCID2["PESTILENCE_GREY"] = "64.0.1";
        NPCID2["WAR"] = "65.0.0";
        NPCID2["WAR_GREY"] = "65.0.1";
        NPCID2["CONQUEST"] = "65.1.0";
        NPCID2["WAR_WITHOUT_HORSE"] = "65.10.0";
        NPCID2["WAR_WITHOUT_HORSE_GREY"] = "65.10.1";
        NPCID2["DEATH"] = "66.0.0";
        NPCID2["DEATH_BLACK"] = "66.0.1";
        NPCID2["DEATH_SCYTHE"] = "66.10.0";
        NPCID2["DEATH_SCYTHE_BLACK"] = "66.10.1";
        NPCID2["DEATH_HORSE"] = "66.20.0";
        NPCID2["DEATH_HORSE_BLACK"] = "66.20.1";
        NPCID2["DEATH_WITHOUT_HORSE"] = "66.30.0";
        NPCID2["DEATH_WITHOUT_HORSE_BLACK"] = "66.30.1";
        NPCID2["THE_DUKE_OF_FLIES"] = "67.0.0";
        NPCID2["THE_DUKE_OF_FLIES_GREEN"] = "67.0.1";
        NPCID2["THE_DUKE_OF_FLIES_ORANGE"] = "67.0.2";
        NPCID2["THE_HUSK"] = "67.1.0";
        NPCID2["THE_HUSK_BLACK"] = "67.1.1";
        NPCID2["THE_HUSK_RED"] = "67.1.2";
        NPCID2["PEEP"] = "68.0.0";
        NPCID2["PEEP_YELLOW"] = "68.0.1";
        NPCID2["PEEP_CYAN"] = "68.0.2";
        NPCID2["THE_BLOAT"] = "68.1.0";
        NPCID2["THE_BLOAT_GREEN"] = "68.1.1";
        NPCID2["PEEP_EYE"] = "68.10.0";
        NPCID2["PEEP_EYE_YELLOW"] = "68.10.1";
        NPCID2["PEEP_EYE_CYAN"] = "68.10.2";
        NPCID2["BLOAT_EYE"] = "68.11.0";
        NPCID2["BLOAT_EYE_GREEN"] = "68.11.1";
        NPCID2["LOKI"] = "69.0.0";
        NPCID2["LOKII"] = "69.1.0";
        NPCID2["FISTULA"] = "71.0.0";
        NPCID2["FISTULA_GREY"] = "71.0.1";
        NPCID2["TERATOMA"] = "71.1.0";
        NPCID2["FISTULA_MEDIUM"] = "72.0.0";
        NPCID2["FISTULA_MEDIUM_GREY"] = "72.0.1";
        NPCID2["TERATOMA_MEDIUM"] = "72.1.0";
        NPCID2["FISTULA_SMALL"] = "73.0.0";
        NPCID2["FISTULA_SMALL_GREY"] = "73.0.1";
        NPCID2["TERATOMA_SMALL"] = "73.1.0";
        NPCID2["BLASTOCYST"] = "74.0.0";
        NPCID2["BLASTOCYST_MEDIUM"] = "75.0.0";
        NPCID2["BLASTOCYST_SMALL"] = "76.0.0";
        NPCID2["EMBRYO"] = "77.0.0";
        NPCID2["MOMS_HEART"] = "78.0.0";
        NPCID2["IT_LIVES"] = "78.1.0";
        NPCID2["MOMS_GUTS"] = "78.10.0";
        NPCID2["GEMINI"] = "79.0.0";
        NPCID2["GEMINI_GREEN"] = "79.0.1";
        NPCID2["GEMINI_BLUE"] = "79.0.2";
        NPCID2["STEVEN"] = "79.1.0";
        NPCID2["THE_BLIGHTED_OVUM"] = "79.2.0";
        NPCID2["GEMINI_BABY"] = "79.10.0";
        NPCID2["GEMINI_BABY_GREEN"] = "79.10.1";
        NPCID2["GEMINI_BABY_BLUE"] = "79.10.2";
        NPCID2["STEVEN_BABY"] = "79.11.0";
        NPCID2["THE_BLIGHTED_OVUM_BABY"] = "79.12.0";
        NPCID2["UMBILICAL_CORD"] = "79.20.0";
        NPCID2["UMBILICAL_CORD_GREEN"] = "79.20.1";
        NPCID2["UMBILICAL_CORD_BLUE"] = "79.20.2";
        NPCID2["MOTER"] = "80.0.0";
        NPCID2["THE_FALLEN"] = "81.0.0";
        NPCID2["KRAMPUS"] = "81.1.0";
        NPCID2["HEADLESS_HORSEMAN"] = "82.0.0";
        NPCID2["HEADLESS_HORSEMAN_HEAD"] = "83.0.0";
        NPCID2["SATAN"] = "84.0.0";
        NPCID2["SATAN_STOMP"] = "84.10.0";
        NPCID2["SPIDER"] = "85.0.0";
        NPCID2["KEEPER"] = "86.0.0";
        NPCID2["GURGLE"] = "87.0.0";
        NPCID2["CRACKLE"] = "87.1.0";
        NPCID2["WALKING_BOIL"] = "88.0.0";
        NPCID2["WALKING_GUT"] = "88.1.0";
        NPCID2["WALKING_SACK"] = "88.2.0";
        NPCID2["BUTTLICKER"] = "89.0.0";
        NPCID2["HANGER"] = "90.0.0";
        NPCID2["SWARMER"] = "91.0.0";
        NPCID2["HEART"] = "92.0.0";
        NPCID2["HALF_HEART"] = "92.1.0";
        NPCID2["HALF_HEART_2"] = "92.1.1";
        NPCID2["MASK"] = "93.0.0";
        NPCID2["MASK_II"] = "93.1.0";
        NPCID2["BIG_SPIDER"] = "94.0.0";
        NPCID2["ETERNAL_FLY"] = "96.0.0";
        NPCID2["MASK_OF_INFAMY"] = "97.0.0";
        NPCID2["MASK_OF_INFAMY_BLACK"] = "97.0.1";
        NPCID2["HEART_OF_INFAMY"] = "98.0.0";
        NPCID2["HEART_OF_INFAMY_BLACK"] = "98.0.1";
        NPCID2["GURDY_JR"] = "99.0.0";
        NPCID2["GURDY_JR_BLUE"] = "99.0.1";
        NPCID2["GURDY_JR_YELLOW"] = "99.0.2";
        NPCID2["WIDOW"] = "100.0.0";
        NPCID2["WIDOW_BLACK"] = "100.0.1";
        NPCID2["WIDOW_PINK"] = "100.0.2";
        NPCID2["THE_WRETCHED"] = "100.1.0";
        NPCID2["DADDY_LONG_LEGS"] = "101.0.0";
        NPCID2["TRIACHNID"] = "101.1.0";
        NPCID2["ISAAC"] = "102.0.0";
        NPCID2["BLUE_BABY"] = "102.1.0";
        NPCID2["BLUE_BABY_HUSH"] = "102.2.0";
        NPCID2["STONE_EYE"] = "201.0.0";
        NPCID2["CONSTANT_STONE_SHOOTER_LEFT"] = "202.0.0";
        NPCID2["CONSTANT_STONE_SHOOTER_UP"] = "202.0.1";
        NPCID2["CONSTANT_STONE_SHOOTER_RIGHT"] = "202.0.2";
        NPCID2["CONSTANT_STONE_SHOOTER_DOWN"] = "202.0.3";
        NPCID2["CROSS_STONE_SHOOTER"] = "202.10.0";
        NPCID2["CROSS_STONE_SHOOTER_2"] = "202.10.1";
        NPCID2["CROSS_STONE_SHOOTER_ALWAYS_ON"] = "202.11.0";
        NPCID2["CROSS_STONE_SHOOTER_ALWAYS_ON_2"] = "202.11.1";
        NPCID2["BRIMSTONE_HEAD"] = "203.0.0";
        NPCID2["MOBILE_HOST"] = "204.0.0";
        NPCID2["NEST"] = "205.0.0";
        NPCID2["BABY_LONG_LEGS"] = "206.0.0";
        NPCID2["SMALL_BABY_LONG_LEGS"] = "206.1.0";
        NPCID2["CRAZY_LONG_LEGS"] = "207.0.0";
        NPCID2["SMALL_CRAZY_LONG_LEGS"] = "207.1.0";
        NPCID2["FATTY"] = "208.0.0";
        NPCID2["PALE_FATTY"] = "208.1.0";
        NPCID2["FLAMING_FATTY"] = "208.2.0";
        NPCID2["FAT_SACK"] = "209.0.0";
        NPCID2["BLUBBER"] = "210.0.0";
        NPCID2["HALF_SACK"] = "211.0.0";
        NPCID2["DEATHS_HEAD"] = "212.0.0";
        NPCID2["DANK_DEATHS_HEAD"] = "212.1.0";
        NPCID2["CURSED_DEATHS_HEAD"] = "212.2.0";
        NPCID2["BRIMSTONE_DEATHS_HEAD"] = "212.3.0";
        NPCID2["REDSKULL"] = "212.4.0";
        NPCID2["MOMS_HAND"] = "213.0.0";
        NPCID2["LEVEL_2_FLY"] = "214.0.0";
        NPCID2["LEVEL_2_SPIDER"] = "215.0.0";
        NPCID2["SWINGER"] = "216.0.0";
        NPCID2["SWINGER_HEAD"] = "216.1.0";
        NPCID2["SWINGER_NECK"] = "216.10.0";
        NPCID2["DIP"] = "217.0.0";
        NPCID2["CORN"] = "217.1.0";
        NPCID2["BROWNIE_CORN"] = "217.2.0";
        NPCID2["BIG_CORN"] = "217.3.0";
        NPCID2["WALL_HUGGER"] = "218.0.0";
        NPCID2["WIZOOB"] = "219.0.0";
        NPCID2["SQUIRT"] = "220.0.0";
        NPCID2["DANK_SQUIRT"] = "220.1.0";
        NPCID2["COD_WORM"] = "221.0.0";
        NPCID2["RING_FLY"] = "222.0.0";
        NPCID2["DINGA"] = "223.0.0";
        NPCID2["OOB"] = "224.0.0";
        NPCID2["BLACK_MAW"] = "225.0.0";
        NPCID2["SKINNY"] = "226.0.0";
        NPCID2["ROTTY"] = "226.1.0";
        NPCID2["CRISPY"] = "226.2.0";
        NPCID2["BONY"] = "227.0.0";
        NPCID2["HOLY_BONY"] = "227.1.0";
        NPCID2["HOMUNCULUS"] = "228.0.0";
        NPCID2["HOMUNCULUS_CORD"] = "228.10.0";
        NPCID2["TUMOR"] = "229.0.0";
        NPCID2["PLANETOID"] = "229.1.0";
        NPCID2["CAMILLO_JR"] = "230.0.0";
        NPCID2["NERVE_ENDING"] = "231.0.0";
        NPCID2["NERVE_ENDING_2"] = "231.1.0";
        NPCID2["ONE_TOOTH"] = "234.0.0";
        NPCID2["GAPING_MAW"] = "235.0.0";
        NPCID2["BROKEN_GAPING_MAW"] = "236.0.0";
        NPCID2["GURGLING"] = "237.0.0";
        NPCID2["GURGLING_BOSS"] = "237.1.0";
        NPCID2["GURGLING_BOSS_YELLOW"] = "237.1.1";
        NPCID2["GURGLING_BOSS_BLACK"] = "237.1.2";
        NPCID2["TURDLING"] = "237.2.0";
        NPCID2["SPLASHER"] = "238.0.0";
        NPCID2["GRUB"] = "239.0.0";
        NPCID2["CORPSE_EATER"] = "239.100.0";
        NPCID2["CARRION_RIDER"] = "239.101.0";
        NPCID2["WALL_CREEP"] = "240.0.0";
        NPCID2["SOY_CREEP"] = "240.1.0";
        NPCID2["RAG_CREEP"] = "240.2.0";
        NPCID2["TAINTED_SOY_CREEP"] = "240.3.0";
        NPCID2["RAGE_CREEP"] = "241.0.0";
        NPCID2["SPLIT_RAGE_CREEP"] = "241.1.0";
        NPCID2["BLIND_CREEP"] = "242.0.0";
        NPCID2["CONJOINED_SPITTY"] = "243.0.0";
        NPCID2["ROUND_WORM"] = "244.0.0";
        NPCID2["TUBE_WORM"] = "244.1.0";
        NPCID2["TAINTED_ROUND_WORM"] = "244.2.0";
        NPCID2["TAINTED_ROUND_WORM_BUTT"] = "244.2.1";
        NPCID2["TAINTED_TUBE_WORM"] = "244.3.0";
        NPCID2["POOP"] = "245.0.0";
        NPCID2["RAGLING"] = "246.0.0";
        NPCID2["RAG_MANS_RAGLING"] = "246.1.0";
        NPCID2["RAG_MANS_RAGLING_RED"] = "246.1.1";
        NPCID2["RAG_MANS_RAGLING_BLACK"] = "246.1.2";
        NPCID2["FLESH_MOBILE_HOST"] = "247.0.0";
        NPCID2["PSYCHIC_HORF"] = "248.0.0";
        NPCID2["FULL_FLY"] = "249.0.0";
        NPCID2["TICKING_SPIDER"] = "250.0.0";
        NPCID2["BEGOTTEN"] = "251.0.0";
        NPCID2["BEGOTTEN_CHAIN"] = "251.10.0";
        NPCID2["NULLS"] = "252.0.0";
        NPCID2["PSY_TUMOR"] = "253.0.0";
        NPCID2["FLOATING_KNIGHT"] = "254.0.0";
        NPCID2["NIGHT_CRAWLER"] = "255.0.0";
        NPCID2["DART_FLY"] = "256.0.0";
        NPCID2["CONJOINED_FATTY"] = "257.0.0";
        NPCID2["BLUE_CONJOINED_FATTY"] = "257.1.0";
        NPCID2["FAT_BAT"] = "258.0.0";
        NPCID2["IMP"] = "259.0.0";
        NPCID2["HAUNT"] = "260.0.0";
        NPCID2["HAUNT_BLACK"] = "260.0.1";
        NPCID2["HAUNT_PINK"] = "260.0.2";
        NPCID2["LIL_HAUNT"] = "260.10.0";
        NPCID2["DINGLE"] = "261.0.0";
        NPCID2["DINGLE_RED"] = "261.0.1";
        NPCID2["DINGLE_BLACK"] = "261.0.2";
        NPCID2["DANGLE"] = "261.1.0";
        NPCID2["MEGA_MAW"] = "262.0.0";
        NPCID2["MEGA_MAW_RED"] = "262.0.1";
        NPCID2["MEGA_MAW_BLACK"] = "262.0.2";
        NPCID2["THE_GATE"] = "263.0.0";
        NPCID2["THE_GATE_RED"] = "263.0.1";
        NPCID2["THE_GATE_BLACK"] = "263.0.2";
        NPCID2["MEGA_FATTY"] = "264.0.0";
        NPCID2["MEGA_FATTY_RED"] = "264.0.1";
        NPCID2["MEGA_FATTY_BROWN"] = "264.0.2";
        NPCID2["THE_CAGE"] = "265.0.0";
        NPCID2["THE_CAGE_GREEN"] = "265.0.1";
        NPCID2["THE_CAGE_PINK"] = "265.0.2";
        NPCID2["MAMA_GURDY"] = "266.0.0";
        NPCID2["MAMA_GURDY_LEFT_HAND"] = "266.1.0";
        NPCID2["MAMA_GURDY_RIGHT_HAND"] = "266.2.0";
        NPCID2["DARK_ONE"] = "267.0.0";
        NPCID2["THE_ADVERSARY"] = "268.0.0";
        NPCID2["POLYCEPHALUS"] = "269.0.0";
        NPCID2["POLYCEPHALUS_RED"] = "269.0.1";
        NPCID2["POLYCEPHALUS_PINK"] = "269.0.2";
        NPCID2["THE_PILE"] = "269.1.0";
        NPCID2["MR_FRED"] = "270.0.0";
        NPCID2["URIEL"] = "271.0.0";
        NPCID2["FALLEN_URIEL"] = "271.1.0";
        NPCID2["GABRIEL"] = "272.0.0";
        NPCID2["FALLEN_GABRIEL"] = "272.1.0";
        NPCID2["THE_LAMB"] = "273.0.0";
        NPCID2["LAMB_BODY"] = "273.10.0";
        NPCID2["MEGA_SATAN"] = "274.0.0";
        NPCID2["MEGA_SATANS_RIGHT_HAND"] = "274.1.0";
        NPCID2["MEGA_SATANS_LEFT_HAND"] = "274.2.0";
        NPCID2["MEGA_SATAN_2"] = "275.0.0";
        NPCID2["MEGA_SATAN_2_RIGHT_HAND"] = "275.1.0";
        NPCID2["MEGA_SATAN_2_LEFT_HAND"] = "275.2.0";
        NPCID2["ROUNDY"] = "276.0.0";
        NPCID2["BLACK_BONY"] = "277.0.0";
        NPCID2["BLACK_GLOBIN"] = "278.0.0";
        NPCID2["BLACK_GLOBINS_HEAD"] = "279.0.0";
        NPCID2["BLACK_GLOBINS_BODY"] = "280.0.0";
        NPCID2["SWARM"] = "281.0.0";
        NPCID2["MEGA_CLOTTY"] = "282.0.0";
        NPCID2["BONE_KNIGHT"] = "283.0.0";
        NPCID2["CYCLOPIA"] = "284.0.0";
        NPCID2["RED_GHOST"] = "285.0.0";
        NPCID2["FLESH_DEATHS_HEAD"] = "286.0.0";
        NPCID2["MOMS_DEAD_HAND"] = "287.0.0";
        NPCID2["DUKIE"] = "288.0.0";
        NPCID2["ULCER"] = "289.0.0";
        NPCID2["MEATBALL"] = "290.0.0";
        NPCID2["PITFALL"] = "291.0.0";
        NPCID2["SUCTION_PITFALL"] = "291.1.0";
        NPCID2["TELEPORT_PITFALL"] = "291.2.0";
        NPCID2["MOVABLE_TNT"] = "292.0.0";
        NPCID2["MOVABLE_TNT_MINE_CRAFTER"] = "292.1.0";
        NPCID2["ULTRA_GREED_COIN_SPINNER"] = "293.0.0";
        NPCID2["ULTRA_GREED_COIN_KEY"] = "293.1.0";
        NPCID2["ULTRA_GREED_COIN_BOMB"] = "293.2.0";
        NPCID2["ULTRA_GREED_COIN_HEART"] = "293.3.0";
        NPCID2["ULTRA_GREED_DOOR"] = "294.0.0";
        NPCID2["CORN_MINE"] = "295.0.0";
        NPCID2["CORN_MINE_BLACK"] = "295.0.1";
        NPCID2["HUSH_FLY"] = "296.0.0";
        NPCID2["BLUE_GAPER"] = "297.0.0";
        NPCID2["BLUE_BOIL"] = "298.0.0";
        NPCID2["GREED_GAPER"] = "299.0.0";
        NPCID2["MUSHROOM"] = "300.0.0";
        NPCID2["POISON_MIND"] = "301.0.0";
        NPCID2["STONEY"] = "302.0.0";
        NPCID2["CROSS_STONEY"] = "302.10.0";
        NPCID2["BLISTER"] = "303.0.0";
        NPCID2["THE_THING"] = "304.0.0";
        NPCID2["MINISTRO"] = "305.0.0";
        NPCID2["PORTAL"] = "306.0.0";
        NPCID2["LIL_PORTAL"] = "306.1.0";
        NPCID2["TAR_BOY"] = "307.0.0";
        NPCID2["TAR_BOY_MOUTH"] = "307.0.1";
        NPCID2["FISTULOID"] = "308.0.0";
        NPCID2["GUSH"] = "309.0.0";
        NPCID2["LEPER"] = "310.0.0";
        NPCID2["LEPER_STAGE_2"] = "310.0.1";
        NPCID2["LEPER_STAGE_3"] = "310.0.2";
        NPCID2["LEPER_STAGE_4"] = "310.0.3";
        NPCID2["LEPER_FLESH"] = "310.1.0";
        NPCID2["MR_MINE"] = "311.0.0";
        NPCID2["MR_MINE_NECK"] = "311.10.0";
        NPCID2["THE_STAIN"] = "401.0.0";
        NPCID2["THE_STAIN_GREY"] = "401.0.1";
        NPCID2["BROWNIE"] = "402.0.0";
        NPCID2["BROWNIE_BLACK"] = "402.0.1";
        NPCID2["THE_FORSAKEN"] = "403.0.0";
        NPCID2["THE_FORSAKEN_BLACK"] = "403.0.1";
        NPCID2["LITTLE_HORN"] = "404.0.0";
        NPCID2["LITTLE_HORN_ORANGE"] = "404.0.1";
        NPCID2["LITTLE_HORN_BLACK"] = "404.0.2";
        NPCID2["DARK_BALL"] = "404.1.0";
        NPCID2["DARK_BALL_ORANGE"] = "404.1.1";
        NPCID2["DARK_BALL_BLACK"] = "404.1.2";
        NPCID2["RAG_MAN"] = "405.0.0";
        NPCID2["RAG_MAN_RED"] = "405.0.1";
        NPCID2["RAG_MAN_BLACK"] = "405.0.2";
        NPCID2["RAG_MANS_HEAD"] = "405.1.0";
        NPCID2["RAG_MANS_HEAD_RED"] = "405.1.1";
        NPCID2["RAG_MANS_HEAD_BLACK"] = "405.1.2";
        NPCID2["ULTRA_GREED"] = "406.0.0";
        NPCID2["ULTRA_GREEDIER"] = "406.1.0";
        NPCID2["HUSH"] = "407.0.0";
        NPCID2["HUSH_SKINLESS"] = "408.0.0";
        NPCID2["RAG_MEGA"] = "409.0.0";
        NPCID2["PURPLE_BALL"] = "409.1.0";
        NPCID2["RAG_MEGA_REBIRTH_PILLAR"] = "409.2.0";
        NPCID2["SISTERS_VIS"] = "410.0.0";
        NPCID2["BIG_HORN"] = "411.0.0";
        NPCID2["SMALL_HOLE"] = "411.1.0";
        NPCID2["BIG_HOLE"] = "411.2.0";
        NPCID2["DELIRIUM"] = "412.0.0";
        NPCID2["THE_MATRIARCH"] = "413.0.0";
        NPCID2["BLOOD_PUPPY_SMALL"] = "802.0.0";
        NPCID2["BLOOD_PUPPY_LARGE"] = "802.1.0";
        NPCID2["BLIND_BAT"] = "803.0.0";
        NPCID2["QUAKE_GRIMACE_LEFT"] = "804.0.0";
        NPCID2["QUAKE_GRIMACE_UP"] = "804.0.1";
        NPCID2["QUAKE_GRIMACE_RIGHT"] = "804.0.2";
        NPCID2["QUAKE_GRIMACE_DOWN"] = "804.0.3";
        NPCID2["BISHOP"] = "805.0.0";
        NPCID2["BUBBLES"] = "806.0.0";
        NPCID2["WRAITH"] = "807.0.0";
        NPCID2["WILLO"] = "808.0.0";
        NPCID2["BOMB_GRIMACE"] = "809.0.0";
        NPCID2["SMALL_LEECH"] = "810.0.0";
        NPCID2["DEEP_GAPER"] = "811.0.0";
        NPCID2["DEEP_GAPER_2"] = "811.0.1";
        NPCID2["DEEP_GAPER_3"] = "811.0.2";
        NPCID2["DEEP_GAPER_4"] = "811.0.3";
        NPCID2["DEEP_GAPER_5"] = "811.0.4";
        NPCID2["DEEP_GAPER_6"] = "811.0.5";
        NPCID2["DEEP_GAPER_7"] = "811.0.6";
        NPCID2["SUB_HORF"] = "812.0.0";
        NPCID2["TAINTED_SUB_HORF"] = "812.1.0";
        NPCID2["BLURB"] = "813.0.0";
        NPCID2["STRIDER"] = "814.0.0";
        NPCID2["FISSURE"] = "815.0.0";
        NPCID2["POLTY"] = "816.0.0";
        NPCID2["KINETI"] = "816.1.0";
        NPCID2["PREY"] = "817.0.0";
        NPCID2["MULLIGHOUL"] = "817.1.0";
        NPCID2["ROCK_SPIDER"] = "818.0.0";
        NPCID2["ROCK_SPIDER_2"] = "818.0.1";
        NPCID2["ROCK_SPIDER_3"] = "818.0.2";
        NPCID2["ROCK_SPIDER_4"] = "818.0.3";
        NPCID2["TINTED_ROCK_SPIDER"] = "818.1.0";
        NPCID2["TINTED_ROCK_SPIDER_2"] = "818.1.1";
        NPCID2["TINTED_ROCK_SPIDER_3"] = "818.1.2";
        NPCID2["TINTED_ROCK_SPIDER_4"] = "818.1.3";
        NPCID2["COAL_SPIDER"] = "818.2.0";
        NPCID2["COAL_SPIDER_2"] = "818.2.1";
        NPCID2["COAL_SPIDER_3"] = "818.2.2";
        NPCID2["COAL_SPIDER_4"] = "818.2.3";
        NPCID2["FLY_BOMB"] = "819.0.0";
        NPCID2["ETERNAL_FLY_BOMB"] = "819.1.0";
        NPCID2["DANNY"] = "820.0.0";
        NPCID2["COAL_BOY"] = "820.1.0";
        NPCID2["BLASTER"] = "821.0.0";
        NPCID2["BOUNCER"] = "822.0.0";
        NPCID2["QUAKEY"] = "823.0.0";
        NPCID2["GYRO"] = "824.0.0";
        NPCID2["GRILLED_GYRO"] = "824.1.0";
        NPCID2["FIRE_WORM"] = "825.0.0";
        NPCID2["HARDY"] = "826.0.0";
        NPCID2["FACELESS"] = "827.0.0";
        NPCID2["TAINTED_FACELESS"] = "827.1.0";
        NPCID2["NECRO"] = "828.0.0";
        NPCID2["MOLE"] = "829.0.0";
        NPCID2["TAINTED_MOLE"] = "829.1.0";
        NPCID2["BIG_BONY"] = "830.0.0";
        NPCID2["BIG_BONE"] = "830.10.0";
        NPCID2["GUTTED_FATTY"] = "831.0.0";
        NPCID2["GUTTED_FATTY_EYE"] = "831.10.0";
        NPCID2["FESTERING_GUTS"] = "831.20.0";
        NPCID2["EXORCIST"] = "832.0.0";
        NPCID2["FANATIC"] = "832.1.0";
        NPCID2["CANDLER"] = "833.0.0";
        NPCID2["WHIPPER"] = "834.0.0";
        NPCID2["SNAPPER"] = "834.1.0";
        NPCID2["FLAGELLANT"] = "834.2.0";
        NPCID2["PEEPING_FATTY"] = "835.0.0";
        NPCID2["PEEPING_FATTY_EYE"] = "835.10.0";
        NPCID2["VIS_VERSA"] = "836.0.0";
        NPCID2["HENRY"] = "837.0.0";
        NPCID2["LEVEL_2_WILLO"] = "838.0.0";
        NPCID2["STRIFER"] = "839.0.0";
        NPCID2["PON"] = "840.0.0";
        NPCID2["REVENANT"] = "841.0.0";
        NPCID2["QUAD_REVENANT"] = "841.1.0";
        NPCID2["NIGHTWATCH"] = "842.0.0";
        NPCID2["CANARY"] = "843.0.0";
        NPCID2["FOREIGNER"] = "843.1.0";
        NPCID2["BOMBGAGGER"] = "844.0.0";
        NPCID2["LEVEL_2_GAPER"] = "850.0.0";
        NPCID2["LEVEL_2_HORF"] = "850.1.0";
        NPCID2["LEVEL_2_GUSHER"] = "850.2.0";
        NPCID2["TWITCHY"] = "851.0.0";
        NPCID2["SPIKEBALL"] = "852.0.0";
        NPCID2["SMALL_MAGGOT"] = "853.0.0";
        NPCID2["ADULT_LEECH"] = "854.0.0";
        NPCID2["LEVEL_2_CHARGER"] = "855.0.0";
        NPCID2["ELLEECH"] = "855.1.0";
        NPCID2["GASBAG"] = "856.0.0";
        NPCID2["COHORT"] = "857.0.0";
        NPCID2["VESSEL"] = "858.0.0";
        NPCID2["FLOAST"] = "859.0.0";
        NPCID2["UNBORN"] = "860.0.0";
        NPCID2["PUSTULE"] = "861.0.0";
        NPCID2["CYST"] = "862.0.0";
        NPCID2["MORNINGSTAR"] = "863.0.0";
        NPCID2["MORNINGSTAR_2"] = "863.0.1";
        NPCID2["MORNINGSTAR_3"] = "863.0.2";
        NPCID2["MOCKULUS"] = "864.0.0";
        NPCID2["EVIS"] = "865.0.0";
        NPCID2["EVIS_GUTS"] = "865.10.0";
        NPCID2["DARK_ESAU"] = "866.0.0";
        NPCID2["DARKER_ESAU"] = "866.0.1";
        NPCID2["DARK_ESAUS_PIT"] = "866.1.0";
        NPCID2["MOTHERS_SHADOW"] = "867.0.0";
        NPCID2["ARMY_FLY"] = "868.0.0";
        NPCID2["MIGRAINE"] = "869.0.0";
        NPCID2["DRIP"] = "870.0.0";
        NPCID2["SPLURT"] = "871.0.0";
        NPCID2["CLOGGY"] = "872.0.0";
        NPCID2["FLY_TRAP"] = "873.0.0";
        NPCID2["GAS_DWARF"] = "874.0.0";
        NPCID2["POOT_MINE"] = "875.0.0";
        NPCID2["DUMP"] = "876.0.0";
        NPCID2["DUMP_HEAD"] = "876.1.0";
        NPCID2["GRUDGE"] = "877.0.0";
        NPCID2["BUTT_SLICKER"] = "878.0.0";
        NPCID2["BLOATY"] = "879.0.0";
        NPCID2["FLESH_MAIDEN"] = "880.0.0";
        NPCID2["NEEDLE"] = "881.0.0";
        NPCID2["PASTY"] = "881.1.0";
        NPCID2["DUST"] = "882.0.0";
        NPCID2["BABY_BEGOTTEN"] = "883.0.0";
        NPCID2["SWARM_SPIDER"] = "884.0.0";
        NPCID2["CULTIST"] = "885.0.0";
        NPCID2["BLOOD_CULTIST"] = "885.1.0";
        NPCID2["BONE_TRAP"] = "885.10.0";
        NPCID2["VIS_FATTY"] = "886.0.0";
        NPCID2["FETAL_DEMON"] = "886.1.0";
        NPCID2["DUSTY_DEATHS_HEAD"] = "887.0.0";
        NPCID2["SHADY"] = "888.0.0";
        NPCID2["CLICKETY_CLACK"] = "889.0.0";
        NPCID2["MAZE_ROAMER"] = "890.0.0";
        NPCID2["MAZE_ROAMER_2"] = "890.0.1";
        NPCID2["GOAT"] = "891.0.0";
        NPCID2["BLACK_GOAT"] = "891.1.0";
        NPCID2["POOFER"] = "892.0.0";
        NPCID2["BALL_AND_CHAIN"] = "893.0.0";
        NPCID2["REAP_CREEP"] = "900.0.0";
        NPCID2["LIL_BLUB"] = "901.0.0";
        NPCID2["RAINMAKER"] = "902.0.0";
        NPCID2["THE_VISAGE"] = "903.0.0";
        NPCID2["VISAGE_MASK"] = "903.1.0";
        NPCID2["VISAGE_CHAIN"] = "903.10.0";
        NPCID2["VISAGE_PLASMA"] = "903.20.0";
        NPCID2["SIREN"] = "904.0.0";
        NPCID2["SIRENS_SKULL"] = "904.1.0";
        NPCID2["SIREN_HELPER_PROJECTILE"] = "904.10.0";
        NPCID2["THE_HERETIC"] = "905.0.0";
        NPCID2["HORNFEL"] = "906.0.0";
        NPCID2["HORNFEL_DECOY"] = "906.1.0";
        NPCID2["GREAT_GIDEON"] = "907.0.0";
        NPCID2["GREAT_GIDEON_DEFEATED"] = "907.0.1";
        NPCID2["BABY_PLUM"] = "908.0.0";
        NPCID2["THE_SCOURGE"] = "909.0.0";
        NPCID2["THE_SCOURGE_CHAIN"] = "909.10.0";
        NPCID2["CHIMERA"] = "910.0.0";
        NPCID2["CHIMERA_BODY"] = "910.1.0";
        NPCID2["CHIMERA_HEAD"] = "910.2.0";
        NPCID2["ROTGUT"] = "911.0.0";
        NPCID2["ROTGUT_MAGGOT"] = "911.1.0";
        NPCID2["ROTGUT_HEART"] = "911.2.0";
        NPCID2["MOTHER_PHASE_1"] = "912.0.0";
        NPCID2["MOTHER_PHASE_2"] = "912.0.1";
        NPCID2["MOTHER_LEFT_ARM"] = "912.0.2";
        NPCID2["MOTHER_RIGHT_ARM"] = "912.0.3";
        NPCID2["MOTHER_DISAPPEAR"] = "912.0.4";
        NPCID2["MOTHER_2"] = "912.10.0";
        NPCID2["DEAD_ISAAC"] = "912.20.0";
        NPCID2["MOTHER_WORM"] = "912.30.0";
        NPCID2["MOTHER_BALL"] = "912.100.0";
        NPCID2["MOTHER_BALL_MEDIUM"] = "912.100.1";
        NPCID2["MOTHER_BALL_SMALL"] = "912.100.2";
        NPCID2["MIN_MIN"] = "913.0.0";
        NPCID2["CLOG"] = "914.0.0";
        NPCID2["SINGE"] = "915.0.0";
        NPCID2["SINGES_BALL"] = "915.1.0";
        NPCID2["BUMBINO"] = "916.0.0";
        NPCID2["COLOSTOMIA"] = "917.0.0";
        NPCID2["TURDLET"] = "918.0.0";
        NPCID2["RAGLICH"] = "919.0.0";
        NPCID2["RAGLICH_ARM"] = "919.1.0";
        NPCID2["HORNY_BOYS"] = "920.0.0";
        NPCID2["CLUTCH"] = "921.0.0";
        NPCID2["CLUTCH_ORBITAL"] = "921.1.0";
        NPCID2["DOGMA"] = "950.0.0";
        NPCID2["DOGMAS_TV"] = "950.1.0";
        NPCID2["DOGMA_ANGEL"] = "950.2.0";
        NPCID2["DOGMA_ANGEL_BABY"] = "950.10.0";
        NPCID2["THE_BEAST"] = "951.0.0";
        NPCID2["STALACTITE"] = "951.1.0";
        NPCID2["BEAST_ROCK_PROJECTILE"] = "951.2.0";
        NPCID2["BEAST_SOUL"] = "951.3.0";
        NPCID2["ULTRA_FAMINE"] = "951.10.0";
        NPCID2["ULTRA_FAMINE_FLY"] = "951.11.0";
        NPCID2["ULTRA_PESTILENCE"] = "951.20.0";
        NPCID2["ULTRA_PESTILENCE_FLY"] = "951.21.0";
        NPCID2["ULTRA_PESTILENCE_MAGGOT"] = "951.22.0";
        NPCID2["ULTRA_PESTILENCE_FLY_BALL"] = "951.23.0";
        NPCID2["ULTRA_WAR"] = "951.30.0";
        NPCID2["ULTRA_WAR_BOMB"] = "951.31.0";
        NPCID2["ULTRA_DEATH"] = "951.40.0";
        NPCID2["ULTRA_DEATH_SCYTHE"] = "951.41.0";
        NPCID2["ULTRA_DEATH_HEAD"] = "951.42.0";
        NPCID2["BACKGROUND_BEAST"] = "951.100.0";
        NPCID2["BACKGROUND_FAMINE"] = "951.101.0";
        NPCID2["BACKGROUND_PESTILENCE"] = "951.102.0";
        NPCID2["BACKGROUND_WAR"] = "951.103.0";
        NPCID2["BACKGROUND_DEATH"] = "951.104.0";
        NPCID2["GENERIC_PROP"] = "960.0.0";
        NPCID2["MOMS_DRESSER"] = "960.1.0";
        NPCID2["MOMS_VANITY"] = "960.2.0";
        NPCID2["COUCH"] = "960.3.0";
        NPCID2["TV"] = "960.4.0";
        NPCID2["FROZEN_ENEMY"] = "963.0.0";
        NPCID2["DUMMY"] = "964.0.0";
        NPCID2["MINECART"] = "965.0.0";
        NPCID2["SIREN_HELPER"] = "966.0.0";
        NPCID2["HORNFEL_DOOR"] = "967.0.0";
      })(NPCID || (exports2.NPCID = NPCID = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/NPCState.js
  var require_NPCState = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/NPCState.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NPCState = void 0;
      var NPCState;
      (function(NPCState2) {
        NPCState2[NPCState2["INIT"] = 0] = "INIT";
        NPCState2[NPCState2["APPEAR"] = 1] = "APPEAR";
        NPCState2[NPCState2["APPEAR_CUSTOM"] = 2] = "APPEAR_CUSTOM";
        NPCState2[NPCState2["IDLE"] = 3] = "IDLE";
        NPCState2[NPCState2["MOVE"] = 4] = "MOVE";
        NPCState2[NPCState2["SUICIDE"] = 5] = "SUICIDE";
        NPCState2[NPCState2["JUMP"] = 6] = "JUMP";
        NPCState2[NPCState2["STOMP"] = 7] = "STOMP";
        NPCState2[NPCState2["ATTACK"] = 8] = "ATTACK";
        NPCState2[NPCState2["ATTACK_2"] = 9] = "ATTACK_2";
        NPCState2[NPCState2["ATTACK_3"] = 10] = "ATTACK_3";
        NPCState2[NPCState2["ATTACK_4"] = 11] = "ATTACK_4";
        NPCState2[NPCState2["ATTACK_5"] = 12] = "ATTACK_5";
        NPCState2[NPCState2["SUMMON"] = 13] = "SUMMON";
        NPCState2[NPCState2["SUMMON_2"] = 14] = "SUMMON_2";
        NPCState2[NPCState2["SUMMON_3"] = 15] = "SUMMON_3";
        NPCState2[NPCState2["SPECIAL"] = 16] = "SPECIAL";
        NPCState2[NPCState2["UNIQUE_DEATH"] = 17] = "UNIQUE_DEATH";
        NPCState2[NPCState2["DEATH"] = 18] = "DEATH";
      })(NPCState || (exports2.NPCState = NPCState = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/NullItemID.js
  var require_NullItemID = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/NullItemID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NullItemID = void 0;
      var NullItemID;
      (function(NullItemID2) {
        NullItemID2[NullItemID2["NULL"] = -1] = "NULL";
        NullItemID2[NullItemID2["EXPLOSIVE_DIARRHEA"] = 0] = "EXPLOSIVE_DIARRHEA";
        NullItemID2[NullItemID2["PUBERTY"] = 1] = "PUBERTY";
        NullItemID2[NullItemID2["I_FOUND_PILLS"] = 2] = "I_FOUND_PILLS";
        NullItemID2[NullItemID2["LORD_OF_THE_FLIES"] = 3] = "LORD_OF_THE_FLIES";
        NullItemID2[NullItemID2["STATUE"] = 4] = "STATUE";
        NullItemID2[NullItemID2["GUPPY"] = 5] = "GUPPY";
        NullItemID2[NullItemID2["WIZARD"] = 6] = "WIZARD";
        NullItemID2[NullItemID2["MAGDALENE"] = 7] = "MAGDALENE";
        NullItemID2[NullItemID2["CAIN"] = 8] = "CAIN";
        NullItemID2[NullItemID2["JUDAS"] = 9] = "JUDAS";
        NullItemID2[NullItemID2["EVE"] = 10] = "EVE";
        NullItemID2[NullItemID2["AZAZEL"] = 11] = "AZAZEL";
        NullItemID2[NullItemID2["EDEN"] = 12] = "EDEN";
        NullItemID2[NullItemID2["SAMSON"] = 13] = "SAMSON";
        NullItemID2[NullItemID2["BLINDFOLD"] = 14] = "BLINDFOLD";
        NullItemID2[NullItemID2["BLANK_FACE"] = 15] = "BLANK_FACE";
        NullItemID2[NullItemID2["CHRISTMAS"] = 16] = "CHRISTMAS";
        NullItemID2[NullItemID2["PURITY_GLOW"] = 17] = "PURITY_GLOW";
        NullItemID2[NullItemID2["EMPTY_VESSEL"] = 18] = "EMPTY_VESSEL";
        NullItemID2[NullItemID2["MAW_MARK"] = 19] = "MAW_MARK";
        NullItemID2[NullItemID2["MUSHROOM"] = 20] = "MUSHROOM";
        NullItemID2[NullItemID2["ANGEL"] = 21] = "ANGEL";
        NullItemID2[NullItemID2["BOB"] = 22] = "BOB";
        NullItemID2[NullItemID2["DRUGS"] = 23] = "DRUGS";
        NullItemID2[NullItemID2["MOM"] = 24] = "MOM";
        NullItemID2[NullItemID2["BABY"] = 25] = "BABY";
        NullItemID2[NullItemID2["EVIL_ANGEL"] = 26] = "EVIL_ANGEL";
        NullItemID2[NullItemID2["POOP"] = 27] = "POOP";
        NullItemID2[NullItemID2["RELAX"] = 28] = "RELAX";
        NullItemID2[NullItemID2["OVERDOSE"] = 29] = "OVERDOSE";
        NullItemID2[NullItemID2["BOOMERANG"] = 30] = "BOOMERANG";
        NullItemID2[NullItemID2["MEGA_BLAST"] = 31] = "MEGA_BLAST";
        NullItemID2[NullItemID2["LAZARUS"] = 32] = "LAZARUS";
        NullItemID2[NullItemID2["LAZARUS_2"] = 33] = "LAZARUS_2";
        NullItemID2[NullItemID2["LILITH"] = 34] = "LILITH";
        NullItemID2[NullItemID2["IWATA"] = 35] = "IWATA";
        NullItemID2[NullItemID2["APOLLYON"] = 36] = "APOLLYON";
        NullItemID2[NullItemID2["BOOKWORM"] = 37] = "BOOKWORM";
        NullItemID2[NullItemID2["ADULTHOOD"] = 38] = "ADULTHOOD";
        NullItemID2[NullItemID2["SPIDER_BABY"] = 39] = "SPIDER_BABY";
        NullItemID2[NullItemID2["BATWING_WINGS"] = 40] = "BATWING_WINGS";
        NullItemID2[NullItemID2["HUGE_GROWTH"] = 41] = "HUGE_GROWTH";
        NullItemID2[NullItemID2["ERA_WALK"] = 42] = "ERA_WALK";
        NullItemID2[NullItemID2["SACRIFICIAL_ALTAR"] = 43] = "SACRIFICIAL_ALTAR";
        NullItemID2[NullItemID2["FORGOTTEN"] = 44] = "FORGOTTEN";
        NullItemID2[NullItemID2["BRIMSTONE_2"] = 45] = "BRIMSTONE_2";
        NullItemID2[NullItemID2["HOLY_CARD"] = 46] = "HOLY_CARD";
        NullItemID2[NullItemID2["KEEPER"] = 47] = "KEEPER";
        NullItemID2[NullItemID2["CAMO_BOOST"] = 48] = "CAMO_BOOST";
        NullItemID2[NullItemID2["LAZARUS_BOOST"] = 49] = "LAZARUS_BOOST";
        NullItemID2[NullItemID2["SPIN_TO_WIN"] = 50] = "SPIN_TO_WIN";
        NullItemID2[NullItemID2["BETHANY"] = 51] = "BETHANY";
        NullItemID2[NullItemID2["JACOB"] = 52] = "JACOB";
        NullItemID2[NullItemID2["ESAU"] = 53] = "ESAU";
        NullItemID2[NullItemID2["BLOOD_OATH"] = 54] = "BLOOD_OATH";
        NullItemID2[NullItemID2["INTRUDER"] = 55] = "INTRUDER";
        NullItemID2[NullItemID2["SOL"] = 56] = "SOL";
        NullItemID2[NullItemID2["IT_HURTS"] = 57] = "IT_HURTS";
        NullItemID2[NullItemID2["MARS"] = 58] = "MARS";
        NullItemID2[NullItemID2["TOOTH_AND_NAIL"] = 59] = "TOOTH_AND_NAIL";
        NullItemID2[NullItemID2["REVERSE_MAGICIAN"] = 60] = "REVERSE_MAGICIAN";
        NullItemID2[NullItemID2["REVERSE_HIGH_PRIESTESS"] = 61] = "REVERSE_HIGH_PRIESTESS";
        NullItemID2[NullItemID2["REVERSE_EMPRESS"] = 62] = "REVERSE_EMPRESS";
        NullItemID2[NullItemID2["REVERSE_CHARIOT"] = 63] = "REVERSE_CHARIOT";
        NullItemID2[NullItemID2["REVERSE_STRENGTH"] = 64] = "REVERSE_STRENGTH";
        NullItemID2[NullItemID2["REVERSE_HANGED_MAN"] = 65] = "REVERSE_HANGED_MAN";
        NullItemID2[NullItemID2["REVERSE_SUN"] = 66] = "REVERSE_SUN";
        NullItemID2[NullItemID2["REVERSE_DEVIL"] = 67] = "REVERSE_DEVIL";
        NullItemID2[NullItemID2["REVERSE_CHARIOT_ALT"] = 68] = "REVERSE_CHARIOT_ALT";
        NullItemID2[NullItemID2["REVERSE_TEMPERANCE"] = 69] = "REVERSE_TEMPERANCE";
        NullItemID2[NullItemID2["REVERSE_STARS"] = 70] = "REVERSE_STARS";
        NullItemID2[NullItemID2["WAVY_CAP_1"] = 71] = "WAVY_CAP_1";
        NullItemID2[NullItemID2["WAVY_CAP_2"] = 72] = "WAVY_CAP_2";
        NullItemID2[NullItemID2["WAVY_CAP_3"] = 73] = "WAVY_CAP_3";
        NullItemID2[NullItemID2["LUNA"] = 74] = "LUNA";
        NullItemID2[NullItemID2["JUPITER_BODY"] = 75] = "JUPITER_BODY";
        NullItemID2[NullItemID2["JUPITER_BODY_ANGEL"] = 76] = "JUPITER_BODY_ANGEL";
        NullItemID2[NullItemID2["JUPITER_BODY_PONY"] = 77] = "JUPITER_BODY_PONY";
        NullItemID2[NullItemID2["JUPITER_BODY_WHITE_PONY"] = 78] = "JUPITER_BODY_WHITE_PONY";
        NullItemID2[NullItemID2["ISAAC_B"] = 79] = "ISAAC_B";
        NullItemID2[NullItemID2["MAGDALENE_B"] = 80] = "MAGDALENE_B";
        NullItemID2[NullItemID2["CAIN_B"] = 81] = "CAIN_B";
        NullItemID2[NullItemID2["JUDAS_B"] = 82] = "JUDAS_B";
        NullItemID2[NullItemID2["BLUE_BABY_B"] = 83] = "BLUE_BABY_B";
        NullItemID2[NullItemID2["EVE_B"] = 84] = "EVE_B";
        NullItemID2[NullItemID2["SAMSON_B"] = 85] = "SAMSON_B";
        NullItemID2[NullItemID2["AZAZEL_B"] = 86] = "AZAZEL_B";
        NullItemID2[NullItemID2["LAZARUS_B"] = 87] = "LAZARUS_B";
        NullItemID2[NullItemID2["EDEN_B"] = 88] = "EDEN_B";
        NullItemID2[NullItemID2["LOST_B"] = 89] = "LOST_B";
        NullItemID2[NullItemID2["LILITH_B"] = 90] = "LILITH_B";
        NullItemID2[NullItemID2["KEEPER_B"] = 91] = "KEEPER_B";
        NullItemID2[NullItemID2["APOLLYON_B"] = 92] = "APOLLYON_B";
        NullItemID2[NullItemID2["FORGOTTEN_B"] = 93] = "FORGOTTEN_B";
        NullItemID2[NullItemID2["BETHANY_B"] = 94] = "BETHANY_B";
        NullItemID2[NullItemID2["JACOB_B"] = 95] = "JACOB_B";
        NullItemID2[NullItemID2["AZAZELS_RAGE_1"] = 96] = "AZAZELS_RAGE_1";
        NullItemID2[NullItemID2["AZAZELS_RAGE_2"] = 97] = "AZAZELS_RAGE_2";
        NullItemID2[NullItemID2["AZAZELS_RAGE_3"] = 98] = "AZAZELS_RAGE_3";
        NullItemID2[NullItemID2["AZAZELS_RAGE_4"] = 99] = "AZAZELS_RAGE_4";
        NullItemID2[NullItemID2["ESAU_JR"] = 100] = "ESAU_JR";
        NullItemID2[NullItemID2["SPIRIT_SHACKLES_SOUL"] = 101] = "SPIRIT_SHACKLES_SOUL";
        NullItemID2[NullItemID2["SPIRIT_SHACKLES_DISABLED"] = 102] = "SPIRIT_SHACKLES_DISABLED";
        NullItemID2[NullItemID2["BERSERK_SAMSON"] = 103] = "BERSERK_SAMSON";
        NullItemID2[NullItemID2["LAZARUS_2_B"] = 104] = "LAZARUS_2_B";
        NullItemID2[NullItemID2["SOUL_B"] = 105] = "SOUL_B";
        NullItemID2[NullItemID2["FORGOTTEN_BOMB"] = 106] = "FORGOTTEN_BOMB";
        NullItemID2[NullItemID2["EXTRA_BIG_FAN"] = 107] = "EXTRA_BIG_FAN";
        NullItemID2[NullItemID2["JACOB_2_B"] = 108] = "JACOB_2_B";
        NullItemID2[NullItemID2["JACOBS_CURSE"] = 109] = "JACOBS_CURSE";
        NullItemID2[NullItemID2["BLOODY_BABYLON"] = 110] = "BLOODY_BABYLON";
        NullItemID2[NullItemID2["DARK_ARTS"] = 111] = "DARK_ARTS";
        NullItemID2[NullItemID2["LOST_CURSE"] = 112] = "LOST_CURSE";
        NullItemID2[NullItemID2["LAZARUS_SOUL_REVIVE"] = 113] = "LAZARUS_SOUL_REVIVE";
        NullItemID2[NullItemID2["SOUL_MAGDALENE"] = 114] = "SOUL_MAGDALENE";
        NullItemID2[NullItemID2["SOUL_BLUE_BABY"] = 115] = "SOUL_BLUE_BABY";
        NullItemID2[NullItemID2["MIRROR_DEATH"] = 116] = "MIRROR_DEATH";
        NullItemID2[NullItemID2["HEMOPTYSIS"] = 117] = "HEMOPTYSIS";
        NullItemID2[NullItemID2["I_FOUND_HORSE_PILLS"] = 118] = "I_FOUND_HORSE_PILLS";
        NullItemID2[NullItemID2["HORSE_PUBERTY"] = 119] = "HORSE_PUBERTY";
        NullItemID2[NullItemID2["SOUL_FORGOTTEN"] = 120] = "SOUL_FORGOTTEN";
        NullItemID2[NullItemID2["SOUL_JACOB"] = 121] = "SOUL_JACOB";
        NullItemID2[NullItemID2["BETHANY_B_BIRTHRIGHT"] = 122] = "BETHANY_B_BIRTHRIGHT";
        NullItemID2[NullItemID2["JUDAS_BIRTHRIGHT"] = 123] = "JUDAS_BIRTHRIGHT";
        NullItemID2[NullItemID2["JUDAS_BIRTHRIGHT_TIMED"] = 124] = "JUDAS_BIRTHRIGHT_TIMED";
        NullItemID2[NullItemID2["DOUBLE_GUPPYS_EYE"] = 125] = "DOUBLE_GUPPYS_EYE";
        NullItemID2[NullItemID2["DOUBLE_GLASS_EYE"] = 126] = "DOUBLE_GLASS_EYE";
        NullItemID2[NullItemID2["HEMOPTYSIS_BOOST"] = 127] = "HEMOPTYSIS_BOOST";
        NullItemID2[NullItemID2["SOUL_JUDAS"] = 128] = "SOUL_JUDAS";
        NullItemID2[NullItemID2["JUDAS_BIRTHRIGHT_STAGE"] = 129] = "JUDAS_BIRTHRIGHT_STAGE";
        NullItemID2[NullItemID2["JUDAS_BIRTHRIGHT_PERMANENT"] = 130] = "JUDAS_BIRTHRIGHT_PERMANENT";
        NullItemID2[NullItemID2["ESAU_JR_FAMILIAR"] = 131] = "ESAU_JR_FAMILIAR";
      })(NullItemID || (exports2.NullItemID = NullItemID = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PickupPrice.js
  var require_PickupPrice = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PickupPrice.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PickupPrice = void 0;
      var PickupPrice;
      (function(PickupPrice2) {
        PickupPrice2[PickupPrice2["NULL"] = 0] = "NULL";
        PickupPrice2[PickupPrice2["ONE_HEART"] = -1] = "ONE_HEART";
        PickupPrice2[PickupPrice2["TWO_HEARTS"] = -2] = "TWO_HEARTS";
        PickupPrice2[PickupPrice2["THREE_SOUL_HEARTS"] = -3] = "THREE_SOUL_HEARTS";
        PickupPrice2[PickupPrice2["ONE_HEART_AND_TWO_SOUL_HEARTS"] = -4] = "ONE_HEART_AND_TWO_SOUL_HEARTS";
        PickupPrice2[PickupPrice2["SPIKES"] = -5] = "SPIKES";
        PickupPrice2[PickupPrice2["YOUR_SOUL"] = -6] = "YOUR_SOUL";
        PickupPrice2[PickupPrice2["ONE_SOUL_HEART"] = -7] = "ONE_SOUL_HEART";
        PickupPrice2[PickupPrice2["TWO_SOUL_HEARTS"] = -8] = "TWO_SOUL_HEARTS";
        PickupPrice2[PickupPrice2["ONE_HEART_AND_ONE_SOUL_HEART"] = -9] = "ONE_HEART_AND_ONE_SOUL_HEART";
        PickupPrice2[PickupPrice2["FREE"] = -1e3] = "FREE";
      })(PickupPrice || (exports2.PickupPrice = PickupPrice = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PillEffect.js
  var require_PillEffect = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PillEffect.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PillEffect = void 0;
      var PillEffect;
      (function(PillEffect2) {
        PillEffect2[PillEffect2["BAD_GAS"] = 0] = "BAD_GAS";
        PillEffect2[PillEffect2["BAD_TRIP"] = 1] = "BAD_TRIP";
        PillEffect2[PillEffect2["BALLS_OF_STEEL"] = 2] = "BALLS_OF_STEEL";
        PillEffect2[PillEffect2["BOMBS_ARE_KEYS"] = 3] = "BOMBS_ARE_KEYS";
        PillEffect2[PillEffect2["EXPLOSIVE_DIARRHEA"] = 4] = "EXPLOSIVE_DIARRHEA";
        PillEffect2[PillEffect2["FULL_HEALTH"] = 5] = "FULL_HEALTH";
        PillEffect2[PillEffect2["HEALTH_DOWN"] = 6] = "HEALTH_DOWN";
        PillEffect2[PillEffect2["HEALTH_UP"] = 7] = "HEALTH_UP";
        PillEffect2[PillEffect2["I_FOUND_PILLS"] = 8] = "I_FOUND_PILLS";
        PillEffect2[PillEffect2["PUBERTY"] = 9] = "PUBERTY";
        PillEffect2[PillEffect2["PRETTY_FLY"] = 10] = "PRETTY_FLY";
        PillEffect2[PillEffect2["RANGE_DOWN"] = 11] = "RANGE_DOWN";
        PillEffect2[PillEffect2["RANGE_UP"] = 12] = "RANGE_UP";
        PillEffect2[PillEffect2["SPEED_DOWN"] = 13] = "SPEED_DOWN";
        PillEffect2[PillEffect2["SPEED_UP"] = 14] = "SPEED_UP";
        PillEffect2[PillEffect2["TEARS_DOWN"] = 15] = "TEARS_DOWN";
        PillEffect2[PillEffect2["TEARS_UP"] = 16] = "TEARS_UP";
        PillEffect2[PillEffect2["LUCK_DOWN"] = 17] = "LUCK_DOWN";
        PillEffect2[PillEffect2["LUCK_UP"] = 18] = "LUCK_UP";
        PillEffect2[PillEffect2["TELEPILLS"] = 19] = "TELEPILLS";
        PillEffect2[PillEffect2["FORTY_EIGHT_HOUR_ENERGY"] = 20] = "FORTY_EIGHT_HOUR_ENERGY";
        PillEffect2[PillEffect2["HEMATEMESIS"] = 21] = "HEMATEMESIS";
        PillEffect2[PillEffect2["PARALYSIS"] = 22] = "PARALYSIS";
        PillEffect2[PillEffect2["I_CAN_SEE_FOREVER"] = 23] = "I_CAN_SEE_FOREVER";
        PillEffect2[PillEffect2["PHEROMONES"] = 24] = "PHEROMONES";
        PillEffect2[PillEffect2["AMNESIA"] = 25] = "AMNESIA";
        PillEffect2[PillEffect2["LEMON_PARTY"] = 26] = "LEMON_PARTY";
        PillEffect2[PillEffect2["R_U_A_WIZARD"] = 27] = "R_U_A_WIZARD";
        PillEffect2[PillEffect2["PERCS"] = 28] = "PERCS";
        PillEffect2[PillEffect2["ADDICTED"] = 29] = "ADDICTED";
        PillEffect2[PillEffect2["RELAX"] = 30] = "RELAX";
        PillEffect2[PillEffect2["QUESTION_MARKS"] = 31] = "QUESTION_MARKS";
        PillEffect2[PillEffect2["ONE_MAKES_YOU_LARGER"] = 32] = "ONE_MAKES_YOU_LARGER";
        PillEffect2[PillEffect2["ONE_MAKES_YOU_SMALL"] = 33] = "ONE_MAKES_YOU_SMALL";
        PillEffect2[PillEffect2["INFESTED_EXCLAMATION"] = 34] = "INFESTED_EXCLAMATION";
        PillEffect2[PillEffect2["INFESTED_QUESTION"] = 35] = "INFESTED_QUESTION";
        PillEffect2[PillEffect2["POWER"] = 36] = "POWER";
        PillEffect2[PillEffect2["RETRO_VISION"] = 37] = "RETRO_VISION";
        PillEffect2[PillEffect2["FRIENDS_TILL_THE_END"] = 38] = "FRIENDS_TILL_THE_END";
        PillEffect2[PillEffect2["X_LAX"] = 39] = "X_LAX";
        PillEffect2[PillEffect2["SOMETHINGS_WRONG"] = 40] = "SOMETHINGS_WRONG";
        PillEffect2[PillEffect2["IM_DROWSY"] = 41] = "IM_DROWSY";
        PillEffect2[PillEffect2["IM_EXCITED"] = 42] = "IM_EXCITED";
        PillEffect2[PillEffect2["GULP"] = 43] = "GULP";
        PillEffect2[PillEffect2["HORF"] = 44] = "HORF";
        PillEffect2[PillEffect2["FEELS_LIKE_IM_WALKING_ON_SUNSHINE"] = 45] = "FEELS_LIKE_IM_WALKING_ON_SUNSHINE";
        PillEffect2[PillEffect2["VURP"] = 46] = "VURP";
        PillEffect2[PillEffect2["SHOT_SPEED_DOWN"] = 47] = "SHOT_SPEED_DOWN";
        PillEffect2[PillEffect2["SHOT_SPEED_UP"] = 48] = "SHOT_SPEED_UP";
        PillEffect2[PillEffect2["EXPERIMENTAL"] = 49] = "EXPERIMENTAL";
      })(PillEffect || (exports2.PillEffect = PillEffect = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PlayerForm.js
  var require_PlayerForm = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PlayerForm.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerForm = void 0;
      var PlayerForm;
      (function(PlayerForm2) {
        PlayerForm2[PlayerForm2["GUPPY"] = 0] = "GUPPY";
        PlayerForm2[PlayerForm2["BEELZEBUB"] = 1] = "BEELZEBUB";
        PlayerForm2[PlayerForm2["FUN_GUY"] = 2] = "FUN_GUY";
        PlayerForm2[PlayerForm2["SERAPHIM"] = 3] = "SERAPHIM";
        PlayerForm2[PlayerForm2["BOB"] = 4] = "BOB";
        PlayerForm2[PlayerForm2["SPUN"] = 5] = "SPUN";
        PlayerForm2[PlayerForm2["YES_MOTHER"] = 6] = "YES_MOTHER";
        PlayerForm2[PlayerForm2["CONJOINED"] = 7] = "CONJOINED";
        PlayerForm2[PlayerForm2["LEVIATHAN"] = 8] = "LEVIATHAN";
        PlayerForm2[PlayerForm2["OH_CRAP"] = 9] = "OH_CRAP";
        PlayerForm2[PlayerForm2["BOOKWORM"] = 10] = "BOOKWORM";
        PlayerForm2[PlayerForm2["ADULT"] = 11] = "ADULT";
        PlayerForm2[PlayerForm2["SPIDER_BABY"] = 12] = "SPIDER_BABY";
        PlayerForm2[PlayerForm2["STOMPY"] = 13] = "STOMPY";
      })(PlayerForm || (exports2.PlayerForm = PlayerForm = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PlayerItemAnimation.js
  var require_PlayerItemAnimation = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PlayerItemAnimation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerItemAnimation = void 0;
      var PlayerItemAnimation;
      (function(PlayerItemAnimation2) {
        PlayerItemAnimation2["PICKUP"] = "Pickup";
        PlayerItemAnimation2["LIFT_ITEM"] = "LiftItem";
        PlayerItemAnimation2["HIDE_ITEM"] = "HideItem";
        PlayerItemAnimation2["USE_ITEM"] = "UseItem";
        PlayerItemAnimation2["PICKUP_WALK_DOWN"] = "PickupWalkDown";
        PlayerItemAnimation2["PICKUP_WALK_LEFT"] = "PickupWalkLeft";
        PlayerItemAnimation2["PICKUP_WALK_UP"] = "PickupWalkUp";
        PlayerItemAnimation2["PICKUP_WALK_RIGHT"] = "PickupWalkRight";
      })(PlayerItemAnimation || (exports2.PlayerItemAnimation = PlayerItemAnimation = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PlayerSpriteLayer.js
  var require_PlayerSpriteLayer = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PlayerSpriteLayer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerSpriteLayer = void 0;
      var PlayerSpriteLayer;
      (function(PlayerSpriteLayer2) {
        PlayerSpriteLayer2[PlayerSpriteLayer2["GLOW"] = 0] = "GLOW";
        PlayerSpriteLayer2[PlayerSpriteLayer2["BODY"] = 1] = "BODY";
        PlayerSpriteLayer2[PlayerSpriteLayer2["BODY_0"] = 2] = "BODY_0";
        PlayerSpriteLayer2[PlayerSpriteLayer2["BODY_1"] = 3] = "BODY_1";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD"] = 4] = "HEAD";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD_0"] = 5] = "HEAD_0";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD_1"] = 6] = "HEAD_1";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD_2"] = 7] = "HEAD_2";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD_3"] = 8] = "HEAD_3";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD_4"] = 9] = "HEAD_4";
        PlayerSpriteLayer2[PlayerSpriteLayer2["HEAD_5"] = 10] = "HEAD_5";
        PlayerSpriteLayer2[PlayerSpriteLayer2["TOP_0"] = 11] = "TOP_0";
        PlayerSpriteLayer2[PlayerSpriteLayer2["EXTRA"] = 12] = "EXTRA";
        PlayerSpriteLayer2[PlayerSpriteLayer2["GHOST"] = 13] = "GHOST";
        PlayerSpriteLayer2[PlayerSpriteLayer2["BACK"] = 14] = "BACK";
      })(PlayerSpriteLayer || (exports2.PlayerSpriteLayer = PlayerSpriteLayer = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PocketItemSlot.js
  var require_PocketItemSlot = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PocketItemSlot.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PocketItemSlot = void 0;
      var PocketItemSlot2;
      (function(PocketItemSlot3) {
        PocketItemSlot3[PocketItemSlot3["SLOT_1"] = 0] = "SLOT_1";
        PocketItemSlot3[PocketItemSlot3["SLOT_2"] = 1] = "SLOT_2";
        PocketItemSlot3[PocketItemSlot3["SLOT_3"] = 2] = "SLOT_3";
        PocketItemSlot3[PocketItemSlot3["SLOT_4"] = 3] = "SLOT_4";
      })(PocketItemSlot2 || (exports2.PocketItemSlot = PocketItemSlot2 = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/PoopSpellType.js
  var require_PoopSpellType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/PoopSpellType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PoopSpellType = void 0;
      var PoopSpellType;
      (function(PoopSpellType2) {
        PoopSpellType2[PoopSpellType2["NONE"] = 0] = "NONE";
        PoopSpellType2[PoopSpellType2["POOP"] = 1] = "POOP";
        PoopSpellType2[PoopSpellType2["CORNY"] = 2] = "CORNY";
        PoopSpellType2[PoopSpellType2["BURNING"] = 3] = "BURNING";
        PoopSpellType2[PoopSpellType2["STONE"] = 4] = "STONE";
        PoopSpellType2[PoopSpellType2["STINKY"] = 5] = "STINKY";
        PoopSpellType2[PoopSpellType2["BLACK"] = 6] = "BLACK";
        PoopSpellType2[PoopSpellType2["HOLY"] = 7] = "HOLY";
        PoopSpellType2[PoopSpellType2["LIQUID"] = 8] = "LIQUID";
        PoopSpellType2[PoopSpellType2["FART"] = 9] = "FART";
        PoopSpellType2[PoopSpellType2["BOMB"] = 10] = "BOMB";
        PoopSpellType2[PoopSpellType2["DIARRHEA"] = 11] = "DIARRHEA";
      })(PoopSpellType || (exports2.PoopSpellType = PoopSpellType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/ProjectilesMode.js
  var require_ProjectilesMode = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/ProjectilesMode.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ProjectilesMode = void 0;
      var ProjectilesMode;
      (function(ProjectilesMode2) {
        ProjectilesMode2[ProjectilesMode2["ONE_PROJECTILE"] = 0] = "ONE_PROJECTILE";
        ProjectilesMode2[ProjectilesMode2["TWO_PROJECTILES"] = 1] = "TWO_PROJECTILES";
        ProjectilesMode2[ProjectilesMode2["THREE_PROJECTILES"] = 2] = "THREE_PROJECTILES";
        ProjectilesMode2[ProjectilesMode2["THREE_PROJECTILES_SPREAD"] = 3] = "THREE_PROJECTILES_SPREAD";
        ProjectilesMode2[ProjectilesMode2["FOUR_PROJECTILES"] = 4] = "FOUR_PROJECTILES";
        ProjectilesMode2[ProjectilesMode2["FIVE_PROJECTILES"] = 5] = "FIVE_PROJECTILES";
        ProjectilesMode2[ProjectilesMode2["FOUR_PROJECTILES_PLUS_PATTERN"] = 6] = "FOUR_PROJECTILES_PLUS_PATTERN";
        ProjectilesMode2[ProjectilesMode2["FOUR_PROJECTILES_X_PATTERN"] = 7] = "FOUR_PROJECTILES_X_PATTERN";
        ProjectilesMode2[ProjectilesMode2["EIGHT_PROJECTILES_STAR_PATTERN"] = 8] = "EIGHT_PROJECTILES_STAR_PATTERN";
        ProjectilesMode2[ProjectilesMode2["N_PROJECTILES_IN_CIRCLE"] = 9] = "N_PROJECTILES_IN_CIRCLE";
      })(ProjectilesMode || (exports2.ProjectilesMode = ProjectilesMode = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/RenderMode.js
  var require_RenderMode = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/RenderMode.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RenderMode = void 0;
      var RenderMode;
      (function(RenderMode2) {
        RenderMode2[RenderMode2["NULL"] = 0] = "NULL";
        RenderMode2[RenderMode2["NORMAL"] = 1] = "NORMAL";
        RenderMode2[RenderMode2["SKIP"] = 2] = "SKIP";
        RenderMode2[RenderMode2["WATER_ABOVE"] = 3] = "WATER_ABOVE";
        RenderMode2[RenderMode2["WATER_REFRACT"] = 4] = "WATER_REFRACT";
        RenderMode2[RenderMode2["WATER_REFLECT"] = 5] = "WATER_REFLECT";
      })(RenderMode || (exports2.RenderMode = RenderMode = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/RoomDescriptorDisplayType.js
  var require_RoomDescriptorDisplayType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/RoomDescriptorDisplayType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomDescriptorDisplayType = void 0;
      var RoomDescriptorDisplayType;
      (function(RoomDescriptorDisplayType2) {
        RoomDescriptorDisplayType2[RoomDescriptorDisplayType2["NONE"] = 0] = "NONE";
        RoomDescriptorDisplayType2[RoomDescriptorDisplayType2["BOX"] = 1] = "BOX";
        RoomDescriptorDisplayType2[RoomDescriptorDisplayType2["LOCK"] = 2] = "LOCK";
        RoomDescriptorDisplayType2[RoomDescriptorDisplayType2["ICON"] = 4] = "ICON";
        RoomDescriptorDisplayType2[RoomDescriptorDisplayType2["ALL"] = 5] = "ALL";
      })(RoomDescriptorDisplayType || (exports2.RoomDescriptorDisplayType = RoomDescriptorDisplayType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/RoomDifficulty.js
  var require_RoomDifficulty = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/RoomDifficulty.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomDifficulty = void 0;
      var RoomDifficulty;
      (function(RoomDifficulty2) {
        RoomDifficulty2[RoomDifficulty2["ALWAYS_EXCLUDED"] = 0] = "ALWAYS_EXCLUDED";
        RoomDifficulty2[RoomDifficulty2["VERY_EASY"] = 1] = "VERY_EASY";
        RoomDifficulty2[RoomDifficulty2["EASY"] = 2] = "EASY";
        RoomDifficulty2[RoomDifficulty2["MEDIUM"] = 5] = "MEDIUM";
        RoomDifficulty2[RoomDifficulty2["HARD"] = 10] = "HARD";
      })(RoomDifficulty || (exports2.RoomDifficulty = RoomDifficulty = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/RoomShape.js
  var require_RoomShape = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/RoomShape.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomShape = void 0;
      var RoomShape;
      (function(RoomShape2) {
        RoomShape2[RoomShape2["SHAPE_1x1"] = 1] = "SHAPE_1x1";
        RoomShape2[RoomShape2["IH"] = 2] = "IH";
        RoomShape2[RoomShape2["IV"] = 3] = "IV";
        RoomShape2[RoomShape2["SHAPE_1x2"] = 4] = "SHAPE_1x2";
        RoomShape2[RoomShape2["IIV"] = 5] = "IIV";
        RoomShape2[RoomShape2["SHAPE_2x1"] = 6] = "SHAPE_2x1";
        RoomShape2[RoomShape2["IIH"] = 7] = "IIH";
        RoomShape2[RoomShape2["SHAPE_2x2"] = 8] = "SHAPE_2x2";
        RoomShape2[RoomShape2["LTL"] = 9] = "LTL";
        RoomShape2[RoomShape2["LTR"] = 10] = "LTR";
        RoomShape2[RoomShape2["LBL"] = 11] = "LBL";
        RoomShape2[RoomShape2["LBR"] = 12] = "LBR";
      })(RoomShape || (exports2.RoomShape = RoomShape = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/RoomTransitionAnim.js
  var require_RoomTransitionAnim = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/RoomTransitionAnim.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomTransitionAnim = void 0;
      var RoomTransitionAnim;
      (function(RoomTransitionAnim2) {
        RoomTransitionAnim2[RoomTransitionAnim2["WALK"] = 0] = "WALK";
        RoomTransitionAnim2[RoomTransitionAnim2["FADE"] = 1] = "FADE";
        RoomTransitionAnim2[RoomTransitionAnim2["PIXELATION"] = 2] = "PIXELATION";
        RoomTransitionAnim2[RoomTransitionAnim2["TELEPORT"] = 3] = "TELEPORT";
        RoomTransitionAnim2[RoomTransitionAnim2["MAZE"] = 4] = "MAZE";
        RoomTransitionAnim2[RoomTransitionAnim2["ANKH"] = 5] = "ANKH";
        RoomTransitionAnim2[RoomTransitionAnim2["DEAD_CAT"] = 6] = "DEAD_CAT";
        RoomTransitionAnim2[RoomTransitionAnim2["ONE_UP"] = 7] = "ONE_UP";
        RoomTransitionAnim2[RoomTransitionAnim2["COLLAR"] = 8] = "COLLAR";
        RoomTransitionAnim2[RoomTransitionAnim2["JUDAS_SHADOW"] = 9] = "JUDAS_SHADOW";
        RoomTransitionAnim2[RoomTransitionAnim2["LAZARUS"] = 10] = "LAZARUS";
        RoomTransitionAnim2[RoomTransitionAnim2["WOMB_TELEPORT"] = 11] = "WOMB_TELEPORT";
        RoomTransitionAnim2[RoomTransitionAnim2["GLOWING_HOURGLASS"] = 12] = "GLOWING_HOURGLASS";
        RoomTransitionAnim2[RoomTransitionAnim2["D7"] = 13] = "D7";
        RoomTransitionAnim2[RoomTransitionAnim2["MISSING_POSTER"] = 14] = "MISSING_POSTER";
        RoomTransitionAnim2[RoomTransitionAnim2["BOSS_FORCED"] = 15] = "BOSS_FORCED";
        RoomTransitionAnim2[RoomTransitionAnim2["PORTAL_TELEPORT"] = 16] = "PORTAL_TELEPORT";
        RoomTransitionAnim2[RoomTransitionAnim2["FORGOTTEN_TELEPORT"] = 17] = "FORGOTTEN_TELEPORT";
        RoomTransitionAnim2[RoomTransitionAnim2["FADE_MIRROR"] = 18] = "FADE_MIRROR";
        RoomTransitionAnim2[RoomTransitionAnim2["MINECART"] = 19] = "MINECART";
        RoomTransitionAnim2[RoomTransitionAnim2["DEATH_CERTIFICATE"] = 20] = "DEATH_CERTIFICATE";
      })(RoomTransitionAnim || (exports2.RoomTransitionAnim = RoomTransitionAnim = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/RoomType.js
  var require_RoomType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/RoomType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomType = void 0;
      var RoomType;
      (function(RoomType2) {
        RoomType2[RoomType2["DEFAULT"] = 1] = "DEFAULT";
        RoomType2[RoomType2["SHOP"] = 2] = "SHOP";
        RoomType2[RoomType2["ERROR"] = 3] = "ERROR";
        RoomType2[RoomType2["TREASURE"] = 4] = "TREASURE";
        RoomType2[RoomType2["BOSS"] = 5] = "BOSS";
        RoomType2[RoomType2["MINI_BOSS"] = 6] = "MINI_BOSS";
        RoomType2[RoomType2["SECRET"] = 7] = "SECRET";
        RoomType2[RoomType2["SUPER_SECRET"] = 8] = "SUPER_SECRET";
        RoomType2[RoomType2["ARCADE"] = 9] = "ARCADE";
        RoomType2[RoomType2["CURSE"] = 10] = "CURSE";
        RoomType2[RoomType2["CHALLENGE"] = 11] = "CHALLENGE";
        RoomType2[RoomType2["LIBRARY"] = 12] = "LIBRARY";
        RoomType2[RoomType2["SACRIFICE"] = 13] = "SACRIFICE";
        RoomType2[RoomType2["DEVIL"] = 14] = "DEVIL";
        RoomType2[RoomType2["ANGEL"] = 15] = "ANGEL";
        RoomType2[RoomType2["DUNGEON"] = 16] = "DUNGEON";
        RoomType2[RoomType2["BOSS_RUSH"] = 17] = "BOSS_RUSH";
        RoomType2[RoomType2["CLEAN_BEDROOM"] = 18] = "CLEAN_BEDROOM";
        RoomType2[RoomType2["DIRTY_BEDROOM"] = 19] = "DIRTY_BEDROOM";
        RoomType2[RoomType2["VAULT"] = 20] = "VAULT";
        RoomType2[RoomType2["DICE"] = 21] = "DICE";
        RoomType2[RoomType2["BLACK_MARKET"] = 22] = "BLACK_MARKET";
        RoomType2[RoomType2["GREED_EXIT"] = 23] = "GREED_EXIT";
        RoomType2[RoomType2["PLANETARIUM"] = 24] = "PLANETARIUM";
        RoomType2[RoomType2["TELEPORTER"] = 25] = "TELEPORTER";
        RoomType2[RoomType2["TELEPORTER_EXIT"] = 26] = "TELEPORTER_EXIT";
        RoomType2[RoomType2["SECRET_EXIT"] = 27] = "SECRET_EXIT";
        RoomType2[RoomType2["BLUE"] = 28] = "BLUE";
        RoomType2[RoomType2["ULTRA_SECRET"] = 29] = "ULTRA_SECRET";
      })(RoomType || (exports2.RoomType = RoomType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/SeedEffect.js
  var require_SeedEffect = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/SeedEffect.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SeedEffect = void 0;
      var SeedEffect;
      (function(SeedEffect2) {
        SeedEffect2[SeedEffect2["NORMAL"] = 0] = "NORMAL";
        SeedEffect2[SeedEffect2["MOVEMENT_PITCH"] = 1] = "MOVEMENT_PITCH";
        SeedEffect2[SeedEffect2["HEALTH_PITCH"] = 2] = "HEALTH_PITCH";
        SeedEffect2[SeedEffect2["CAMO_ISAAC"] = 3] = "CAMO_ISAAC";
        SeedEffect2[SeedEffect2["CAMO_ENEMIES"] = 4] = "CAMO_ENEMIES";
        SeedEffect2[SeedEffect2["CAMO_PICKUPS"] = 5] = "CAMO_PICKUPS";
        SeedEffect2[SeedEffect2["CAMO_EVERYTHING"] = 6] = "CAMO_EVERYTHING";
        SeedEffect2[SeedEffect2["FART_SOUNDS"] = 7] = "FART_SOUNDS";
        SeedEffect2[SeedEffect2["OLD_TV"] = 8] = "OLD_TV";
        SeedEffect2[SeedEffect2["DYSLEXIA"] = 9] = "DYSLEXIA";
        SeedEffect2[SeedEffect2["NO_HUD"] = 10] = "NO_HUD";
        SeedEffect2[SeedEffect2["PICKUPS_SLIDE"] = 11] = "PICKUPS_SLIDE";
        SeedEffect2[SeedEffect2["CONTROLS_REVERSED"] = 12] = "CONTROLS_REVERSED";
        SeedEffect2[SeedEffect2["ALL_CHAMPIONS"] = 13] = "ALL_CHAMPIONS";
        SeedEffect2[SeedEffect2["INVISIBLE_ISAAC"] = 14] = "INVISIBLE_ISAAC";
        SeedEffect2[SeedEffect2["INVISIBLE_ENEMIES"] = 15] = "INVISIBLE_ENEMIES";
        SeedEffect2[SeedEffect2["INFINITE_BASEMENT"] = 16] = "INFINITE_BASEMENT";
        SeedEffect2[SeedEffect2["ALWAYS_CHARMED"] = 17] = "ALWAYS_CHARMED";
        SeedEffect2[SeedEffect2["ALWAYS_CONFUSED"] = 18] = "ALWAYS_CONFUSED";
        SeedEffect2[SeedEffect2["ALWAYS_AFRAID"] = 19] = "ALWAYS_AFRAID";
        SeedEffect2[SeedEffect2["ALWAYS_ALTERNATING_FEAR"] = 20] = "ALWAYS_ALTERNATING_FEAR";
        SeedEffect2[SeedEffect2["ALWAYS_CHARMED_AND_AFRAID"] = 21] = "ALWAYS_CHARMED_AND_AFRAID";
        SeedEffect2[SeedEffect2["EXTRA_BLOOD"] = 23] = "EXTRA_BLOOD";
        SeedEffect2[SeedEffect2["POOP_TRAIL"] = 24] = "POOP_TRAIL";
        SeedEffect2[SeedEffect2["PACIFIST"] = 25] = "PACIFIST";
        SeedEffect2[SeedEffect2["DAMAGE_WHEN_STOPPED"] = 26] = "DAMAGE_WHEN_STOPPED";
        SeedEffect2[SeedEffect2["DAMAGE_ON_INTERVAL"] = 27] = "DAMAGE_ON_INTERVAL";
        SeedEffect2[SeedEffect2["DAMAGE_ON_TIME_LIMIT"] = 28] = "DAMAGE_ON_TIME_LIMIT";
        SeedEffect2[SeedEffect2["PILLS_NEVER_IDENTIFY"] = 29] = "PILLS_NEVER_IDENTIFY";
        SeedEffect2[SeedEffect2["MYSTERY_TAROT_CARDS"] = 30] = "MYSTERY_TAROT_CARDS";
        SeedEffect2[SeedEffect2["ENEMIES_RESPAWN"] = 32] = "ENEMIES_RESPAWN";
        SeedEffect2[SeedEffect2["ITEMS_COST_MONEY"] = 33] = "ITEMS_COST_MONEY";
        SeedEffect2[SeedEffect2["BIG_HEAD"] = 35] = "BIG_HEAD";
        SeedEffect2[SeedEffect2["SMALL_HEAD"] = 36] = "SMALL_HEAD";
        SeedEffect2[SeedEffect2["BLACK_ISAAC"] = 37] = "BLACK_ISAAC";
        SeedEffect2[SeedEffect2["GLOWING_TEARS"] = 38] = "GLOWING_TEARS";
        SeedEffect2[SeedEffect2["SLOW_MUSIC"] = 41] = "SLOW_MUSIC";
        SeedEffect2[SeedEffect2["ULTRA_SLOW_MUSIC"] = 42] = "ULTRA_SLOW_MUSIC";
        SeedEffect2[SeedEffect2["FAST_MUSIC"] = 43] = "FAST_MUSIC";
        SeedEffect2[SeedEffect2["ULTRA_FAST_MUSIC"] = 44] = "ULTRA_FAST_MUSIC";
        SeedEffect2[SeedEffect2["NO_FACE"] = 46] = "NO_FACE";
        SeedEffect2[SeedEffect2["ISAAC_TAKES_HIGH_DAMAGE"] = 47] = "ISAAC_TAKES_HIGH_DAMAGE";
        SeedEffect2[SeedEffect2["ISAAC_TAKES_MASSIVE_DAMAGE"] = 48] = "ISAAC_TAKES_MASSIVE_DAMAGE";
        SeedEffect2[SeedEffect2["ICE_PHYSICS"] = 52] = "ICE_PHYSICS";
        SeedEffect2[SeedEffect2["KAPPA"] = 53] = "KAPPA";
        SeedEffect2[SeedEffect2["CHRISTMAS"] = 54] = "CHRISTMAS";
        SeedEffect2[SeedEffect2["KIDS_MODE"] = 55] = "KIDS_MODE";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_DARKNESS"] = 56] = "PERMANENT_CURSE_DARKNESS";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_LABYRINTH"] = 57] = "PERMANENT_CURSE_LABYRINTH";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_LOST"] = 58] = "PERMANENT_CURSE_LOST";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_UNKNOWN"] = 59] = "PERMANENT_CURSE_UNKNOWN";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_MAZE"] = 60] = "PERMANENT_CURSE_MAZE";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_BLIND"] = 61] = "PERMANENT_CURSE_BLIND";
        SeedEffect2[SeedEffect2["PERMANENT_CURSE_CURSED"] = 62] = "PERMANENT_CURSE_CURSED";
        SeedEffect2[SeedEffect2["PREVENT_CURSE_DARKNESS"] = 63] = "PREVENT_CURSE_DARKNESS";
        SeedEffect2[SeedEffect2["PREVENT_CURSE_LABYRINTH"] = 64] = "PREVENT_CURSE_LABYRINTH";
        SeedEffect2[SeedEffect2["PREVENT_CURSE_LOST"] = 65] = "PREVENT_CURSE_LOST";
        SeedEffect2[SeedEffect2["PREVENT_CURSE_UNKNOWN"] = 66] = "PREVENT_CURSE_UNKNOWN";
        SeedEffect2[SeedEffect2["PREVENT_CURSE_MAZE"] = 67] = "PREVENT_CURSE_MAZE";
        SeedEffect2[SeedEffect2["PREVENT_CURSE_BLIND"] = 68] = "PREVENT_CURSE_BLIND";
        SeedEffect2[SeedEffect2["PREVENT_ALL_CURSES"] = 70] = "PREVENT_ALL_CURSES";
        SeedEffect2[SeedEffect2["NO_BOSS_ROOM_EXITS"] = 71] = "NO_BOSS_ROOM_EXITS";
        SeedEffect2[SeedEffect2["PICKUPS_TIMEOUT"] = 72] = "PICKUPS_TIMEOUT";
        SeedEffect2[SeedEffect2["INVINCIBLE"] = 73] = "INVINCIBLE";
        SeedEffect2[SeedEffect2["SHOOT_IN_MOVEMENT_DIRECTION"] = 74] = "SHOOT_IN_MOVEMENT_DIRECTION";
        SeedEffect2[SeedEffect2["SHOOT_OPPOSITE_MOVEMENT_DIRECTION"] = 75] = "SHOOT_OPPOSITE_MOVEMENT_DIRECTION";
        SeedEffect2[SeedEffect2["AXIS_ALIGNED_CONTROLS"] = 76] = "AXIS_ALIGNED_CONTROLS";
        SeedEffect2[SeedEffect2["SUPER_HOT"] = 77] = "SUPER_HOT";
        SeedEffect2[SeedEffect2["RETRO_VISION"] = 78] = "RETRO_VISION";
        SeedEffect2[SeedEffect2["G_FUEL"] = 79] = "G_FUEL";
      })(SeedEffect || (exports2.SeedEffect = SeedEffect = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/SkinColor.js
  var require_SkinColor = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/SkinColor.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SkinColor = void 0;
      var SkinColor;
      (function(SkinColor2) {
        SkinColor2[SkinColor2["PINK"] = -1] = "PINK";
        SkinColor2[SkinColor2["WHITE"] = 0] = "WHITE";
        SkinColor2[SkinColor2["BLACK"] = 1] = "BLACK";
        SkinColor2[SkinColor2["BLUE"] = 2] = "BLUE";
        SkinColor2[SkinColor2["RED"] = 3] = "RED";
        SkinColor2[SkinColor2["GREEN"] = 4] = "GREEN";
        SkinColor2[SkinColor2["GREY"] = 5] = "GREY";
        SkinColor2[SkinColor2["SHADOW"] = 6] = "SHADOW";
      })(SkinColor || (exports2.SkinColor = SkinColor = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/SortingLayer.js
  var require_SortingLayer = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/SortingLayer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SortingLayer = void 0;
      var SortingLayer;
      (function(SortingLayer2) {
        SortingLayer2[SortingLayer2["BACKGROUND"] = 0] = "BACKGROUND";
        SortingLayer2[SortingLayer2["DOOR"] = 1] = "DOOR";
        SortingLayer2[SortingLayer2["NORMAL"] = 2] = "NORMAL";
      })(SortingLayer || (exports2.SortingLayer = SortingLayer = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/SoundEffect.js
  var require_SoundEffect = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/SoundEffect.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SoundEffect = void 0;
      var SoundEffect;
      (function(SoundEffect2) {
        SoundEffect2[SoundEffect2["NULL"] = 0] = "NULL";
        SoundEffect2[SoundEffect2["ONE_UP"] = 1] = "ONE_UP";
        SoundEffect2[SoundEffect2["BIRD_FLAP"] = 2] = "BIRD_FLAP";
        SoundEffect2[SoundEffect2["BLOBBY_WIGGLE"] = 3] = "BLOBBY_WIGGLE";
        SoundEffect2[SoundEffect2["INSECT_SWARM_LOOP"] = 4] = "INSECT_SWARM_LOOP";
        SoundEffect2[SoundEffect2["BLOOD_LASER"] = 5] = "BLOOD_LASER";
        SoundEffect2[SoundEffect2["BLOOD_LASER_SMALL"] = 6] = "BLOOD_LASER_SMALL";
        SoundEffect2[SoundEffect2["BLOOD_LASER_LARGE"] = 7] = "BLOOD_LASER_LARGE";
        SoundEffect2[SoundEffect2["BOOK_PAGE_TURN_12"] = 8] = "BOOK_PAGE_TURN_12";
        SoundEffect2[SoundEffect2["BOSS_BUG_HISS"] = 9] = "BOSS_BUG_HISS";
        SoundEffect2[SoundEffect2["BLOOD_LASER_LARGER"] = 10] = "BLOOD_LASER_LARGER";
        SoundEffect2[SoundEffect2["BOSS_GURGLE_ROAR"] = 11] = "BOSS_GURGLE_ROAR";
        SoundEffect2[SoundEffect2["BOSS_LITE_GURGLE"] = 12] = "BOSS_LITE_GURGLE";
        SoundEffect2[SoundEffect2["BOSS_LITE_HISS"] = 13] = "BOSS_LITE_HISS";
        SoundEffect2[SoundEffect2["BOSS_LITE_ROAR"] = 14] = "BOSS_LITE_ROAR";
        SoundEffect2[SoundEffect2["BOSS_LITE_SLOPPY_ROAR"] = 15] = "BOSS_LITE_SLOPPY_ROAR";
        SoundEffect2[SoundEffect2["BOSS_SPIT_BLOB_BARF"] = 16] = "BOSS_SPIT_BLOB_BARF";
        SoundEffect2[SoundEffect2["PAPER_IN"] = 17] = "PAPER_IN";
        SoundEffect2[SoundEffect2["PAPER_OUT"] = 18] = "PAPER_OUT";
        SoundEffect2[SoundEffect2["CHEST_DROP"] = 21] = "CHEST_DROP";
        SoundEffect2[SoundEffect2["CHEST_OPEN"] = 22] = "CHEST_OPEN";
        SoundEffect2[SoundEffect2["CHOIR_UNLOCK"] = 23] = "CHOIR_UNLOCK";
        SoundEffect2[SoundEffect2["COIN_SLOT"] = 24] = "COIN_SLOT";
        SoundEffect2[SoundEffect2["CUTE_GRUNT"] = 25] = "CUTE_GRUNT";
        SoundEffect2[SoundEffect2["DEATH_BURST_BONE"] = 27] = "DEATH_BURST_BONE";
        SoundEffect2[SoundEffect2["DEATH_BURST_LARGE"] = 28] = "DEATH_BURST_LARGE";
        SoundEffect2[SoundEffect2["DEATH_REVERSE"] = 29] = "DEATH_REVERSE";
        SoundEffect2[SoundEffect2["DEATH_BURST_SMALL"] = 30] = "DEATH_BURST_SMALL";
        SoundEffect2[SoundEffect2["DEATH_CARD"] = 33] = "DEATH_CARD";
        SoundEffect2[SoundEffect2["DEVIL_CARD"] = 34] = "DEVIL_CARD";
        SoundEffect2[SoundEffect2["DOOR_HEAVY_CLOSE"] = 35] = "DOOR_HEAVY_CLOSE";
        SoundEffect2[SoundEffect2["DOOR_HEAVY_OPEN"] = 36] = "DOOR_HEAVY_OPEN";
        SoundEffect2[SoundEffect2["FART"] = 37] = "FART";
        SoundEffect2[SoundEffect2["FETUS_JUMP"] = 38] = "FETUS_JUMP";
        SoundEffect2[SoundEffect2["FETUS_LAND"] = 40] = "FETUS_LAND";
        SoundEffect2[SoundEffect2["FIRE_DEATH_HISS"] = 43] = "FIRE_DEATH_HISS";
        SoundEffect2[SoundEffect2["FLOATY_BABY_ROAR"] = 44] = "FLOATY_BABY_ROAR";
        SoundEffect2[SoundEffect2["COIN_INSERT"] = 45] = "COIN_INSERT";
        SoundEffect2[SoundEffect2["METAL_DOOR_CLOSE"] = 46] = "METAL_DOOR_CLOSE";
        SoundEffect2[SoundEffect2["METAL_DOOR_OPEN"] = 47] = "METAL_DOOR_OPEN";
        SoundEffect2[SoundEffect2["FOREST_BOSS_STOMPS"] = 48] = "FOREST_BOSS_STOMPS";
        SoundEffect2[SoundEffect2["SCYTHE_BREAK"] = 49] = "SCYTHE_BREAK";
        SoundEffect2[SoundEffect2["STONE_WALKER"] = 50] = "STONE_WALKER";
        SoundEffect2[SoundEffect2["GAS_CAN_POUR"] = 51] = "GAS_CAN_POUR";
        SoundEffect2[SoundEffect2["HELL_BOSS_GROUND_POUND"] = 52] = "HELL_BOSS_GROUND_POUND";
        SoundEffect2[SoundEffect2["GLASS_BREAK"] = 53] = "GLASS_BREAK";
        SoundEffect2[SoundEffect2["HOLY"] = 54] = "HOLY";
        SoundEffect2[SoundEffect2["ISAAC_HURT_GRUNT"] = 55] = "ISAAC_HURT_GRUNT";
        SoundEffect2[SoundEffect2["CHILD_HAPPY_ROAR_SHORT"] = 56] = "CHILD_HAPPY_ROAR_SHORT";
        SoundEffect2[SoundEffect2["CHILD_ANGRY_ROAR"] = 57] = "CHILD_ANGRY_ROAR";
        SoundEffect2[SoundEffect2["KEY_PICKUP_GAUNTLET"] = 58] = "KEY_PICKUP_GAUNTLET";
        SoundEffect2[SoundEffect2["KEY_DROP"] = 59] = "KEY_DROP";
        SoundEffect2[SoundEffect2["BABY_HURT"] = 60] = "BABY_HURT";
        SoundEffect2[SoundEffect2["MAGGOT_BURST_OUT"] = 64] = "MAGGOT_BURST_OUT";
        SoundEffect2[SoundEffect2["MAGGOT_ENTER_GROUND"] = 66] = "MAGGOT_ENTER_GROUND";
        SoundEffect2[SoundEffect2["MEAT_FEET_SLOW"] = 68] = "MEAT_FEET_SLOW";
        SoundEffect2[SoundEffect2["MEAT_IMPACTS"] = 69] = "MEAT_IMPACTS";
        SoundEffect2[SoundEffect2["MEAT_IMPACTS_OLD"] = 70] = "MEAT_IMPACTS_OLD";
        SoundEffect2[SoundEffect2["MEAT_JUMPS"] = 72] = "MEAT_JUMPS";
        SoundEffect2[SoundEffect2["MEATY_DEATHS"] = 77] = "MEATY_DEATHS";
        SoundEffect2[SoundEffect2["POT_BREAK_2"] = 78] = "POT_BREAK_2";
        SoundEffect2[SoundEffect2["MUSHROOM_POOF_2"] = 79] = "MUSHROOM_POOF_2";
        SoundEffect2[SoundEffect2["BLACK_POOF"] = 80] = "BLACK_POOF";
        SoundEffect2[SoundEffect2["STATIC"] = 81] = "STATIC";
        SoundEffect2[SoundEffect2["MOM_VOX_DEATH"] = 82] = "MOM_VOX_DEATH";
        SoundEffect2[SoundEffect2["MOM_VOX_EVIL_LAUGH"] = 84] = "MOM_VOX_EVIL_LAUGH";
        SoundEffect2[SoundEffect2["MOM_VOX_FILTERED_DEATH_1"] = 85] = "MOM_VOX_FILTERED_DEATH_1";
        SoundEffect2[SoundEffect2["MOM_VOX_FILTERED_EVIL_LAUGH"] = 86] = "MOM_VOX_FILTERED_EVIL_LAUGH";
        SoundEffect2[SoundEffect2["MOM_VOX_FILTERED_HURT"] = 87] = "MOM_VOX_FILTERED_HURT";
        SoundEffect2[SoundEffect2["MOM_VOX_FILTERED_ISAAC"] = 90] = "MOM_VOX_FILTERED_ISAAC";
        SoundEffect2[SoundEffect2["MOM_VOX_GRUNT"] = 93] = "MOM_VOX_GRUNT";
        SoundEffect2[SoundEffect2["MOM_VOX_HURT"] = 97] = "MOM_VOX_HURT";
        SoundEffect2[SoundEffect2["MOM_VOX_ISAAC"] = 101] = "MOM_VOX_ISAAC";
        SoundEffect2[SoundEffect2["MONSTER_GRUNT_0"] = 104] = "MONSTER_GRUNT_0";
        SoundEffect2[SoundEffect2["MONSTER_GRUNT_1"] = 106] = "MONSTER_GRUNT_1";
        SoundEffect2[SoundEffect2["MONSTER_GRUNT_2"] = 108] = "MONSTER_GRUNT_2";
        SoundEffect2[SoundEffect2["MONSTER_GRUNT_4"] = 112] = "MONSTER_GRUNT_4";
        SoundEffect2[SoundEffect2["MONSTER_GRUNT_5"] = 114] = "MONSTER_GRUNT_5";
        SoundEffect2[SoundEffect2["MONSTER_ROAR_0"] = 115] = "MONSTER_ROAR_0";
        SoundEffect2[SoundEffect2["MONSTER_ROAR_1"] = 116] = "MONSTER_ROAR_1";
        SoundEffect2[SoundEffect2["MONSTER_ROAR_2"] = 117] = "MONSTER_ROAR_2";
        SoundEffect2[SoundEffect2["MONSTER_ROAR_3"] = 118] = "MONSTER_ROAR_3";
        SoundEffect2[SoundEffect2["MONSTER_YELL_A"] = 119] = "MONSTER_YELL_A";
        SoundEffect2[SoundEffect2["MONSTER_YELL_B"] = 122] = "MONSTER_YELL_B";
        SoundEffect2[SoundEffect2["POWER_UP_1"] = 128] = "POWER_UP_1";
        SoundEffect2[SoundEffect2["POWER_UP_2"] = 129] = "POWER_UP_2";
        SoundEffect2[SoundEffect2["POWER_UP_3"] = 130] = "POWER_UP_3";
        SoundEffect2[SoundEffect2["POWER_UP_SPEWER"] = 132] = "POWER_UP_SPEWER";
        SoundEffect2[SoundEffect2["RED_LIGHTNING_ZAP"] = 133] = "RED_LIGHTNING_ZAP";
        SoundEffect2[SoundEffect2["RED_LIGHTNING_ZAP_WEAK"] = 134] = "RED_LIGHTNING_ZAP_WEAK";
        SoundEffect2[SoundEffect2["RED_LIGHTNING_ZAP_STRONG"] = 135] = "RED_LIGHTNING_ZAP_STRONG";
        SoundEffect2[SoundEffect2["RED_LIGHTNING_ZAP_BURST"] = 136] = "RED_LIGHTNING_ZAP_BURST";
        SoundEffect2[SoundEffect2["ROCK_CRUMBLE"] = 137] = "ROCK_CRUMBLE";
        SoundEffect2[SoundEffect2["POT_BREAK"] = 138] = "POT_BREAK";
        SoundEffect2[SoundEffect2["MUSHROOM_POOF"] = 139] = "MUSHROOM_POOF";
        SoundEffect2[SoundEffect2["ROCKET_BLAST_DEATH"] = 141] = "ROCKET_BLAST_DEATH";
        SoundEffect2[SoundEffect2["SMB_LARGE_CHEWS_4"] = 142] = "SMB_LARGE_CHEWS_4";
        SoundEffect2[SoundEffect2["SCARED_WHIMPER"] = 143] = "SCARED_WHIMPER";
        SoundEffect2[SoundEffect2["SHAKEY_KID_ROAR"] = 146] = "SHAKEY_KID_ROAR";
        SoundEffect2[SoundEffect2["SINK_DRAIN_GURGLE"] = 149] = "SINK_DRAIN_GURGLE";
        SoundEffect2[SoundEffect2["TEAR_IMPACTS"] = 150] = "TEAR_IMPACTS";
        SoundEffect2[SoundEffect2["TEARS_FIRE"] = 153] = "TEARS_FIRE";
        SoundEffect2[SoundEffect2["UNLOCK_DOOR"] = 156] = "UNLOCK_DOOR";
        SoundEffect2[SoundEffect2["VAMP_GULP"] = 157] = "VAMP_GULP";
        SoundEffect2[SoundEffect2["WHEEZY_COUGH"] = 158] = "WHEEZY_COUGH";
        SoundEffect2[SoundEffect2["SPIDER_COUGH"] = 159] = "SPIDER_COUGH";
        SoundEffect2[SoundEffect2["PORTAL_OPEN"] = 160] = "PORTAL_OPEN";
        SoundEffect2[SoundEffect2["PORTAL_LOOP"] = 161] = "PORTAL_LOOP";
        SoundEffect2[SoundEffect2["PORTAL_SPAWN"] = 162] = "PORTAL_SPAWN";
        SoundEffect2[SoundEffect2["TAR_LOOP"] = 163] = "TAR_LOOP";
        SoundEffect2[SoundEffect2["ZOMBIE_WALKER_KID"] = 165] = "ZOMBIE_WALKER_KID";
        SoundEffect2[SoundEffect2["ANIMAL_SQUISH"] = 166] = "ANIMAL_SQUISH";
        SoundEffect2[SoundEffect2["ANGRY_GURGLE"] = 167] = "ANGRY_GURGLE";
        SoundEffect2[SoundEffect2["BAND_AID_PICK_UP"] = 169] = "BAND_AID_PICK_UP";
        SoundEffect2[SoundEffect2["BATTERY_CHARGE"] = 170] = "BATTERY_CHARGE";
        SoundEffect2[SoundEffect2["BEEP"] = 171] = "BEEP";
        SoundEffect2[SoundEffect2["LIGHT_BOLT"] = 172] = "LIGHT_BOLT";
        SoundEffect2[SoundEffect2["LIGHT_BOLT_CHARGE"] = 173] = "LIGHT_BOLT_CHARGE";
        SoundEffect2[SoundEffect2["BLOOD_BANK_TOUCHED"] = 174] = "BLOOD_BANK_TOUCHED";
        SoundEffect2[SoundEffect2["PINKING_SHEARS"] = 175] = "PINKING_SHEARS";
        SoundEffect2[SoundEffect2["BLOOD_SHOOT"] = 178] = "BLOOD_SHOOT";
        SoundEffect2[SoundEffect2["BOIL_HATCH"] = 181] = "BOIL_HATCH";
        SoundEffect2[SoundEffect2["BOSS_1_EXPLOSIONS"] = 182] = "BOSS_1_EXPLOSIONS";
        SoundEffect2[SoundEffect2["EXPLOSION_WEAK"] = 183] = "EXPLOSION_WEAK";
        SoundEffect2[SoundEffect2["EXPLOSION_STRONG"] = 184] = "EXPLOSION_STRONG";
        SoundEffect2[SoundEffect2["BOSS_2_BUBBLES"] = 185] = "BOSS_2_BUBBLES";
        SoundEffect2[SoundEffect2["EXPLOSION_DEBRIS"] = 186] = "EXPLOSION_DEBRIS";
        SoundEffect2[SoundEffect2["BOSS_2_INTRO_ERROR_BUZZ"] = 187] = "BOSS_2_INTRO_ERROR_BUZZ";
        SoundEffect2[SoundEffect2["CASTLE_PORTCULLIS"] = 190] = "CASTLE_PORTCULLIS";
        SoundEffect2[SoundEffect2["CHARACTER_SELECT_LEFT"] = 194] = "CHARACTER_SELECT_LEFT";
        SoundEffect2[SoundEffect2["CHARACTER_SELECT_RIGHT"] = 195] = "CHARACTER_SELECT_RIGHT";
        SoundEffect2[SoundEffect2["DERP"] = 197] = "DERP";
        SoundEffect2[SoundEffect2["DIME_DROP"] = 198] = "DIME_DROP";
        SoundEffect2[SoundEffect2["DIME_PICKUP"] = 199] = "DIME_PICKUP";
        SoundEffect2[SoundEffect2["LUCKY_PICKUP"] = 200] = "LUCKY_PICKUP";
        SoundEffect2[SoundEffect2["FETUS_FEET"] = 201] = "FETUS_FEET";
        SoundEffect2[SoundEffect2["GOLDEN_KEY"] = 204] = "GOLDEN_KEY";
        SoundEffect2[SoundEffect2["GOO_ATTACH"] = 205] = "GOO_ATTACH";
        SoundEffect2[SoundEffect2["GOO_DEATH"] = 207] = "GOO_DEATH";
        SoundEffect2[SoundEffect2["HAND_LASERS"] = 211] = "HAND_LASERS";
        SoundEffect2[SoundEffect2["HEART_IN"] = 212] = "HEART_IN";
        SoundEffect2[SoundEffect2["HEART_OUT"] = 213] = "HEART_OUT";
        SoundEffect2[SoundEffect2["HELL_PORTAL_1"] = 214] = "HELL_PORTAL_1";
        SoundEffect2[SoundEffect2["HELL_PORTAL_2"] = 215] = "HELL_PORTAL_2";
        SoundEffect2[SoundEffect2["ISAAC_DIES"] = 217] = "ISAAC_DIES";
        SoundEffect2[SoundEffect2["ITEM_RECHARGE"] = 218] = "ITEM_RECHARGE";
        SoundEffect2[SoundEffect2["KISS_LIPS"] = 219] = "KISS_LIPS";
        SoundEffect2[SoundEffect2["LEECH"] = 221] = "LEECH";
        SoundEffect2[SoundEffect2["MAGGOT_CHARGE"] = 224] = "MAGGOT_CHARGE";
        SoundEffect2[SoundEffect2["MEAT_HEAD_SHOOT"] = 226] = "MEAT_HEAD_SHOOT";
        SoundEffect2[SoundEffect2["METAL_BLOCK_BREAK"] = 229] = "METAL_BLOCK_BREAK";
        SoundEffect2[SoundEffect2["NICKEL_DROP"] = 231] = "NICKEL_DROP";
        SoundEffect2[SoundEffect2["NICKEL_PICKUP"] = 232] = "NICKEL_PICKUP";
        SoundEffect2[SoundEffect2["PENNY_DROP"] = 233] = "PENNY_DROP";
        SoundEffect2[SoundEffect2["PENNY_PICKUP"] = 234] = "PENNY_PICKUP";
        SoundEffect2[SoundEffect2["PLOP"] = 237] = "PLOP";
        SoundEffect2[SoundEffect2["SATAN_APPEAR"] = 238] = "SATAN_APPEAR";
        SoundEffect2[SoundEffect2["SATAN_BLAST"] = 239] = "SATAN_BLAST";
        SoundEffect2[SoundEffect2["SATAN_CHARGE_UP"] = 240] = "SATAN_CHARGE_UP";
        SoundEffect2[SoundEffect2["SATAN_GROW"] = 241] = "SATAN_GROW";
        SoundEffect2[SoundEffect2["SATAN_HURT"] = 242] = "SATAN_HURT";
        SoundEffect2[SoundEffect2["SATAN_RISE_UP"] = 243] = "SATAN_RISE_UP";
        SoundEffect2[SoundEffect2["SATAN_SPIT"] = 245] = "SATAN_SPIT";
        SoundEffect2[SoundEffect2["SATAN_STOMP"] = 246] = "SATAN_STOMP";
        SoundEffect2[SoundEffect2["SCAMPER"] = 249] = "SCAMPER";
        SoundEffect2[SoundEffect2["SHELL_GAME"] = 252] = "SHELL_GAME";
        SoundEffect2[SoundEffect2["SLOT_SPAWN"] = 255] = "SLOT_SPAWN";
        SoundEffect2[SoundEffect2["SPLATTER"] = 258] = "SPLATTER";
        SoundEffect2[SoundEffect2["STEAM_HALF_SEC"] = 261] = "STEAM_HALF_SEC";
        SoundEffect2[SoundEffect2["STONE_SHOOT"] = 262] = "STONE_SHOOT";
        SoundEffect2[SoundEffect2["WEIRD_WORM_SPIT"] = 263] = "WEIRD_WORM_SPIT";
        SoundEffect2[SoundEffect2["SUMMON_SOUND"] = 265] = "SUMMON_SOUND";
        SoundEffect2[SoundEffect2["SUPER_HOLY"] = 266] = "SUPER_HOLY";
        SoundEffect2[SoundEffect2["THUMBS_DOWN"] = 267] = "THUMBS_DOWN";
        SoundEffect2[SoundEffect2["THUMBS_UP"] = 268] = "THUMBS_UP";
        SoundEffect2[SoundEffect2["FIRE_BURN"] = 269] = "FIRE_BURN";
        SoundEffect2[SoundEffect2["HAPPY_RAINBOW"] = 270] = "HAPPY_RAINBOW";
        SoundEffect2[SoundEffect2["LASER_RING"] = 271] = "LASER_RING";
        SoundEffect2[SoundEffect2["LASER_RING_WEAK"] = 272] = "LASER_RING_WEAK";
        SoundEffect2[SoundEffect2["LASER_RING_STRONG"] = 273] = "LASER_RING_STRONG";
        SoundEffect2[SoundEffect2["CASH_REGISTER"] = 274] = "CASH_REGISTER";
        SoundEffect2[SoundEffect2["ANGEL_WING"] = 275] = "ANGEL_WING";
        SoundEffect2[SoundEffect2["ANGEL_BEAM"] = 276] = "ANGEL_BEAM";
        SoundEffect2[SoundEffect2["HOLY_MANTLE"] = 277] = "HOLY_MANTLE";
        SoundEffect2[SoundEffect2["MEGA_BLAST_START"] = 278] = "MEGA_BLAST_START";
        SoundEffect2[SoundEffect2["MEGA_BLAST_LOOP"] = 279] = "MEGA_BLAST_LOOP";
        SoundEffect2[SoundEffect2["MEGA_BLAST_END"] = 280] = "MEGA_BLAST_END";
        SoundEffect2[SoundEffect2["BLOOD_LASER_LOOP"] = 281] = "BLOOD_LASER_LOOP";
        SoundEffect2[SoundEffect2["MENU_SCROLL"] = 282] = "MENU_SCROLL";
        SoundEffect2[SoundEffect2["MENU_NOTE_APPEAR"] = 283] = "MENU_NOTE_APPEAR";
        SoundEffect2[SoundEffect2["MENU_NOTE_HIDE"] = 284] = "MENU_NOTE_HIDE";
        SoundEffect2[SoundEffect2["MENU_CHARACTER_SELECT"] = 285] = "MENU_CHARACTER_SELECT";
        SoundEffect2[SoundEffect2["SUMMON_POOF"] = 286] = "SUMMON_POOF";
        SoundEffect2[SoundEffect2["BOO_MAD"] = 300] = "BOO_MAD";
        SoundEffect2[SoundEffect2["FART_GURG"] = 301] = "FART_GURG";
        SoundEffect2[SoundEffect2["FAT_GRUNT"] = 302] = "FAT_GRUNT";
        SoundEffect2[SoundEffect2["FAT_WIGGLE"] = 303] = "FAT_WIGGLE";
        SoundEffect2[SoundEffect2["FIRE_RUSH"] = 304] = "FIRE_RUSH";
        SoundEffect2[SoundEffect2["GHOST_ROAR"] = 305] = "GHOST_ROAR";
        SoundEffect2[SoundEffect2["GHOST_SHOOT"] = 306] = "GHOST_SHOOT";
        SoundEffect2[SoundEffect2["GROWL"] = 307] = "GROWL";
        SoundEffect2[SoundEffect2["GURG_BARF"] = 308] = "GURG_BARF";
        SoundEffect2[SoundEffect2["INHALE"] = 309] = "INHALE";
        SoundEffect2[SoundEffect2["LOW_INHALE"] = 310] = "LOW_INHALE";
        SoundEffect2[SoundEffect2["MEGA_PUKE"] = 311] = "MEGA_PUKE";
        SoundEffect2[SoundEffect2["MOUTH_FULL"] = 312] = "MOUTH_FULL";
        SoundEffect2[SoundEffect2["MULTI_SCREAM"] = 313] = "MULTI_SCREAM";
        SoundEffect2[SoundEffect2["SKIN_PULL"] = 314] = "SKIN_PULL";
        SoundEffect2[SoundEffect2["WHISTLE"] = 315] = "WHISTLE";
        SoundEffect2[SoundEffect2["DEVIL_ROOM_DEAL"] = 316] = "DEVIL_ROOM_DEAL";
        SoundEffect2[SoundEffect2["SPIDER_SPIT_ROAR"] = 317] = "SPIDER_SPIT_ROAR";
        SoundEffect2[SoundEffect2["WORM_SPIT"] = 318] = "WORM_SPIT";
        SoundEffect2[SoundEffect2["LITTLE_SPIT"] = 319] = "LITTLE_SPIT";
        SoundEffect2[SoundEffect2["SATAN_ROOM_APPEAR"] = 320] = "SATAN_ROOM_APPEAR";
        SoundEffect2[SoundEffect2["HEARTBEAT"] = 321] = "HEARTBEAT";
        SoundEffect2[SoundEffect2["HEARTBEAT_FASTER"] = 322] = "HEARTBEAT_FASTER";
        SoundEffect2[SoundEffect2["HEARTBEAT_FASTEST"] = 323] = "HEARTBEAT_FASTEST";
        SoundEffect2[SoundEffect2["FORTY_EIGHT_HOUR_ENERGY"] = 324] = "FORTY_EIGHT_HOUR_ENERGY";
        SoundEffect2[SoundEffect2["ALGIZ"] = 325] = "ALGIZ";
        SoundEffect2[SoundEffect2["AMNESIA"] = 326] = "AMNESIA";
        SoundEffect2[SoundEffect2["ANZUS"] = 327] = "ANZUS";
        SoundEffect2[SoundEffect2["BAD_GAS"] = 328] = "BAD_GAS";
        SoundEffect2[SoundEffect2["BAD_TRIP"] = 329] = "BAD_TRIP";
        SoundEffect2[SoundEffect2["BALLS_OF_STEEL"] = 330] = "BALLS_OF_STEEL";
        SoundEffect2[SoundEffect2["BERKANO"] = 331] = "BERKANO";
        SoundEffect2[SoundEffect2["BOMBS_ARE_KEY"] = 332] = "BOMBS_ARE_KEY";
        SoundEffect2[SoundEffect2["CARD_AGAINST_HUMANITY"] = 333] = "CARD_AGAINST_HUMANITY";
        SoundEffect2[SoundEffect2["CHAOS_CARD"] = 334] = "CHAOS_CARD";
        SoundEffect2[SoundEffect2["CREDIT_CARD"] = 335] = "CREDIT_CARD";
        SoundEffect2[SoundEffect2["DAGAZ"] = 336] = "DAGAZ";
        SoundEffect2[SoundEffect2["DEATH"] = 337] = "DEATH";
        SoundEffect2[SoundEffect2["EHWAZ"] = 338] = "EHWAZ";
        SoundEffect2[SoundEffect2["EXPLOSIVE_DIARRHEA"] = 339] = "EXPLOSIVE_DIARRHEA";
        SoundEffect2[SoundEffect2["FULL_HP"] = 340] = "FULL_HP";
        SoundEffect2[SoundEffect2["HAGALAZ"] = 341] = "HAGALAZ";
        SoundEffect2[SoundEffect2["HP_DOWN"] = 342] = "HP_DOWN";
        SoundEffect2[SoundEffect2["HP_UP"] = 343] = "HP_UP";
        SoundEffect2[SoundEffect2["HEMATEMESIS"] = 344] = "HEMATEMESIS";
        SoundEffect2[SoundEffect2["I_FOUND_PILLS"] = 345] = "I_FOUND_PILLS";
        SoundEffect2[SoundEffect2["JERA"] = 346] = "JERA";
        SoundEffect2[SoundEffect2["JOKER"] = 347] = "JOKER";
        SoundEffect2[SoundEffect2["JUDGEMENT"] = 348] = "JUDGEMENT";
        SoundEffect2[SoundEffect2["JUSTICE"] = 349] = "JUSTICE";
        SoundEffect2[SoundEffect2["LEMON_PARTY"] = 350] = "LEMON_PARTY";
        SoundEffect2[SoundEffect2["LUCK_DOWN"] = 351] = "LUCK_DOWN";
        SoundEffect2[SoundEffect2["LUCK_UP"] = 352] = "LUCK_UP";
        SoundEffect2[SoundEffect2["PARALYSIS"] = 353] = "PARALYSIS";
        SoundEffect2[SoundEffect2["PERTHRO"] = 354] = "PERTHRO";
        SoundEffect2[SoundEffect2["PHEROMONES"] = 355] = "PHEROMONES";
        SoundEffect2[SoundEffect2["PRETTY_FLY"] = 356] = "PRETTY_FLY";
        SoundEffect2[SoundEffect2["PUBERTY"] = 357] = "PUBERTY";
        SoundEffect2[SoundEffect2["R_U_A_WIZARD"] = 358] = "R_U_A_WIZARD";
        SoundEffect2[SoundEffect2["RANGE_DOWN"] = 359] = "RANGE_DOWN";
        SoundEffect2[SoundEffect2["RANGE_UP"] = 360] = "RANGE_UP";
        SoundEffect2[SoundEffect2["RULES_CARD"] = 361] = "RULES_CARD";
        SoundEffect2[SoundEffect2["I_CAN_SEE_FOREVER"] = 362] = "I_CAN_SEE_FOREVER";
        SoundEffect2[SoundEffect2["SPEED_DOWN"] = 363] = "SPEED_DOWN";
        SoundEffect2[SoundEffect2["SPEED_UP"] = 364] = "SPEED_UP";
        SoundEffect2[SoundEffect2["STRENGTH"] = 365] = "STRENGTH";
        SoundEffect2[SoundEffect2["SUICIDE_KING"] = 366] = "SUICIDE_KING";
        SoundEffect2[SoundEffect2["TEARS_DOWN"] = 367] = "TEARS_DOWN";
        SoundEffect2[SoundEffect2["TEARS_UP"] = 368] = "TEARS_UP";
        SoundEffect2[SoundEffect2["TELEPILLS"] = 369] = "TELEPILLS";
        SoundEffect2[SoundEffect2["TEMPERANCE"] = 370] = "TEMPERANCE";
        SoundEffect2[SoundEffect2["CHARIOT"] = 371] = "CHARIOT";
        SoundEffect2[SoundEffect2["DEVIL"] = 372] = "DEVIL";
        SoundEffect2[SoundEffect2["EMPEROR"] = 373] = "EMPEROR";
        SoundEffect2[SoundEffect2["EMPRESS"] = 374] = "EMPRESS";
        SoundEffect2[SoundEffect2["FOOL"] = 375] = "FOOL";
        SoundEffect2[SoundEffect2["HANGED_MAN"] = 376] = "HANGED_MAN";
        SoundEffect2[SoundEffect2["HERMIT"] = 377] = "HERMIT";
        SoundEffect2[SoundEffect2["HIEROPHANT"] = 378] = "HIEROPHANT";
        SoundEffect2[SoundEffect2["HIGH_PRIESTESS"] = 379] = "HIGH_PRIESTESS";
        SoundEffect2[SoundEffect2["LOVERS"] = 380] = "LOVERS";
        SoundEffect2[SoundEffect2["MAGICIAN"] = 381] = "MAGICIAN";
        SoundEffect2[SoundEffect2["MOON"] = 382] = "MOON";
        SoundEffect2[SoundEffect2["STARS"] = 383] = "STARS";
        SoundEffect2[SoundEffect2["SUN"] = 384] = "SUN";
        SoundEffect2[SoundEffect2["TOWER"] = 385] = "TOWER";
        SoundEffect2[SoundEffect2["WORLD"] = 386] = "WORLD";
        SoundEffect2[SoundEffect2["TWO_OF_CLUBS"] = 387] = "TWO_OF_CLUBS";
        SoundEffect2[SoundEffect2["TWO_OF_DIAMONDS"] = 388] = "TWO_OF_DIAMONDS";
        SoundEffect2[SoundEffect2["TWO_OF_HEARTS"] = 389] = "TWO_OF_HEARTS";
        SoundEffect2[SoundEffect2["TWO_OF_SPADES"] = 390] = "TWO_OF_SPADES";
        SoundEffect2[SoundEffect2["WHEEL_OF_FORTUNE"] = 391] = "WHEEL_OF_FORTUNE";
        SoundEffect2[SoundEffect2["RAGMAN_1"] = 392] = "RAGMAN_1";
        SoundEffect2[SoundEffect2["RAGMAN_2"] = 393] = "RAGMAN_2";
        SoundEffect2[SoundEffect2["RAGMAN_3"] = 394] = "RAGMAN_3";
        SoundEffect2[SoundEffect2["RAGMAN_4"] = 395] = "RAGMAN_4";
        SoundEffect2[SoundEffect2["FLUSH"] = 396] = "FLUSH";
        SoundEffect2[SoundEffect2["WATER_DROP"] = 397] = "WATER_DROP";
        SoundEffect2[SoundEffect2["WET_FEET"] = 398] = "WET_FEET";
        SoundEffect2[SoundEffect2["ADDICTED"] = 399] = "ADDICTED";
        SoundEffect2[SoundEffect2["DICE_SHARD"] = 400] = "DICE_SHARD";
        SoundEffect2[SoundEffect2["EMERGENCY"] = 401] = "EMERGENCY";
        SoundEffect2[SoundEffect2["INFESTED_EXCLAMATION"] = 402] = "INFESTED_EXCLAMATION";
        SoundEffect2[SoundEffect2["INFESTED_QUESTION"] = 403] = "INFESTED_QUESTION";
        SoundEffect2[SoundEffect2["GET_OUT_OF_JAIL_CARD"] = 404] = "GET_OUT_OF_JAIL_CARD";
        SoundEffect2[SoundEffect2["LARGER"] = 405] = "LARGER";
        SoundEffect2[SoundEffect2["PERCS"] = 406] = "PERCS";
        SoundEffect2[SoundEffect2["POWER_PILL"] = 407] = "POWER_PILL";
        SoundEffect2[SoundEffect2["QUESTION_MARK"] = 408] = "QUESTION_MARK";
        SoundEffect2[SoundEffect2["RELAX"] = 409] = "RELAX";
        SoundEffect2[SoundEffect2["RETRO"] = 410] = "RETRO";
        SoundEffect2[SoundEffect2["SMALL"] = 411] = "SMALL";
        SoundEffect2[SoundEffect2["QUESTION_MARKS"] = 412] = "QUESTION_MARKS";
        SoundEffect2[SoundEffect2["DANGLE_WHISTLE"] = 413] = "DANGLE_WHISTLE";
        SoundEffect2[SoundEffect2["LITTLE_HORN_COUGH"] = 414] = "LITTLE_HORN_COUGH";
        SoundEffect2[SoundEffect2["LITTLE_HORN_GRUNT_1"] = 415] = "LITTLE_HORN_GRUNT_1";
        SoundEffect2[SoundEffect2["LITTLE_HORN_GRUNT_2"] = 416] = "LITTLE_HORN_GRUNT_2";
        SoundEffect2[SoundEffect2["FORSAKEN_LAUGH"] = 417] = "FORSAKEN_LAUGH";
        SoundEffect2[SoundEffect2["FORSAKEN_SCREAM"] = 418] = "FORSAKEN_SCREAM";
        SoundEffect2[SoundEffect2["STAIN_BURST"] = 419] = "STAIN_BURST";
        SoundEffect2[SoundEffect2["BROWNIE_LAUGH"] = 420] = "BROWNIE_LAUGH";
        SoundEffect2[SoundEffect2["HUSH_ROAR"] = 421] = "HUSH_ROAR";
        SoundEffect2[SoundEffect2["HUSH_GROWL"] = 422] = "HUSH_GROWL";
        SoundEffect2[SoundEffect2["HUSH_LOW_ROAR"] = 423] = "HUSH_LOW_ROAR";
        SoundEffect2[SoundEffect2["FRAIL_CHARGE"] = 424] = "FRAIL_CHARGE";
        SoundEffect2[SoundEffect2["HUSH_CHARGE"] = 425] = "HUSH_CHARGE";
        SoundEffect2[SoundEffect2["MAW_OF_VOID"] = 426] = "MAW_OF_VOID";
        SoundEffect2[SoundEffect2["ULTRA_GREED_COIN_DESTROY"] = 427] = "ULTRA_GREED_COIN_DESTROY";
        SoundEffect2[SoundEffect2["ULTRA_GREED_COINS_FALLING"] = 428] = "ULTRA_GREED_COINS_FALLING";
        SoundEffect2[SoundEffect2["ULTRA_GREED_DEATH_SCREAM"] = 429] = "ULTRA_GREED_DEATH_SCREAM";
        SoundEffect2[SoundEffect2["ULTRA_GREED_TURN_GOLD_1"] = 430] = "ULTRA_GREED_TURN_GOLD_1";
        SoundEffect2[SoundEffect2["ULTRA_GREED_TURN_GOLD_2"] = 431] = "ULTRA_GREED_TURN_GOLD_2";
        SoundEffect2[SoundEffect2["ULTRA_GREED_ROAR_1"] = 432] = "ULTRA_GREED_ROAR_1";
        SoundEffect2[SoundEffect2["ULTRA_GREED_ROAR_2"] = 433] = "ULTRA_GREED_ROAR_2";
        SoundEffect2[SoundEffect2["ULTRA_GREED_SPIT"] = 434] = "ULTRA_GREED_SPIT";
        SoundEffect2[SoundEffect2["ULTRA_GREED_PULL_SLOT"] = 435] = "ULTRA_GREED_PULL_SLOT";
        SoundEffect2[SoundEffect2["ULTRA_GREED_SLOT_SPIN_LOOP"] = 436] = "ULTRA_GREED_SLOT_SPIN_LOOP";
        SoundEffect2[SoundEffect2["ULTRA_GREED_SLOT_STOP"] = 437] = "ULTRA_GREED_SLOT_STOP";
        SoundEffect2[SoundEffect2["ULTRA_GREED_SLOT_WIN_LOOP_END"] = 438] = "ULTRA_GREED_SLOT_WIN_LOOP_END";
        SoundEffect2[SoundEffect2["ULTRA_GREED_SLOT_WIN_LOOP"] = 439] = "ULTRA_GREED_SLOT_WIN_LOOP";
        SoundEffect2[SoundEffect2["ULTRA_GREED_SPINNING"] = 440] = "ULTRA_GREED_SPINNING";
        SoundEffect2[SoundEffect2["DOG_BARK"] = 441] = "DOG_BARK";
        SoundEffect2[SoundEffect2["DOG_HOWL"] = 442] = "DOG_HOWL";
        SoundEffect2[SoundEffect2["X_LAX"] = 443] = "X_LAX";
        SoundEffect2[SoundEffect2["WRONG"] = 444] = "WRONG";
        SoundEffect2[SoundEffect2["VURP"] = 445] = "VURP";
        SoundEffect2[SoundEffect2["SUNSHINE"] = 446] = "SUNSHINE";
        SoundEffect2[SoundEffect2["ACE_OF_SPADES"] = 447] = "ACE_OF_SPADES";
        SoundEffect2[SoundEffect2["HORF"] = 448] = "HORF";
        SoundEffect2[SoundEffect2["HOLY_CARD"] = 449] = "HOLY_CARD";
        SoundEffect2[SoundEffect2["ACE_OF_HEARTS"] = 450] = "ACE_OF_HEARTS";
        SoundEffect2[SoundEffect2["GULP"] = 451] = "GULP";
        SoundEffect2[SoundEffect2["FRIENDS"] = 452] = "FRIENDS";
        SoundEffect2[SoundEffect2["EXCITED"] = 453] = "EXCITED";
        SoundEffect2[SoundEffect2["DROWSY"] = 454] = "DROWSY";
        SoundEffect2[SoundEffect2["ACE_OF_DIAMONDS"] = 455] = "ACE_OF_DIAMONDS";
        SoundEffect2[SoundEffect2["ACE_OF_CLUBS"] = 456] = "ACE_OF_CLUBS";
        SoundEffect2[SoundEffect2["BLACK_RUNE"] = 457] = "BLACK_RUNE";
        SoundEffect2[SoundEffect2["PING_PONG"] = 458] = "PING_PONG";
        SoundEffect2[SoundEffect2["SPEWER"] = 459] = "SPEWER";
        SoundEffect2[SoundEffect2["MOM_FOOTSTEPS"] = 460] = "MOM_FOOTSTEPS";
        SoundEffect2[SoundEffect2["BONE_HEART"] = 461] = "BONE_HEART";
        SoundEffect2[SoundEffect2["BONE_SNAP"] = 462] = "BONE_SNAP";
        SoundEffect2[SoundEffect2["SHOVEL_DROP"] = 463] = "SHOVEL_DROP";
        SoundEffect2[SoundEffect2["SHOVEL_DIG"] = 464] = "SHOVEL_DIG";
        SoundEffect2[SoundEffect2["GOLD_HEART"] = 465] = "GOLD_HEART";
        SoundEffect2[SoundEffect2["GOLD_HEART_DROP"] = 466] = "GOLD_HEART_DROP";
        SoundEffect2[SoundEffect2["BONE_DROP"] = 467] = "BONE_DROP";
        SoundEffect2[SoundEffect2["UNHOLY"] = 468] = "UNHOLY";
        SoundEffect2[SoundEffect2["BUTTON_PRESS"] = 469] = "BUTTON_PRESS";
        SoundEffect2[SoundEffect2["GOLDEN_BOMB"] = 470] = "GOLDEN_BOMB";
        SoundEffect2[SoundEffect2["CANDLE_LIGHT"] = 471] = "CANDLE_LIGHT";
        SoundEffect2[SoundEffect2["THUNDER"] = 472] = "THUNDER";
        SoundEffect2[SoundEffect2["WATER_FLOW_LOOP"] = 473] = "WATER_FLOW_LOOP";
        SoundEffect2[SoundEffect2["BOSS_2_DIVE"] = 474] = "BOSS_2_DIVE";
        SoundEffect2[SoundEffect2["BOSS_2_INTRO_PIPES_TURNON"] = 475] = "BOSS_2_INTRO_PIPES_TURNON";
        SoundEffect2[SoundEffect2["WATER_FLOW_LARGE"] = 476] = "WATER_FLOW_LARGE";
        SoundEffect2[SoundEffect2["DEMON_HIT"] = 477] = "DEMON_HIT";
        SoundEffect2[SoundEffect2["PUNCH"] = 478] = "PUNCH";
        SoundEffect2[SoundEffect2["FLUTE"] = 479] = "FLUTE";
        SoundEffect2[SoundEffect2["LAVA_LOOP"] = 480] = "LAVA_LOOP";
        SoundEffect2[SoundEffect2["WOOD_PLANK_BREAK"] = 481] = "WOOD_PLANK_BREAK";
        SoundEffect2[SoundEffect2["BULLET_SHOT"] = 482] = "BULLET_SHOT";
        SoundEffect2[SoundEffect2["FLAME_BURST"] = 483] = "FLAME_BURST";
        SoundEffect2[SoundEffect2["INFLATE"] = 484] = "INFLATE";
        SoundEffect2[SoundEffect2["CLAP"] = 485] = "CLAP";
        SoundEffect2[SoundEffect2["BOSS_2_INTRO_WATER_EXPLOSION"] = 486] = "BOSS_2_INTRO_WATER_EXPLOSION";
        SoundEffect2[SoundEffect2["STONE_IMPACT"] = 487] = "STONE_IMPACT";
        SoundEffect2[SoundEffect2["BOSS_2_WATER_THRASHING"] = 488] = "BOSS_2_WATER_THRASHING";
        SoundEffect2[SoundEffect2["FART_MEGA"] = 489] = "FART_MEGA";
        SoundEffect2[SoundEffect2["MATCHSTICK"] = 490] = "MATCHSTICK";
        SoundEffect2[SoundEffect2["FORTUNE_COOKIE"] = 491] = "FORTUNE_COOKIE";
        SoundEffect2[SoundEffect2["BULB_FLASH"] = 492] = "BULB_FLASH";
        SoundEffect2[SoundEffect2["BATTERY_DISCHARGE"] = 493] = "BATTERY_DISCHARGE";
        SoundEffect2[SoundEffect2["WHIP"] = 494] = "WHIP";
        SoundEffect2[SoundEffect2["WHIP_HIT"] = 495] = "WHIP_HIT";
        SoundEffect2[SoundEffect2["FREEZE"] = 496] = "FREEZE";
        SoundEffect2[SoundEffect2["ROTTEN_HEART"] = 497] = "ROTTEN_HEART";
        SoundEffect2[SoundEffect2["FREEZE_SHATTER"] = 498] = "FREEZE_SHATTER";
        SoundEffect2[SoundEffect2["BONE_BOUNCE"] = 499] = "BONE_BOUNCE";
        SoundEffect2[SoundEffect2["BONE_BREAK"] = 500] = "BONE_BREAK";
        SoundEffect2[SoundEffect2["BISHOP_HIT"] = 501] = "BISHOP_HIT";
        SoundEffect2[SoundEffect2["CHAIN_LOOP"] = 503] = "CHAIN_LOOP";
        SoundEffect2[SoundEffect2["CHAIN_BREAK"] = 504] = "CHAIN_BREAK";
        SoundEffect2[SoundEffect2["MINECART_LOOP"] = 505] = "MINECART_LOOP";
        SoundEffect2[SoundEffect2["TOOTH_AND_NAIL"] = 506] = "TOOTH_AND_NAIL";
        SoundEffect2[SoundEffect2["TOOTH_AND_NAIL_TICK"] = 507] = "TOOTH_AND_NAIL_TICK";
        SoundEffect2[SoundEffect2["STATIC_BUILDUP"] = 508] = "STATIC_BUILDUP";
        SoundEffect2[SoundEffect2["BIG_LEECH"] = 510] = "BIG_LEECH";
        SoundEffect2[SoundEffect2["REVERSE_EXPLOSION"] = 511] = "REVERSE_EXPLOSION";
        SoundEffect2[SoundEffect2["REVERSE_FOOL"] = 512] = "REVERSE_FOOL";
        SoundEffect2[SoundEffect2["REVERSE_MAGICIAN"] = 513] = "REVERSE_MAGICIAN";
        SoundEffect2[SoundEffect2["REVERSE_HIGH_PRIESTESS"] = 514] = "REVERSE_HIGH_PRIESTESS";
        SoundEffect2[SoundEffect2["REVERSE_EMPRESS"] = 515] = "REVERSE_EMPRESS";
        SoundEffect2[SoundEffect2["REVERSE_EMPEROR"] = 516] = "REVERSE_EMPEROR";
        SoundEffect2[SoundEffect2["REVERSE_HIEROPHANT"] = 517] = "REVERSE_HIEROPHANT";
        SoundEffect2[SoundEffect2["REVERSE_LOVERS"] = 518] = "REVERSE_LOVERS";
        SoundEffect2[SoundEffect2["REVERSE_CHARIOT"] = 519] = "REVERSE_CHARIOT";
        SoundEffect2[SoundEffect2["REVERSE_JUSTICE"] = 520] = "REVERSE_JUSTICE";
        SoundEffect2[SoundEffect2["REVERSE_HERMIT"] = 521] = "REVERSE_HERMIT";
        SoundEffect2[SoundEffect2["REVERSE_WHEEL_OF_FORTUNE"] = 522] = "REVERSE_WHEEL_OF_FORTUNE";
        SoundEffect2[SoundEffect2["REVERSE_STRENGTH"] = 523] = "REVERSE_STRENGTH";
        SoundEffect2[SoundEffect2["REVERSE_HANGED_MAN"] = 524] = "REVERSE_HANGED_MAN";
        SoundEffect2[SoundEffect2["REVERSE_DEATH"] = 525] = "REVERSE_DEATH";
        SoundEffect2[SoundEffect2["REVERSE_TEMPERANCE"] = 526] = "REVERSE_TEMPERANCE";
        SoundEffect2[SoundEffect2["REVERSE_DEVIL"] = 527] = "REVERSE_DEVIL";
        SoundEffect2[SoundEffect2["REVERSE_TOWER"] = 528] = "REVERSE_TOWER";
        SoundEffect2[SoundEffect2["REVERSE_STARS"] = 529] = "REVERSE_STARS";
        SoundEffect2[SoundEffect2["REVERSE_MOON"] = 530] = "REVERSE_MOON";
        SoundEffect2[SoundEffect2["REVERSE_SUN"] = 531] = "REVERSE_SUN";
        SoundEffect2[SoundEffect2["REVERSE_JUDGEMENT"] = 532] = "REVERSE_JUDGEMENT";
        SoundEffect2[SoundEffect2["REVERSE_WORLD"] = 533] = "REVERSE_WORLD";
        SoundEffect2[SoundEffect2["FLAMETHROWER_START"] = 534] = "FLAMETHROWER_START";
        SoundEffect2[SoundEffect2["FLAMETHROWER_LOOP"] = 535] = "FLAMETHROWER_LOOP";
        SoundEffect2[SoundEffect2["FLAMETHROWER_END"] = 536] = "FLAMETHROWER_END";
        SoundEffect2[SoundEffect2["ROCKET_LAUNCH"] = 537] = "ROCKET_LAUNCH";
        SoundEffect2[SoundEffect2["SWORD_SPIN"] = 538] = "SWORD_SPIN";
        SoundEffect2[SoundEffect2["BABY_BRIM"] = 539] = "BABY_BRIM";
        SoundEffect2[SoundEffect2["KNIFE_PULL"] = 540] = "KNIFE_PULL";
        SoundEffect2[SoundEffect2["DOGMA_APPEAR_SCREAM"] = 541] = "DOGMA_APPEAR_SCREAM";
        SoundEffect2[SoundEffect2["DOGMA_DEATH"] = 542] = "DOGMA_DEATH";
        SoundEffect2[SoundEffect2["DOGMA_BLACK_HOLE_CHARGE"] = 543] = "DOGMA_BLACK_HOLE_CHARGE";
        SoundEffect2[SoundEffect2["DOGMA_BLACK_HOLE_SHOOT"] = 544] = "DOGMA_BLACK_HOLE_SHOOT";
        SoundEffect2[SoundEffect2["DOGMA_BLACK_HOLE_OPEN"] = 545] = "DOGMA_BLACK_HOLE_OPEN";
        SoundEffect2[SoundEffect2["DOGMA_BLACK_HOLE_CLOSE"] = 546] = "DOGMA_BLACK_HOLE_CLOSE";
        SoundEffect2[SoundEffect2["DOGMA_BRIMSTONE_CHARGE"] = 547] = "DOGMA_BRIMSTONE_CHARGE";
        SoundEffect2[SoundEffect2["DOGMA_BRIMSTONE_SHOOT"] = 548] = "DOGMA_BRIMSTONE_SHOOT";
        SoundEffect2[SoundEffect2["DOGMA_GODHEAD"] = 549] = "DOGMA_GODHEAD";
        SoundEffect2[SoundEffect2["DOGMA_JACOBS"] = 550] = "DOGMA_JACOBS";
        SoundEffect2[SoundEffect2["DOGMA_JACOBS_ZAP"] = 551] = "DOGMA_JACOBS_ZAP";
        SoundEffect2[SoundEffect2["DOGMA_SCREAM"] = 552] = "DOGMA_SCREAM";
        SoundEffect2[SoundEffect2["DOGMA_PREACHER"] = 553] = "DOGMA_PREACHER";
        SoundEffect2[SoundEffect2["DOGMA_RING_START"] = 554] = "DOGMA_RING_START";
        SoundEffect2[SoundEffect2["DOGMA_RING_LOOP"] = 555] = "DOGMA_RING_LOOP";
        SoundEffect2[SoundEffect2["DOGMA_FEATHER_SPRAY"] = 556] = "DOGMA_FEATHER_SPRAY";
        SoundEffect2[SoundEffect2["DOGMA_JACOBS_DOT"] = 557] = "DOGMA_JACOBS_DOT";
        SoundEffect2[SoundEffect2["DOGMA_BLACK_HOLE_LOOP"] = 558] = "DOGMA_BLACK_HOLE_LOOP";
        SoundEffect2[SoundEffect2["DOGMA_ANGEL_TRANSFORM"] = 559] = "DOGMA_ANGEL_TRANSFORM";
        SoundEffect2[SoundEffect2["DOGMA_ANGEL_TRANSFORM_END"] = 560] = "DOGMA_ANGEL_TRANSFORM_END";
        SoundEffect2[SoundEffect2["DOGMA_LIGHT_APPEAR"] = 561] = "DOGMA_LIGHT_APPEAR";
        SoundEffect2[SoundEffect2["DOGMA_LIGHT_BALL_THROW"] = 562] = "DOGMA_LIGHT_BALL_THROW";
        SoundEffect2[SoundEffect2["DOGMA_LIGHT_RAY_CHARGE"] = 563] = "DOGMA_LIGHT_RAY_CHARGE";
        SoundEffect2[SoundEffect2["DOGMA_LIGHT_RAY_FIRE"] = 564] = "DOGMA_LIGHT_RAY_FIRE";
        SoundEffect2[SoundEffect2["DOGMA_SPIN_ATTACK"] = 565] = "DOGMA_SPIN_ATTACK";
        SoundEffect2[SoundEffect2["DOGMA_WING_FLAP"] = 566] = "DOGMA_WING_FLAP";
        SoundEffect2[SoundEffect2["DOGMA_TV_BREAK"] = 567] = "DOGMA_TV_BREAK";
        SoundEffect2[SoundEffect2["DIVINE_INTERVENTION"] = 568] = "DIVINE_INTERVENTION";
        SoundEffect2[SoundEffect2["MENU_FLIP_LIGHT"] = 569] = "MENU_FLIP_LIGHT";
        SoundEffect2[SoundEffect2["MENU_FLIP_DARK"] = 570] = "MENU_FLIP_DARK";
        SoundEffect2[SoundEffect2["MENU_RIP"] = 571] = "MENU_RIP";
        SoundEffect2[SoundEffect2["URN_OPEN"] = 572] = "URN_OPEN";
        SoundEffect2[SoundEffect2["URN_CLOSE"] = 573] = "URN_CLOSE";
        SoundEffect2[SoundEffect2["RECALL"] = 574] = "RECALL";
        SoundEffect2[SoundEffect2["LARYNX_SCREAM_LO"] = 575] = "LARYNX_SCREAM_LO";
        SoundEffect2[SoundEffect2["LARYNX_SCREAM_MED"] = 576] = "LARYNX_SCREAM_MED";
        SoundEffect2[SoundEffect2["LARYNX_SCREAM_HI"] = 577] = "LARYNX_SCREAM_HI";
        SoundEffect2[SoundEffect2["GROUND_TREMOR"] = 578] = "GROUND_TREMOR";
        SoundEffect2[SoundEffect2["SOUL_PICKUP"] = 579] = "SOUL_PICKUP";
        SoundEffect2[SoundEffect2["BALL_AND_CHAIN_LOOP"] = 580] = "BALL_AND_CHAIN_LOOP";
        SoundEffect2[SoundEffect2["BALL_AND_CHAIN_HIT"] = 581] = "BALL_AND_CHAIN_HIT";
        SoundEffect2[SoundEffect2["LAZARUS_FLIP_DEAD"] = 582] = "LAZARUS_FLIP_DEAD";
        SoundEffect2[SoundEffect2["LAZARUS_FLIP_ALIVE"] = 583] = "LAZARUS_FLIP_ALIVE";
        SoundEffect2[SoundEffect2["RECALL_FINISH"] = 584] = "RECALL_FINISH";
        SoundEffect2[SoundEffect2["ROCKET_LAUNCH_SHORT"] = 585] = "ROCKET_LAUNCH_SHORT";
        SoundEffect2[SoundEffect2["ROCKET_LAUNCH_TINY"] = 586] = "ROCKET_LAUNCH_TINY";
        SoundEffect2[SoundEffect2["ROCKET_EXPLOSION"] = 587] = "ROCKET_EXPLOSION";
        SoundEffect2[SoundEffect2["JELLY_BOUNCE"] = 588] = "JELLY_BOUNCE";
        SoundEffect2[SoundEffect2["POOP_LASER"] = 589] = "POOP_LASER";
        SoundEffect2[SoundEffect2["POISON_WARN"] = 590] = "POISON_WARN";
        SoundEffect2[SoundEffect2["POISON_HURT"] = 591] = "POISON_HURT";
        SoundEffect2[SoundEffect2["BERSERK_START"] = 592] = "BERSERK_START";
        SoundEffect2[SoundEffect2["BERSERK_TICK"] = 593] = "BERSERK_TICK";
        SoundEffect2[SoundEffect2["BERSERK_END"] = 594] = "BERSERK_END";
        SoundEffect2[SoundEffect2["EDEN_GLITCH"] = 595] = "EDEN_GLITCH";
        SoundEffect2[SoundEffect2["RAILROAD_TRACK_RAISE"] = 596] = "RAILROAD_TRACK_RAISE";
        SoundEffect2[SoundEffect2["RAILROAD_TRACK_RAISE_FAR"] = 597] = "RAILROAD_TRACK_RAISE_FAR";
        SoundEffect2[SoundEffect2["MOM_AND_DAD_1"] = 598] = "MOM_AND_DAD_1";
        SoundEffect2[SoundEffect2["MOM_AND_DAD_2"] = 599] = "MOM_AND_DAD_2";
        SoundEffect2[SoundEffect2["MOM_AND_DAD_3"] = 600] = "MOM_AND_DAD_3";
        SoundEffect2[SoundEffect2["MOM_AND_DAD_4"] = 601] = "MOM_AND_DAD_4";
        SoundEffect2[SoundEffect2["THUMBS_UP_AMPLIFIED"] = 602] = "THUMBS_UP_AMPLIFIED";
        SoundEffect2[SoundEffect2["THUMBS_DOWN_AMPLIFIED"] = 603] = "THUMBS_DOWN_AMPLIFIED";
        SoundEffect2[SoundEffect2["POWER_UP_SPEWER_AMPLIFIED"] = 604] = "POWER_UP_SPEWER_AMPLIFIED";
        SoundEffect2[SoundEffect2["POOP_ITEM_THROW"] = 605] = "POOP_ITEM_THROW";
        SoundEffect2[SoundEffect2["POOP_ITEM_STORE"] = 606] = "POOP_ITEM_STORE";
        SoundEffect2[SoundEffect2["POOP_ITEM_HOLD"] = 607] = "POOP_ITEM_HOLD";
        SoundEffect2[SoundEffect2["MIRROR_ENTER"] = 608] = "MIRROR_ENTER";
        SoundEffect2[SoundEffect2["MIRROR_EXIT"] = 609] = "MIRROR_EXIT";
        SoundEffect2[SoundEffect2["MIRROR_BREAK"] = 610] = "MIRROR_BREAK";
        SoundEffect2[SoundEffect2["ANIMA_TRAP"] = 611] = "ANIMA_TRAP";
        SoundEffect2[SoundEffect2["ANIMA_RATTLE"] = 612] = "ANIMA_RATTLE";
        SoundEffect2[SoundEffect2["ANIMA_BREAK"] = 613] = "ANIMA_BREAK";
        SoundEffect2[SoundEffect2["VAMP_DOUBLE"] = 614] = "VAMP_DOUBLE";
        SoundEffect2[SoundEffect2["FLASHBACK"] = 615] = "FLASHBACK";
        SoundEffect2[SoundEffect2["DARK_ESAU_OPEN"] = 616] = "DARK_ESAU_OPEN";
        SoundEffect2[SoundEffect2["DARK_ESAU_DEATH_OPEN"] = 617] = "DARK_ESAU_DEATH_OPEN";
        SoundEffect2[SoundEffect2["MOTHER_DEATH_1"] = 618] = "MOTHER_DEATH_1";
        SoundEffect2[SoundEffect2["MOTHER_DEATH_2"] = 619] = "MOTHER_DEATH_2";
        SoundEffect2[SoundEffect2["MOTHER_FIST_POUND_1"] = 620] = "MOTHER_FIST_POUND_1";
        SoundEffect2[SoundEffect2["MOTHER_FIST_POUND_2"] = 621] = "MOTHER_FIST_POUND_2";
        SoundEffect2[SoundEffect2["MOTHER_FIST_POUND_3"] = 622] = "MOTHER_FIST_POUND_3";
        SoundEffect2[SoundEffect2["MOTHER_FISTULA"] = 623] = "MOTHER_FISTULA";
        SoundEffect2[SoundEffect2["MOTHER_APPEAR_1"] = 624] = "MOTHER_APPEAR_1";
        SoundEffect2[SoundEffect2["MOTHER_APPEAR_2"] = 625] = "MOTHER_APPEAR_2";
        SoundEffect2[SoundEffect2["MOTHER_KNIFE_START"] = 626] = "MOTHER_KNIFE_START";
        SoundEffect2[SoundEffect2["MOTHER_KNIFE_THROW"] = 627] = "MOTHER_KNIFE_THROW";
        SoundEffect2[SoundEffect2["MOTHER_SUMMON_ISAACS_START"] = 628] = "MOTHER_SUMMON_ISAACS_START";
        SoundEffect2[SoundEffect2["MOTHER_SUMMON_ISAACS_END"] = 629] = "MOTHER_SUMMON_ISAACS_END";
        SoundEffect2[SoundEffect2["MOTHER_HAND_BOIL_START"] = 630] = "MOTHER_HAND_BOIL_START";
        SoundEffect2[SoundEffect2["MOTHER_GRUNT_1"] = 631] = "MOTHER_GRUNT_1";
        SoundEffect2[SoundEffect2["MOTHER_GRUNT_5"] = 632] = "MOTHER_GRUNT_5";
        SoundEffect2[SoundEffect2["MOTHER_GRUNT_6"] = 633] = "MOTHER_GRUNT_6";
        SoundEffect2[SoundEffect2["MOTHER_GRUNT_7"] = 634] = "MOTHER_GRUNT_7";
        SoundEffect2[SoundEffect2["MOTHER_LAUGH"] = 635] = "MOTHER_LAUGH";
        SoundEffect2[SoundEffect2["MOTHER_SPIN_START"] = 636] = "MOTHER_SPIN_START";
        SoundEffect2[SoundEffect2["MOTHER_WALL_SHOT_START"] = 637] = "MOTHER_WALL_SHOT_START";
        SoundEffect2[SoundEffect2["MOTHER_MISC"] = 638] = "MOTHER_MISC";
        SoundEffect2[SoundEffect2["MOTHER_SHOOT"] = 639] = "MOTHER_SHOOT";
        SoundEffect2[SoundEffect2["MOTHER_SUCTION"] = 640] = "MOTHER_SUCTION";
        SoundEffect2[SoundEffect2["MOTHER_ISAAC_RISE"] = 641] = "MOTHER_ISAAC_RISE";
        SoundEffect2[SoundEffect2["MOTHER_ISAAC_HIT"] = 642] = "MOTHER_ISAAC_HIT";
        SoundEffect2[SoundEffect2["MOTHER_WRIST_SWELL"] = 643] = "MOTHER_WRIST_SWELL";
        SoundEffect2[SoundEffect2["MOTHER_WRIST_EXPLODE"] = 644] = "MOTHER_WRIST_EXPLODE";
        SoundEffect2[SoundEffect2["MOTHER_DEATH_MELT"] = 645] = "MOTHER_DEATH_MELT";
        SoundEffect2[SoundEffect2["MOTHER_ANGER_SHAKE"] = 646] = "MOTHER_ANGER_SHAKE";
        SoundEffect2[SoundEffect2["MOTHER_CHARGE_1"] = 647] = "MOTHER_CHARGE_1";
        SoundEffect2[SoundEffect2["MOTHER_CHARGE_2"] = 648] = "MOTHER_CHARGE_2";
        SoundEffect2[SoundEffect2["MOTHER_LAND_SMASH"] = 649] = "MOTHER_LAND_SMASH";
        SoundEffect2[SoundEffect2["ISAAC_ROAR"] = 650] = "ISAAC_ROAR";
        SoundEffect2[SoundEffect2["FAMINE_APPEAR"] = 651] = "FAMINE_APPEAR";
        SoundEffect2[SoundEffect2["FAMINE_DEATH_1"] = 652] = "FAMINE_DEATH_1";
        SoundEffect2[SoundEffect2["FAMINE_DEATH_2"] = 653] = "FAMINE_DEATH_2";
        SoundEffect2[SoundEffect2["FAMINE_DASH_START"] = 654] = "FAMINE_DASH_START";
        SoundEffect2[SoundEffect2["FAMINE_DASH"] = 655] = "FAMINE_DASH";
        SoundEffect2[SoundEffect2["FAMINE_SHOOT"] = 656] = "FAMINE_SHOOT";
        SoundEffect2[SoundEffect2["FAMINE_BURST"] = 657] = "FAMINE_BURST";
        SoundEffect2[SoundEffect2["FAMINE_GURGLE"] = 658] = "FAMINE_GURGLE";
        SoundEffect2[SoundEffect2["PESTILENCE_MAGGOT_START"] = 659] = "PESTILENCE_MAGGOT_START";
        SoundEffect2[SoundEffect2["PESTILENCE_MAGGOT_SHOOT_1"] = 660] = "PESTILENCE_MAGGOT_SHOOT_1";
        SoundEffect2[SoundEffect2["PESTILENCE_MAGGOT_RETURN"] = 661] = "PESTILENCE_MAGGOT_RETURN";
        SoundEffect2[SoundEffect2["PESTILENCE_BODY_SHOOT"] = 662] = "PESTILENCE_BODY_SHOOT";
        SoundEffect2[SoundEffect2["PESTILENCE_HEAD_DEATH"] = 663] = "PESTILENCE_HEAD_DEATH";
        SoundEffect2[SoundEffect2["PESTILENCE_DEATH"] = 664] = "PESTILENCE_DEATH";
        SoundEffect2[SoundEffect2["PESTILENCE_COUGH"] = 665] = "PESTILENCE_COUGH";
        SoundEffect2[SoundEffect2["PESTILENCE_BARF"] = 666] = "PESTILENCE_BARF";
        SoundEffect2[SoundEffect2["PESTILENCE_APPEAR"] = 667] = "PESTILENCE_APPEAR";
        SoundEffect2[SoundEffect2["PESTILENCE_HEAD_EXPLODE"] = 668] = "PESTILENCE_HEAD_EXPLODE";
        SoundEffect2[SoundEffect2["PESTILENCE_MAGGOT_ENTER"] = 669] = "PESTILENCE_MAGGOT_ENTER";
        SoundEffect2[SoundEffect2["PESTILENCE_MAGGOT_POP_OUT"] = 670] = "PESTILENCE_MAGGOT_POP_OUT";
        SoundEffect2[SoundEffect2["PESTILENCE_MAGGOT_SHOOT_2"] = 671] = "PESTILENCE_MAGGOT_SHOOT_2";
        SoundEffect2[SoundEffect2["PESTILENCE_NECK_PUKE"] = 672] = "PESTILENCE_NECK_PUKE";
        SoundEffect2[SoundEffect2["PESTILENCE_PUKE_START"] = 673] = "PESTILENCE_PUKE_START";
        SoundEffect2[SoundEffect2["WAR_APPEAR"] = 674] = "WAR_APPEAR";
        SoundEffect2[SoundEffect2["WAR_APPEAR_LAVA"] = 675] = "WAR_APPEAR_LAVA";
        SoundEffect2[SoundEffect2["WAR_BOMB_TOSS"] = 676] = "WAR_BOMB_TOSS";
        SoundEffect2[SoundEffect2["WAR_DASH_START"] = 677] = "WAR_DASH_START";
        SoundEffect2[SoundEffect2["WAR_DASH"] = 678] = "WAR_DASH";
        SoundEffect2[SoundEffect2["WAR_HORSE_DEATH"] = 679] = "WAR_HORSE_DEATH";
        SoundEffect2[SoundEffect2["WAR_DEATH"] = 680] = "WAR_DEATH";
        SoundEffect2[SoundEffect2["WAR_FIRE_SCREAM"] = 681] = "WAR_FIRE_SCREAM";
        SoundEffect2[SoundEffect2["WAR_GRAB_PLAYER"] = 682] = "WAR_GRAB_PLAYER";
        SoundEffect2[SoundEffect2["WAR_BOMB_HOLD"] = 683] = "WAR_BOMB_HOLD";
        SoundEffect2[SoundEffect2["WAR_BOMB_PULL_OUT"] = 684] = "WAR_BOMB_PULL_OUT";
        SoundEffect2[SoundEffect2["WAR_CHASE"] = 685] = "WAR_CHASE";
        SoundEffect2[SoundEffect2["WAR_BOMB_TICK"] = 686] = "WAR_BOMB_TICK";
        SoundEffect2[SoundEffect2["WAR_FLAME"] = 687] = "WAR_FLAME";
        SoundEffect2[SoundEffect2["WAR_LAVA_SPLASH"] = 688] = "WAR_LAVA_SPLASH";
        SoundEffect2[SoundEffect2["WAR_LAVA_DASH"] = 689] = "WAR_LAVA_DASH";
        SoundEffect2[SoundEffect2["DEATH_DIES"] = 690] = "DEATH_DIES";
        SoundEffect2[SoundEffect2["DEATH_DESTROY_SKULLS"] = 691] = "DEATH_DESTROY_SKULLS";
        SoundEffect2[SoundEffect2["DEATH_GROWL"] = 692] = "DEATH_GROWL";
        SoundEffect2[SoundEffect2["DEATH_SWIPE_START"] = 693] = "DEATH_SWIPE_START";
        SoundEffect2[SoundEffect2["DEATH_SWIPE"] = 694] = "DEATH_SWIPE";
        SoundEffect2[SoundEffect2["DEATH_SUMMON_SCYTHES"] = 695] = "DEATH_SUMMON_SCYTHES";
        SoundEffect2[SoundEffect2["DEATH_SUMMON_SKULLS"] = 696] = "DEATH_SUMMON_SKULLS";
        SoundEffect2[SoundEffect2["BEAST_DEATH"] = 697] = "BEAST_DEATH";
        SoundEffect2[SoundEffect2["BEAST_LASER"] = 698] = "BEAST_LASER";
        SoundEffect2[SoundEffect2["BEAST_BACKGROUND_DIVE"] = 699] = "BEAST_BACKGROUND_DIVE";
        SoundEffect2[SoundEffect2["BEAST_FIRE_RING"] = 700] = "BEAST_FIRE_RING";
        SoundEffect2[SoundEffect2["BEAST_GHOST_DASH"] = 701] = "BEAST_GHOST_DASH";
        SoundEffect2[SoundEffect2["BEAST_GHOST_RISE"] = 702] = "BEAST_GHOST_RISE";
        SoundEffect2[SoundEffect2["BEAST_LAVA_BALL_SPLASH"] = 703] = "BEAST_LAVA_BALL_SPLASH";
        SoundEffect2[SoundEffect2["BEAST_LAVA_RISE"] = 704] = "BEAST_LAVA_RISE";
        SoundEffect2[SoundEffect2["BEAST_SUCTION_LOOP"] = 705] = "BEAST_SUCTION_LOOP";
        SoundEffect2[SoundEffect2["BEAST_FIRE_BARF"] = 706] = "BEAST_FIRE_BARF";
        SoundEffect2[SoundEffect2["BEAST_GHOST_ROAR"] = 707] = "BEAST_GHOST_ROAR";
        SoundEffect2[SoundEffect2["BEAST_INTRO_SCREAM"] = 708] = "BEAST_INTRO_SCREAM";
        SoundEffect2[SoundEffect2["BEAST_SUCTION_END"] = 709] = "BEAST_SUCTION_END";
        SoundEffect2[SoundEffect2["BEAST_SUCTION_START"] = 710] = "BEAST_SUCTION_START";
        SoundEffect2[SoundEffect2["BEAST_SPIT"] = 711] = "BEAST_SPIT";
        SoundEffect2[SoundEffect2["BEAST_SURFACE_GROWL"] = 712] = "BEAST_SURFACE_GROWL";
        SoundEffect2[SoundEffect2["BEAST_SWITCH_SIDES"] = 713] = "BEAST_SWITCH_SIDES";
        SoundEffect2[SoundEffect2["MOTHER_SHADOW_APPEAR"] = 714] = "MOTHER_SHADOW_APPEAR";
        SoundEffect2[SoundEffect2["MOTHER_SHADOW_CHARGE_UP"] = 715] = "MOTHER_SHADOW_CHARGE_UP";
        SoundEffect2[SoundEffect2["MOTHER_SHADOW_DASH"] = 716] = "MOTHER_SHADOW_DASH";
        SoundEffect2[SoundEffect2["MOTHER_SHADOW_END"] = 717] = "MOTHER_SHADOW_END";
        SoundEffect2[SoundEffect2["MOTHER_SHADOW_INTRO"] = 718] = "MOTHER_SHADOW_INTRO";
        SoundEffect2[SoundEffect2["BUMBINO_DEATH"] = 719] = "BUMBINO_DEATH";
        SoundEffect2[SoundEffect2["BUMBINO_DIZZY"] = 720] = "BUMBINO_DIZZY";
        SoundEffect2[SoundEffect2["BUMBINO_HIT_WALL"] = 721] = "BUMBINO_HIT_WALL";
        SoundEffect2[SoundEffect2["BUMBINO_MISC"] = 722] = "BUMBINO_MISC";
        SoundEffect2[SoundEffect2["BUMBINO_PUNCH"] = 723] = "BUMBINO_PUNCH";
        SoundEffect2[SoundEffect2["BUMBINO_RAM"] = 724] = "BUMBINO_RAM";
        SoundEffect2[SoundEffect2["BUMBINO_SLAM"] = 725] = "BUMBINO_SLAM";
        SoundEffect2[SoundEffect2["BUMBINO_SNAP_OUT"] = 726] = "BUMBINO_SNAP_OUT";
        SoundEffect2[SoundEffect2["SIREN_SCREAM"] = 727] = "SIREN_SCREAM";
        SoundEffect2[SoundEffect2["SIREN_SING"] = 728] = "SIREN_SING";
        SoundEffect2[SoundEffect2["DEATH_SKULL_SUMMON_LOOP"] = 729] = "DEATH_SKULL_SUMMON_LOOP";
        SoundEffect2[SoundEffect2["DEATH_SKULL_SUMMON_END"] = 730] = "DEATH_SKULL_SUMMON_END";
        SoundEffect2[SoundEffect2["BEAST_DEATH_2"] = 731] = "BEAST_DEATH_2";
        SoundEffect2[SoundEffect2["BEAST_ANGELIC_BLAST"] = 732] = "BEAST_ANGELIC_BLAST";
        SoundEffect2[SoundEffect2["ANCIENT_RECALL"] = 733] = "ANCIENT_RECALL";
        SoundEffect2[SoundEffect2["ERA_WALK"] = 734] = "ERA_WALK";
        SoundEffect2[SoundEffect2["HUGE_GROWTH"] = 735] = "HUGE_GROWTH";
        SoundEffect2[SoundEffect2["RUNE_SHARD"] = 736] = "RUNE_SHARD";
        SoundEffect2[SoundEffect2["SHOT_SPEED_DOWN"] = 737] = "SHOT_SPEED_DOWN";
        SoundEffect2[SoundEffect2["SHOT_SPEED_UP"] = 738] = "SHOT_SPEED_UP";
        SoundEffect2[SoundEffect2["EXPERIMENTAL_PILL"] = 739] = "EXPERIMENTAL_PILL";
        SoundEffect2[SoundEffect2["CRACKED_KEY"] = 740] = "CRACKED_KEY";
        SoundEffect2[SoundEffect2["QUEEN_OF_HEARTS"] = 741] = "QUEEN_OF_HEARTS";
        SoundEffect2[SoundEffect2["WILD_CARD"] = 742] = "WILD_CARD";
        SoundEffect2[SoundEffect2["SOUL_OF_ISAAC"] = 743] = "SOUL_OF_ISAAC";
        SoundEffect2[SoundEffect2["SOUL_OF_MAGDALENE"] = 744] = "SOUL_OF_MAGDALENE";
        SoundEffect2[SoundEffect2["SOUL_OF_CAIN"] = 745] = "SOUL_OF_CAIN";
        SoundEffect2[SoundEffect2["SOUL_OF_JUDAS"] = 746] = "SOUL_OF_JUDAS";
        SoundEffect2[SoundEffect2["SOUL_OF_XXX"] = 747] = "SOUL_OF_XXX";
        SoundEffect2[SoundEffect2["SOUL_OF_EVE"] = 748] = "SOUL_OF_EVE";
        SoundEffect2[SoundEffect2["SOUL_OF_SAMSON"] = 749] = "SOUL_OF_SAMSON";
        SoundEffect2[SoundEffect2["SOUL_OF_AZAZEL"] = 750] = "SOUL_OF_AZAZEL";
        SoundEffect2[SoundEffect2["SOUL_OF_LAZARUS"] = 751] = "SOUL_OF_LAZARUS";
        SoundEffect2[SoundEffect2["SOUL_OF_EDEN"] = 752] = "SOUL_OF_EDEN";
        SoundEffect2[SoundEffect2["SOUL_OF_THE_LOST"] = 753] = "SOUL_OF_THE_LOST";
        SoundEffect2[SoundEffect2["SOUL_OF_LILITH"] = 754] = "SOUL_OF_LILITH";
        SoundEffect2[SoundEffect2["SOUL_OF_THE_KEEPER"] = 755] = "SOUL_OF_THE_KEEPER";
        SoundEffect2[SoundEffect2["SOUL_OF_APOLLYON"] = 756] = "SOUL_OF_APOLLYON";
        SoundEffect2[SoundEffect2["SOUL_OF_THE_FORGOTTEN"] = 757] = "SOUL_OF_THE_FORGOTTEN";
        SoundEffect2[SoundEffect2["SOUL_OF_BETHANY"] = 758] = "SOUL_OF_BETHANY";
        SoundEffect2[SoundEffect2["SOUL_OF_JACOB_AND_ESAU"] = 759] = "SOUL_OF_JACOB_AND_ESAU";
        SoundEffect2[SoundEffect2["MEGA_BAD_GAS"] = 760] = "MEGA_BAD_GAS";
        SoundEffect2[SoundEffect2["MEGA_BAD_TRIP"] = 761] = "MEGA_BAD_TRIP";
        SoundEffect2[SoundEffect2["MEGA_BALLS_OF_STEEL"] = 762] = "MEGA_BALLS_OF_STEEL";
        SoundEffect2[SoundEffect2["MEGA_BOMBS_ARE_KEY"] = 763] = "MEGA_BOMBS_ARE_KEY";
        SoundEffect2[SoundEffect2["MEGA_EXPLOSIVE_DIARRHEA"] = 764] = "MEGA_EXPLOSIVE_DIARRHEA";
        SoundEffect2[SoundEffect2["MEGA_FULL_HEALTH"] = 765] = "MEGA_FULL_HEALTH";
        SoundEffect2[SoundEffect2["MEGA_HEALTH_UP"] = 766] = "MEGA_HEALTH_UP";
        SoundEffect2[SoundEffect2["MEGA_HEALTH_DOWN"] = 767] = "MEGA_HEALTH_DOWN";
        SoundEffect2[SoundEffect2["MEGA_I_FOUND_PILLS"] = 768] = "MEGA_I_FOUND_PILLS";
        SoundEffect2[SoundEffect2["MEGA_PUBERTY"] = 769] = "MEGA_PUBERTY";
        SoundEffect2[SoundEffect2["MEGA_PRETTY_FLY"] = 770] = "MEGA_PRETTY_FLY";
        SoundEffect2[SoundEffect2["MEGA_RANGE_DOWN"] = 771] = "MEGA_RANGE_DOWN";
        SoundEffect2[SoundEffect2["MEGA_RANGE_UP"] = 772] = "MEGA_RANGE_UP";
        SoundEffect2[SoundEffect2["MEGA_SPEED_DOWN"] = 773] = "MEGA_SPEED_DOWN";
        SoundEffect2[SoundEffect2["MEGA_SPEED_UP"] = 774] = "MEGA_SPEED_UP";
        SoundEffect2[SoundEffect2["MEGA_TEARS_DOWN"] = 775] = "MEGA_TEARS_DOWN";
        SoundEffect2[SoundEffect2["MEGA_TEARS_UP"] = 776] = "MEGA_TEARS_UP";
        SoundEffect2[SoundEffect2["MEGA_LUCK_DOWN"] = 777] = "MEGA_LUCK_DOWN";
        SoundEffect2[SoundEffect2["MEGA_LUCK_UP"] = 778] = "MEGA_LUCK_UP";
        SoundEffect2[SoundEffect2["MEGA_TELEPILLS"] = 779] = "MEGA_TELEPILLS";
        SoundEffect2[SoundEffect2["MEGA_FORTY_EIGHT_HOUR_ENERGY"] = 780] = "MEGA_FORTY_EIGHT_HOUR_ENERGY";
        SoundEffect2[SoundEffect2["MEGA_HEMATEMESIS"] = 781] = "MEGA_HEMATEMESIS";
        SoundEffect2[SoundEffect2["MEGA_PARALYSIS"] = 782] = "MEGA_PARALYSIS";
        SoundEffect2[SoundEffect2["MEGA_I_CAN_SEE_FOREVER"] = 783] = "MEGA_I_CAN_SEE_FOREVER";
        SoundEffect2[SoundEffect2["MEGA_PHEROMONES"] = 784] = "MEGA_PHEROMONES";
        SoundEffect2[SoundEffect2["MEGA_AMNESIA"] = 785] = "MEGA_AMNESIA";
        SoundEffect2[SoundEffect2["MEGA_LEMON_PARTY"] = 786] = "MEGA_LEMON_PARTY";
        SoundEffect2[SoundEffect2["MEGA_R_U_A_WIZARD"] = 787] = "MEGA_R_U_A_WIZARD";
        SoundEffect2[SoundEffect2["MEGA_PERCS"] = 788] = "MEGA_PERCS";
        SoundEffect2[SoundEffect2["MEGA_ADDICTED"] = 789] = "MEGA_ADDICTED";
        SoundEffect2[SoundEffect2["MEGA_RELAX"] = 790] = "MEGA_RELAX";
        SoundEffect2[SoundEffect2["MEGA_QUESTION_MARKS"] = 791] = "MEGA_QUESTION_MARKS";
        SoundEffect2[SoundEffect2["MEGA_ONE_MAKES_YOU_LARGER"] = 792] = "MEGA_ONE_MAKES_YOU_LARGER";
        SoundEffect2[SoundEffect2["MEGA_ONE_MAKES_YOU_SMALL"] = 793] = "MEGA_ONE_MAKES_YOU_SMALL";
        SoundEffect2[SoundEffect2["MEGA_INFESTED"] = 794] = "MEGA_INFESTED";
        SoundEffect2[SoundEffect2["MEGA_INFESTED_1"] = 795] = "MEGA_INFESTED_1";
        SoundEffect2[SoundEffect2["MEGA_POWER_PILL"] = 796] = "MEGA_POWER_PILL";
        SoundEffect2[SoundEffect2["MEGA_RETRO_VISION"] = 797] = "MEGA_RETRO_VISION";
        SoundEffect2[SoundEffect2["MEGA_FRIENDS_TIL_THE_END"] = 798] = "MEGA_FRIENDS_TIL_THE_END";
        SoundEffect2[SoundEffect2["MEGA_X_LAX"] = 799] = "MEGA_X_LAX";
        SoundEffect2[SoundEffect2["MEGA_SOMETHINGS_WRONG"] = 800] = "MEGA_SOMETHINGS_WRONG";
        SoundEffect2[SoundEffect2["MEGA_IM_DROWSY"] = 801] = "MEGA_IM_DROWSY";
        SoundEffect2[SoundEffect2["MEGA_IM_EXCITED"] = 802] = "MEGA_IM_EXCITED";
        SoundEffect2[SoundEffect2["MEGA_GULP"] = 803] = "MEGA_GULP";
        SoundEffect2[SoundEffect2["MEGA_HORF"] = 804] = "MEGA_HORF";
        SoundEffect2[SoundEffect2["MEGA_SUNSHINE"] = 805] = "MEGA_SUNSHINE";
        SoundEffect2[SoundEffect2["MEGA_VURP"] = 806] = "MEGA_VURP";
        SoundEffect2[SoundEffect2["MEGA_SHOT_SPEED_DOWN"] = 807] = "MEGA_SHOT_SPEED_DOWN";
        SoundEffect2[SoundEffect2["MEGA_SHOT_SPEED_UP"] = 808] = "MEGA_SHOT_SPEED_UP";
        SoundEffect2[SoundEffect2["MEGA_EXPERIMENTAL_PILL"] = 809] = "MEGA_EXPERIMENTAL_PILL";
        SoundEffect2[SoundEffect2["SIREN_LUNGE"] = 810] = "SIREN_LUNGE";
        SoundEffect2[SoundEffect2["SIREN_MINION_SMOKE"] = 811] = "SIREN_MINION_SMOKE";
        SoundEffect2[SoundEffect2["SIREN_SCREAM_ATTACK"] = 812] = "SIREN_SCREAM_ATTACK";
        SoundEffect2[SoundEffect2["SIREN_SING_STAB"] = 813] = "SIREN_SING_STAB";
        SoundEffect2[SoundEffect2["BEAST_LAVA_BALL_RISE"] = 814] = "BEAST_LAVA_BALL_RISE";
        SoundEffect2[SoundEffect2["BEAST_GROWL"] = 815] = "BEAST_GROWL";
        SoundEffect2[SoundEffect2["BEAST_GRUMBLE"] = 816] = "BEAST_GRUMBLE";
        SoundEffect2[SoundEffect2["FAMINE_GRUNT"] = 817] = "FAMINE_GRUNT";
        SoundEffect2[SoundEffect2["G_FUEL_1"] = 818] = "G_FUEL_1";
        SoundEffect2[SoundEffect2["G_FUEL_2"] = 819] = "G_FUEL_2";
        SoundEffect2[SoundEffect2["G_FUEL_3"] = 820] = "G_FUEL_3";
        SoundEffect2[SoundEffect2["G_FUEL_4"] = 821] = "G_FUEL_4";
        SoundEffect2[SoundEffect2["G_FUEL_EXPLOSION_SMALL"] = 822] = "G_FUEL_EXPLOSION_SMALL";
        SoundEffect2[SoundEffect2["G_FUEL_EXPLOSION_BIG"] = 823] = "G_FUEL_EXPLOSION_BIG";
        SoundEffect2[SoundEffect2["G_FUEL_GUNSHOT_MEDIUM"] = 824] = "G_FUEL_GUNSHOT_MEDIUM";
        SoundEffect2[SoundEffect2["G_FUEL_GUNSHOT_SMALL"] = 825] = "G_FUEL_GUNSHOT_SMALL";
        SoundEffect2[SoundEffect2["G_FUEL_GUNSHOT_LARGE"] = 826] = "G_FUEL_GUNSHOT_LARGE";
        SoundEffect2[SoundEffect2["G_FUEL_GUNSHOT_SPREAD"] = 827] = "G_FUEL_GUNSHOT_SPREAD";
        SoundEffect2[SoundEffect2["G_FUEL_AIR_HORN"] = 828] = "G_FUEL_AIR_HORN";
        SoundEffect2[SoundEffect2["G_FUEL_ITEM_APPEAR"] = 829] = "G_FUEL_ITEM_APPEAR";
        SoundEffect2[SoundEffect2["G_FUEL_GUNSHOT_MINI"] = 830] = "G_FUEL_GUNSHOT_MINI";
        SoundEffect2[SoundEffect2["G_FUEL_BULLET_RICOCHET"] = 831] = "G_FUEL_BULLET_RICOCHET";
        SoundEffect2[SoundEffect2["G_FUEL_ROCKET_LAUNCHER"] = 832] = "G_FUEL_ROCKET_LAUNCHER";
      })(SoundEffect || (exports2.SoundEffect = SoundEffect = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/StageID.js
  var require_StageID = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/StageID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StageID = void 0;
      var StageID2;
      (function(StageID3) {
        StageID3[StageID3["SPECIAL_ROOMS"] = 0] = "SPECIAL_ROOMS";
        StageID3[StageID3["BASEMENT"] = 1] = "BASEMENT";
        StageID3[StageID3["CELLAR"] = 2] = "CELLAR";
        StageID3[StageID3["BURNING_BASEMENT"] = 3] = "BURNING_BASEMENT";
        StageID3[StageID3["CAVES"] = 4] = "CAVES";
        StageID3[StageID3["CATACOMBS"] = 5] = "CATACOMBS";
        StageID3[StageID3["FLOODED_CAVES"] = 6] = "FLOODED_CAVES";
        StageID3[StageID3["DEPTHS"] = 7] = "DEPTHS";
        StageID3[StageID3["NECROPOLIS"] = 8] = "NECROPOLIS";
        StageID3[StageID3["DANK_DEPTHS"] = 9] = "DANK_DEPTHS";
        StageID3[StageID3["WOMB"] = 10] = "WOMB";
        StageID3[StageID3["UTERO"] = 11] = "UTERO";
        StageID3[StageID3["SCARRED_WOMB"] = 12] = "SCARRED_WOMB";
        StageID3[StageID3["BLUE_WOMB"] = 13] = "BLUE_WOMB";
        StageID3[StageID3["SHEOL"] = 14] = "SHEOL";
        StageID3[StageID3["CATHEDRAL"] = 15] = "CATHEDRAL";
        StageID3[StageID3["DARK_ROOM"] = 16] = "DARK_ROOM";
        StageID3[StageID3["CHEST"] = 17] = "CHEST";
        StageID3[StageID3["SHOP"] = 24] = "SHOP";
        StageID3[StageID3["ULTRA_GREED"] = 25] = "ULTRA_GREED";
        StageID3[StageID3["VOID"] = 26] = "VOID";
        StageID3[StageID3["DOWNPOUR"] = 27] = "DOWNPOUR";
        StageID3[StageID3["DROSS"] = 28] = "DROSS";
        StageID3[StageID3["MINES"] = 29] = "MINES";
        StageID3[StageID3["ASHPIT"] = 30] = "ASHPIT";
        StageID3[StageID3["MAUSOLEUM"] = 31] = "MAUSOLEUM";
        StageID3[StageID3["GEHENNA"] = 32] = "GEHENNA";
        StageID3[StageID3["CORPSE"] = 33] = "CORPSE";
        StageID3[StageID3["MORTIS"] = 34] = "MORTIS";
        StageID3[StageID3["HOME"] = 35] = "HOME";
        StageID3[StageID3["BACKWARDS"] = 36] = "BACKWARDS";
      })(StageID2 || (exports2.StageID = StageID2 = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/StageTransition.js
  var require_StageTransition = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/StageTransition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StageTransition = void 0;
      var StageTransition;
      (function(StageTransition2) {
        StageTransition2[StageTransition2["DISAPPEAR"] = 0] = "DISAPPEAR";
        StageTransition2[StageTransition2["NONE"] = 1] = "NONE";
      })(StageTransition || (exports2.StageTransition = StageTransition = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/StageType.js
  var require_StageType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/StageType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StageType = void 0;
      var StageType;
      (function(StageType2) {
        StageType2[StageType2["ORIGINAL"] = 0] = "ORIGINAL";
        StageType2[StageType2["WRATH_OF_THE_LAMB"] = 1] = "WRATH_OF_THE_LAMB";
        StageType2[StageType2["AFTERBIRTH"] = 2] = "AFTERBIRTH";
        StageType2[StageType2["GREED_MODE"] = 3] = "GREED_MODE";
        StageType2[StageType2["REPENTANCE"] = 4] = "REPENTANCE";
        StageType2[StageType2["REPENTANCE_B"] = 5] = "REPENTANCE_B";
      })(StageType || (exports2.StageType = StageType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/TrinketSlot.js
  var require_TrinketSlot = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/TrinketSlot.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TrinketSlot = void 0;
      var TrinketSlot2;
      (function(TrinketSlot3) {
        TrinketSlot3[TrinketSlot3["SLOT_1"] = 0] = "SLOT_1";
        TrinketSlot3[TrinketSlot3["SLOT_2"] = 1] = "SLOT_2";
      })(TrinketSlot2 || (exports2.TrinketSlot = TrinketSlot2 = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/WeaponType.js
  var require_WeaponType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/WeaponType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.WeaponType = void 0;
      var WeaponType;
      (function(WeaponType2) {
        WeaponType2[WeaponType2["TEARS"] = 1] = "TEARS";
        WeaponType2[WeaponType2["BRIMSTONE"] = 2] = "BRIMSTONE";
        WeaponType2[WeaponType2["LASER"] = 3] = "LASER";
        WeaponType2[WeaponType2["KNIFE"] = 4] = "KNIFE";
        WeaponType2[WeaponType2["BOMBS"] = 5] = "BOMBS";
        WeaponType2[WeaponType2["ROCKETS"] = 6] = "ROCKETS";
        WeaponType2[WeaponType2["MONSTROS_LUNG"] = 7] = "MONSTROS_LUNG";
        WeaponType2[WeaponType2["LUDOVICO_TECHNIQUE"] = 8] = "LUDOVICO_TECHNIQUE";
        WeaponType2[WeaponType2["TECH_X"] = 9] = "TECH_X";
        WeaponType2[WeaponType2["BONE"] = 10] = "BONE";
        WeaponType2[WeaponType2["NOTCHED_AXE"] = 11] = "NOTCHED_AXE";
        WeaponType2[WeaponType2["URN_OF_SOULS"] = 12] = "URN_OF_SOULS";
        WeaponType2[WeaponType2["SPIRIT_SWORD"] = 13] = "SPIRIT_SWORD";
        WeaponType2[WeaponType2["FETUS"] = 14] = "FETUS";
        WeaponType2[WeaponType2["UMBILICAL_WHIP"] = 15] = "UMBILICAL_WHIP";
      })(WeaponType || (exports2.WeaponType = WeaponType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/collections/gridEntityStates.js
  var require_gridEntityStates = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/collections/gridEntityStates.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TeleporterState = exports2.PressurePlateState = exports2.CrawlSpaceState = exports2.TrapdoorState = exports2.DoorState = exports2.PoopState = exports2.TNTState = exports2.LockState = exports2.SpiderWebState = exports2.SpikesOnOffState = exports2.PitState = exports2.RockState = void 0;
      var RockState;
      (function(RockState2) {
        RockState2[RockState2["UNBROKEN"] = 1] = "UNBROKEN";
        RockState2[RockState2["BROKEN"] = 2] = "BROKEN";
        RockState2[RockState2["EXPLODING"] = 3] = "EXPLODING";
        RockState2[RockState2["HALF_BROKEN"] = 4] = "HALF_BROKEN";
      })(RockState || (exports2.RockState = RockState = {}));
      var PitState;
      (function(PitState2) {
        PitState2[PitState2["NORMAL"] = 0] = "NORMAL";
        PitState2[PitState2["FILLED"] = 1] = "FILLED";
      })(PitState || (exports2.PitState = PitState = {}));
      var SpikesOnOffState;
      (function(SpikesOnOffState2) {
        SpikesOnOffState2[SpikesOnOffState2["ON"] = 0] = "ON";
        SpikesOnOffState2[SpikesOnOffState2["OFF"] = 1] = "OFF";
      })(SpikesOnOffState || (exports2.SpikesOnOffState = SpikesOnOffState = {}));
      var SpiderWebState;
      (function(SpiderWebState2) {
        SpiderWebState2[SpiderWebState2["UNBROKEN"] = 0] = "UNBROKEN";
        SpiderWebState2[SpiderWebState2["BROKEN"] = 1] = "BROKEN";
      })(SpiderWebState || (exports2.SpiderWebState = SpiderWebState = {}));
      var LockState;
      (function(LockState2) {
        LockState2[LockState2["LOCKED"] = 0] = "LOCKED";
        LockState2[LockState2["UNLOCKED"] = 1] = "UNLOCKED";
      })(LockState || (exports2.LockState = LockState = {}));
      var TNTState;
      (function(TNTState2) {
        TNTState2[TNTState2["UNDAMAGED"] = 0] = "UNDAMAGED";
        TNTState2[TNTState2["ONE_QUARTER_DAMAGED"] = 1] = "ONE_QUARTER_DAMAGED";
        TNTState2[TNTState2["TWO_QUARTERS_DAMAGED"] = 2] = "TWO_QUARTERS_DAMAGED";
        TNTState2[TNTState2["THREE_QUARTERS_DAMAGED"] = 3] = "THREE_QUARTERS_DAMAGED";
        TNTState2[TNTState2["EXPLODED"] = 4] = "EXPLODED";
      })(TNTState || (exports2.TNTState = TNTState = {}));
      var PoopState;
      (function(PoopState2) {
        PoopState2[PoopState2["UNDAMAGED"] = 0] = "UNDAMAGED";
        PoopState2[PoopState2["ONE_QUARTER_DAMAGED"] = 250] = "ONE_QUARTER_DAMAGED";
        PoopState2[PoopState2["TWO_QUARTERS_DAMAGED"] = 500] = "TWO_QUARTERS_DAMAGED";
        PoopState2[PoopState2["THREE_QUARTERS_DAMAGED"] = 750] = "THREE_QUARTERS_DAMAGED";
        PoopState2[PoopState2["COMPLETELY_DESTROYED"] = 1e3] = "COMPLETELY_DESTROYED";
      })(PoopState || (exports2.PoopState = PoopState = {}));
      var DoorState;
      (function(DoorState2) {
        DoorState2[DoorState2["INIT"] = 0] = "INIT";
        DoorState2[DoorState2["CLOSED"] = 1] = "CLOSED";
        DoorState2[DoorState2["OPEN"] = 2] = "OPEN";
        DoorState2[DoorState2["ONE_CHAIN"] = 3] = "ONE_CHAIN";
        DoorState2[DoorState2["HALF_CRACKED"] = 4] = "HALF_CRACKED";
      })(DoorState || (exports2.DoorState = DoorState = {}));
      var TrapdoorState;
      (function(TrapdoorState2) {
        TrapdoorState2[TrapdoorState2["CLOSED"] = 0] = "CLOSED";
        TrapdoorState2[TrapdoorState2["OPEN"] = 1] = "OPEN";
      })(TrapdoorState || (exports2.TrapdoorState = TrapdoorState = {}));
      var CrawlSpaceState;
      (function(CrawlSpaceState2) {
        CrawlSpaceState2[CrawlSpaceState2["CLOSED"] = 0] = "CLOSED";
        CrawlSpaceState2[CrawlSpaceState2["OPEN"] = 1] = "OPEN";
      })(CrawlSpaceState || (exports2.CrawlSpaceState = CrawlSpaceState = {}));
      var PressurePlateState;
      (function(PressurePlateState2) {
        PressurePlateState2[PressurePlateState2["UNPRESSED"] = 0] = "UNPRESSED";
        PressurePlateState2[PressurePlateState2["STATE_1_UNKNOWN"] = 1] = "STATE_1_UNKNOWN";
        PressurePlateState2[PressurePlateState2["STATE_2_UNKNOWN"] = 2] = "STATE_2_UNKNOWN";
        PressurePlateState2[PressurePlateState2["PRESSURE_PLATE_PRESSED"] = 3] = "PRESSURE_PLATE_PRESSED";
        PressurePlateState2[PressurePlateState2["REWARD_PLATE_PRESSED"] = 4] = "REWARD_PLATE_PRESSED";
      })(PressurePlateState || (exports2.PressurePlateState = PressurePlateState = {}));
      var TeleporterState;
      (function(TeleporterState2) {
        TeleporterState2[TeleporterState2["NORMAL"] = 0] = "NORMAL";
        TeleporterState2[TeleporterState2["ACTIVATED"] = 1] = "ACTIVATED";
        TeleporterState2[TeleporterState2["DISABLED"] = 2] = "DISABLED";
      })(TeleporterState || (exports2.TeleporterState = TeleporterState = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/collections/gridEntityVariants.js
  var require_gridEntityVariants = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/collections/gridEntityVariants.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StatueVariant = exports2.PressurePlateVariant = exports2.CrawlSpaceVariant = exports2.TrapdoorVariant = exports2.DoorVariant = exports2.PoopGridEntityVariant = exports2.FireplaceGridEntityVariant = exports2.PitVariant = exports2.BucketVariant = exports2.PolypVariant = exports2.SkullVariant = exports2.MushroomVariant = exports2.UrnVariant = exports2.RockVariant = void 0;
      var RockVariant;
      (function(RockVariant2) {
        RockVariant2[RockVariant2["NORMAL"] = 0] = "NORMAL";
        RockVariant2[RockVariant2["EVENT"] = 1] = "EVENT";
      })(RockVariant || (exports2.RockVariant = RockVariant = {}));
      var UrnVariant;
      (function(UrnVariant2) {
        UrnVariant2[UrnVariant2["NORMAL"] = 0] = "NORMAL";
        UrnVariant2[UrnVariant2["CHIPPED_TOP_LEFT"] = 1] = "CHIPPED_TOP_LEFT";
        UrnVariant2[UrnVariant2["NARROW"] = 2] = "NARROW";
      })(UrnVariant || (exports2.UrnVariant = UrnVariant = {}));
      var MushroomVariant;
      (function(MushroomVariant2) {
        MushroomVariant2[MushroomVariant2["NORMAL"] = 0] = "NORMAL";
        MushroomVariant2[MushroomVariant2["CHIPPED_TOP_RIGHT"] = 1] = "CHIPPED_TOP_RIGHT";
        MushroomVariant2[MushroomVariant2["NARROW"] = 2] = "NARROW";
      })(MushroomVariant || (exports2.MushroomVariant = MushroomVariant = {}));
      var SkullVariant;
      (function(SkullVariant2) {
        SkullVariant2[SkullVariant2["NORMAL"] = 0] = "NORMAL";
        SkullVariant2[SkullVariant2["FACING_RIGHT"] = 1] = "FACING_RIGHT";
        SkullVariant2[SkullVariant2["FACING_LEFT"] = 2] = "FACING_LEFT";
      })(SkullVariant || (exports2.SkullVariant = SkullVariant = {}));
      var PolypVariant;
      (function(PolypVariant2) {
        PolypVariant2[PolypVariant2["NORMAL"] = 0] = "NORMAL";
        PolypVariant2[PolypVariant2["MANY_FINGERS"] = 1] = "MANY_FINGERS";
        PolypVariant2[PolypVariant2["FLIPPED_AND_SHIFTED_UPWARDS"] = 2] = "FLIPPED_AND_SHIFTED_UPWARDS";
      })(PolypVariant || (exports2.PolypVariant = PolypVariant = {}));
      var BucketVariant;
      (function(BucketVariant2) {
        BucketVariant2[BucketVariant2["EMPTY"] = 0] = "EMPTY";
        BucketVariant2[BucketVariant2["FULL"] = 1] = "FULL";
        BucketVariant2[BucketVariant2["EMPTY_AND_SHIFTED_UPWARDS"] = 2] = "EMPTY_AND_SHIFTED_UPWARDS";
      })(BucketVariant || (exports2.BucketVariant = BucketVariant = {}));
      var PitVariant;
      (function(PitVariant2) {
        PitVariant2[PitVariant2["NORMAL"] = 0] = "NORMAL";
        PitVariant2[PitVariant2["FISSURE_SPAWNER"] = 16] = "FISSURE_SPAWNER";
      })(PitVariant || (exports2.PitVariant = PitVariant = {}));
      var FireplaceGridEntityVariant;
      (function(FireplaceGridEntityVariant2) {
        FireplaceGridEntityVariant2[FireplaceGridEntityVariant2["NORMAL"] = 0] = "NORMAL";
        FireplaceGridEntityVariant2[FireplaceGridEntityVariant2["RED"] = 1] = "RED";
      })(FireplaceGridEntityVariant || (exports2.FireplaceGridEntityVariant = FireplaceGridEntityVariant = {}));
      var PoopGridEntityVariant;
      (function(PoopGridEntityVariant2) {
        PoopGridEntityVariant2[PoopGridEntityVariant2["NORMAL"] = 0] = "NORMAL";
        PoopGridEntityVariant2[PoopGridEntityVariant2["RED"] = 1] = "RED";
        PoopGridEntityVariant2[PoopGridEntityVariant2["CORNY"] = 2] = "CORNY";
        PoopGridEntityVariant2[PoopGridEntityVariant2["GOLDEN"] = 3] = "GOLDEN";
        PoopGridEntityVariant2[PoopGridEntityVariant2["RAINBOW"] = 4] = "RAINBOW";
        PoopGridEntityVariant2[PoopGridEntityVariant2["BLACK"] = 5] = "BLACK";
        PoopGridEntityVariant2[PoopGridEntityVariant2["WHITE"] = 6] = "WHITE";
        PoopGridEntityVariant2[PoopGridEntityVariant2["GIANT_TOP_LEFT"] = 7] = "GIANT_TOP_LEFT";
        PoopGridEntityVariant2[PoopGridEntityVariant2["GIANT_TOP_RIGHT"] = 8] = "GIANT_TOP_RIGHT";
        PoopGridEntityVariant2[PoopGridEntityVariant2["GIANT_BOTTOM_LEFT"] = 9] = "GIANT_BOTTOM_LEFT";
        PoopGridEntityVariant2[PoopGridEntityVariant2["GIANT_BOTTOM_RIGHT"] = 10] = "GIANT_BOTTOM_RIGHT";
        PoopGridEntityVariant2[PoopGridEntityVariant2["CHARMING"] = 11] = "CHARMING";
      })(PoopGridEntityVariant || (exports2.PoopGridEntityVariant = PoopGridEntityVariant = {}));
      var DoorVariant;
      (function(DoorVariant2) {
        DoorVariant2[DoorVariant2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
        DoorVariant2[DoorVariant2["LOCKED"] = 1] = "LOCKED";
        DoorVariant2[DoorVariant2["LOCKED_DOUBLE"] = 2] = "LOCKED_DOUBLE";
        DoorVariant2[DoorVariant2["LOCKED_CRACKED"] = 3] = "LOCKED_CRACKED";
        DoorVariant2[DoorVariant2["LOCKED_BARRED"] = 4] = "LOCKED_BARRED";
        DoorVariant2[DoorVariant2["LOCKED_KEY_FAMILIAR"] = 5] = "LOCKED_KEY_FAMILIAR";
        DoorVariant2[DoorVariant2["LOCKED_GREED"] = 6] = "LOCKED_GREED";
        DoorVariant2[DoorVariant2["HIDDEN"] = 7] = "HIDDEN";
        DoorVariant2[DoorVariant2["UNLOCKED"] = 8] = "UNLOCKED";
      })(DoorVariant || (exports2.DoorVariant = DoorVariant = {}));
      var TrapdoorVariant;
      (function(TrapdoorVariant2) {
        TrapdoorVariant2[TrapdoorVariant2["NORMAL"] = 0] = "NORMAL";
        TrapdoorVariant2[TrapdoorVariant2["VOID_PORTAL"] = 1] = "VOID_PORTAL";
      })(TrapdoorVariant || (exports2.TrapdoorVariant = TrapdoorVariant = {}));
      var CrawlSpaceVariant;
      (function(CrawlSpaceVariant2) {
        CrawlSpaceVariant2[CrawlSpaceVariant2["NORMAL"] = 0] = "NORMAL";
        CrawlSpaceVariant2[CrawlSpaceVariant2["GREAT_GIDEON"] = 1] = "GREAT_GIDEON";
        CrawlSpaceVariant2[CrawlSpaceVariant2["SECRET_SHOP"] = 2] = "SECRET_SHOP";
        CrawlSpaceVariant2[CrawlSpaceVariant2["PASSAGE_TO_BEGINNING_OF_FLOOR"] = 3] = "PASSAGE_TO_BEGINNING_OF_FLOOR";
        CrawlSpaceVariant2[CrawlSpaceVariant2["NULL"] = 4] = "NULL";
      })(CrawlSpaceVariant || (exports2.CrawlSpaceVariant = CrawlSpaceVariant = {}));
      var PressurePlateVariant;
      (function(PressurePlateVariant2) {
        PressurePlateVariant2[PressurePlateVariant2["PRESSURE_PLATE"] = 0] = "PRESSURE_PLATE";
        PressurePlateVariant2[PressurePlateVariant2["REWARD_PLATE"] = 1] = "REWARD_PLATE";
        PressurePlateVariant2[PressurePlateVariant2["GREED_PLATE"] = 2] = "GREED_PLATE";
        PressurePlateVariant2[PressurePlateVariant2["RAIL_PLATE"] = 3] = "RAIL_PLATE";
        PressurePlateVariant2[PressurePlateVariant2["KILL_ALL_ENEMIES_PLATE"] = 9] = "KILL_ALL_ENEMIES_PLATE";
        PressurePlateVariant2[PressurePlateVariant2["SPAWN_ROCKS_PLATE"] = 10] = "SPAWN_ROCKS_PLATE";
      })(PressurePlateVariant || (exports2.PressurePlateVariant = PressurePlateVariant = {}));
      var StatueVariant;
      (function(StatueVariant2) {
        StatueVariant2[StatueVariant2["DEVIL"] = 0] = "DEVIL";
        StatueVariant2[StatueVariant2["ANGEL"] = 1] = "ANGEL";
      })(StatueVariant || (exports2.StatueVariant = StatueVariant = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/collections/npcStates.js
  var require_npcStates = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/collections/npcStates.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.UltraGreedierState = exports2.UltraGreedState = exports2.ColostomiaState = exports2.ReapCreepState = exports2.BigHornState = exports2.DaddyLongLegsState = exports2.DeathState = exports2.WarWithoutHorseState = exports2.ConquestState = exports2.WarState = exports2.PestilenceState = exports2.FamineState = exports2.LostSoulState = void 0;
      var LostSoulState;
      (function(LostSoulState2) {
        LostSoulState2[LostSoulState2["ALIVE"] = 1] = "ALIVE";
        LostSoulState2[LostSoulState2["DEAD"] = 4] = "DEAD";
      })(LostSoulState || (exports2.LostSoulState = LostSoulState = {}));
      var FamineState;
      (function(FamineState2) {
        FamineState2[FamineState2["MOVE"] = 4] = "MOVE";
        FamineState2[FamineState2["HORIZONTAL_CHARGE"] = 8] = "HORIZONTAL_CHARGE";
        FamineState2[FamineState2["PHASE_2"] = 9] = "PHASE_2";
        FamineState2[FamineState2["SUMMON"] = 13] = "SUMMON";
      })(FamineState || (exports2.FamineState = FamineState = {}));
      var PestilenceState;
      (function(PestilenceState2) {
        PestilenceState2[PestilenceState2["MOVE"] = 4] = "MOVE";
        PestilenceState2[PestilenceState2["ATTACK_IPECAC"] = 8] = "ATTACK_IPECAC";
        PestilenceState2[PestilenceState2["SUMMON"] = 13] = "SUMMON";
      })(PestilenceState || (exports2.PestilenceState = PestilenceState = {}));
      var WarState;
      (function(WarState2) {
        WarState2[WarState2["MOVE"] = 4] = "MOVE";
        WarState2[WarState2["JUMP_AND_SPAWN_TROLL_BOMBS"] = 6] = "JUMP_AND_SPAWN_TROLL_BOMBS";
        WarState2[WarState2["HORIZONTAL_CHARGE"] = 9] = "HORIZONTAL_CHARGE";
      })(WarState || (exports2.WarState = WarState = {}));
      var ConquestState;
      (function(ConquestState2) {
        ConquestState2[ConquestState2["MOVE"] = 4] = "MOVE";
        ConquestState2[ConquestState2["JUMP_AND_SPAWN_BEAMS"] = 6] = "JUMP_AND_SPAWN_BEAMS";
        ConquestState2[ConquestState2["TEAR_ATTACK"] = 8] = "TEAR_ATTACK";
        ConquestState2[ConquestState2["HORIZONTAL_CHARGE"] = 9] = "HORIZONTAL_CHARGE";
      })(ConquestState || (exports2.ConquestState = ConquestState = {}));
      var WarWithoutHorseState;
      (function(WarWithoutHorseState2) {
        WarWithoutHorseState2[WarWithoutHorseState2["MOVE"] = 4] = "MOVE";
        WarWithoutHorseState2[WarWithoutHorseState2["SIT"] = 8] = "SIT";
      })(WarWithoutHorseState || (exports2.WarWithoutHorseState = WarWithoutHorseState = {}));
      var DeathState;
      (function(DeathState2) {
        DeathState2[DeathState2["APPEAR"] = 1] = "APPEAR";
        DeathState2[DeathState2["SCYTHE_APPEAR"] = 3] = "SCYTHE_APPEAR";
        DeathState2[DeathState2["MOVE"] = 4] = "MOVE";
        DeathState2[DeathState2["JUMP_OFF_HORSE"] = 7] = "JUMP_OFF_HORSE";
        DeathState2[DeathState2["SLOW_ATTACK"] = 8] = "SLOW_ATTACK";
        DeathState2[DeathState2["SUMMON_KNIGHTS"] = 13] = "SUMMON_KNIGHTS";
        DeathState2[DeathState2["SUMMON_SCYTHES"] = 14] = "SUMMON_SCYTHES";
      })(DeathState || (exports2.DeathState = DeathState = {}));
      var DaddyLongLegsState;
      (function(DaddyLongLegsState2) {
        DaddyLongLegsState2[DaddyLongLegsState2["SLAM_WITH_PROJECTILE_BURST"] = 4] = "SLAM_WITH_PROJECTILE_BURST";
        DaddyLongLegsState2[DaddyLongLegsState2["STOMP_ATTACK_LEG"] = 7] = "STOMP_ATTACK_LEG";
        DaddyLongLegsState2[DaddyLongLegsState2["SPITTING_SPIDERS_ATTACK"] = 8] = "SPITTING_SPIDERS_ATTACK";
        DaddyLongLegsState2[DaddyLongLegsState2["MULTI_STOMP_ATTACK_MAIN"] = 9] = "MULTI_STOMP_ATTACK_MAIN";
      })(DaddyLongLegsState || (exports2.DaddyLongLegsState = DaddyLongLegsState = {}));
      var BigHornState;
      (function(BigHornState2) {
        BigHornState2[BigHornState2["IDLE"] = 3] = "IDLE";
        BigHornState2[BigHornState2["HEAD_GOING_UP_OR_GOING_DOWN_INTO_HOLE"] = 4] = "HEAD_GOING_UP_OR_GOING_DOWN_INTO_HOLE";
        BigHornState2[BigHornState2["HAND_GOING_DOWN_INTO_HOLE"] = 5] = "HAND_GOING_DOWN_INTO_HOLE";
        BigHornState2[BigHornState2["HAND_SLAM_ATTACK"] = 8] = "HAND_SLAM_ATTACK";
        BigHornState2[BigHornState2["HAND_THROW_TROLL_BOMB_ATTACK"] = 9] = "HAND_THROW_TROLL_BOMB_ATTACK";
        BigHornState2[BigHornState2["HAND_THROW_TRIPLE_TROLL_BOMB_ATTACK"] = 10] = "HAND_THROW_TRIPLE_TROLL_BOMB_ATTACK";
        BigHornState2[BigHornState2["HEAD_BALL_ATTACK"] = 13] = "HEAD_BALL_ATTACK";
      })(BigHornState || (exports2.BigHornState = BigHornState = {}));
      var ReapCreepState;
      (function(ReapCreepState2) {
        ReapCreepState2[ReapCreepState2["CRAWLING_FROM_SIDE_TO_SIDE"] = 3] = "CRAWLING_FROM_SIDE_TO_SIDE";
        ReapCreepState2[ReapCreepState2["JUMPING_TO_TOP_WALL"] = 6] = "JUMPING_TO_TOP_WALL";
        ReapCreepState2[ReapCreepState2["WALL_SLAM_ATTACK"] = 7] = "WALL_SLAM_ATTACK";
        ReapCreepState2[ReapCreepState2["PROJECTILE_SPIT_LINE_ATTACK"] = 8] = "PROJECTILE_SPIT_LINE_ATTACK";
        ReapCreepState2[ReapCreepState2["PROJECTILE_SPIT_BURST_ATTACK"] = 9] = "PROJECTILE_SPIT_BURST_ATTACK";
        ReapCreepState2[ReapCreepState2["BRIMSTONE_ATTACK"] = 10] = "BRIMSTONE_ATTACK";
        ReapCreepState2[ReapCreepState2["SPAWNING_WALL_SPIDERS"] = 13] = "SPAWNING_WALL_SPIDERS";
        ReapCreepState2[ReapCreepState2["SPAWNING_SPIDERS"] = 14] = "SPAWNING_SPIDERS";
        ReapCreepState2[ReapCreepState2["TRANSFORMING_TO_NEXT_PHASE"] = 16] = "TRANSFORMING_TO_NEXT_PHASE";
      })(ReapCreepState || (exports2.ReapCreepState = ReapCreepState = {}));
      var ColostomiaState;
      (function(ColostomiaState2) {
        ColostomiaState2[ColostomiaState2["IDLE_PHASE_1"] = 3] = "IDLE_PHASE_1";
        ColostomiaState2[ColostomiaState2["IDLE_PHASE_2"] = 4] = "IDLE_PHASE_2";
        ColostomiaState2[ColostomiaState2["JUMP_ATTACK_WITH_PROJECTILE_SPLASH"] = 6] = "JUMP_ATTACK_WITH_PROJECTILE_SPLASH";
        ColostomiaState2[ColostomiaState2["CHARGE_SLIDE"] = 8] = "CHARGE_SLIDE";
        ColostomiaState2[ColostomiaState2["SPIT_POOP_BOMB"] = 9] = "SPIT_POOP_BOMB";
        ColostomiaState2[ColostomiaState2["SPIT_TWO_POOP_BOMBS"] = 10] = "SPIT_TWO_POOP_BOMBS";
        ColostomiaState2[ColostomiaState2["FART_ATTACK"] = 11] = "FART_ATTACK";
        ColostomiaState2[ColostomiaState2["TRANSITION_TO_PHASE_2"] = 16] = "TRANSITION_TO_PHASE_2";
      })(ColostomiaState || (exports2.ColostomiaState = ColostomiaState = {}));
      var UltraGreedState;
      (function(UltraGreedState2) {
        UltraGreedState2[UltraGreedState2["HANGING"] = 2] = "HANGING";
        UltraGreedState2[UltraGreedState2["IDLE"] = 3] = "IDLE";
        UltraGreedState2[UltraGreedState2["MOVE"] = 4] = "MOVE";
        UltraGreedState2[UltraGreedState2["GOLD_STATUE_BREAKING_OUT"] = 16] = "GOLD_STATUE_BREAKING_OUT";
        UltraGreedState2[UltraGreedState2["EYES_SPINNING"] = 100] = "EYES_SPINNING";
        UltraGreedState2[UltraGreedState2["STOMPING"] = 200] = "STOMPING";
        UltraGreedState2[UltraGreedState2["BLOCKING_WITH_ARMS"] = 400] = "BLOCKING_WITH_ARMS";
        UltraGreedState2[UltraGreedState2["SPIN_ATTACK"] = 510] = "SPIN_ATTACK";
        UltraGreedState2[UltraGreedState2["SHOOT_4_COINS"] = 600] = "SHOOT_4_COINS";
        UltraGreedState2[UltraGreedState2["DYING"] = 9e3] = "DYING";
        UltraGreedState2[UltraGreedState2["GOLD_STATUE"] = 9001] = "GOLD_STATUE";
      })(UltraGreedState || (exports2.UltraGreedState = UltraGreedState = {}));
      var UltraGreedierState;
      (function(UltraGreedierState2) {
        UltraGreedierState2[UltraGreedierState2["IDLE"] = 3] = "IDLE";
        UltraGreedierState2[UltraGreedierState2["MOVE"] = 4] = "MOVE";
        UltraGreedierState2[UltraGreedierState2["JUMP"] = 6] = "JUMP";
        UltraGreedierState2[UltraGreedierState2["STOMPING"] = 200] = "STOMPING";
        UltraGreedierState2[UltraGreedierState2["SHOOT_4_COINS"] = 600] = "SHOOT_4_COINS";
        UltraGreedierState2[UltraGreedierState2["FIST_POUND"] = 700] = "FIST_POUND";
        UltraGreedierState2[UltraGreedierState2["FIST_POUND_TRIPLE"] = 710] = "FIST_POUND_TRIPLE";
        UltraGreedierState2[UltraGreedierState2["DYING"] = 9e3] = "DYING";
        UltraGreedierState2[UltraGreedierState2["POST_EXPLOSION"] = 9001] = "POST_EXPLOSION";
      })(UltraGreedierState || (exports2.UltraGreedierState = UltraGreedierState = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/collections/roomSubTypes.js
  var require_roomSubTypes = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/collections/roomSubTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BackwardsRoomSubType = exports2.HomeRoomSubType = exports2.MinesRoomSubType = exports2.DownpourRoomSubType = exports2.SecretExitSubType = exports2.IsaacsRoomSubType = exports2.DungeonSubType = exports2.AngelRoomSubType = exports2.DevilRoomSubType = exports2.LibrarySubType = exports2.ChallengeRoomSubType = exports2.CurseRoomSubType = exports2.MinibossID = exports2.BossID = exports2.TreasureRoomSubType = exports2.ShopSubType = void 0;
      var ShopSubType;
      (function(ShopSubType2) {
        ShopSubType2[ShopSubType2["LEVEL_1"] = 0] = "LEVEL_1";
        ShopSubType2[ShopSubType2["LEVEL_2"] = 1] = "LEVEL_2";
        ShopSubType2[ShopSubType2["LEVEL_3"] = 2] = "LEVEL_3";
        ShopSubType2[ShopSubType2["LEVEL_4"] = 3] = "LEVEL_4";
        ShopSubType2[ShopSubType2["LEVEL_5"] = 4] = "LEVEL_5";
        ShopSubType2[ShopSubType2["RARE_GOOD"] = 10] = "RARE_GOOD";
        ShopSubType2[ShopSubType2["RARE_BAD"] = 11] = "RARE_BAD";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_LEVEL_1"] = 100] = "TAINTED_KEEPER_LEVEL_1";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_LEVEL_2"] = 101] = "TAINTED_KEEPER_LEVEL_2";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_LEVEL_3"] = 102] = "TAINTED_KEEPER_LEVEL_3";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_LEVEL_4"] = 103] = "TAINTED_KEEPER_LEVEL_4";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_LEVEL_5"] = 104] = "TAINTED_KEEPER_LEVEL_5";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_RARE_GOOD"] = 110] = "TAINTED_KEEPER_RARE_GOOD";
        ShopSubType2[ShopSubType2["TAINTED_KEEPER_RARE_BAD"] = 111] = "TAINTED_KEEPER_RARE_BAD";
      })(ShopSubType || (exports2.ShopSubType = ShopSubType = {}));
      var TreasureRoomSubType;
      (function(TreasureRoomSubType2) {
        TreasureRoomSubType2[TreasureRoomSubType2["NORMAL"] = 0] = "NORMAL";
        TreasureRoomSubType2[TreasureRoomSubType2["MORE_OPTIONS"] = 1] = "MORE_OPTIONS";
        TreasureRoomSubType2[TreasureRoomSubType2["PAY_TO_WIN"] = 2] = "PAY_TO_WIN";
        TreasureRoomSubType2[TreasureRoomSubType2["MORE_OPTIONS_AND_PAY_TO_WIN"] = 3] = "MORE_OPTIONS_AND_PAY_TO_WIN";
        TreasureRoomSubType2[TreasureRoomSubType2["KNIFE_PIECE"] = 34] = "KNIFE_PIECE";
      })(TreasureRoomSubType || (exports2.TreasureRoomSubType = TreasureRoomSubType = {}));
      var BossID4;
      (function(BossID5) {
        BossID5[BossID5["MONSTRO"] = 1] = "MONSTRO";
        BossID5[BossID5["LARRY_JR"] = 2] = "LARRY_JR";
        BossID5[BossID5["CHUB"] = 3] = "CHUB";
        BossID5[BossID5["GURDY"] = 4] = "GURDY";
        BossID5[BossID5["MONSTRO_2"] = 5] = "MONSTRO_2";
        BossID5[BossID5["MOM"] = 6] = "MOM";
        BossID5[BossID5["SCOLEX"] = 7] = "SCOLEX";
        BossID5[BossID5["MOMS_HEART"] = 8] = "MOMS_HEART";
        BossID5[BossID5["FAMINE"] = 9] = "FAMINE";
        BossID5[BossID5["PESTILENCE"] = 10] = "PESTILENCE";
        BossID5[BossID5["WAR"] = 11] = "WAR";
        BossID5[BossID5["DEATH"] = 12] = "DEATH";
        BossID5[BossID5["DUKE_OF_FLIES"] = 13] = "DUKE_OF_FLIES";
        BossID5[BossID5["PEEP"] = 14] = "PEEP";
        BossID5[BossID5["LOKI"] = 15] = "LOKI";
        BossID5[BossID5["BLASTOCYST"] = 16] = "BLASTOCYST";
        BossID5[BossID5["GEMINI"] = 17] = "GEMINI";
        BossID5[BossID5["FISTULA"] = 18] = "FISTULA";
        BossID5[BossID5["GISH"] = 19] = "GISH";
        BossID5[BossID5["STEVEN"] = 20] = "STEVEN";
        BossID5[BossID5["CHAD"] = 21] = "CHAD";
        BossID5[BossID5["HEADLESS_HORSEMAN"] = 22] = "HEADLESS_HORSEMAN";
        BossID5[BossID5["FALLEN"] = 23] = "FALLEN";
        BossID5[BossID5["SATAN"] = 24] = "SATAN";
        BossID5[BossID5["IT_LIVES"] = 25] = "IT_LIVES";
        BossID5[BossID5["HOLLOW"] = 26] = "HOLLOW";
        BossID5[BossID5["CARRION_QUEEN"] = 27] = "CARRION_QUEEN";
        BossID5[BossID5["GURDY_JR"] = 28] = "GURDY_JR";
        BossID5[BossID5["HUSK"] = 29] = "HUSK";
        BossID5[BossID5["BLOAT"] = 30] = "BLOAT";
        BossID5[BossID5["LOKII"] = 31] = "LOKII";
        BossID5[BossID5["BLIGHTED_OVUM"] = 32] = "BLIGHTED_OVUM";
        BossID5[BossID5["TERATOMA"] = 33] = "TERATOMA";
        BossID5[BossID5["WIDOW"] = 34] = "WIDOW";
        BossID5[BossID5["MASK_OF_INFAMY"] = 35] = "MASK_OF_INFAMY";
        BossID5[BossID5["WRETCHED"] = 36] = "WRETCHED";
        BossID5[BossID5["PIN"] = 37] = "PIN";
        BossID5[BossID5["CONQUEST"] = 38] = "CONQUEST";
        BossID5[BossID5["ISAAC"] = 39] = "ISAAC";
        BossID5[BossID5["BLUE_BABY"] = 40] = "BLUE_BABY";
        BossID5[BossID5["DADDY_LONG_LEGS"] = 41] = "DADDY_LONG_LEGS";
        BossID5[BossID5["TRIACHNID"] = 42] = "TRIACHNID";
        BossID5[BossID5["HAUNT"] = 43] = "HAUNT";
        BossID5[BossID5["DINGLE"] = 44] = "DINGLE";
        BossID5[BossID5["MEGA_MAW"] = 45] = "MEGA_MAW";
        BossID5[BossID5["GATE"] = 46] = "GATE";
        BossID5[BossID5["MEGA_FATTY"] = 47] = "MEGA_FATTY";
        BossID5[BossID5["CAGE"] = 48] = "CAGE";
        BossID5[BossID5["MAMA_GURDY"] = 49] = "MAMA_GURDY";
        BossID5[BossID5["DARK_ONE"] = 50] = "DARK_ONE";
        BossID5[BossID5["ADVERSARY"] = 51] = "ADVERSARY";
        BossID5[BossID5["POLYCEPHALUS"] = 52] = "POLYCEPHALUS";
        BossID5[BossID5["MR_FRED"] = 53] = "MR_FRED";
        BossID5[BossID5["LAMB"] = 54] = "LAMB";
        BossID5[BossID5["MEGA_SATAN"] = 55] = "MEGA_SATAN";
        BossID5[BossID5["GURGLING"] = 56] = "GURGLING";
        BossID5[BossID5["STAIN"] = 57] = "STAIN";
        BossID5[BossID5["BROWNIE"] = 58] = "BROWNIE";
        BossID5[BossID5["FORSAKEN"] = 59] = "FORSAKEN";
        BossID5[BossID5["LITTLE_HORN"] = 60] = "LITTLE_HORN";
        BossID5[BossID5["RAG_MAN"] = 61] = "RAG_MAN";
        BossID5[BossID5["ULTRA_GREED"] = 62] = "ULTRA_GREED";
        BossID5[BossID5["HUSH"] = 63] = "HUSH";
        BossID5[BossID5["DANGLE"] = 64] = "DANGLE";
        BossID5[BossID5["TURDLING"] = 65] = "TURDLING";
        BossID5[BossID5["FRAIL"] = 66] = "FRAIL";
        BossID5[BossID5["RAG_MEGA"] = 67] = "RAG_MEGA";
        BossID5[BossID5["SISTERS_VIS"] = 68] = "SISTERS_VIS";
        BossID5[BossID5["BIG_HORN"] = 69] = "BIG_HORN";
        BossID5[BossID5["DELIRIUM"] = 70] = "DELIRIUM";
        BossID5[BossID5["ULTRA_GREEDIER"] = 71] = "ULTRA_GREEDIER";
        BossID5[BossID5["MATRIARCH"] = 72] = "MATRIARCH";
        BossID5[BossID5["PILE"] = 73] = "PILE";
        BossID5[BossID5["REAP_CREEP"] = 74] = "REAP_CREEP";
        BossID5[BossID5["LIL_BLUB"] = 75] = "LIL_BLUB";
        BossID5[BossID5["WORMWOOD"] = 76] = "WORMWOOD";
        BossID5[BossID5["RAINMAKER"] = 77] = "RAINMAKER";
        BossID5[BossID5["VISAGE"] = 78] = "VISAGE";
        BossID5[BossID5["SIREN"] = 79] = "SIREN";
        BossID5[BossID5["TUFF_TWINS"] = 80] = "TUFF_TWINS";
        BossID5[BossID5["HERETIC"] = 81] = "HERETIC";
        BossID5[BossID5["HORNFEL"] = 82] = "HORNFEL";
        BossID5[BossID5["GREAT_GIDEON"] = 83] = "GREAT_GIDEON";
        BossID5[BossID5["BABY_PLUM"] = 84] = "BABY_PLUM";
        BossID5[BossID5["SCOURGE"] = 85] = "SCOURGE";
        BossID5[BossID5["CHIMERA"] = 86] = "CHIMERA";
        BossID5[BossID5["ROTGUT"] = 87] = "ROTGUT";
        BossID5[BossID5["MOTHER"] = 88] = "MOTHER";
        BossID5[BossID5["MAUSOLEUM_MOM"] = 89] = "MAUSOLEUM_MOM";
        BossID5[BossID5["MAUSOLEUM_MOMS_HEART"] = 90] = "MAUSOLEUM_MOMS_HEART";
        BossID5[BossID5["MIN_MIN"] = 91] = "MIN_MIN";
        BossID5[BossID5["CLOG"] = 92] = "CLOG";
        BossID5[BossID5["SINGE"] = 93] = "SINGE";
        BossID5[BossID5["BUMBINO"] = 94] = "BUMBINO";
        BossID5[BossID5["COLOSTOMIA"] = 95] = "COLOSTOMIA";
        BossID5[BossID5["SHELL"] = 96] = "SHELL";
        BossID5[BossID5["TURDLET"] = 97] = "TURDLET";
        BossID5[BossID5["RAGLICH"] = 98] = "RAGLICH";
        BossID5[BossID5["DOGMA"] = 99] = "DOGMA";
        BossID5[BossID5["BEAST"] = 100] = "BEAST";
        BossID5[BossID5["HORNY_BOYS"] = 101] = "HORNY_BOYS";
        BossID5[BossID5["CLUTCH"] = 102] = "CLUTCH";
      })(BossID4 || (exports2.BossID = BossID4 = {}));
      var MinibossID;
      (function(MinibossID2) {
        MinibossID2[MinibossID2["SLOTH"] = 0] = "SLOTH";
        MinibossID2[MinibossID2["LUST"] = 1] = "LUST";
        MinibossID2[MinibossID2["WRATH"] = 2] = "WRATH";
        MinibossID2[MinibossID2["GLUTTONY"] = 3] = "GLUTTONY";
        MinibossID2[MinibossID2["GREED"] = 4] = "GREED";
        MinibossID2[MinibossID2["ENVY"] = 5] = "ENVY";
        MinibossID2[MinibossID2["PRIDE"] = 6] = "PRIDE";
        MinibossID2[MinibossID2["SUPER_SLOTH"] = 7] = "SUPER_SLOTH";
        MinibossID2[MinibossID2["SUPER_LUST"] = 8] = "SUPER_LUST";
        MinibossID2[MinibossID2["SUPER_WRATH"] = 9] = "SUPER_WRATH";
        MinibossID2[MinibossID2["SUPER_GLUTTONY"] = 10] = "SUPER_GLUTTONY";
        MinibossID2[MinibossID2["SUPER_GREED"] = 11] = "SUPER_GREED";
        MinibossID2[MinibossID2["SUPER_ENVY"] = 12] = "SUPER_ENVY";
        MinibossID2[MinibossID2["SUPER_PRIDE"] = 13] = "SUPER_PRIDE";
        MinibossID2[MinibossID2["ULTRA_PRIDE"] = 14] = "ULTRA_PRIDE";
        MinibossID2[MinibossID2["KRAMPUS"] = 15] = "KRAMPUS";
      })(MinibossID || (exports2.MinibossID = MinibossID = {}));
      var CurseRoomSubType;
      (function(CurseRoomSubType2) {
        CurseRoomSubType2[CurseRoomSubType2["NORMAL"] = 0] = "NORMAL";
        CurseRoomSubType2[CurseRoomSubType2["VOODOO_HEAD"] = 1] = "VOODOO_HEAD";
      })(CurseRoomSubType || (exports2.CurseRoomSubType = CurseRoomSubType = {}));
      var ChallengeRoomSubType;
      (function(ChallengeRoomSubType2) {
        ChallengeRoomSubType2[ChallengeRoomSubType2["NORMAL"] = 0] = "NORMAL";
        ChallengeRoomSubType2[ChallengeRoomSubType2["BOSS"] = 1] = "BOSS";
        ChallengeRoomSubType2[ChallengeRoomSubType2["NORMAL_WAVE"] = 10] = "NORMAL_WAVE";
        ChallengeRoomSubType2[ChallengeRoomSubType2["BOSS_WAVE"] = 11] = "BOSS_WAVE";
        ChallengeRoomSubType2[ChallengeRoomSubType2["GREAT_GIDEON_WAVE"] = 12] = "GREAT_GIDEON_WAVE";
      })(ChallengeRoomSubType || (exports2.ChallengeRoomSubType = ChallengeRoomSubType = {}));
      var LibrarySubType;
      (function(LibrarySubType2) {
        LibrarySubType2[LibrarySubType2["LEVEL_1"] = 0] = "LEVEL_1";
        LibrarySubType2[LibrarySubType2["LEVEL_2"] = 1] = "LEVEL_2";
        LibrarySubType2[LibrarySubType2["LEVEL_3"] = 2] = "LEVEL_3";
        LibrarySubType2[LibrarySubType2["LEVEL_4"] = 3] = "LEVEL_4";
        LibrarySubType2[LibrarySubType2["LEVEL_5"] = 4] = "LEVEL_5";
        LibrarySubType2[LibrarySubType2["EXTRA_GOOD"] = 10] = "EXTRA_GOOD";
        LibrarySubType2[LibrarySubType2["EXTRA_BAD"] = 11] = "EXTRA_BAD";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_LEVEL_1"] = 100] = "TAINTED_KEEPER_LEVEL_1";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_LEVEL_2"] = 101] = "TAINTED_KEEPER_LEVEL_2";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_LEVEL_3"] = 102] = "TAINTED_KEEPER_LEVEL_3";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_LEVEL_4"] = 103] = "TAINTED_KEEPER_LEVEL_4";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_LEVEL_5"] = 104] = "TAINTED_KEEPER_LEVEL_5";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_EXTRA_GOOD"] = 110] = "TAINTED_KEEPER_EXTRA_GOOD";
        LibrarySubType2[LibrarySubType2["TAINTED_KEEPER_EXTRA_BAD"] = 111] = "TAINTED_KEEPER_EXTRA_BAD";
      })(LibrarySubType || (exports2.LibrarySubType = LibrarySubType = {}));
      var DevilRoomSubType;
      (function(DevilRoomSubType2) {
        DevilRoomSubType2[DevilRoomSubType2["NORMAL"] = 0] = "NORMAL";
        DevilRoomSubType2[DevilRoomSubType2["NUMBER_SIX_TRINKET"] = 1] = "NUMBER_SIX_TRINKET";
      })(DevilRoomSubType || (exports2.DevilRoomSubType = DevilRoomSubType = {}));
      var AngelRoomSubType;
      (function(AngelRoomSubType2) {
        AngelRoomSubType2[AngelRoomSubType2["NORMAL"] = 0] = "NORMAL";
        AngelRoomSubType2[AngelRoomSubType2["SHOP"] = 1] = "SHOP";
      })(AngelRoomSubType || (exports2.AngelRoomSubType = AngelRoomSubType = {}));
      var DungeonSubType;
      (function(DungeonSubType2) {
        DungeonSubType2[DungeonSubType2["NORMAL"] = 0] = "NORMAL";
        DungeonSubType2[DungeonSubType2["GIDEONS_GRAVE"] = 1] = "GIDEONS_GRAVE";
        DungeonSubType2[DungeonSubType2["ROTGUT_MAGGOT"] = 2] = "ROTGUT_MAGGOT";
        DungeonSubType2[DungeonSubType2["ROTGUT_HEART"] = 3] = "ROTGUT_HEART";
        DungeonSubType2[DungeonSubType2["BEAST_ROOM"] = 4] = "BEAST_ROOM";
      })(DungeonSubType || (exports2.DungeonSubType = DungeonSubType = {}));
      var IsaacsRoomSubType;
      (function(IsaacsRoomSubType2) {
        IsaacsRoomSubType2[IsaacsRoomSubType2["NORMAL"] = 0] = "NORMAL";
        IsaacsRoomSubType2[IsaacsRoomSubType2["GENESIS"] = 99] = "GENESIS";
      })(IsaacsRoomSubType || (exports2.IsaacsRoomSubType = IsaacsRoomSubType = {}));
      var SecretExitSubType;
      (function(SecretExitSubType2) {
        SecretExitSubType2[SecretExitSubType2["DOWNPOUR"] = 1] = "DOWNPOUR";
        SecretExitSubType2[SecretExitSubType2["MINES"] = 2] = "MINES";
        SecretExitSubType2[SecretExitSubType2["MAUSOLEUM"] = 3] = "MAUSOLEUM";
      })(SecretExitSubType || (exports2.SecretExitSubType = SecretExitSubType = {}));
      var DownpourRoomSubType;
      (function(DownpourRoomSubType2) {
        DownpourRoomSubType2[DownpourRoomSubType2["NORMAL"] = 0] = "NORMAL";
        DownpourRoomSubType2[DownpourRoomSubType2["WHITE_FIRE"] = 1] = "WHITE_FIRE";
        DownpourRoomSubType2[DownpourRoomSubType2["MIRROR"] = 34] = "MIRROR";
      })(DownpourRoomSubType || (exports2.DownpourRoomSubType = DownpourRoomSubType = {}));
      var MinesRoomSubType;
      (function(MinesRoomSubType2) {
        MinesRoomSubType2[MinesRoomSubType2["NORMAL"] = 0] = "NORMAL";
        MinesRoomSubType2[MinesRoomSubType2["BUTTON_ROOM"] = 1] = "BUTTON_ROOM";
        MinesRoomSubType2[MinesRoomSubType2["MINESHAFT_ENTRANCE"] = 10] = "MINESHAFT_ENTRANCE";
        MinesRoomSubType2[MinesRoomSubType2["MINESHAFT_LOBBY"] = 11] = "MINESHAFT_LOBBY";
        MinesRoomSubType2[MinesRoomSubType2["MINESHAFT_KNIFE_PIECE"] = 20] = "MINESHAFT_KNIFE_PIECE";
        MinesRoomSubType2[MinesRoomSubType2["MINESHAFT_ROOM_PRE_CHASE"] = 30] = "MINESHAFT_ROOM_PRE_CHASE";
        MinesRoomSubType2[MinesRoomSubType2["MINESHAFT_ROOM_POST_CHASE"] = 31] = "MINESHAFT_ROOM_POST_CHASE";
      })(MinesRoomSubType || (exports2.MinesRoomSubType = MinesRoomSubType = {}));
      var HomeRoomSubType;
      (function(HomeRoomSubType2) {
        HomeRoomSubType2[HomeRoomSubType2["ISAACS_BEDROOM"] = 0] = "ISAACS_BEDROOM";
        HomeRoomSubType2[HomeRoomSubType2["HALLWAY"] = 1] = "HALLWAY";
        HomeRoomSubType2[HomeRoomSubType2["MOMS_BEDROOM"] = 2] = "MOMS_BEDROOM";
        HomeRoomSubType2[HomeRoomSubType2["LIVING_ROOM"] = 3] = "LIVING_ROOM";
        HomeRoomSubType2[HomeRoomSubType2["CLOSET_RIGHT"] = 10] = "CLOSET_RIGHT";
        HomeRoomSubType2[HomeRoomSubType2["CLOSET_LEFT"] = 11] = "CLOSET_LEFT";
        HomeRoomSubType2[HomeRoomSubType2["DEATH_CERTIFICATE_ENTRANCE"] = 33] = "DEATH_CERTIFICATE_ENTRANCE";
        HomeRoomSubType2[HomeRoomSubType2["DEATH_CERTIFICATE_ITEMS"] = 34] = "DEATH_CERTIFICATE_ITEMS";
      })(HomeRoomSubType || (exports2.HomeRoomSubType = HomeRoomSubType = {}));
      var BackwardsRoomSubType;
      (function(BackwardsRoomSubType2) {
        BackwardsRoomSubType2[BackwardsRoomSubType2["EXIT"] = 0] = "EXIT";
        BackwardsRoomSubType2[BackwardsRoomSubType2["BASEMENT"] = 1] = "BASEMENT";
        BackwardsRoomSubType2[BackwardsRoomSubType2["CAVES"] = 4] = "CAVES";
        BackwardsRoomSubType2[BackwardsRoomSubType2["DEPTHS"] = 7] = "DEPTHS";
        BackwardsRoomSubType2[BackwardsRoomSubType2["DOWNPOUR"] = 27] = "DOWNPOUR";
        BackwardsRoomSubType2[BackwardsRoomSubType2["MINES"] = 29] = "MINES";
        BackwardsRoomSubType2[BackwardsRoomSubType2["MAUSOLEUM"] = 31] = "MAUSOLEUM";
      })(BackwardsRoomSubType || (exports2.BackwardsRoomSubType = BackwardsRoomSubType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/collections/subTypes.js
  var require_subTypes = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/collections/subTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DingleSubType = exports2.HauntSubType = exports2.ConstantStoneShooterSubType = exports2.GurglingSubType = exports2.WidowSubType = exports2.GurdyJrSubType = exports2.GeminiSubType = exports2.FistulaSubType = exports2.BloatSubType = exports2.PeepSubType = exports2.HuskSubType = exports2.DukeOfFliesSubType = exports2.DeathSubType = exports2.WarSubType = exports2.PestilenceSubType = exports2.FamineSubType = exports2.FrailSubType = exports2.PinSubType = exports2.MomSubType = exports2.Monstro2SubType = exports2.AngelicBabySubType = exports2.GurdySubType = exports2.CarrionQueenSubType = exports2.ChubSubType = exports2.DragonFlySubType = exports2.ChargerSubType = exports2.MonstroSubType = exports2.HollowSubType = exports2.LarryJrSubType = exports2.RottenGaperSubType = exports2.LaserSubType = exports2.BedSubType = exports2.TrinketType = exports2.CardType = exports2.CollectibleType = exports2.BatterySubType = exports2.PillColor = exports2.SackSubType = exports2.ChestSubType = exports2.PoopPickupSubType = exports2.BombSubType = exports2.KeySubType = exports2.CoinSubType = exports2.HeartSubType = exports2.PickupNullSubType = exports2.BloodClotSubType = exports2.DipFamiliarSubType = exports2.BlueFlySubType = exports2.BabySubType = exports2.PlayerType = void 0;
      exports2.PurgatorySubType = exports2.PortalTeleportSubType = exports2.TallLadderSubType = exports2.DiceFloorSubType = exports2.CarpetSubType = exports2.HeavenLightDoorSubType = exports2.PoofSubType = exports2.GibSubType = exports2.BloodExplosionSubType = exports2.MotherBallSubType = exports2.MotherSubType = exports2.MazeRoamerSubType = exports2.DarkEsauSubType = exports2.MorningStarSubType = exports2.DeepGaperSubType = exports2.QuakeGrimaceSubType = exports2.RagManSubType = exports2.LittleHornSubType = exports2.ForsakenSubType = exports2.BrownieSubType = exports2.StainSubType = exports2.LeperSubType = exports2.PolycephalusSubType = exports2.CageSubType = exports2.MegaFattySubType = exports2.GateSubType = exports2.MegaMawSubType = void 0;
      var PlayerType3;
      (function(PlayerType4) {
        PlayerType4[PlayerType4["POSSESSOR"] = -1] = "POSSESSOR";
        PlayerType4[PlayerType4["ISAAC"] = 0] = "ISAAC";
        PlayerType4[PlayerType4["MAGDALENE"] = 1] = "MAGDALENE";
        PlayerType4[PlayerType4["CAIN"] = 2] = "CAIN";
        PlayerType4[PlayerType4["JUDAS"] = 3] = "JUDAS";
        PlayerType4[PlayerType4["BLUE_BABY"] = 4] = "BLUE_BABY";
        PlayerType4[PlayerType4["EVE"] = 5] = "EVE";
        PlayerType4[PlayerType4["SAMSON"] = 6] = "SAMSON";
        PlayerType4[PlayerType4["AZAZEL"] = 7] = "AZAZEL";
        PlayerType4[PlayerType4["LAZARUS"] = 8] = "LAZARUS";
        PlayerType4[PlayerType4["EDEN"] = 9] = "EDEN";
        PlayerType4[PlayerType4["LOST"] = 10] = "LOST";
        PlayerType4[PlayerType4["LAZARUS_2"] = 11] = "LAZARUS_2";
        PlayerType4[PlayerType4["DARK_JUDAS"] = 12] = "DARK_JUDAS";
        PlayerType4[PlayerType4["LILITH"] = 13] = "LILITH";
        PlayerType4[PlayerType4["KEEPER"] = 14] = "KEEPER";
        PlayerType4[PlayerType4["APOLLYON"] = 15] = "APOLLYON";
        PlayerType4[PlayerType4["FORGOTTEN"] = 16] = "FORGOTTEN";
        PlayerType4[PlayerType4["SOUL"] = 17] = "SOUL";
        PlayerType4[PlayerType4["BETHANY"] = 18] = "BETHANY";
        PlayerType4[PlayerType4["JACOB"] = 19] = "JACOB";
        PlayerType4[PlayerType4["ESAU"] = 20] = "ESAU";
        PlayerType4[PlayerType4["ISAAC_B"] = 21] = "ISAAC_B";
        PlayerType4[PlayerType4["MAGDALENE_B"] = 22] = "MAGDALENE_B";
        PlayerType4[PlayerType4["CAIN_B"] = 23] = "CAIN_B";
        PlayerType4[PlayerType4["JUDAS_B"] = 24] = "JUDAS_B";
        PlayerType4[PlayerType4["BLUE_BABY_B"] = 25] = "BLUE_BABY_B";
        PlayerType4[PlayerType4["EVE_B"] = 26] = "EVE_B";
        PlayerType4[PlayerType4["SAMSON_B"] = 27] = "SAMSON_B";
        PlayerType4[PlayerType4["AZAZEL_B"] = 28] = "AZAZEL_B";
        PlayerType4[PlayerType4["LAZARUS_B"] = 29] = "LAZARUS_B";
        PlayerType4[PlayerType4["EDEN_B"] = 30] = "EDEN_B";
        PlayerType4[PlayerType4["LOST_B"] = 31] = "LOST_B";
        PlayerType4[PlayerType4["LILITH_B"] = 32] = "LILITH_B";
        PlayerType4[PlayerType4["KEEPER_B"] = 33] = "KEEPER_B";
        PlayerType4[PlayerType4["APOLLYON_B"] = 34] = "APOLLYON_B";
        PlayerType4[PlayerType4["FORGOTTEN_B"] = 35] = "FORGOTTEN_B";
        PlayerType4[PlayerType4["BETHANY_B"] = 36] = "BETHANY_B";
        PlayerType4[PlayerType4["JACOB_B"] = 37] = "JACOB_B";
        PlayerType4[PlayerType4["LAZARUS_2_B"] = 38] = "LAZARUS_2_B";
        PlayerType4[PlayerType4["JACOB_2_B"] = 39] = "JACOB_2_B";
        PlayerType4[PlayerType4["SOUL_B"] = 40] = "SOUL_B";
      })(PlayerType3 || (exports2.PlayerType = PlayerType3 = {}));
      var BabySubType;
      (function(BabySubType2) {
        BabySubType2[BabySubType2["UNASSIGNED"] = -1] = "UNASSIGNED";
        BabySubType2[BabySubType2["SPIDER"] = 0] = "SPIDER";
        BabySubType2[BabySubType2["LOVE"] = 1] = "LOVE";
        BabySubType2[BabySubType2["BLOAT"] = 2] = "BLOAT";
        BabySubType2[BabySubType2["WATER"] = 3] = "WATER";
        BabySubType2[BabySubType2["PSY"] = 4] = "PSY";
        BabySubType2[BabySubType2["CURSED"] = 5] = "CURSED";
        BabySubType2[BabySubType2["TROLL"] = 6] = "TROLL";
        BabySubType2[BabySubType2["YBAB"] = 7] = "YBAB";
        BabySubType2[BabySubType2["COCKEYED"] = 8] = "COCKEYED";
        BabySubType2[BabySubType2["HOST"] = 9] = "HOST";
        BabySubType2[BabySubType2["LOST"] = 10] = "LOST";
        BabySubType2[BabySubType2["CUTE"] = 11] = "CUTE";
        BabySubType2[BabySubType2["CROW"] = 12] = "CROW";
        BabySubType2[BabySubType2["SHADOW"] = 13] = "SHADOW";
        BabySubType2[BabySubType2["GLASS"] = 14] = "GLASS";
        BabySubType2[BabySubType2["GOLD"] = 15] = "GOLD";
        BabySubType2[BabySubType2["CY"] = 16] = "CY";
        BabySubType2[BabySubType2["BEAN"] = 17] = "BEAN";
        BabySubType2[BabySubType2["MAG"] = 18] = "MAG";
        BabySubType2[BabySubType2["WRATH"] = 19] = "WRATH";
        BabySubType2[BabySubType2["WRAPPED"] = 20] = "WRAPPED";
        BabySubType2[BabySubType2["BEGOTTEN"] = 21] = "BEGOTTEN";
        BabySubType2[BabySubType2["DEAD"] = 22] = "DEAD";
        BabySubType2[BabySubType2["FIGHTING"] = 23] = "FIGHTING";
        BabySubType2[BabySubType2["ZERO"] = 24] = "ZERO";
        BabySubType2[BabySubType2["GLITCH"] = 25] = "GLITCH";
        BabySubType2[BabySubType2["MAGNET"] = 26] = "MAGNET";
        BabySubType2[BabySubType2["BLACK"] = 27] = "BLACK";
        BabySubType2[BabySubType2["RED"] = 28] = "RED";
        BabySubType2[BabySubType2["WHITE"] = 29] = "WHITE";
        BabySubType2[BabySubType2["BLUE"] = 30] = "BLUE";
        BabySubType2[BabySubType2["RAGE"] = 31] = "RAGE";
        BabySubType2[BabySubType2["CRY"] = 32] = "CRY";
        BabySubType2[BabySubType2["YELLOW"] = 33] = "YELLOW";
        BabySubType2[BabySubType2["LONG"] = 34] = "LONG";
        BabySubType2[BabySubType2["GREEN"] = 35] = "GREEN";
        BabySubType2[BabySubType2["LIL"] = 36] = "LIL";
        BabySubType2[BabySubType2["BIG"] = 37] = "BIG";
        BabySubType2[BabySubType2["BROWN"] = 38] = "BROWN";
        BabySubType2[BabySubType2["NOOSE"] = 39] = "NOOSE";
        BabySubType2[BabySubType2["HIVE"] = 40] = "HIVE";
        BabySubType2[BabySubType2["BUDDY"] = 41] = "BUDDY";
        BabySubType2[BabySubType2["COLORFUL"] = 42] = "COLORFUL";
        BabySubType2[BabySubType2["WHORE"] = 43] = "WHORE";
        BabySubType2[BabySubType2["CRACKED"] = 44] = "CRACKED";
        BabySubType2[BabySubType2["DRIPPING"] = 45] = "DRIPPING";
        BabySubType2[BabySubType2["BLINDING"] = 46] = "BLINDING";
        BabySubType2[BabySubType2["SUCKY"] = 47] = "SUCKY";
        BabySubType2[BabySubType2["DARK"] = 48] = "DARK";
        BabySubType2[BabySubType2["PICKY"] = 49] = "PICKY";
        BabySubType2[BabySubType2["REVENGE"] = 50] = "REVENGE";
        BabySubType2[BabySubType2["BELIAL"] = 51] = "BELIAL";
        BabySubType2[BabySubType2["SALE"] = 52] = "SALE";
        BabySubType2[BabySubType2["GOAT"] = 53] = "GOAT";
        BabySubType2[BabySubType2["SUPER_GREED"] = 54] = "SUPER_GREED";
        BabySubType2[BabySubType2["MORT"] = 55] = "MORT";
        BabySubType2[BabySubType2["APOLLYON"] = 56] = "APOLLYON";
        BabySubType2[BabySubType2["BONE"] = 57] = "BONE";
        BabySubType2[BabySubType2["BOUND"] = 58] = "BOUND";
        BabySubType2[BabySubType2["FOUND_SOUL"] = 59] = "FOUND_SOUL";
        BabySubType2[BabySubType2["LOST_WHITE"] = 60] = "LOST_WHITE";
        BabySubType2[BabySubType2["LOST_BLACK"] = 61] = "LOST_BLACK";
        BabySubType2[BabySubType2["LOST_BLUE"] = 62] = "LOST_BLUE";
        BabySubType2[BabySubType2["LOST_GREY"] = 63] = "LOST_GREY";
        BabySubType2[BabySubType2["WISP"] = 64] = "WISP";
        BabySubType2[BabySubType2["DOUBLE"] = 65] = "DOUBLE";
        BabySubType2[BabySubType2["GLOWING"] = 66] = "GLOWING";
        BabySubType2[BabySubType2["ILLUSION"] = 67] = "ILLUSION";
        BabySubType2[BabySubType2["HOPE"] = 68] = "HOPE";
        BabySubType2[BabySubType2["SOLOMON_A"] = 69] = "SOLOMON_A";
        BabySubType2[BabySubType2["SOLOMON_B"] = 70] = "SOLOMON_B";
        BabySubType2[BabySubType2["BASIC"] = 71] = "BASIC";
      })(BabySubType || (exports2.BabySubType = BabySubType = {}));
      var BlueFlySubType;
      (function(BlueFlySubType2) {
        BlueFlySubType2[BlueFlySubType2["BLUE_FLY"] = 0] = "BLUE_FLY";
        BlueFlySubType2[BlueFlySubType2["WRATH"] = 1] = "WRATH";
        BlueFlySubType2[BlueFlySubType2["PESTILENCE"] = 2] = "PESTILENCE";
        BlueFlySubType2[BlueFlySubType2["FAMINE"] = 3] = "FAMINE";
        BlueFlySubType2[BlueFlySubType2["DEATH"] = 4] = "DEATH";
        BlueFlySubType2[BlueFlySubType2["CONQUEST"] = 5] = "CONQUEST";
      })(BlueFlySubType || (exports2.BlueFlySubType = BlueFlySubType = {}));
      var DipFamiliarSubType;
      (function(DipFamiliarSubType2) {
        DipFamiliarSubType2[DipFamiliarSubType2["NORMAL"] = 0] = "NORMAL";
        DipFamiliarSubType2[DipFamiliarSubType2["RED"] = 1] = "RED";
        DipFamiliarSubType2[DipFamiliarSubType2["CORNY"] = 2] = "CORNY";
        DipFamiliarSubType2[DipFamiliarSubType2["GOLD"] = 3] = "GOLD";
        DipFamiliarSubType2[DipFamiliarSubType2["RAINBOW"] = 4] = "RAINBOW";
        DipFamiliarSubType2[DipFamiliarSubType2["BLACK"] = 5] = "BLACK";
        DipFamiliarSubType2[DipFamiliarSubType2["WHITE"] = 6] = "WHITE";
        DipFamiliarSubType2[DipFamiliarSubType2["STONE"] = 12] = "STONE";
        DipFamiliarSubType2[DipFamiliarSubType2["FLAMING"] = 13] = "FLAMING";
        DipFamiliarSubType2[DipFamiliarSubType2["STINKY"] = 14] = "STINKY";
        DipFamiliarSubType2[DipFamiliarSubType2["BROWNIE"] = 20] = "BROWNIE";
      })(DipFamiliarSubType || (exports2.DipFamiliarSubType = DipFamiliarSubType = {}));
      var BloodClotSubType;
      (function(BloodClotSubType2) {
        BloodClotSubType2[BloodClotSubType2["RED"] = 0] = "RED";
        BloodClotSubType2[BloodClotSubType2["SOUL"] = 1] = "SOUL";
        BloodClotSubType2[BloodClotSubType2["BLACK"] = 2] = "BLACK";
        BloodClotSubType2[BloodClotSubType2["ETERNAL"] = 3] = "ETERNAL";
        BloodClotSubType2[BloodClotSubType2["GOLD"] = 4] = "GOLD";
        BloodClotSubType2[BloodClotSubType2["BONE"] = 5] = "BONE";
        BloodClotSubType2[BloodClotSubType2["ROTTEN"] = 6] = "ROTTEN";
        BloodClotSubType2[BloodClotSubType2["RED_NO_SUMPTORIUM"] = 7] = "RED_NO_SUMPTORIUM";
      })(BloodClotSubType || (exports2.BloodClotSubType = BloodClotSubType = {}));
      var PickupNullSubType;
      (function(PickupNullSubType2) {
        PickupNullSubType2[PickupNullSubType2["ALL"] = 0] = "ALL";
        PickupNullSubType2[PickupNullSubType2["EXCLUDE_COLLECTIBLES_CHESTS"] = 1] = "EXCLUDE_COLLECTIBLES_CHESTS";
        PickupNullSubType2[PickupNullSubType2["EXCLUDE_COLLECTIBLES"] = 2] = "EXCLUDE_COLLECTIBLES";
        PickupNullSubType2[PickupNullSubType2["EXCLUDE_COLLECTIBLES_CHESTS_COINS"] = 3] = "EXCLUDE_COLLECTIBLES_CHESTS_COINS";
        PickupNullSubType2[PickupNullSubType2["EXCLUDE_COLLECTIBLES_TRINKETS_CHESTS"] = 4] = "EXCLUDE_COLLECTIBLES_TRINKETS_CHESTS";
      })(PickupNullSubType || (exports2.PickupNullSubType = PickupNullSubType = {}));
      var HeartSubType;
      (function(HeartSubType2) {
        HeartSubType2[HeartSubType2["NULL"] = 0] = "NULL";
        HeartSubType2[HeartSubType2["FULL"] = 1] = "FULL";
        HeartSubType2[HeartSubType2["HALF"] = 2] = "HALF";
        HeartSubType2[HeartSubType2["SOUL"] = 3] = "SOUL";
        HeartSubType2[HeartSubType2["ETERNAL"] = 4] = "ETERNAL";
        HeartSubType2[HeartSubType2["DOUBLE_PACK"] = 5] = "DOUBLE_PACK";
        HeartSubType2[HeartSubType2["BLACK"] = 6] = "BLACK";
        HeartSubType2[HeartSubType2["GOLDEN"] = 7] = "GOLDEN";
        HeartSubType2[HeartSubType2["HALF_SOUL"] = 8] = "HALF_SOUL";
        HeartSubType2[HeartSubType2["SCARED"] = 9] = "SCARED";
        HeartSubType2[HeartSubType2["BLENDED"] = 10] = "BLENDED";
        HeartSubType2[HeartSubType2["BONE"] = 11] = "BONE";
        HeartSubType2[HeartSubType2["ROTTEN"] = 12] = "ROTTEN";
      })(HeartSubType || (exports2.HeartSubType = HeartSubType = {}));
      var CoinSubType;
      (function(CoinSubType2) {
        CoinSubType2[CoinSubType2["NULL"] = 0] = "NULL";
        CoinSubType2[CoinSubType2["PENNY"] = 1] = "PENNY";
        CoinSubType2[CoinSubType2["NICKEL"] = 2] = "NICKEL";
        CoinSubType2[CoinSubType2["DIME"] = 3] = "DIME";
        CoinSubType2[CoinSubType2["DOUBLE_PACK"] = 4] = "DOUBLE_PACK";
        CoinSubType2[CoinSubType2["LUCKY_PENNY"] = 5] = "LUCKY_PENNY";
        CoinSubType2[CoinSubType2["STICKY_NICKEL"] = 6] = "STICKY_NICKEL";
        CoinSubType2[CoinSubType2["GOLDEN"] = 7] = "GOLDEN";
      })(CoinSubType || (exports2.CoinSubType = CoinSubType = {}));
      var KeySubType;
      (function(KeySubType2) {
        KeySubType2[KeySubType2["NULL"] = 0] = "NULL";
        KeySubType2[KeySubType2["NORMAL"] = 1] = "NORMAL";
        KeySubType2[KeySubType2["GOLDEN"] = 2] = "GOLDEN";
        KeySubType2[KeySubType2["DOUBLE_PACK"] = 3] = "DOUBLE_PACK";
        KeySubType2[KeySubType2["CHARGED"] = 4] = "CHARGED";
      })(KeySubType || (exports2.KeySubType = KeySubType = {}));
      var BombSubType;
      (function(BombSubType2) {
        BombSubType2[BombSubType2["NULL"] = 0] = "NULL";
        BombSubType2[BombSubType2["NORMAL"] = 1] = "NORMAL";
        BombSubType2[BombSubType2["DOUBLE_PACK"] = 2] = "DOUBLE_PACK";
        BombSubType2[BombSubType2["TROLL"] = 3] = "TROLL";
        BombSubType2[BombSubType2["GOLDEN"] = 4] = "GOLDEN";
        BombSubType2[BombSubType2["MEGA_TROLL"] = 5] = "MEGA_TROLL";
        BombSubType2[BombSubType2["GOLDEN_TROLL"] = 6] = "GOLDEN_TROLL";
        BombSubType2[BombSubType2["GIGA"] = 7] = "GIGA";
      })(BombSubType || (exports2.BombSubType = BombSubType = {}));
      var PoopPickupSubType;
      (function(PoopPickupSubType2) {
        PoopPickupSubType2[PoopPickupSubType2["SMALL"] = 0] = "SMALL";
        PoopPickupSubType2[PoopPickupSubType2["BIG"] = 1] = "BIG";
      })(PoopPickupSubType || (exports2.PoopPickupSubType = PoopPickupSubType = {}));
      var ChestSubType;
      (function(ChestSubType2) {
        ChestSubType2[ChestSubType2["OPENED"] = 0] = "OPENED";
        ChestSubType2[ChestSubType2["CLOSED"] = 1] = "CLOSED";
      })(ChestSubType || (exports2.ChestSubType = ChestSubType = {}));
      var SackSubType;
      (function(SackSubType2) {
        SackSubType2[SackSubType2["NULL"] = 0] = "NULL";
        SackSubType2[SackSubType2["NORMAL"] = 1] = "NORMAL";
        SackSubType2[SackSubType2["BLACK"] = 2] = "BLACK";
      })(SackSubType || (exports2.SackSubType = SackSubType = {}));
      var PillColor;
      (function(PillColor2) {
        PillColor2[PillColor2["NULL"] = 0] = "NULL";
        PillColor2[PillColor2["BLUE_BLUE"] = 1] = "BLUE_BLUE";
        PillColor2[PillColor2["WHITE_BLUE"] = 2] = "WHITE_BLUE";
        PillColor2[PillColor2["ORANGE_ORANGE"] = 3] = "ORANGE_ORANGE";
        PillColor2[PillColor2["WHITE_WHITE"] = 4] = "WHITE_WHITE";
        PillColor2[PillColor2["RED_DOTS_RED"] = 5] = "RED_DOTS_RED";
        PillColor2[PillColor2["PINK_RED"] = 6] = "PINK_RED";
        PillColor2[PillColor2["BLUE_CADET_BLUE"] = 7] = "BLUE_CADET_BLUE";
        PillColor2[PillColor2["YELLOW_ORANGE"] = 8] = "YELLOW_ORANGE";
        PillColor2[PillColor2["ORANGE_DOTS_WHITE"] = 9] = "ORANGE_DOTS_WHITE";
        PillColor2[PillColor2["WHITE_AZURE"] = 10] = "WHITE_AZURE";
        PillColor2[PillColor2["BLACK_YELLOW"] = 11] = "BLACK_YELLOW";
        PillColor2[PillColor2["WHITE_BLACK"] = 12] = "WHITE_BLACK";
        PillColor2[PillColor2["WHITE_YELLOW"] = 13] = "WHITE_YELLOW";
        PillColor2[PillColor2["GOLD"] = 14] = "GOLD";
        PillColor2[PillColor2["HORSE_BLUE_BLUE"] = 2049] = "HORSE_BLUE_BLUE";
        PillColor2[PillColor2["HORSE_WHITE_BLUE"] = 2050] = "HORSE_WHITE_BLUE";
        PillColor2[PillColor2["HORSE_ORANGE_ORANGE"] = 2051] = "HORSE_ORANGE_ORANGE";
        PillColor2[PillColor2["HORSE_WHITE_WHITE"] = 2052] = "HORSE_WHITE_WHITE";
        PillColor2[PillColor2["HORSE_RED_DOTS_RED"] = 2053] = "HORSE_RED_DOTS_RED";
        PillColor2[PillColor2["HORSE_PINK_RED"] = 2054] = "HORSE_PINK_RED";
        PillColor2[PillColor2["HORSE_BLUE_CADET_BLUE"] = 2055] = "HORSE_BLUE_CADET_BLUE";
        PillColor2[PillColor2["HORSE_YELLOW_ORANGE"] = 2056] = "HORSE_YELLOW_ORANGE";
        PillColor2[PillColor2["HORSE_ORANGE_DOTS_WHITE"] = 2057] = "HORSE_ORANGE_DOTS_WHITE";
        PillColor2[PillColor2["HORSE_WHITE_AZURE"] = 2058] = "HORSE_WHITE_AZURE";
        PillColor2[PillColor2["HORSE_BLACK_YELLOW"] = 2059] = "HORSE_BLACK_YELLOW";
        PillColor2[PillColor2["HORSE_WHITE_BLACK"] = 2060] = "HORSE_WHITE_BLACK";
        PillColor2[PillColor2["HORSE_WHITE_YELLOW"] = 2061] = "HORSE_WHITE_YELLOW";
        PillColor2[PillColor2["HORSE_GOLD"] = 2062] = "HORSE_GOLD";
      })(PillColor || (exports2.PillColor = PillColor = {}));
      var BatterySubType;
      (function(BatterySubType2) {
        BatterySubType2[BatterySubType2["NULL"] = 0] = "NULL";
        BatterySubType2[BatterySubType2["NORMAL"] = 1] = "NORMAL";
        BatterySubType2[BatterySubType2["MICRO"] = 2] = "MICRO";
        BatterySubType2[BatterySubType2["MEGA"] = 3] = "MEGA";
        BatterySubType2[BatterySubType2["GOLDEN"] = 4] = "GOLDEN";
      })(BatterySubType || (exports2.BatterySubType = BatterySubType = {}));
      var CollectibleType;
      (function(CollectibleType2) {
        CollectibleType2[CollectibleType2["NULL"] = 0] = "NULL";
        CollectibleType2[CollectibleType2["SAD_ONION"] = 1] = "SAD_ONION";
        CollectibleType2[CollectibleType2["INNER_EYE"] = 2] = "INNER_EYE";
        CollectibleType2[CollectibleType2["SPOON_BENDER"] = 3] = "SPOON_BENDER";
        CollectibleType2[CollectibleType2["CRICKETS_HEAD"] = 4] = "CRICKETS_HEAD";
        CollectibleType2[CollectibleType2["MY_REFLECTION"] = 5] = "MY_REFLECTION";
        CollectibleType2[CollectibleType2["NUMBER_ONE"] = 6] = "NUMBER_ONE";
        CollectibleType2[CollectibleType2["BLOOD_OF_THE_MARTYR"] = 7] = "BLOOD_OF_THE_MARTYR";
        CollectibleType2[CollectibleType2["BROTHER_BOBBY"] = 8] = "BROTHER_BOBBY";
        CollectibleType2[CollectibleType2["SKATOLE"] = 9] = "SKATOLE";
        CollectibleType2[CollectibleType2["HALO_OF_FLIES"] = 10] = "HALO_OF_FLIES";
        CollectibleType2[CollectibleType2["ONE_UP"] = 11] = "ONE_UP";
        CollectibleType2[CollectibleType2["MAGIC_MUSHROOM"] = 12] = "MAGIC_MUSHROOM";
        CollectibleType2[CollectibleType2["VIRUS"] = 13] = "VIRUS";
        CollectibleType2[CollectibleType2["ROID_RAGE"] = 14] = "ROID_RAGE";
        CollectibleType2[CollectibleType2["HEART"] = 15] = "HEART";
        CollectibleType2[CollectibleType2["RAW_LIVER"] = 16] = "RAW_LIVER";
        CollectibleType2[CollectibleType2["SKELETON_KEY"] = 17] = "SKELETON_KEY";
        CollectibleType2[CollectibleType2["DOLLAR"] = 18] = "DOLLAR";
        CollectibleType2[CollectibleType2["BOOM"] = 19] = "BOOM";
        CollectibleType2[CollectibleType2["TRANSCENDENCE"] = 20] = "TRANSCENDENCE";
        CollectibleType2[CollectibleType2["COMPASS"] = 21] = "COMPASS";
        CollectibleType2[CollectibleType2["LUNCH"] = 22] = "LUNCH";
        CollectibleType2[CollectibleType2["DINNER"] = 23] = "DINNER";
        CollectibleType2[CollectibleType2["DESSERT"] = 24] = "DESSERT";
        CollectibleType2[CollectibleType2["BREAKFAST"] = 25] = "BREAKFAST";
        CollectibleType2[CollectibleType2["ROTTEN_MEAT"] = 26] = "ROTTEN_MEAT";
        CollectibleType2[CollectibleType2["WOODEN_SPOON"] = 27] = "WOODEN_SPOON";
        CollectibleType2[CollectibleType2["BELT"] = 28] = "BELT";
        CollectibleType2[CollectibleType2["MOMS_UNDERWEAR"] = 29] = "MOMS_UNDERWEAR";
        CollectibleType2[CollectibleType2["MOMS_HEELS"] = 30] = "MOMS_HEELS";
        CollectibleType2[CollectibleType2["MOMS_LIPSTICK"] = 31] = "MOMS_LIPSTICK";
        CollectibleType2[CollectibleType2["WIRE_COAT_HANGER"] = 32] = "WIRE_COAT_HANGER";
        CollectibleType2[CollectibleType2["BIBLE"] = 33] = "BIBLE";
        CollectibleType2[CollectibleType2["BOOK_OF_BELIAL"] = 34] = "BOOK_OF_BELIAL";
        CollectibleType2[CollectibleType2["NECRONOMICON"] = 35] = "NECRONOMICON";
        CollectibleType2[CollectibleType2["POOP"] = 36] = "POOP";
        CollectibleType2[CollectibleType2["MR_BOOM"] = 37] = "MR_BOOM";
        CollectibleType2[CollectibleType2["TAMMYS_HEAD"] = 38] = "TAMMYS_HEAD";
        CollectibleType2[CollectibleType2["MOMS_BRA"] = 39] = "MOMS_BRA";
        CollectibleType2[CollectibleType2["KAMIKAZE"] = 40] = "KAMIKAZE";
        CollectibleType2[CollectibleType2["MOMS_PAD"] = 41] = "MOMS_PAD";
        CollectibleType2[CollectibleType2["BOBS_ROTTEN_HEAD"] = 42] = "BOBS_ROTTEN_HEAD";
        CollectibleType2[CollectibleType2["TELEPORT"] = 44] = "TELEPORT";
        CollectibleType2[CollectibleType2["YUM_HEART"] = 45] = "YUM_HEART";
        CollectibleType2[CollectibleType2["LUCKY_FOOT"] = 46] = "LUCKY_FOOT";
        CollectibleType2[CollectibleType2["DOCTORS_REMOTE"] = 47] = "DOCTORS_REMOTE";
        CollectibleType2[CollectibleType2["CUPIDS_ARROW"] = 48] = "CUPIDS_ARROW";
        CollectibleType2[CollectibleType2["SHOOP_DA_WHOOP"] = 49] = "SHOOP_DA_WHOOP";
        CollectibleType2[CollectibleType2["STEVEN"] = 50] = "STEVEN";
        CollectibleType2[CollectibleType2["PENTAGRAM"] = 51] = "PENTAGRAM";
        CollectibleType2[CollectibleType2["DR_FETUS"] = 52] = "DR_FETUS";
        CollectibleType2[CollectibleType2["MAGNETO"] = 53] = "MAGNETO";
        CollectibleType2[CollectibleType2["TREASURE_MAP"] = 54] = "TREASURE_MAP";
        CollectibleType2[CollectibleType2["MOMS_EYE"] = 55] = "MOMS_EYE";
        CollectibleType2[CollectibleType2["LEMON_MISHAP"] = 56] = "LEMON_MISHAP";
        CollectibleType2[CollectibleType2["DISTANT_ADMIRATION"] = 57] = "DISTANT_ADMIRATION";
        CollectibleType2[CollectibleType2["BOOK_OF_SHADOWS"] = 58] = "BOOK_OF_SHADOWS";
        CollectibleType2[CollectibleType2["BOOK_OF_BELIAL_BIRTHRIGHT"] = 59] = "BOOK_OF_BELIAL_BIRTHRIGHT";
        CollectibleType2[CollectibleType2["LADDER"] = 60] = "LADDER";
        CollectibleType2[CollectibleType2["CHARM_OF_THE_VAMPIRE"] = 62] = "CHARM_OF_THE_VAMPIRE";
        CollectibleType2[CollectibleType2["BATTERY"] = 63] = "BATTERY";
        CollectibleType2[CollectibleType2["STEAM_SALE"] = 64] = "STEAM_SALE";
        CollectibleType2[CollectibleType2["ANARCHIST_COOKBOOK"] = 65] = "ANARCHIST_COOKBOOK";
        CollectibleType2[CollectibleType2["HOURGLASS"] = 66] = "HOURGLASS";
        CollectibleType2[CollectibleType2["SISTER_MAGGY"] = 67] = "SISTER_MAGGY";
        CollectibleType2[CollectibleType2["TECHNOLOGY"] = 68] = "TECHNOLOGY";
        CollectibleType2[CollectibleType2["CHOCOLATE_MILK"] = 69] = "CHOCOLATE_MILK";
        CollectibleType2[CollectibleType2["GROWTH_HORMONES"] = 70] = "GROWTH_HORMONES";
        CollectibleType2[CollectibleType2["MINI_MUSH"] = 71] = "MINI_MUSH";
        CollectibleType2[CollectibleType2["ROSARY"] = 72] = "ROSARY";
        CollectibleType2[CollectibleType2["CUBE_OF_MEAT"] = 73] = "CUBE_OF_MEAT";
        CollectibleType2[CollectibleType2["QUARTER"] = 74] = "QUARTER";
        CollectibleType2[CollectibleType2["PHD"] = 75] = "PHD";
        CollectibleType2[CollectibleType2["XRAY_VISION"] = 76] = "XRAY_VISION";
        CollectibleType2[CollectibleType2["MY_LITTLE_UNICORN"] = 77] = "MY_LITTLE_UNICORN";
        CollectibleType2[CollectibleType2["BOOK_OF_REVELATIONS"] = 78] = "BOOK_OF_REVELATIONS";
        CollectibleType2[CollectibleType2["MARK"] = 79] = "MARK";
        CollectibleType2[CollectibleType2["PACT"] = 80] = "PACT";
        CollectibleType2[CollectibleType2["DEAD_CAT"] = 81] = "DEAD_CAT";
        CollectibleType2[CollectibleType2["LORD_OF_THE_PIT"] = 82] = "LORD_OF_THE_PIT";
        CollectibleType2[CollectibleType2["NAIL"] = 83] = "NAIL";
        CollectibleType2[CollectibleType2["WE_NEED_TO_GO_DEEPER"] = 84] = "WE_NEED_TO_GO_DEEPER";
        CollectibleType2[CollectibleType2["DECK_OF_CARDS"] = 85] = "DECK_OF_CARDS";
        CollectibleType2[CollectibleType2["MONSTROS_TOOTH"] = 86] = "MONSTROS_TOOTH";
        CollectibleType2[CollectibleType2["LOKIS_HORNS"] = 87] = "LOKIS_HORNS";
        CollectibleType2[CollectibleType2["LITTLE_CHUBBY"] = 88] = "LITTLE_CHUBBY";
        CollectibleType2[CollectibleType2["SPIDER_BITE"] = 89] = "SPIDER_BITE";
        CollectibleType2[CollectibleType2["SMALL_ROCK"] = 90] = "SMALL_ROCK";
        CollectibleType2[CollectibleType2["SPELUNKER_HAT"] = 91] = "SPELUNKER_HAT";
        CollectibleType2[CollectibleType2["SUPER_BANDAGE"] = 92] = "SUPER_BANDAGE";
        CollectibleType2[CollectibleType2["GAMEKID"] = 93] = "GAMEKID";
        CollectibleType2[CollectibleType2["SACK_OF_PENNIES"] = 94] = "SACK_OF_PENNIES";
        CollectibleType2[CollectibleType2["ROBO_BABY"] = 95] = "ROBO_BABY";
        CollectibleType2[CollectibleType2["LITTLE_CHAD"] = 96] = "LITTLE_CHAD";
        CollectibleType2[CollectibleType2["BOOK_OF_SIN"] = 97] = "BOOK_OF_SIN";
        CollectibleType2[CollectibleType2["RELIC"] = 98] = "RELIC";
        CollectibleType2[CollectibleType2["LITTLE_GISH"] = 99] = "LITTLE_GISH";
        CollectibleType2[CollectibleType2["LITTLE_STEVEN"] = 100] = "LITTLE_STEVEN";
        CollectibleType2[CollectibleType2["HALO"] = 101] = "HALO";
        CollectibleType2[CollectibleType2["MOMS_BOTTLE_OF_PILLS"] = 102] = "MOMS_BOTTLE_OF_PILLS";
        CollectibleType2[CollectibleType2["COMMON_COLD"] = 103] = "COMMON_COLD";
        CollectibleType2[CollectibleType2["PARASITE"] = 104] = "PARASITE";
        CollectibleType2[CollectibleType2["D6"] = 105] = "D6";
        CollectibleType2[CollectibleType2["MR_MEGA"] = 106] = "MR_MEGA";
        CollectibleType2[CollectibleType2["PINKING_SHEARS"] = 107] = "PINKING_SHEARS";
        CollectibleType2[CollectibleType2["WAFER"] = 108] = "WAFER";
        CollectibleType2[CollectibleType2["MONEY_EQUALS_POWER"] = 109] = "MONEY_EQUALS_POWER";
        CollectibleType2[CollectibleType2["MOMS_CONTACTS"] = 110] = "MOMS_CONTACTS";
        CollectibleType2[CollectibleType2["BEAN"] = 111] = "BEAN";
        CollectibleType2[CollectibleType2["GUARDIAN_ANGEL"] = 112] = "GUARDIAN_ANGEL";
        CollectibleType2[CollectibleType2["DEMON_BABY"] = 113] = "DEMON_BABY";
        CollectibleType2[CollectibleType2["MOMS_KNIFE"] = 114] = "MOMS_KNIFE";
        CollectibleType2[CollectibleType2["OUIJA_BOARD"] = 115] = "OUIJA_BOARD";
        CollectibleType2[CollectibleType2["NINE_VOLT"] = 116] = "NINE_VOLT";
        CollectibleType2[CollectibleType2["DEAD_BIRD"] = 117] = "DEAD_BIRD";
        CollectibleType2[CollectibleType2["BRIMSTONE"] = 118] = "BRIMSTONE";
        CollectibleType2[CollectibleType2["BLOOD_BAG"] = 119] = "BLOOD_BAG";
        CollectibleType2[CollectibleType2["ODD_MUSHROOM_THIN"] = 120] = "ODD_MUSHROOM_THIN";
        CollectibleType2[CollectibleType2["ODD_MUSHROOM_LARGE"] = 121] = "ODD_MUSHROOM_LARGE";
        CollectibleType2[CollectibleType2["WHORE_OF_BABYLON"] = 122] = "WHORE_OF_BABYLON";
        CollectibleType2[CollectibleType2["MONSTER_MANUAL"] = 123] = "MONSTER_MANUAL";
        CollectibleType2[CollectibleType2["DEAD_SEA_SCROLLS"] = 124] = "DEAD_SEA_SCROLLS";
        CollectibleType2[CollectibleType2["BOBBY_BOMB"] = 125] = "BOBBY_BOMB";
        CollectibleType2[CollectibleType2["RAZOR_BLADE"] = 126] = "RAZOR_BLADE";
        CollectibleType2[CollectibleType2["FORGET_ME_NOW"] = 127] = "FORGET_ME_NOW";
        CollectibleType2[CollectibleType2["FOREVER_ALONE"] = 128] = "FOREVER_ALONE";
        CollectibleType2[CollectibleType2["BUCKET_OF_LARD"] = 129] = "BUCKET_OF_LARD";
        CollectibleType2[CollectibleType2["PONY"] = 130] = "PONY";
        CollectibleType2[CollectibleType2["BOMB_BAG"] = 131] = "BOMB_BAG";
        CollectibleType2[CollectibleType2["LUMP_OF_COAL"] = 132] = "LUMP_OF_COAL";
        CollectibleType2[CollectibleType2["GUPPYS_PAW"] = 133] = "GUPPYS_PAW";
        CollectibleType2[CollectibleType2["GUPPYS_TAIL"] = 134] = "GUPPYS_TAIL";
        CollectibleType2[CollectibleType2["IV_BAG"] = 135] = "IV_BAG";
        CollectibleType2[CollectibleType2["BEST_FRIEND"] = 136] = "BEST_FRIEND";
        CollectibleType2[CollectibleType2["REMOTE_DETONATOR"] = 137] = "REMOTE_DETONATOR";
        CollectibleType2[CollectibleType2["STIGMATA"] = 138] = "STIGMATA";
        CollectibleType2[CollectibleType2["MOMS_PURSE"] = 139] = "MOMS_PURSE";
        CollectibleType2[CollectibleType2["BOBS_CURSE"] = 140] = "BOBS_CURSE";
        CollectibleType2[CollectibleType2["PAGEANT_BOY"] = 141] = "PAGEANT_BOY";
        CollectibleType2[CollectibleType2["SCAPULAR"] = 142] = "SCAPULAR";
        CollectibleType2[CollectibleType2["SPEED_BALL"] = 143] = "SPEED_BALL";
        CollectibleType2[CollectibleType2["BUM_FRIEND"] = 144] = "BUM_FRIEND";
        CollectibleType2[CollectibleType2["GUPPYS_HEAD"] = 145] = "GUPPYS_HEAD";
        CollectibleType2[CollectibleType2["PRAYER_CARD"] = 146] = "PRAYER_CARD";
        CollectibleType2[CollectibleType2["NOTCHED_AXE"] = 147] = "NOTCHED_AXE";
        CollectibleType2[CollectibleType2["INFESTATION"] = 148] = "INFESTATION";
        CollectibleType2[CollectibleType2["IPECAC"] = 149] = "IPECAC";
        CollectibleType2[CollectibleType2["TOUGH_LOVE"] = 150] = "TOUGH_LOVE";
        CollectibleType2[CollectibleType2["MULLIGAN"] = 151] = "MULLIGAN";
        CollectibleType2[CollectibleType2["TECHNOLOGY_2"] = 152] = "TECHNOLOGY_2";
        CollectibleType2[CollectibleType2["MUTANT_SPIDER"] = 153] = "MUTANT_SPIDER";
        CollectibleType2[CollectibleType2["CHEMICAL_PEEL"] = 154] = "CHEMICAL_PEEL";
        CollectibleType2[CollectibleType2["PEEPER"] = 155] = "PEEPER";
        CollectibleType2[CollectibleType2["HABIT"] = 156] = "HABIT";
        CollectibleType2[CollectibleType2["BLOODY_LUST"] = 157] = "BLOODY_LUST";
        CollectibleType2[CollectibleType2["CRYSTAL_BALL"] = 158] = "CRYSTAL_BALL";
        CollectibleType2[CollectibleType2["SPIRIT_OF_THE_NIGHT"] = 159] = "SPIRIT_OF_THE_NIGHT";
        CollectibleType2[CollectibleType2["CRACK_THE_SKY"] = 160] = "CRACK_THE_SKY";
        CollectibleType2[CollectibleType2["ANKH"] = 161] = "ANKH";
        CollectibleType2[CollectibleType2["CELTIC_CROSS"] = 162] = "CELTIC_CROSS";
        CollectibleType2[CollectibleType2["GHOST_BABY"] = 163] = "GHOST_BABY";
        CollectibleType2[CollectibleType2["CANDLE"] = 164] = "CANDLE";
        CollectibleType2[CollectibleType2["CAT_O_NINE_TAILS"] = 165] = "CAT_O_NINE_TAILS";
        CollectibleType2[CollectibleType2["D20"] = 166] = "D20";
        CollectibleType2[CollectibleType2["HARLEQUIN_BABY"] = 167] = "HARLEQUIN_BABY";
        CollectibleType2[CollectibleType2["EPIC_FETUS"] = 168] = "EPIC_FETUS";
        CollectibleType2[CollectibleType2["POLYPHEMUS"] = 169] = "POLYPHEMUS";
        CollectibleType2[CollectibleType2["DADDY_LONGLEGS"] = 170] = "DADDY_LONGLEGS";
        CollectibleType2[CollectibleType2["SPIDER_BUTT"] = 171] = "SPIDER_BUTT";
        CollectibleType2[CollectibleType2["SACRIFICIAL_DAGGER"] = 172] = "SACRIFICIAL_DAGGER";
        CollectibleType2[CollectibleType2["MITRE"] = 173] = "MITRE";
        CollectibleType2[CollectibleType2["RAINBOW_BABY"] = 174] = "RAINBOW_BABY";
        CollectibleType2[CollectibleType2["DADS_KEY"] = 175] = "DADS_KEY";
        CollectibleType2[CollectibleType2["STEM_CELLS"] = 176] = "STEM_CELLS";
        CollectibleType2[CollectibleType2["PORTABLE_SLOT"] = 177] = "PORTABLE_SLOT";
        CollectibleType2[CollectibleType2["HOLY_WATER"] = 178] = "HOLY_WATER";
        CollectibleType2[CollectibleType2["FATE"] = 179] = "FATE";
        CollectibleType2[CollectibleType2["BLACK_BEAN"] = 180] = "BLACK_BEAN";
        CollectibleType2[CollectibleType2["WHITE_PONY"] = 181] = "WHITE_PONY";
        CollectibleType2[CollectibleType2["SACRED_HEART"] = 182] = "SACRED_HEART";
        CollectibleType2[CollectibleType2["TOOTH_PICKS"] = 183] = "TOOTH_PICKS";
        CollectibleType2[CollectibleType2["HOLY_GRAIL"] = 184] = "HOLY_GRAIL";
        CollectibleType2[CollectibleType2["DEAD_DOVE"] = 185] = "DEAD_DOVE";
        CollectibleType2[CollectibleType2["BLOOD_RIGHTS"] = 186] = "BLOOD_RIGHTS";
        CollectibleType2[CollectibleType2["GUPPYS_HAIRBALL"] = 187] = "GUPPYS_HAIRBALL";
        CollectibleType2[CollectibleType2["ABEL"] = 188] = "ABEL";
        CollectibleType2[CollectibleType2["SMB_SUPER_FAN"] = 189] = "SMB_SUPER_FAN";
        CollectibleType2[CollectibleType2["PYRO"] = 190] = "PYRO";
        CollectibleType2[CollectibleType2["THREE_DOLLAR_BILL"] = 191] = "THREE_DOLLAR_BILL";
        CollectibleType2[CollectibleType2["TELEPATHY_BOOK"] = 192] = "TELEPATHY_BOOK";
        CollectibleType2[CollectibleType2["MEAT"] = 193] = "MEAT";
        CollectibleType2[CollectibleType2["MAGIC_8_BALL"] = 194] = "MAGIC_8_BALL";
        CollectibleType2[CollectibleType2["MOMS_COIN_PURSE"] = 195] = "MOMS_COIN_PURSE";
        CollectibleType2[CollectibleType2["SQUEEZY"] = 196] = "SQUEEZY";
        CollectibleType2[CollectibleType2["JESUS_JUICE"] = 197] = "JESUS_JUICE";
        CollectibleType2[CollectibleType2["BOX"] = 198] = "BOX";
        CollectibleType2[CollectibleType2["MOMS_KEY"] = 199] = "MOMS_KEY";
        CollectibleType2[CollectibleType2["MOMS_EYESHADOW"] = 200] = "MOMS_EYESHADOW";
        CollectibleType2[CollectibleType2["IRON_BAR"] = 201] = "IRON_BAR";
        CollectibleType2[CollectibleType2["MIDAS_TOUCH"] = 202] = "MIDAS_TOUCH";
        CollectibleType2[CollectibleType2["HUMBLEING_BUNDLE"] = 203] = "HUMBLEING_BUNDLE";
        CollectibleType2[CollectibleType2["FANNY_PACK"] = 204] = "FANNY_PACK";
        CollectibleType2[CollectibleType2["SHARP_PLUG"] = 205] = "SHARP_PLUG";
        CollectibleType2[CollectibleType2["GUILLOTINE"] = 206] = "GUILLOTINE";
        CollectibleType2[CollectibleType2["BALL_OF_BANDAGES"] = 207] = "BALL_OF_BANDAGES";
        CollectibleType2[CollectibleType2["CHAMPION_BELT"] = 208] = "CHAMPION_BELT";
        CollectibleType2[CollectibleType2["BUTT_BOMBS"] = 209] = "BUTT_BOMBS";
        CollectibleType2[CollectibleType2["GNAWED_LEAF"] = 210] = "GNAWED_LEAF";
        CollectibleType2[CollectibleType2["SPIDERBABY"] = 211] = "SPIDERBABY";
        CollectibleType2[CollectibleType2["GUPPYS_COLLAR"] = 212] = "GUPPYS_COLLAR";
        CollectibleType2[CollectibleType2["LOST_CONTACT"] = 213] = "LOST_CONTACT";
        CollectibleType2[CollectibleType2["ANEMIC"] = 214] = "ANEMIC";
        CollectibleType2[CollectibleType2["GOAT_HEAD"] = 215] = "GOAT_HEAD";
        CollectibleType2[CollectibleType2["CEREMONIAL_ROBES"] = 216] = "CEREMONIAL_ROBES";
        CollectibleType2[CollectibleType2["MOMS_WIG"] = 217] = "MOMS_WIG";
        CollectibleType2[CollectibleType2["PLACENTA"] = 218] = "PLACENTA";
        CollectibleType2[CollectibleType2["OLD_BANDAGE"] = 219] = "OLD_BANDAGE";
        CollectibleType2[CollectibleType2["SAD_BOMBS"] = 220] = "SAD_BOMBS";
        CollectibleType2[CollectibleType2["RUBBER_CEMENT"] = 221] = "RUBBER_CEMENT";
        CollectibleType2[CollectibleType2["ANTI_GRAVITY"] = 222] = "ANTI_GRAVITY";
        CollectibleType2[CollectibleType2["PYROMANIAC"] = 223] = "PYROMANIAC";
        CollectibleType2[CollectibleType2["CRICKETS_BODY"] = 224] = "CRICKETS_BODY";
        CollectibleType2[CollectibleType2["GIMPY"] = 225] = "GIMPY";
        CollectibleType2[CollectibleType2["BLACK_LOTUS"] = 226] = "BLACK_LOTUS";
        CollectibleType2[CollectibleType2["PIGGY_BANK"] = 227] = "PIGGY_BANK";
        CollectibleType2[CollectibleType2["MOMS_PERFUME"] = 228] = "MOMS_PERFUME";
        CollectibleType2[CollectibleType2["MONSTROS_LUNG"] = 229] = "MONSTROS_LUNG";
        CollectibleType2[CollectibleType2["ABADDON"] = 230] = "ABADDON";
        CollectibleType2[CollectibleType2["BALL_OF_TAR"] = 231] = "BALL_OF_TAR";
        CollectibleType2[CollectibleType2["STOP_WATCH"] = 232] = "STOP_WATCH";
        CollectibleType2[CollectibleType2["TINY_PLANET"] = 233] = "TINY_PLANET";
        CollectibleType2[CollectibleType2["INFESTATION_2"] = 234] = "INFESTATION_2";
        CollectibleType2[CollectibleType2["E_COLI"] = 236] = "E_COLI";
        CollectibleType2[CollectibleType2["DEATHS_TOUCH"] = 237] = "DEATHS_TOUCH";
        CollectibleType2[CollectibleType2["KEY_PIECE_1"] = 238] = "KEY_PIECE_1";
        CollectibleType2[CollectibleType2["KEY_PIECE_2"] = 239] = "KEY_PIECE_2";
        CollectibleType2[CollectibleType2["EXPERIMENTAL_TREATMENT"] = 240] = "EXPERIMENTAL_TREATMENT";
        CollectibleType2[CollectibleType2["CONTRACT_FROM_BELOW"] = 241] = "CONTRACT_FROM_BELOW";
        CollectibleType2[CollectibleType2["INFAMY"] = 242] = "INFAMY";
        CollectibleType2[CollectibleType2["TRINITY_SHIELD"] = 243] = "TRINITY_SHIELD";
        CollectibleType2[CollectibleType2["TECH_5"] = 244] = "TECH_5";
        CollectibleType2[CollectibleType2["TWENTY_TWENTY"] = 245] = "TWENTY_TWENTY";
        CollectibleType2[CollectibleType2["BLUE_MAP"] = 246] = "BLUE_MAP";
        CollectibleType2[CollectibleType2["BFFS"] = 247] = "BFFS";
        CollectibleType2[CollectibleType2["HIVE_MIND"] = 248] = "HIVE_MIND";
        CollectibleType2[CollectibleType2["THERES_OPTIONS"] = 249] = "THERES_OPTIONS";
        CollectibleType2[CollectibleType2["BOGO_BOMBS"] = 250] = "BOGO_BOMBS";
        CollectibleType2[CollectibleType2["STARTER_DECK"] = 251] = "STARTER_DECK";
        CollectibleType2[CollectibleType2["LITTLE_BAGGY"] = 252] = "LITTLE_BAGGY";
        CollectibleType2[CollectibleType2["MAGIC_SCAB"] = 253] = "MAGIC_SCAB";
        CollectibleType2[CollectibleType2["BLOOD_CLOT"] = 254] = "BLOOD_CLOT";
        CollectibleType2[CollectibleType2["SCREW"] = 255] = "SCREW";
        CollectibleType2[CollectibleType2["HOT_BOMBS"] = 256] = "HOT_BOMBS";
        CollectibleType2[CollectibleType2["FIRE_MIND"] = 257] = "FIRE_MIND";
        CollectibleType2[CollectibleType2["MISSING_NO"] = 258] = "MISSING_NO";
        CollectibleType2[CollectibleType2["DARK_MATTER"] = 259] = "DARK_MATTER";
        CollectibleType2[CollectibleType2["BLACK_CANDLE"] = 260] = "BLACK_CANDLE";
        CollectibleType2[CollectibleType2["PROPTOSIS"] = 261] = "PROPTOSIS";
        CollectibleType2[CollectibleType2["MISSING_PAGE_2"] = 262] = "MISSING_PAGE_2";
        CollectibleType2[CollectibleType2["CLEAR_RUNE"] = 263] = "CLEAR_RUNE";
        CollectibleType2[CollectibleType2["SMART_FLY"] = 264] = "SMART_FLY";
        CollectibleType2[CollectibleType2["DRY_BABY"] = 265] = "DRY_BABY";
        CollectibleType2[CollectibleType2["JUICY_SACK"] = 266] = "JUICY_SACK";
        CollectibleType2[CollectibleType2["ROBO_BABY_2"] = 267] = "ROBO_BABY_2";
        CollectibleType2[CollectibleType2["ROTTEN_BABY"] = 268] = "ROTTEN_BABY";
        CollectibleType2[CollectibleType2["HEADLESS_BABY"] = 269] = "HEADLESS_BABY";
        CollectibleType2[CollectibleType2["LEECH"] = 270] = "LEECH";
        CollectibleType2[CollectibleType2["MYSTERY_SACK"] = 271] = "MYSTERY_SACK";
        CollectibleType2[CollectibleType2["BBF"] = 272] = "BBF";
        CollectibleType2[CollectibleType2["BOBS_BRAIN"] = 273] = "BOBS_BRAIN";
        CollectibleType2[CollectibleType2["BEST_BUD"] = 274] = "BEST_BUD";
        CollectibleType2[CollectibleType2["LIL_BRIMSTONE"] = 275] = "LIL_BRIMSTONE";
        CollectibleType2[CollectibleType2["ISAACS_HEART"] = 276] = "ISAACS_HEART";
        CollectibleType2[CollectibleType2["LIL_HAUNT"] = 277] = "LIL_HAUNT";
        CollectibleType2[CollectibleType2["DARK_BUM"] = 278] = "DARK_BUM";
        CollectibleType2[CollectibleType2["BIG_FAN"] = 279] = "BIG_FAN";
        CollectibleType2[CollectibleType2["SISSY_LONGLEGS"] = 280] = "SISSY_LONGLEGS";
        CollectibleType2[CollectibleType2["PUNCHING_BAG"] = 281] = "PUNCHING_BAG";
        CollectibleType2[CollectibleType2["HOW_TO_JUMP"] = 282] = "HOW_TO_JUMP";
        CollectibleType2[CollectibleType2["D100"] = 283] = "D100";
        CollectibleType2[CollectibleType2["D4"] = 284] = "D4";
        CollectibleType2[CollectibleType2["D10"] = 285] = "D10";
        CollectibleType2[CollectibleType2["BLANK_CARD"] = 286] = "BLANK_CARD";
        CollectibleType2[CollectibleType2["BOOK_OF_SECRETS"] = 287] = "BOOK_OF_SECRETS";
        CollectibleType2[CollectibleType2["BOX_OF_SPIDERS"] = 288] = "BOX_OF_SPIDERS";
        CollectibleType2[CollectibleType2["RED_CANDLE"] = 289] = "RED_CANDLE";
        CollectibleType2[CollectibleType2["JAR"] = 290] = "JAR";
        CollectibleType2[CollectibleType2["FLUSH"] = 291] = "FLUSH";
        CollectibleType2[CollectibleType2["SATANIC_BIBLE"] = 292] = "SATANIC_BIBLE";
        CollectibleType2[CollectibleType2["HEAD_OF_KRAMPUS"] = 293] = "HEAD_OF_KRAMPUS";
        CollectibleType2[CollectibleType2["BUTTER_BEAN"] = 294] = "BUTTER_BEAN";
        CollectibleType2[CollectibleType2["MAGIC_FINGERS"] = 295] = "MAGIC_FINGERS";
        CollectibleType2[CollectibleType2["CONVERTER"] = 296] = "CONVERTER";
        CollectibleType2[CollectibleType2["BLUE_BOX"] = 297] = "BLUE_BOX";
        CollectibleType2[CollectibleType2["UNICORN_STUMP"] = 298] = "UNICORN_STUMP";
        CollectibleType2[CollectibleType2["TAURUS"] = 299] = "TAURUS";
        CollectibleType2[CollectibleType2["ARIES"] = 300] = "ARIES";
        CollectibleType2[CollectibleType2["CANCER"] = 301] = "CANCER";
        CollectibleType2[CollectibleType2["LEO"] = 302] = "LEO";
        CollectibleType2[CollectibleType2["VIRGO"] = 303] = "VIRGO";
        CollectibleType2[CollectibleType2["LIBRA"] = 304] = "LIBRA";
        CollectibleType2[CollectibleType2["SCORPIO"] = 305] = "SCORPIO";
        CollectibleType2[CollectibleType2["SAGITTARIUS"] = 306] = "SAGITTARIUS";
        CollectibleType2[CollectibleType2["CAPRICORN"] = 307] = "CAPRICORN";
        CollectibleType2[CollectibleType2["AQUARIUS"] = 308] = "AQUARIUS";
        CollectibleType2[CollectibleType2["PISCES"] = 309] = "PISCES";
        CollectibleType2[CollectibleType2["EVES_MASCARA"] = 310] = "EVES_MASCARA";
        CollectibleType2[CollectibleType2["JUDAS_SHADOW"] = 311] = "JUDAS_SHADOW";
        CollectibleType2[CollectibleType2["MAGGYS_BOW"] = 312] = "MAGGYS_BOW";
        CollectibleType2[CollectibleType2["HOLY_MANTLE"] = 313] = "HOLY_MANTLE";
        CollectibleType2[CollectibleType2["THUNDER_THIGHS"] = 314] = "THUNDER_THIGHS";
        CollectibleType2[CollectibleType2["STRANGE_ATTRACTOR"] = 315] = "STRANGE_ATTRACTOR";
        CollectibleType2[CollectibleType2["CURSED_EYE"] = 316] = "CURSED_EYE";
        CollectibleType2[CollectibleType2["MYSTERIOUS_LIQUID"] = 317] = "MYSTERIOUS_LIQUID";
        CollectibleType2[CollectibleType2["GEMINI"] = 318] = "GEMINI";
        CollectibleType2[CollectibleType2["CAINS_OTHER_EYE"] = 319] = "CAINS_OTHER_EYE";
        CollectibleType2[CollectibleType2["BLUE_BABYS_ONLY_FRIEND"] = 320] = "BLUE_BABYS_ONLY_FRIEND";
        CollectibleType2[CollectibleType2["SAMSONS_CHAINS"] = 321] = "SAMSONS_CHAINS";
        CollectibleType2[CollectibleType2["MONGO_BABY"] = 322] = "MONGO_BABY";
        CollectibleType2[CollectibleType2["ISAACS_TEARS"] = 323] = "ISAACS_TEARS";
        CollectibleType2[CollectibleType2["UNDEFINED"] = 324] = "UNDEFINED";
        CollectibleType2[CollectibleType2["SCISSORS"] = 325] = "SCISSORS";
        CollectibleType2[CollectibleType2["BREATH_OF_LIFE"] = 326] = "BREATH_OF_LIFE";
        CollectibleType2[CollectibleType2["POLAROID"] = 327] = "POLAROID";
        CollectibleType2[CollectibleType2["NEGATIVE"] = 328] = "NEGATIVE";
        CollectibleType2[CollectibleType2["LUDOVICO_TECHNIQUE"] = 329] = "LUDOVICO_TECHNIQUE";
        CollectibleType2[CollectibleType2["SOY_MILK"] = 330] = "SOY_MILK";
        CollectibleType2[CollectibleType2["GODHEAD"] = 331] = "GODHEAD";
        CollectibleType2[CollectibleType2["LAZARUS_RAGS"] = 332] = "LAZARUS_RAGS";
        CollectibleType2[CollectibleType2["MIND"] = 333] = "MIND";
        CollectibleType2[CollectibleType2["BODY"] = 334] = "BODY";
        CollectibleType2[CollectibleType2["SOUL"] = 335] = "SOUL";
        CollectibleType2[CollectibleType2["DEAD_ONION"] = 336] = "DEAD_ONION";
        CollectibleType2[CollectibleType2["BROKEN_WATCH"] = 337] = "BROKEN_WATCH";
        CollectibleType2[CollectibleType2["BOOMERANG"] = 338] = "BOOMERANG";
        CollectibleType2[CollectibleType2["SAFETY_PIN"] = 339] = "SAFETY_PIN";
        CollectibleType2[CollectibleType2["CAFFEINE_PILL"] = 340] = "CAFFEINE_PILL";
        CollectibleType2[CollectibleType2["TORN_PHOTO"] = 341] = "TORN_PHOTO";
        CollectibleType2[CollectibleType2["BLUE_CAP"] = 342] = "BLUE_CAP";
        CollectibleType2[CollectibleType2["LATCH_KEY"] = 343] = "LATCH_KEY";
        CollectibleType2[CollectibleType2["MATCH_BOOK"] = 344] = "MATCH_BOOK";
        CollectibleType2[CollectibleType2["SYNTHOIL"] = 345] = "SYNTHOIL";
        CollectibleType2[CollectibleType2["SNACK"] = 346] = "SNACK";
        CollectibleType2[CollectibleType2["DIPLOPIA"] = 347] = "DIPLOPIA";
        CollectibleType2[CollectibleType2["PLACEBO"] = 348] = "PLACEBO";
        CollectibleType2[CollectibleType2["WOODEN_NICKEL"] = 349] = "WOODEN_NICKEL";
        CollectibleType2[CollectibleType2["TOXIC_SHOCK"] = 350] = "TOXIC_SHOCK";
        CollectibleType2[CollectibleType2["MEGA_BEAN"] = 351] = "MEGA_BEAN";
        CollectibleType2[CollectibleType2["GLASS_CANNON"] = 352] = "GLASS_CANNON";
        CollectibleType2[CollectibleType2["BOMBER_BOY"] = 353] = "BOMBER_BOY";
        CollectibleType2[CollectibleType2["CRACK_JACKS"] = 354] = "CRACK_JACKS";
        CollectibleType2[CollectibleType2["MOMS_PEARLS"] = 355] = "MOMS_PEARLS";
        CollectibleType2[CollectibleType2["CAR_BATTERY"] = 356] = "CAR_BATTERY";
        CollectibleType2[CollectibleType2["BOX_OF_FRIENDS"] = 357] = "BOX_OF_FRIENDS";
        CollectibleType2[CollectibleType2["WIZ"] = 358] = "WIZ";
        CollectibleType2[CollectibleType2["EIGHT_INCH_NAILS"] = 359] = "EIGHT_INCH_NAILS";
        CollectibleType2[CollectibleType2["INCUBUS"] = 360] = "INCUBUS";
        CollectibleType2[CollectibleType2["FATES_REWARD"] = 361] = "FATES_REWARD";
        CollectibleType2[CollectibleType2["LIL_CHEST"] = 362] = "LIL_CHEST";
        CollectibleType2[CollectibleType2["SWORN_PROTECTOR"] = 363] = "SWORN_PROTECTOR";
        CollectibleType2[CollectibleType2["FRIEND_ZONE"] = 364] = "FRIEND_ZONE";
        CollectibleType2[CollectibleType2["LOST_FLY"] = 365] = "LOST_FLY";
        CollectibleType2[CollectibleType2["SCATTER_BOMBS"] = 366] = "SCATTER_BOMBS";
        CollectibleType2[CollectibleType2["STICKY_BOMBS"] = 367] = "STICKY_BOMBS";
        CollectibleType2[CollectibleType2["EPIPHORA"] = 368] = "EPIPHORA";
        CollectibleType2[CollectibleType2["CONTINUUM"] = 369] = "CONTINUUM";
        CollectibleType2[CollectibleType2["MR_DOLLY"] = 370] = "MR_DOLLY";
        CollectibleType2[CollectibleType2["CURSE_OF_THE_TOWER"] = 371] = "CURSE_OF_THE_TOWER";
        CollectibleType2[CollectibleType2["CHARGED_BABY"] = 372] = "CHARGED_BABY";
        CollectibleType2[CollectibleType2["DEAD_EYE"] = 373] = "DEAD_EYE";
        CollectibleType2[CollectibleType2["HOLY_LIGHT"] = 374] = "HOLY_LIGHT";
        CollectibleType2[CollectibleType2["HOST_HAT"] = 375] = "HOST_HAT";
        CollectibleType2[CollectibleType2["RESTOCK"] = 376] = "RESTOCK";
        CollectibleType2[CollectibleType2["BURSTING_SACK"] = 377] = "BURSTING_SACK";
        CollectibleType2[CollectibleType2["NUMBER_TWO"] = 378] = "NUMBER_TWO";
        CollectibleType2[CollectibleType2["PUPULA_DUPLEX"] = 379] = "PUPULA_DUPLEX";
        CollectibleType2[CollectibleType2["PAY_TO_PLAY"] = 380] = "PAY_TO_PLAY";
        CollectibleType2[CollectibleType2["EDENS_BLESSING"] = 381] = "EDENS_BLESSING";
        CollectibleType2[CollectibleType2["FRIEND_BALL"] = 382] = "FRIEND_BALL";
        CollectibleType2[CollectibleType2["TEAR_DETONATOR"] = 383] = "TEAR_DETONATOR";
        CollectibleType2[CollectibleType2["LIL_GURDY"] = 384] = "LIL_GURDY";
        CollectibleType2[CollectibleType2["BUMBO"] = 385] = "BUMBO";
        CollectibleType2[CollectibleType2["D12"] = 386] = "D12";
        CollectibleType2[CollectibleType2["CENSER"] = 387] = "CENSER";
        CollectibleType2[CollectibleType2["KEY_BUM"] = 388] = "KEY_BUM";
        CollectibleType2[CollectibleType2["RUNE_BAG"] = 389] = "RUNE_BAG";
        CollectibleType2[CollectibleType2["SERAPHIM"] = 390] = "SERAPHIM";
        CollectibleType2[CollectibleType2["BETRAYAL"] = 391] = "BETRAYAL";
        CollectibleType2[CollectibleType2["ZODIAC"] = 392] = "ZODIAC";
        CollectibleType2[CollectibleType2["SERPENTS_KISS"] = 393] = "SERPENTS_KISS";
        CollectibleType2[CollectibleType2["MARKED"] = 394] = "MARKED";
        CollectibleType2[CollectibleType2["TECH_X"] = 395] = "TECH_X";
        CollectibleType2[CollectibleType2["VENTRICLE_RAZOR"] = 396] = "VENTRICLE_RAZOR";
        CollectibleType2[CollectibleType2["TRACTOR_BEAM"] = 397] = "TRACTOR_BEAM";
        CollectibleType2[CollectibleType2["GODS_FLESH"] = 398] = "GODS_FLESH";
        CollectibleType2[CollectibleType2["MAW_OF_THE_VOID"] = 399] = "MAW_OF_THE_VOID";
        CollectibleType2[CollectibleType2["SPEAR_OF_DESTINY"] = 400] = "SPEAR_OF_DESTINY";
        CollectibleType2[CollectibleType2["EXPLOSIVO"] = 401] = "EXPLOSIVO";
        CollectibleType2[CollectibleType2["CHAOS"] = 402] = "CHAOS";
        CollectibleType2[CollectibleType2["SPIDER_MOD"] = 403] = "SPIDER_MOD";
        CollectibleType2[CollectibleType2["FARTING_BABY"] = 404] = "FARTING_BABY";
        CollectibleType2[CollectibleType2["GB_BUG"] = 405] = "GB_BUG";
        CollectibleType2[CollectibleType2["D8"] = 406] = "D8";
        CollectibleType2[CollectibleType2["PURITY"] = 407] = "PURITY";
        CollectibleType2[CollectibleType2["ATHAME"] = 408] = "ATHAME";
        CollectibleType2[CollectibleType2["EMPTY_VESSEL"] = 409] = "EMPTY_VESSEL";
        CollectibleType2[CollectibleType2["EVIL_EYE"] = 410] = "EVIL_EYE";
        CollectibleType2[CollectibleType2["LUSTY_BLOOD"] = 411] = "LUSTY_BLOOD";
        CollectibleType2[CollectibleType2["CAMBION_CONCEPTION"] = 412] = "CAMBION_CONCEPTION";
        CollectibleType2[CollectibleType2["IMMACULATE_CONCEPTION"] = 413] = "IMMACULATE_CONCEPTION";
        CollectibleType2[CollectibleType2["MORE_OPTIONS"] = 414] = "MORE_OPTIONS";
        CollectibleType2[CollectibleType2["CROWN_OF_LIGHT"] = 415] = "CROWN_OF_LIGHT";
        CollectibleType2[CollectibleType2["DEEP_POCKETS"] = 416] = "DEEP_POCKETS";
        CollectibleType2[CollectibleType2["SUCCUBUS"] = 417] = "SUCCUBUS";
        CollectibleType2[CollectibleType2["FRUIT_CAKE"] = 418] = "FRUIT_CAKE";
        CollectibleType2[CollectibleType2["TELEPORT_2"] = 419] = "TELEPORT_2";
        CollectibleType2[CollectibleType2["BLACK_POWDER"] = 420] = "BLACK_POWDER";
        CollectibleType2[CollectibleType2["KIDNEY_BEAN"] = 421] = "KIDNEY_BEAN";
        CollectibleType2[CollectibleType2["GLOWING_HOUR_GLASS"] = 422] = "GLOWING_HOUR_GLASS";
        CollectibleType2[CollectibleType2["CIRCLE_OF_PROTECTION"] = 423] = "CIRCLE_OF_PROTECTION";
        CollectibleType2[CollectibleType2["SACK_HEAD"] = 424] = "SACK_HEAD";
        CollectibleType2[CollectibleType2["NIGHT_LIGHT"] = 425] = "NIGHT_LIGHT";
        CollectibleType2[CollectibleType2["OBSESSED_FAN"] = 426] = "OBSESSED_FAN";
        CollectibleType2[CollectibleType2["MINE_CRAFTER"] = 427] = "MINE_CRAFTER";
        CollectibleType2[CollectibleType2["PJS"] = 428] = "PJS";
        CollectibleType2[CollectibleType2["HEAD_OF_THE_KEEPER"] = 429] = "HEAD_OF_THE_KEEPER";
        CollectibleType2[CollectibleType2["PAPA_FLY"] = 430] = "PAPA_FLY";
        CollectibleType2[CollectibleType2["MULTIDIMENSIONAL_BABY"] = 431] = "MULTIDIMENSIONAL_BABY";
        CollectibleType2[CollectibleType2["GLITTER_BOMBS"] = 432] = "GLITTER_BOMBS";
        CollectibleType2[CollectibleType2["MY_SHADOW"] = 433] = "MY_SHADOW";
        CollectibleType2[CollectibleType2["JAR_OF_FLIES"] = 434] = "JAR_OF_FLIES";
        CollectibleType2[CollectibleType2["LIL_LOKI"] = 435] = "LIL_LOKI";
        CollectibleType2[CollectibleType2["MILK"] = 436] = "MILK";
        CollectibleType2[CollectibleType2["D7"] = 437] = "D7";
        CollectibleType2[CollectibleType2["BINKY"] = 438] = "BINKY";
        CollectibleType2[CollectibleType2["MOMS_BOX"] = 439] = "MOMS_BOX";
        CollectibleType2[CollectibleType2["KIDNEY_STONE"] = 440] = "KIDNEY_STONE";
        CollectibleType2[CollectibleType2["MEGA_BLAST"] = 441] = "MEGA_BLAST";
        CollectibleType2[CollectibleType2["DARK_PRINCES_CROWN"] = 442] = "DARK_PRINCES_CROWN";
        CollectibleType2[CollectibleType2["APPLE"] = 443] = "APPLE";
        CollectibleType2[CollectibleType2["LEAD_PENCIL"] = 444] = "LEAD_PENCIL";
        CollectibleType2[CollectibleType2["DOG_TOOTH"] = 445] = "DOG_TOOTH";
        CollectibleType2[CollectibleType2["DEAD_TOOTH"] = 446] = "DEAD_TOOTH";
        CollectibleType2[CollectibleType2["LINGER_BEAN"] = 447] = "LINGER_BEAN";
        CollectibleType2[CollectibleType2["SHARD_OF_GLASS"] = 448] = "SHARD_OF_GLASS";
        CollectibleType2[CollectibleType2["METAL_PLATE"] = 449] = "METAL_PLATE";
        CollectibleType2[CollectibleType2["EYE_OF_GREED"] = 450] = "EYE_OF_GREED";
        CollectibleType2[CollectibleType2["TAROT_CLOTH"] = 451] = "TAROT_CLOTH";
        CollectibleType2[CollectibleType2["VARICOSE_VEINS"] = 452] = "VARICOSE_VEINS";
        CollectibleType2[CollectibleType2["COMPOUND_FRACTURE"] = 453] = "COMPOUND_FRACTURE";
        CollectibleType2[CollectibleType2["POLYDACTYLY"] = 454] = "POLYDACTYLY";
        CollectibleType2[CollectibleType2["DADS_LOST_COIN"] = 455] = "DADS_LOST_COIN";
        CollectibleType2[CollectibleType2["MIDNIGHT_SNACK"] = 456] = "MIDNIGHT_SNACK";
        CollectibleType2[CollectibleType2["CONE_HEAD"] = 457] = "CONE_HEAD";
        CollectibleType2[CollectibleType2["BELLY_BUTTON"] = 458] = "BELLY_BUTTON";
        CollectibleType2[CollectibleType2["SINUS_INFECTION"] = 459] = "SINUS_INFECTION";
        CollectibleType2[CollectibleType2["GLAUCOMA"] = 460] = "GLAUCOMA";
        CollectibleType2[CollectibleType2["PARASITOID"] = 461] = "PARASITOID";
        CollectibleType2[CollectibleType2["EYE_OF_BELIAL"] = 462] = "EYE_OF_BELIAL";
        CollectibleType2[CollectibleType2["SULFURIC_ACID"] = 463] = "SULFURIC_ACID";
        CollectibleType2[CollectibleType2["GLYPH_OF_BALANCE"] = 464] = "GLYPH_OF_BALANCE";
        CollectibleType2[CollectibleType2["ANALOG_STICK"] = 465] = "ANALOG_STICK";
        CollectibleType2[CollectibleType2["CONTAGION"] = 466] = "CONTAGION";
        CollectibleType2[CollectibleType2["FINGER"] = 467] = "FINGER";
        CollectibleType2[CollectibleType2["SHADE"] = 468] = "SHADE";
        CollectibleType2[CollectibleType2["DEPRESSION"] = 469] = "DEPRESSION";
        CollectibleType2[CollectibleType2["HUSHY"] = 470] = "HUSHY";
        CollectibleType2[CollectibleType2["LIL_MONSTRO"] = 471] = "LIL_MONSTRO";
        CollectibleType2[CollectibleType2["KING_BABY"] = 472] = "KING_BABY";
        CollectibleType2[CollectibleType2["BIG_CHUBBY"] = 473] = "BIG_CHUBBY";
        CollectibleType2[CollectibleType2["BROKEN_GLASS_CANNON"] = 474] = "BROKEN_GLASS_CANNON";
        CollectibleType2[CollectibleType2["PLAN_C"] = 475] = "PLAN_C";
        CollectibleType2[CollectibleType2["D1"] = 476] = "D1";
        CollectibleType2[CollectibleType2["VOID"] = 477] = "VOID";
        CollectibleType2[CollectibleType2["PAUSE"] = 478] = "PAUSE";
        CollectibleType2[CollectibleType2["SMELTER"] = 479] = "SMELTER";
        CollectibleType2[CollectibleType2["COMPOST"] = 480] = "COMPOST";
        CollectibleType2[CollectibleType2["DATAMINER"] = 481] = "DATAMINER";
        CollectibleType2[CollectibleType2["CLICKER"] = 482] = "CLICKER";
        CollectibleType2[CollectibleType2["MAMA_MEGA"] = 483] = "MAMA_MEGA";
        CollectibleType2[CollectibleType2["WAIT_WHAT"] = 484] = "WAIT_WHAT";
        CollectibleType2[CollectibleType2["CROOKED_PENNY"] = 485] = "CROOKED_PENNY";
        CollectibleType2[CollectibleType2["DULL_RAZOR"] = 486] = "DULL_RAZOR";
        CollectibleType2[CollectibleType2["POTATO_PEELER"] = 487] = "POTATO_PEELER";
        CollectibleType2[CollectibleType2["METRONOME"] = 488] = "METRONOME";
        CollectibleType2[CollectibleType2["D_INFINITY"] = 489] = "D_INFINITY";
        CollectibleType2[CollectibleType2["EDENS_SOUL"] = 490] = "EDENS_SOUL";
        CollectibleType2[CollectibleType2["ACID_BABY"] = 491] = "ACID_BABY";
        CollectibleType2[CollectibleType2["YO_LISTEN"] = 492] = "YO_LISTEN";
        CollectibleType2[CollectibleType2["ADRENALINE"] = 493] = "ADRENALINE";
        CollectibleType2[CollectibleType2["JACOBS_LADDER"] = 494] = "JACOBS_LADDER";
        CollectibleType2[CollectibleType2["GHOST_PEPPER"] = 495] = "GHOST_PEPPER";
        CollectibleType2[CollectibleType2["EUTHANASIA"] = 496] = "EUTHANASIA";
        CollectibleType2[CollectibleType2["CAMO_UNDIES"] = 497] = "CAMO_UNDIES";
        CollectibleType2[CollectibleType2["DUALITY"] = 498] = "DUALITY";
        CollectibleType2[CollectibleType2["EUCHARIST"] = 499] = "EUCHARIST";
        CollectibleType2[CollectibleType2["SACK_OF_SACKS"] = 500] = "SACK_OF_SACKS";
        CollectibleType2[CollectibleType2["GREEDS_GULLET"] = 501] = "GREEDS_GULLET";
        CollectibleType2[CollectibleType2["LARGE_ZIT"] = 502] = "LARGE_ZIT";
        CollectibleType2[CollectibleType2["LITTLE_HORN"] = 503] = "LITTLE_HORN";
        CollectibleType2[CollectibleType2["BROWN_NUGGET"] = 504] = "BROWN_NUGGET";
        CollectibleType2[CollectibleType2["POKE_GO"] = 505] = "POKE_GO";
        CollectibleType2[CollectibleType2["BACKSTABBER"] = 506] = "BACKSTABBER";
        CollectibleType2[CollectibleType2["SHARP_STRAW"] = 507] = "SHARP_STRAW";
        CollectibleType2[CollectibleType2["MOMS_RAZOR"] = 508] = "MOMS_RAZOR";
        CollectibleType2[CollectibleType2["BLOODSHOT_EYE"] = 509] = "BLOODSHOT_EYE";
        CollectibleType2[CollectibleType2["DELIRIOUS"] = 510] = "DELIRIOUS";
        CollectibleType2[CollectibleType2["ANGRY_FLY"] = 511] = "ANGRY_FLY";
        CollectibleType2[CollectibleType2["BLACK_HOLE"] = 512] = "BLACK_HOLE";
        CollectibleType2[CollectibleType2["BOZO"] = 513] = "BOZO";
        CollectibleType2[CollectibleType2["BROKEN_MODEM"] = 514] = "BROKEN_MODEM";
        CollectibleType2[CollectibleType2["MYSTERY_GIFT"] = 515] = "MYSTERY_GIFT";
        CollectibleType2[CollectibleType2["SPRINKLER"] = 516] = "SPRINKLER";
        CollectibleType2[CollectibleType2["FAST_BOMBS"] = 517] = "FAST_BOMBS";
        CollectibleType2[CollectibleType2["BUDDY_IN_A_BOX"] = 518] = "BUDDY_IN_A_BOX";
        CollectibleType2[CollectibleType2["LIL_DELIRIUM"] = 519] = "LIL_DELIRIUM";
        CollectibleType2[CollectibleType2["JUMPER_CABLES"] = 520] = "JUMPER_CABLES";
        CollectibleType2[CollectibleType2["COUPON"] = 521] = "COUPON";
        CollectibleType2[CollectibleType2["TELEKINESIS"] = 522] = "TELEKINESIS";
        CollectibleType2[CollectibleType2["MOVING_BOX"] = 523] = "MOVING_BOX";
        CollectibleType2[CollectibleType2["TECHNOLOGY_ZERO"] = 524] = "TECHNOLOGY_ZERO";
        CollectibleType2[CollectibleType2["LEPROSY"] = 525] = "LEPROSY";
        CollectibleType2[CollectibleType2["SEVEN_SEALS"] = 526] = "SEVEN_SEALS";
        CollectibleType2[CollectibleType2["MR_ME"] = 527] = "MR_ME";
        CollectibleType2[CollectibleType2["ANGELIC_PRISM"] = 528] = "ANGELIC_PRISM";
        CollectibleType2[CollectibleType2["POP"] = 529] = "POP";
        CollectibleType2[CollectibleType2["DEATHS_LIST"] = 530] = "DEATHS_LIST";
        CollectibleType2[CollectibleType2["HAEMOLACRIA"] = 531] = "HAEMOLACRIA";
        CollectibleType2[CollectibleType2["LACHRYPHAGY"] = 532] = "LACHRYPHAGY";
        CollectibleType2[CollectibleType2["TRISAGION"] = 533] = "TRISAGION";
        CollectibleType2[CollectibleType2["SCHOOLBAG"] = 534] = "SCHOOLBAG";
        CollectibleType2[CollectibleType2["BLANKET"] = 535] = "BLANKET";
        CollectibleType2[CollectibleType2["SACRIFICIAL_ALTAR"] = 536] = "SACRIFICIAL_ALTAR";
        CollectibleType2[CollectibleType2["LIL_SPEWER"] = 537] = "LIL_SPEWER";
        CollectibleType2[CollectibleType2["MARBLES"] = 538] = "MARBLES";
        CollectibleType2[CollectibleType2["MYSTERY_EGG"] = 539] = "MYSTERY_EGG";
        CollectibleType2[CollectibleType2["FLAT_STONE"] = 540] = "FLAT_STONE";
        CollectibleType2[CollectibleType2["MARROW"] = 541] = "MARROW";
        CollectibleType2[CollectibleType2["SLIPPED_RIB"] = 542] = "SLIPPED_RIB";
        CollectibleType2[CollectibleType2["HALLOWED_GROUND"] = 543] = "HALLOWED_GROUND";
        CollectibleType2[CollectibleType2["POINTY_RIB"] = 544] = "POINTY_RIB";
        CollectibleType2[CollectibleType2["BOOK_OF_THE_DEAD"] = 545] = "BOOK_OF_THE_DEAD";
        CollectibleType2[CollectibleType2["DADS_RING"] = 546] = "DADS_RING";
        CollectibleType2[CollectibleType2["DIVORCE_PAPERS"] = 547] = "DIVORCE_PAPERS";
        CollectibleType2[CollectibleType2["JAW_BONE"] = 548] = "JAW_BONE";
        CollectibleType2[CollectibleType2["BRITTLE_BONES"] = 549] = "BRITTLE_BONES";
        CollectibleType2[CollectibleType2["BROKEN_SHOVEL_1"] = 550] = "BROKEN_SHOVEL_1";
        CollectibleType2[CollectibleType2["BROKEN_SHOVEL_2"] = 551] = "BROKEN_SHOVEL_2";
        CollectibleType2[CollectibleType2["MOMS_SHOVEL"] = 552] = "MOMS_SHOVEL";
        CollectibleType2[CollectibleType2["MUCORMYCOSIS"] = 553] = "MUCORMYCOSIS";
        CollectibleType2[CollectibleType2["TWO_SPOOKY"] = 554] = "TWO_SPOOKY";
        CollectibleType2[CollectibleType2["GOLDEN_RAZOR"] = 555] = "GOLDEN_RAZOR";
        CollectibleType2[CollectibleType2["SULFUR"] = 556] = "SULFUR";
        CollectibleType2[CollectibleType2["FORTUNE_COOKIE"] = 557] = "FORTUNE_COOKIE";
        CollectibleType2[CollectibleType2["EYE_SORE"] = 558] = "EYE_SORE";
        CollectibleType2[CollectibleType2["ONE_HUNDRED_TWENTY_VOLT"] = 559] = "ONE_HUNDRED_TWENTY_VOLT";
        CollectibleType2[CollectibleType2["IT_HURTS"] = 560] = "IT_HURTS";
        CollectibleType2[CollectibleType2["ALMOND_MILK"] = 561] = "ALMOND_MILK";
        CollectibleType2[CollectibleType2["ROCK_BOTTOM"] = 562] = "ROCK_BOTTOM";
        CollectibleType2[CollectibleType2["NANCY_BOMBS"] = 563] = "NANCY_BOMBS";
        CollectibleType2[CollectibleType2["BAR_OF_SOAP"] = 564] = "BAR_OF_SOAP";
        CollectibleType2[CollectibleType2["BLOOD_PUPPY"] = 565] = "BLOOD_PUPPY";
        CollectibleType2[CollectibleType2["DREAM_CATCHER"] = 566] = "DREAM_CATCHER";
        CollectibleType2[CollectibleType2["PASCHAL_CANDLE"] = 567] = "PASCHAL_CANDLE";
        CollectibleType2[CollectibleType2["DIVINE_INTERVENTION"] = 568] = "DIVINE_INTERVENTION";
        CollectibleType2[CollectibleType2["BLOOD_OATH"] = 569] = "BLOOD_OATH";
        CollectibleType2[CollectibleType2["PLAYDOUGH_COOKIE"] = 570] = "PLAYDOUGH_COOKIE";
        CollectibleType2[CollectibleType2["ORPHAN_SOCKS"] = 571] = "ORPHAN_SOCKS";
        CollectibleType2[CollectibleType2["EYE_OF_THE_OCCULT"] = 572] = "EYE_OF_THE_OCCULT";
        CollectibleType2[CollectibleType2["IMMACULATE_HEART"] = 573] = "IMMACULATE_HEART";
        CollectibleType2[CollectibleType2["MONSTRANCE"] = 574] = "MONSTRANCE";
        CollectibleType2[CollectibleType2["INTRUDER"] = 575] = "INTRUDER";
        CollectibleType2[CollectibleType2["DIRTY_MIND"] = 576] = "DIRTY_MIND";
        CollectibleType2[CollectibleType2["DAMOCLES"] = 577] = "DAMOCLES";
        CollectibleType2[CollectibleType2["FREE_LEMONADE"] = 578] = "FREE_LEMONADE";
        CollectibleType2[CollectibleType2["SPIRIT_SWORD"] = 579] = "SPIRIT_SWORD";
        CollectibleType2[CollectibleType2["RED_KEY"] = 580] = "RED_KEY";
        CollectibleType2[CollectibleType2["PSY_FLY"] = 581] = "PSY_FLY";
        CollectibleType2[CollectibleType2["WAVY_CAP"] = 582] = "WAVY_CAP";
        CollectibleType2[CollectibleType2["ROCKET_IN_A_JAR"] = 583] = "ROCKET_IN_A_JAR";
        CollectibleType2[CollectibleType2["BOOK_OF_VIRTUES"] = 584] = "BOOK_OF_VIRTUES";
        CollectibleType2[CollectibleType2["ALABASTER_BOX"] = 585] = "ALABASTER_BOX";
        CollectibleType2[CollectibleType2["STAIRWAY"] = 586] = "STAIRWAY";
        CollectibleType2[CollectibleType2["SOL"] = 588] = "SOL";
        CollectibleType2[CollectibleType2["LUNA"] = 589] = "LUNA";
        CollectibleType2[CollectibleType2["MERCURIUS"] = 590] = "MERCURIUS";
        CollectibleType2[CollectibleType2["VENUS"] = 591] = "VENUS";
        CollectibleType2[CollectibleType2["TERRA"] = 592] = "TERRA";
        CollectibleType2[CollectibleType2["MARS"] = 593] = "MARS";
        CollectibleType2[CollectibleType2["JUPITER"] = 594] = "JUPITER";
        CollectibleType2[CollectibleType2["SATURNUS"] = 595] = "SATURNUS";
        CollectibleType2[CollectibleType2["URANUS"] = 596] = "URANUS";
        CollectibleType2[CollectibleType2["NEPTUNUS"] = 597] = "NEPTUNUS";
        CollectibleType2[CollectibleType2["PLUTO"] = 598] = "PLUTO";
        CollectibleType2[CollectibleType2["VOODOO_HEAD"] = 599] = "VOODOO_HEAD";
        CollectibleType2[CollectibleType2["EYE_DROPS"] = 600] = "EYE_DROPS";
        CollectibleType2[CollectibleType2["ACT_OF_CONTRITION"] = 601] = "ACT_OF_CONTRITION";
        CollectibleType2[CollectibleType2["MEMBER_CARD"] = 602] = "MEMBER_CARD";
        CollectibleType2[CollectibleType2["BATTERY_PACK"] = 603] = "BATTERY_PACK";
        CollectibleType2[CollectibleType2["MOMS_BRACELET"] = 604] = "MOMS_BRACELET";
        CollectibleType2[CollectibleType2["SCOOPER"] = 605] = "SCOOPER";
        CollectibleType2[CollectibleType2["OCULAR_RIFT"] = 606] = "OCULAR_RIFT";
        CollectibleType2[CollectibleType2["BOILED_BABY"] = 607] = "BOILED_BABY";
        CollectibleType2[CollectibleType2["FREEZER_BABY"] = 608] = "FREEZER_BABY";
        CollectibleType2[CollectibleType2["ETERNAL_D6"] = 609] = "ETERNAL_D6";
        CollectibleType2[CollectibleType2["BIRD_CAGE"] = 610] = "BIRD_CAGE";
        CollectibleType2[CollectibleType2["LARYNX"] = 611] = "LARYNX";
        CollectibleType2[CollectibleType2["LOST_SOUL"] = 612] = "LOST_SOUL";
        CollectibleType2[CollectibleType2["BLOOD_BOMBS"] = 614] = "BLOOD_BOMBS";
        CollectibleType2[CollectibleType2["LIL_DUMPY"] = 615] = "LIL_DUMPY";
        CollectibleType2[CollectibleType2["BIRDS_EYE"] = 616] = "BIRDS_EYE";
        CollectibleType2[CollectibleType2["LODESTONE"] = 617] = "LODESTONE";
        CollectibleType2[CollectibleType2["ROTTEN_TOMATO"] = 618] = "ROTTEN_TOMATO";
        CollectibleType2[CollectibleType2["BIRTHRIGHT"] = 619] = "BIRTHRIGHT";
        CollectibleType2[CollectibleType2["RED_STEW"] = 621] = "RED_STEW";
        CollectibleType2[CollectibleType2["GENESIS"] = 622] = "GENESIS";
        CollectibleType2[CollectibleType2["SHARP_KEY"] = 623] = "SHARP_KEY";
        CollectibleType2[CollectibleType2["BOOSTER_PACK"] = 624] = "BOOSTER_PACK";
        CollectibleType2[CollectibleType2["MEGA_MUSH"] = 625] = "MEGA_MUSH";
        CollectibleType2[CollectibleType2["KNIFE_PIECE_1"] = 626] = "KNIFE_PIECE_1";
        CollectibleType2[CollectibleType2["KNIFE_PIECE_2"] = 627] = "KNIFE_PIECE_2";
        CollectibleType2[CollectibleType2["DEATH_CERTIFICATE"] = 628] = "DEATH_CERTIFICATE";
        CollectibleType2[CollectibleType2["BOT_FLY"] = 629] = "BOT_FLY";
        CollectibleType2[CollectibleType2["MEAT_CLEAVER"] = 631] = "MEAT_CLEAVER";
        CollectibleType2[CollectibleType2["EVIL_CHARM"] = 632] = "EVIL_CHARM";
        CollectibleType2[CollectibleType2["DOGMA"] = 633] = "DOGMA";
        CollectibleType2[CollectibleType2["PURGATORY"] = 634] = "PURGATORY";
        CollectibleType2[CollectibleType2["STITCHES"] = 635] = "STITCHES";
        CollectibleType2[CollectibleType2["R_KEY"] = 636] = "R_KEY";
        CollectibleType2[CollectibleType2["KNOCKOUT_DROPS"] = 637] = "KNOCKOUT_DROPS";
        CollectibleType2[CollectibleType2["ERASER"] = 638] = "ERASER";
        CollectibleType2[CollectibleType2["YUCK_HEART"] = 639] = "YUCK_HEART";
        CollectibleType2[CollectibleType2["URN_OF_SOULS"] = 640] = "URN_OF_SOULS";
        CollectibleType2[CollectibleType2["AKELDAMA"] = 641] = "AKELDAMA";
        CollectibleType2[CollectibleType2["MAGIC_SKIN"] = 642] = "MAGIC_SKIN";
        CollectibleType2[CollectibleType2["REVELATION"] = 643] = "REVELATION";
        CollectibleType2[CollectibleType2["CONSOLATION_PRIZE"] = 644] = "CONSOLATION_PRIZE";
        CollectibleType2[CollectibleType2["TINYTOMA"] = 645] = "TINYTOMA";
        CollectibleType2[CollectibleType2["BRIMSTONE_BOMBS"] = 646] = "BRIMSTONE_BOMBS";
        CollectibleType2[CollectibleType2["FOUR_FIVE_VOLT"] = 647] = "FOUR_FIVE_VOLT";
        CollectibleType2[CollectibleType2["FRUITY_PLUM"] = 649] = "FRUITY_PLUM";
        CollectibleType2[CollectibleType2["PLUM_FLUTE"] = 650] = "PLUM_FLUTE";
        CollectibleType2[CollectibleType2["STAR_OF_BETHLEHEM"] = 651] = "STAR_OF_BETHLEHEM";
        CollectibleType2[CollectibleType2["CUBE_BABY"] = 652] = "CUBE_BABY";
        CollectibleType2[CollectibleType2["VADE_RETRO"] = 653] = "VADE_RETRO";
        CollectibleType2[CollectibleType2["FALSE_PHD"] = 654] = "FALSE_PHD";
        CollectibleType2[CollectibleType2["SPIN_TO_WIN"] = 655] = "SPIN_TO_WIN";
        CollectibleType2[CollectibleType2["DAMOCLES_PASSIVE"] = 656] = "DAMOCLES_PASSIVE";
        CollectibleType2[CollectibleType2["VASCULITIS"] = 657] = "VASCULITIS";
        CollectibleType2[CollectibleType2["GIANT_CELL"] = 658] = "GIANT_CELL";
        CollectibleType2[CollectibleType2["TROPICAMIDE"] = 659] = "TROPICAMIDE";
        CollectibleType2[CollectibleType2["CARD_READING"] = 660] = "CARD_READING";
        CollectibleType2[CollectibleType2["QUINTS"] = 661] = "QUINTS";
        CollectibleType2[CollectibleType2["TOOTH_AND_NAIL"] = 663] = "TOOTH_AND_NAIL";
        CollectibleType2[CollectibleType2["BINGE_EATER"] = 664] = "BINGE_EATER";
        CollectibleType2[CollectibleType2["GUPPYS_EYE"] = 665] = "GUPPYS_EYE";
        CollectibleType2[CollectibleType2["STRAWMAN"] = 667] = "STRAWMAN";
        CollectibleType2[CollectibleType2["DADS_NOTE"] = 668] = "DADS_NOTE";
        CollectibleType2[CollectibleType2["SAUSAGE"] = 669] = "SAUSAGE";
        CollectibleType2[CollectibleType2["OPTIONS"] = 670] = "OPTIONS";
        CollectibleType2[CollectibleType2["CANDY_HEART"] = 671] = "CANDY_HEART";
        CollectibleType2[CollectibleType2["POUND_OF_FLESH"] = 672] = "POUND_OF_FLESH";
        CollectibleType2[CollectibleType2["REDEMPTION"] = 673] = "REDEMPTION";
        CollectibleType2[CollectibleType2["SPIRIT_SHACKLES"] = 674] = "SPIRIT_SHACKLES";
        CollectibleType2[CollectibleType2["CRACKED_ORB"] = 675] = "CRACKED_ORB";
        CollectibleType2[CollectibleType2["EMPTY_HEART"] = 676] = "EMPTY_HEART";
        CollectibleType2[CollectibleType2["ASTRAL_PROJECTION"] = 677] = "ASTRAL_PROJECTION";
        CollectibleType2[CollectibleType2["C_SECTION"] = 678] = "C_SECTION";
        CollectibleType2[CollectibleType2["LIL_ABADDON"] = 679] = "LIL_ABADDON";
        CollectibleType2[CollectibleType2["MONTEZUMAS_REVENGE"] = 680] = "MONTEZUMAS_REVENGE";
        CollectibleType2[CollectibleType2["LIL_PORTAL"] = 681] = "LIL_PORTAL";
        CollectibleType2[CollectibleType2["WORM_FRIEND"] = 682] = "WORM_FRIEND";
        CollectibleType2[CollectibleType2["BONE_SPURS"] = 683] = "BONE_SPURS";
        CollectibleType2[CollectibleType2["HUNGRY_SOUL"] = 684] = "HUNGRY_SOUL";
        CollectibleType2[CollectibleType2["JAR_OF_WISPS"] = 685] = "JAR_OF_WISPS";
        CollectibleType2[CollectibleType2["SOUL_LOCKET"] = 686] = "SOUL_LOCKET";
        CollectibleType2[CollectibleType2["FRIEND_FINDER"] = 687] = "FRIEND_FINDER";
        CollectibleType2[CollectibleType2["INNER_CHILD"] = 688] = "INNER_CHILD";
        CollectibleType2[CollectibleType2["GLITCHED_CROWN"] = 689] = "GLITCHED_CROWN";
        CollectibleType2[CollectibleType2["JELLY_BELLY"] = 690] = "JELLY_BELLY";
        CollectibleType2[CollectibleType2["SACRED_ORB"] = 691] = "SACRED_ORB";
        CollectibleType2[CollectibleType2["SANGUINE_BOND"] = 692] = "SANGUINE_BOND";
        CollectibleType2[CollectibleType2["SWARM"] = 693] = "SWARM";
        CollectibleType2[CollectibleType2["HEARTBREAK"] = 694] = "HEARTBREAK";
        CollectibleType2[CollectibleType2["BLOODY_GUST"] = 695] = "BLOODY_GUST";
        CollectibleType2[CollectibleType2["SALVATION"] = 696] = "SALVATION";
        CollectibleType2[CollectibleType2["VANISHING_TWIN"] = 697] = "VANISHING_TWIN";
        CollectibleType2[CollectibleType2["TWISTED_PAIR"] = 698] = "TWISTED_PAIR";
        CollectibleType2[CollectibleType2["AZAZELS_RAGE"] = 699] = "AZAZELS_RAGE";
        CollectibleType2[CollectibleType2["ECHO_CHAMBER"] = 700] = "ECHO_CHAMBER";
        CollectibleType2[CollectibleType2["ISAACS_TOMB"] = 701] = "ISAACS_TOMB";
        CollectibleType2[CollectibleType2["VENGEFUL_SPIRIT"] = 702] = "VENGEFUL_SPIRIT";
        CollectibleType2[CollectibleType2["ESAU_JR"] = 703] = "ESAU_JR";
        CollectibleType2[CollectibleType2["BERSERK"] = 704] = "BERSERK";
        CollectibleType2[CollectibleType2["DARK_ARTS"] = 705] = "DARK_ARTS";
        CollectibleType2[CollectibleType2["ABYSS"] = 706] = "ABYSS";
        CollectibleType2[CollectibleType2["SUPPER"] = 707] = "SUPPER";
        CollectibleType2[CollectibleType2["STAPLER"] = 708] = "STAPLER";
        CollectibleType2[CollectibleType2["SUPLEX"] = 709] = "SUPLEX";
        CollectibleType2[CollectibleType2["BAG_OF_CRAFTING"] = 710] = "BAG_OF_CRAFTING";
        CollectibleType2[CollectibleType2["FLIP"] = 711] = "FLIP";
        CollectibleType2[CollectibleType2["LEMEGETON"] = 712] = "LEMEGETON";
        CollectibleType2[CollectibleType2["SUMPTORIUM"] = 713] = "SUMPTORIUM";
        CollectibleType2[CollectibleType2["RECALL"] = 714] = "RECALL";
        CollectibleType2[CollectibleType2["HOLD"] = 715] = "HOLD";
        CollectibleType2[CollectibleType2["KEEPERS_SACK"] = 716] = "KEEPERS_SACK";
        CollectibleType2[CollectibleType2["KEEPERS_KIN"] = 717] = "KEEPERS_KIN";
        CollectibleType2[CollectibleType2["KEEPERS_BOX"] = 719] = "KEEPERS_BOX";
        CollectibleType2[CollectibleType2["EVERYTHING_JAR"] = 720] = "EVERYTHING_JAR";
        CollectibleType2[CollectibleType2["TMTRAINER"] = 721] = "TMTRAINER";
        CollectibleType2[CollectibleType2["ANIMA_SOLA"] = 722] = "ANIMA_SOLA";
        CollectibleType2[CollectibleType2["SPINDOWN_DICE"] = 723] = "SPINDOWN_DICE";
        CollectibleType2[CollectibleType2["HYPERCOAGULATION"] = 724] = "HYPERCOAGULATION";
        CollectibleType2[CollectibleType2["IBS"] = 725] = "IBS";
        CollectibleType2[CollectibleType2["HEMOPTYSIS"] = 726] = "HEMOPTYSIS";
        CollectibleType2[CollectibleType2["GHOST_BOMBS"] = 727] = "GHOST_BOMBS";
        CollectibleType2[CollectibleType2["GELLO"] = 728] = "GELLO";
        CollectibleType2[CollectibleType2["DECAP_ATTACK"] = 729] = "DECAP_ATTACK";
        CollectibleType2[CollectibleType2["GLASS_EYE"] = 730] = "GLASS_EYE";
        CollectibleType2[CollectibleType2["STYE"] = 731] = "STYE";
        CollectibleType2[CollectibleType2["MOMS_RING"] = 732] = "MOMS_RING";
      })(CollectibleType || (exports2.CollectibleType = CollectibleType = {}));
      var CardType;
      (function(CardType2) {
        CardType2[CardType2["NULL"] = 0] = "NULL";
        CardType2[CardType2["FOOL"] = 1] = "FOOL";
        CardType2[CardType2["MAGICIAN"] = 2] = "MAGICIAN";
        CardType2[CardType2["HIGH_PRIESTESS"] = 3] = "HIGH_PRIESTESS";
        CardType2[CardType2["EMPRESS"] = 4] = "EMPRESS";
        CardType2[CardType2["EMPEROR"] = 5] = "EMPEROR";
        CardType2[CardType2["HIEROPHANT"] = 6] = "HIEROPHANT";
        CardType2[CardType2["LOVERS"] = 7] = "LOVERS";
        CardType2[CardType2["CHARIOT"] = 8] = "CHARIOT";
        CardType2[CardType2["JUSTICE"] = 9] = "JUSTICE";
        CardType2[CardType2["HERMIT"] = 10] = "HERMIT";
        CardType2[CardType2["WHEEL_OF_FORTUNE"] = 11] = "WHEEL_OF_FORTUNE";
        CardType2[CardType2["STRENGTH"] = 12] = "STRENGTH";
        CardType2[CardType2["HANGED_MAN"] = 13] = "HANGED_MAN";
        CardType2[CardType2["DEATH"] = 14] = "DEATH";
        CardType2[CardType2["TEMPERANCE"] = 15] = "TEMPERANCE";
        CardType2[CardType2["DEVIL"] = 16] = "DEVIL";
        CardType2[CardType2["TOWER"] = 17] = "TOWER";
        CardType2[CardType2["STARS"] = 18] = "STARS";
        CardType2[CardType2["MOON"] = 19] = "MOON";
        CardType2[CardType2["SUN"] = 20] = "SUN";
        CardType2[CardType2["JUDGEMENT"] = 21] = "JUDGEMENT";
        CardType2[CardType2["WORLD"] = 22] = "WORLD";
        CardType2[CardType2["TWO_OF_CLUBS"] = 23] = "TWO_OF_CLUBS";
        CardType2[CardType2["TWO_OF_DIAMONDS"] = 24] = "TWO_OF_DIAMONDS";
        CardType2[CardType2["TWO_OF_SPADES"] = 25] = "TWO_OF_SPADES";
        CardType2[CardType2["TWO_OF_HEARTS"] = 26] = "TWO_OF_HEARTS";
        CardType2[CardType2["ACE_OF_CLUBS"] = 27] = "ACE_OF_CLUBS";
        CardType2[CardType2["ACE_OF_DIAMONDS"] = 28] = "ACE_OF_DIAMONDS";
        CardType2[CardType2["ACE_OF_SPADES"] = 29] = "ACE_OF_SPADES";
        CardType2[CardType2["ACE_OF_HEARTS"] = 30] = "ACE_OF_HEARTS";
        CardType2[CardType2["JOKER"] = 31] = "JOKER";
        CardType2[CardType2["RUNE_HAGALAZ"] = 32] = "RUNE_HAGALAZ";
        CardType2[CardType2["RUNE_JERA"] = 33] = "RUNE_JERA";
        CardType2[CardType2["RUNE_EHWAZ"] = 34] = "RUNE_EHWAZ";
        CardType2[CardType2["RUNE_DAGAZ"] = 35] = "RUNE_DAGAZ";
        CardType2[CardType2["RUNE_ANSUZ"] = 36] = "RUNE_ANSUZ";
        CardType2[CardType2["RUNE_PERTHRO"] = 37] = "RUNE_PERTHRO";
        CardType2[CardType2["RUNE_BERKANO"] = 38] = "RUNE_BERKANO";
        CardType2[CardType2["RUNE_ALGIZ"] = 39] = "RUNE_ALGIZ";
        CardType2[CardType2["RUNE_BLANK"] = 40] = "RUNE_BLANK";
        CardType2[CardType2["RUNE_BLACK"] = 41] = "RUNE_BLACK";
        CardType2[CardType2["CHAOS"] = 42] = "CHAOS";
        CardType2[CardType2["CREDIT"] = 43] = "CREDIT";
        CardType2[CardType2["RULES"] = 44] = "RULES";
        CardType2[CardType2["AGAINST_HUMANITY"] = 45] = "AGAINST_HUMANITY";
        CardType2[CardType2["SUICIDE_KING"] = 46] = "SUICIDE_KING";
        CardType2[CardType2["GET_OUT_OF_JAIL_FREE"] = 47] = "GET_OUT_OF_JAIL_FREE";
        CardType2[CardType2["QUESTION_MARK"] = 48] = "QUESTION_MARK";
        CardType2[CardType2["DICE_SHARD"] = 49] = "DICE_SHARD";
        CardType2[CardType2["EMERGENCY_CONTACT"] = 50] = "EMERGENCY_CONTACT";
        CardType2[CardType2["HOLY"] = 51] = "HOLY";
        CardType2[CardType2["HUGE_GROWTH"] = 52] = "HUGE_GROWTH";
        CardType2[CardType2["ANCIENT_RECALL"] = 53] = "ANCIENT_RECALL";
        CardType2[CardType2["ERA_WALK"] = 54] = "ERA_WALK";
        CardType2[CardType2["RUNE_SHARD"] = 55] = "RUNE_SHARD";
        CardType2[CardType2["REVERSE_FOOL"] = 56] = "REVERSE_FOOL";
        CardType2[CardType2["REVERSE_MAGICIAN"] = 57] = "REVERSE_MAGICIAN";
        CardType2[CardType2["REVERSE_HIGH_PRIESTESS"] = 58] = "REVERSE_HIGH_PRIESTESS";
        CardType2[CardType2["REVERSE_EMPRESS"] = 59] = "REVERSE_EMPRESS";
        CardType2[CardType2["REVERSE_EMPEROR"] = 60] = "REVERSE_EMPEROR";
        CardType2[CardType2["REVERSE_HIEROPHANT"] = 61] = "REVERSE_HIEROPHANT";
        CardType2[CardType2["REVERSE_LOVERS"] = 62] = "REVERSE_LOVERS";
        CardType2[CardType2["REVERSE_CHARIOT"] = 63] = "REVERSE_CHARIOT";
        CardType2[CardType2["REVERSE_JUSTICE"] = 64] = "REVERSE_JUSTICE";
        CardType2[CardType2["REVERSE_HERMIT"] = 65] = "REVERSE_HERMIT";
        CardType2[CardType2["REVERSE_WHEEL_OF_FORTUNE"] = 66] = "REVERSE_WHEEL_OF_FORTUNE";
        CardType2[CardType2["REVERSE_STRENGTH"] = 67] = "REVERSE_STRENGTH";
        CardType2[CardType2["REVERSE_HANGED_MAN"] = 68] = "REVERSE_HANGED_MAN";
        CardType2[CardType2["REVERSE_DEATH"] = 69] = "REVERSE_DEATH";
        CardType2[CardType2["REVERSE_TEMPERANCE"] = 70] = "REVERSE_TEMPERANCE";
        CardType2[CardType2["REVERSE_DEVIL"] = 71] = "REVERSE_DEVIL";
        CardType2[CardType2["REVERSE_TOWER"] = 72] = "REVERSE_TOWER";
        CardType2[CardType2["REVERSE_STARS"] = 73] = "REVERSE_STARS";
        CardType2[CardType2["REVERSE_MOON"] = 74] = "REVERSE_MOON";
        CardType2[CardType2["REVERSE_SUN"] = 75] = "REVERSE_SUN";
        CardType2[CardType2["REVERSE_JUDGEMENT"] = 76] = "REVERSE_JUDGEMENT";
        CardType2[CardType2["REVERSE_WORLD"] = 77] = "REVERSE_WORLD";
        CardType2[CardType2["CRACKED_KEY"] = 78] = "CRACKED_KEY";
        CardType2[CardType2["QUEEN_OF_HEARTS"] = 79] = "QUEEN_OF_HEARTS";
        CardType2[CardType2["WILD"] = 80] = "WILD";
        CardType2[CardType2["SOUL_OF_ISAAC"] = 81] = "SOUL_OF_ISAAC";
        CardType2[CardType2["SOUL_OF_MAGDALENE"] = 82] = "SOUL_OF_MAGDALENE";
        CardType2[CardType2["SOUL_OF_CAIN"] = 83] = "SOUL_OF_CAIN";
        CardType2[CardType2["SOUL_OF_JUDAS"] = 84] = "SOUL_OF_JUDAS";
        CardType2[CardType2["SOUL_OF_BLUE_BABY"] = 85] = "SOUL_OF_BLUE_BABY";
        CardType2[CardType2["SOUL_OF_EVE"] = 86] = "SOUL_OF_EVE";
        CardType2[CardType2["SOUL_OF_SAMSON"] = 87] = "SOUL_OF_SAMSON";
        CardType2[CardType2["SOUL_OF_AZAZEL"] = 88] = "SOUL_OF_AZAZEL";
        CardType2[CardType2["SOUL_OF_LAZARUS"] = 89] = "SOUL_OF_LAZARUS";
        CardType2[CardType2["SOUL_OF_EDEN"] = 90] = "SOUL_OF_EDEN";
        CardType2[CardType2["SOUL_OF_LOST"] = 91] = "SOUL_OF_LOST";
        CardType2[CardType2["SOUL_OF_LILITH"] = 92] = "SOUL_OF_LILITH";
        CardType2[CardType2["SOUL_OF_KEEPER"] = 93] = "SOUL_OF_KEEPER";
        CardType2[CardType2["SOUL_OF_APOLLYON"] = 94] = "SOUL_OF_APOLLYON";
        CardType2[CardType2["SOUL_OF_FORGOTTEN"] = 95] = "SOUL_OF_FORGOTTEN";
        CardType2[CardType2["SOUL_OF_BETHANY"] = 96] = "SOUL_OF_BETHANY";
        CardType2[CardType2["SOUL_OF_JACOB_AND_ESAU"] = 97] = "SOUL_OF_JACOB_AND_ESAU";
      })(CardType || (exports2.CardType = CardType = {}));
      var TrinketType;
      (function(TrinketType2) {
        TrinketType2[TrinketType2["NULL"] = 0] = "NULL";
        TrinketType2[TrinketType2["SWALLOWED_PENNY"] = 1] = "SWALLOWED_PENNY";
        TrinketType2[TrinketType2["PETRIFIED_POOP"] = 2] = "PETRIFIED_POOP";
        TrinketType2[TrinketType2["AAA_BATTERY"] = 3] = "AAA_BATTERY";
        TrinketType2[TrinketType2["BROKEN_REMOTE"] = 4] = "BROKEN_REMOTE";
        TrinketType2[TrinketType2["PURPLE_HEART"] = 5] = "PURPLE_HEART";
        TrinketType2[TrinketType2["BROKEN_MAGNET"] = 6] = "BROKEN_MAGNET";
        TrinketType2[TrinketType2["ROSARY_BEAD"] = 7] = "ROSARY_BEAD";
        TrinketType2[TrinketType2["CARTRIDGE"] = 8] = "CARTRIDGE";
        TrinketType2[TrinketType2["PULSE_WORM"] = 9] = "PULSE_WORM";
        TrinketType2[TrinketType2["WIGGLE_WORM"] = 10] = "WIGGLE_WORM";
        TrinketType2[TrinketType2["RING_WORM"] = 11] = "RING_WORM";
        TrinketType2[TrinketType2["FLAT_WORM"] = 12] = "FLAT_WORM";
        TrinketType2[TrinketType2["STORE_CREDIT"] = 13] = "STORE_CREDIT";
        TrinketType2[TrinketType2["CALLUS"] = 14] = "CALLUS";
        TrinketType2[TrinketType2["LUCKY_ROCK"] = 15] = "LUCKY_ROCK";
        TrinketType2[TrinketType2["MOMS_TOENAIL"] = 16] = "MOMS_TOENAIL";
        TrinketType2[TrinketType2["BLACK_LIPSTICK"] = 17] = "BLACK_LIPSTICK";
        TrinketType2[TrinketType2["BIBLE_TRACT"] = 18] = "BIBLE_TRACT";
        TrinketType2[TrinketType2["PAPER_CLIP"] = 19] = "PAPER_CLIP";
        TrinketType2[TrinketType2["MONKEY_PAW"] = 20] = "MONKEY_PAW";
        TrinketType2[TrinketType2["MYSTERIOUS_PAPER"] = 21] = "MYSTERIOUS_PAPER";
        TrinketType2[TrinketType2["DAEMONS_TAIL"] = 22] = "DAEMONS_TAIL";
        TrinketType2[TrinketType2["MISSING_POSTER"] = 23] = "MISSING_POSTER";
        TrinketType2[TrinketType2["BUTT_PENNY"] = 24] = "BUTT_PENNY";
        TrinketType2[TrinketType2["MYSTERIOUS_CANDY"] = 25] = "MYSTERIOUS_CANDY";
        TrinketType2[TrinketType2["HOOK_WORM"] = 26] = "HOOK_WORM";
        TrinketType2[TrinketType2["WHIP_WORM"] = 27] = "WHIP_WORM";
        TrinketType2[TrinketType2["BROKEN_ANKH"] = 28] = "BROKEN_ANKH";
        TrinketType2[TrinketType2["FISH_HEAD"] = 29] = "FISH_HEAD";
        TrinketType2[TrinketType2["PINKY_EYE"] = 30] = "PINKY_EYE";
        TrinketType2[TrinketType2["PUSH_PIN"] = 31] = "PUSH_PIN";
        TrinketType2[TrinketType2["LIBERTY_CAP"] = 32] = "LIBERTY_CAP";
        TrinketType2[TrinketType2["UMBILICAL_CORD"] = 33] = "UMBILICAL_CORD";
        TrinketType2[TrinketType2["CHILDS_HEART"] = 34] = "CHILDS_HEART";
        TrinketType2[TrinketType2["CURVED_HORN"] = 35] = "CURVED_HORN";
        TrinketType2[TrinketType2["RUSTED_KEY"] = 36] = "RUSTED_KEY";
        TrinketType2[TrinketType2["GOAT_HOOF"] = 37] = "GOAT_HOOF";
        TrinketType2[TrinketType2["MOMS_PEARL"] = 38] = "MOMS_PEARL";
        TrinketType2[TrinketType2["CANCER"] = 39] = "CANCER";
        TrinketType2[TrinketType2["RED_PATCH"] = 40] = "RED_PATCH";
        TrinketType2[TrinketType2["MATCH_STICK"] = 41] = "MATCH_STICK";
        TrinketType2[TrinketType2["LUCKY_TOE"] = 42] = "LUCKY_TOE";
        TrinketType2[TrinketType2["CURSED_SKULL"] = 43] = "CURSED_SKULL";
        TrinketType2[TrinketType2["SAFETY_CAP"] = 44] = "SAFETY_CAP";
        TrinketType2[TrinketType2["ACE_OF_SPADES"] = 45] = "ACE_OF_SPADES";
        TrinketType2[TrinketType2["ISAACS_FORK"] = 46] = "ISAACS_FORK";
        TrinketType2[TrinketType2["MISSING_PAGE"] = 48] = "MISSING_PAGE";
        TrinketType2[TrinketType2["BLOODY_PENNY"] = 49] = "BLOODY_PENNY";
        TrinketType2[TrinketType2["BURNT_PENNY"] = 50] = "BURNT_PENNY";
        TrinketType2[TrinketType2["FLAT_PENNY"] = 51] = "FLAT_PENNY";
        TrinketType2[TrinketType2["COUNTERFEIT_PENNY"] = 52] = "COUNTERFEIT_PENNY";
        TrinketType2[TrinketType2["TICK"] = 53] = "TICK";
        TrinketType2[TrinketType2["ISAACS_HEAD"] = 54] = "ISAACS_HEAD";
        TrinketType2[TrinketType2["MAGGYS_FAITH"] = 55] = "MAGGYS_FAITH";
        TrinketType2[TrinketType2["JUDAS_TONGUE"] = 56] = "JUDAS_TONGUE";
        TrinketType2[TrinketType2["BLUE_BABYS_SOUL"] = 57] = "BLUE_BABYS_SOUL";
        TrinketType2[TrinketType2["SAMSONS_LOCK"] = 58] = "SAMSONS_LOCK";
        TrinketType2[TrinketType2["CAINS_EYE"] = 59] = "CAINS_EYE";
        TrinketType2[TrinketType2["EVES_BIRD_FOOT"] = 60] = "EVES_BIRD_FOOT";
        TrinketType2[TrinketType2["LEFT_HAND"] = 61] = "LEFT_HAND";
        TrinketType2[TrinketType2["SHINY_ROCK"] = 62] = "SHINY_ROCK";
        TrinketType2[TrinketType2["SAFETY_SCISSORS"] = 63] = "SAFETY_SCISSORS";
        TrinketType2[TrinketType2["RAINBOW_WORM"] = 64] = "RAINBOW_WORM";
        TrinketType2[TrinketType2["TAPE_WORM"] = 65] = "TAPE_WORM";
        TrinketType2[TrinketType2["LAZY_WORM"] = 66] = "LAZY_WORM";
        TrinketType2[TrinketType2["CRACKED_DICE"] = 67] = "CRACKED_DICE";
        TrinketType2[TrinketType2["SUPER_MAGNET"] = 68] = "SUPER_MAGNET";
        TrinketType2[TrinketType2["FADED_POLAROID"] = 69] = "FADED_POLAROID";
        TrinketType2[TrinketType2["LOUSE"] = 70] = "LOUSE";
        TrinketType2[TrinketType2["BOBS_BLADDER"] = 71] = "BOBS_BLADDER";
        TrinketType2[TrinketType2["WATCH_BATTERY"] = 72] = "WATCH_BATTERY";
        TrinketType2[TrinketType2["BLASTING_CAP"] = 73] = "BLASTING_CAP";
        TrinketType2[TrinketType2["STUD_FINDER"] = 74] = "STUD_FINDER";
        TrinketType2[TrinketType2["ERROR"] = 75] = "ERROR";
        TrinketType2[TrinketType2["POKER_CHIP"] = 76] = "POKER_CHIP";
        TrinketType2[TrinketType2["BLISTER"] = 77] = "BLISTER";
        TrinketType2[TrinketType2["SECOND_HAND"] = 78] = "SECOND_HAND";
        TrinketType2[TrinketType2["ENDLESS_NAMELESS"] = 79] = "ENDLESS_NAMELESS";
        TrinketType2[TrinketType2["BLACK_FEATHER"] = 80] = "BLACK_FEATHER";
        TrinketType2[TrinketType2["BLIND_RAGE"] = 81] = "BLIND_RAGE";
        TrinketType2[TrinketType2["GOLDEN_HORSE_SHOE"] = 82] = "GOLDEN_HORSE_SHOE";
        TrinketType2[TrinketType2["STORE_KEY"] = 83] = "STORE_KEY";
        TrinketType2[TrinketType2["RIB_OF_GREED"] = 84] = "RIB_OF_GREED";
        TrinketType2[TrinketType2["KARMA"] = 85] = "KARMA";
        TrinketType2[TrinketType2["LIL_LARVA"] = 86] = "LIL_LARVA";
        TrinketType2[TrinketType2["MOMS_LOCKET"] = 87] = "MOMS_LOCKET";
        TrinketType2[TrinketType2["NO"] = 88] = "NO";
        TrinketType2[TrinketType2["CHILD_LEASH"] = 89] = "CHILD_LEASH";
        TrinketType2[TrinketType2["BROWN_CAP"] = 90] = "BROWN_CAP";
        TrinketType2[TrinketType2["MECONIUM"] = 91] = "MECONIUM";
        TrinketType2[TrinketType2["CRACKED_CROWN"] = 92] = "CRACKED_CROWN";
        TrinketType2[TrinketType2["USED_DIAPER"] = 93] = "USED_DIAPER";
        TrinketType2[TrinketType2["FISH_TAIL"] = 94] = "FISH_TAIL";
        TrinketType2[TrinketType2["BLACK_TOOTH"] = 95] = "BLACK_TOOTH";
        TrinketType2[TrinketType2["OUROBOROS_WORM"] = 96] = "OUROBOROS_WORM";
        TrinketType2[TrinketType2["TONSIL"] = 97] = "TONSIL";
        TrinketType2[TrinketType2["NOSE_GOBLIN"] = 98] = "NOSE_GOBLIN";
        TrinketType2[TrinketType2["SUPER_BALL"] = 99] = "SUPER_BALL";
        TrinketType2[TrinketType2["VIBRANT_BULB"] = 100] = "VIBRANT_BULB";
        TrinketType2[TrinketType2["DIM_BULB"] = 101] = "DIM_BULB";
        TrinketType2[TrinketType2["FRAGMENTED_CARD"] = 102] = "FRAGMENTED_CARD";
        TrinketType2[TrinketType2["EQUALITY"] = 103] = "EQUALITY";
        TrinketType2[TrinketType2["WISH_BONE"] = 104] = "WISH_BONE";
        TrinketType2[TrinketType2["BAG_LUNCH"] = 105] = "BAG_LUNCH";
        TrinketType2[TrinketType2["LOST_CORK"] = 106] = "LOST_CORK";
        TrinketType2[TrinketType2["CROW_HEART"] = 107] = "CROW_HEART";
        TrinketType2[TrinketType2["WALNUT"] = 108] = "WALNUT";
        TrinketType2[TrinketType2["DUCT_TAPE"] = 109] = "DUCT_TAPE";
        TrinketType2[TrinketType2["SILVER_DOLLAR"] = 110] = "SILVER_DOLLAR";
        TrinketType2[TrinketType2["BLOODY_CROWN"] = 111] = "BLOODY_CROWN";
        TrinketType2[TrinketType2["PAY_TO_WIN"] = 112] = "PAY_TO_WIN";
        TrinketType2[TrinketType2["LOCUST_OF_WRATH"] = 113] = "LOCUST_OF_WRATH";
        TrinketType2[TrinketType2["LOCUST_OF_PESTILENCE"] = 114] = "LOCUST_OF_PESTILENCE";
        TrinketType2[TrinketType2["LOCUST_OF_FAMINE"] = 115] = "LOCUST_OF_FAMINE";
        TrinketType2[TrinketType2["LOCUST_OF_DEATH"] = 116] = "LOCUST_OF_DEATH";
        TrinketType2[TrinketType2["LOCUST_OF_CONQUEST"] = 117] = "LOCUST_OF_CONQUEST";
        TrinketType2[TrinketType2["BAT_WING"] = 118] = "BAT_WING";
        TrinketType2[TrinketType2["STEM_CELL"] = 119] = "STEM_CELL";
        TrinketType2[TrinketType2["HAIRPIN"] = 120] = "HAIRPIN";
        TrinketType2[TrinketType2["WOODEN_CROSS"] = 121] = "WOODEN_CROSS";
        TrinketType2[TrinketType2["BUTTER"] = 122] = "BUTTER";
        TrinketType2[TrinketType2["FILIGREE_FEATHERS"] = 123] = "FILIGREE_FEATHERS";
        TrinketType2[TrinketType2["DOOR_STOP"] = 124] = "DOOR_STOP";
        TrinketType2[TrinketType2["EXTENSION_CORD"] = 125] = "EXTENSION_CORD";
        TrinketType2[TrinketType2["ROTTEN_PENNY"] = 126] = "ROTTEN_PENNY";
        TrinketType2[TrinketType2["BABY_BENDER"] = 127] = "BABY_BENDER";
        TrinketType2[TrinketType2["FINGER_BONE"] = 128] = "FINGER_BONE";
        TrinketType2[TrinketType2["JAW_BREAKER"] = 129] = "JAW_BREAKER";
        TrinketType2[TrinketType2["CHEWED_PEN"] = 130] = "CHEWED_PEN";
        TrinketType2[TrinketType2["BLESSED_PENNY"] = 131] = "BLESSED_PENNY";
        TrinketType2[TrinketType2["BROKEN_SYRINGE"] = 132] = "BROKEN_SYRINGE";
        TrinketType2[TrinketType2["SHORT_FUSE"] = 133] = "SHORT_FUSE";
        TrinketType2[TrinketType2["GIGANTE_BEAN"] = 134] = "GIGANTE_BEAN";
        TrinketType2[TrinketType2["LIGHTER"] = 135] = "LIGHTER";
        TrinketType2[TrinketType2["BROKEN_PADLOCK"] = 136] = "BROKEN_PADLOCK";
        TrinketType2[TrinketType2["MYOSOTIS"] = 137] = "MYOSOTIS";
        TrinketType2[TrinketType2["M"] = 138] = "M";
        TrinketType2[TrinketType2["TEARDROP_CHARM"] = 139] = "TEARDROP_CHARM";
        TrinketType2[TrinketType2["APPLE_OF_SODOM"] = 140] = "APPLE_OF_SODOM";
        TrinketType2[TrinketType2["FORGOTTEN_LULLABY"] = 141] = "FORGOTTEN_LULLABY";
        TrinketType2[TrinketType2["BETHS_FAITH"] = 142] = "BETHS_FAITH";
        TrinketType2[TrinketType2["OLD_CAPACITOR"] = 143] = "OLD_CAPACITOR";
        TrinketType2[TrinketType2["BRAIN_WORM"] = 144] = "BRAIN_WORM";
        TrinketType2[TrinketType2["PERFECTION"] = 145] = "PERFECTION";
        TrinketType2[TrinketType2["DEVILS_CROWN"] = 146] = "DEVILS_CROWN";
        TrinketType2[TrinketType2["CHARGED_PENNY"] = 147] = "CHARGED_PENNY";
        TrinketType2[TrinketType2["FRIENDSHIP_NECKLACE"] = 148] = "FRIENDSHIP_NECKLACE";
        TrinketType2[TrinketType2["PANIC_BUTTON"] = 149] = "PANIC_BUTTON";
        TrinketType2[TrinketType2["BLUE_KEY"] = 150] = "BLUE_KEY";
        TrinketType2[TrinketType2["FLAT_FILE"] = 151] = "FLAT_FILE";
        TrinketType2[TrinketType2["TELESCOPE_LENS"] = 152] = "TELESCOPE_LENS";
        TrinketType2[TrinketType2["MOMS_LOCK"] = 153] = "MOMS_LOCK";
        TrinketType2[TrinketType2["DICE_BAG"] = 154] = "DICE_BAG";
        TrinketType2[TrinketType2["HOLY_CROWN"] = 155] = "HOLY_CROWN";
        TrinketType2[TrinketType2["MOTHERS_KISS"] = 156] = "MOTHERS_KISS";
        TrinketType2[TrinketType2["TORN_CARD"] = 157] = "TORN_CARD";
        TrinketType2[TrinketType2["TORN_POCKET"] = 158] = "TORN_POCKET";
        TrinketType2[TrinketType2["GILDED_KEY"] = 159] = "GILDED_KEY";
        TrinketType2[TrinketType2["LUCKY_SACK"] = 160] = "LUCKY_SACK";
        TrinketType2[TrinketType2["WICKED_CROWN"] = 161] = "WICKED_CROWN";
        TrinketType2[TrinketType2["AZAZELS_STUMP"] = 162] = "AZAZELS_STUMP";
        TrinketType2[TrinketType2["DINGLE_BERRY"] = 163] = "DINGLE_BERRY";
        TrinketType2[TrinketType2["RING_CAP"] = 164] = "RING_CAP";
        TrinketType2[TrinketType2["NUH_UH"] = 165] = "NUH_UH";
        TrinketType2[TrinketType2["MODELING_CLAY"] = 166] = "MODELING_CLAY";
        TrinketType2[TrinketType2["POLISHED_BONE"] = 167] = "POLISHED_BONE";
        TrinketType2[TrinketType2["HOLLOW_HEART"] = 168] = "HOLLOW_HEART";
        TrinketType2[TrinketType2["KIDS_DRAWING"] = 169] = "KIDS_DRAWING";
        TrinketType2[TrinketType2["CRYSTAL_KEY"] = 170] = "CRYSTAL_KEY";
        TrinketType2[TrinketType2["KEEPERS_BARGAIN"] = 171] = "KEEPERS_BARGAIN";
        TrinketType2[TrinketType2["CURSED_PENNY"] = 172] = "CURSED_PENNY";
        TrinketType2[TrinketType2["YOUR_SOUL"] = 173] = "YOUR_SOUL";
        TrinketType2[TrinketType2["NUMBER_MAGNET"] = 174] = "NUMBER_MAGNET";
        TrinketType2[TrinketType2["STRANGE_KEY"] = 175] = "STRANGE_KEY";
        TrinketType2[TrinketType2["LIL_CLOT"] = 176] = "LIL_CLOT";
        TrinketType2[TrinketType2["TEMPORARY_TATTOO"] = 177] = "TEMPORARY_TATTOO";
        TrinketType2[TrinketType2["SWALLOWED_M80"] = 178] = "SWALLOWED_M80";
        TrinketType2[TrinketType2["RC_REMOTE"] = 179] = "RC_REMOTE";
        TrinketType2[TrinketType2["FOUND_SOUL"] = 180] = "FOUND_SOUL";
        TrinketType2[TrinketType2["EXPANSION_PACK"] = 181] = "EXPANSION_PACK";
        TrinketType2[TrinketType2["BETHS_ESSENCE"] = 182] = "BETHS_ESSENCE";
        TrinketType2[TrinketType2["TWINS"] = 183] = "TWINS";
        TrinketType2[TrinketType2["ADOPTION_PAPERS"] = 184] = "ADOPTION_PAPERS";
        TrinketType2[TrinketType2["CRICKET_LEG"] = 185] = "CRICKET_LEG";
        TrinketType2[TrinketType2["APOLLYONS_BEST_FRIEND"] = 186] = "APOLLYONS_BEST_FRIEND";
        TrinketType2[TrinketType2["BROKEN_GLASSES"] = 187] = "BROKEN_GLASSES";
        TrinketType2[TrinketType2["ICE_CUBE"] = 188] = "ICE_CUBE";
        TrinketType2[TrinketType2["SIGIL_OF_BAPHOMET"] = 189] = "SIGIL_OF_BAPHOMET";
      })(TrinketType || (exports2.TrinketType = TrinketType = {}));
      var BedSubType;
      (function(BedSubType2) {
        BedSubType2[BedSubType2["ISAAC"] = 0] = "ISAAC";
        BedSubType2[BedSubType2["MOM"] = 10] = "MOM";
      })(BedSubType || (exports2.BedSubType = BedSubType = {}));
      var LaserSubType;
      (function(LaserSubType2) {
        LaserSubType2[LaserSubType2["LINEAR"] = 0] = "LINEAR";
        LaserSubType2[LaserSubType2["RING_LUDOVICO"] = 1] = "RING_LUDOVICO";
        LaserSubType2[LaserSubType2["RING_PROJECTILE"] = 2] = "RING_PROJECTILE";
        LaserSubType2[LaserSubType2["RING_FOLLOW_PARENT"] = 3] = "RING_FOLLOW_PARENT";
        LaserSubType2[LaserSubType2["NO_IMPACT"] = 4] = "NO_IMPACT";
      })(LaserSubType || (exports2.LaserSubType = LaserSubType = {}));
      var RottenGaperSubType;
      (function(RottenGaperSubType2) {
        RottenGaperSubType2[RottenGaperSubType2["V1"] = 0] = "V1";
        RottenGaperSubType2[RottenGaperSubType2["V2"] = 1] = "V2";
        RottenGaperSubType2[RottenGaperSubType2["V3"] = 2] = "V3";
        RottenGaperSubType2[RottenGaperSubType2["V4"] = 3] = "V4";
        RottenGaperSubType2[RottenGaperSubType2["V5"] = 4] = "V5";
        RottenGaperSubType2[RottenGaperSubType2["V6"] = 5] = "V6";
      })(RottenGaperSubType || (exports2.RottenGaperSubType = RottenGaperSubType = {}));
      var LarryJrSubType;
      (function(LarryJrSubType2) {
        LarryJrSubType2[LarryJrSubType2["NORMAL"] = 0] = "NORMAL";
        LarryJrSubType2[LarryJrSubType2["GREEN"] = 1] = "GREEN";
        LarryJrSubType2[LarryJrSubType2["BLUE"] = 2] = "BLUE";
      })(LarryJrSubType || (exports2.LarryJrSubType = LarryJrSubType = {}));
      var HollowSubType;
      (function(HollowSubType2) {
        HollowSubType2[HollowSubType2["NORMAL"] = 0] = "NORMAL";
        HollowSubType2[HollowSubType2["GREEN"] = 1] = "GREEN";
        HollowSubType2[HollowSubType2["BLACK"] = 2] = "BLACK";
        HollowSubType2[HollowSubType2["YELLOW"] = 3] = "YELLOW";
      })(HollowSubType || (exports2.HollowSubType = HollowSubType = {}));
      var MonstroSubType;
      (function(MonstroSubType2) {
        MonstroSubType2[MonstroSubType2["NORMAL"] = 0] = "NORMAL";
        MonstroSubType2[MonstroSubType2["RED"] = 1] = "RED";
        MonstroSubType2[MonstroSubType2["GREY"] = 2] = "GREY";
      })(MonstroSubType || (exports2.MonstroSubType = MonstroSubType = {}));
      var ChargerSubType;
      (function(ChargerSubType2) {
        ChargerSubType2[ChargerSubType2["CHARGER"] = 0] = "CHARGER";
        ChargerSubType2[ChargerSubType2["MY_SHADOW"] = 1] = "MY_SHADOW";
      })(ChargerSubType || (exports2.ChargerSubType = ChargerSubType = {}));
      var DragonFlySubType;
      (function(DragonFlySubType2) {
        DragonFlySubType2[DragonFlySubType2["NORMAL"] = 0] = "NORMAL";
        DragonFlySubType2[DragonFlySubType2["X"] = 1] = "X";
      })(DragonFlySubType || (exports2.DragonFlySubType = DragonFlySubType = {}));
      var ChubSubType;
      (function(ChubSubType2) {
        ChubSubType2[ChubSubType2["NORMAL"] = 0] = "NORMAL";
        ChubSubType2[ChubSubType2["BLUE"] = 1] = "BLUE";
        ChubSubType2[ChubSubType2["ORANGE"] = 2] = "ORANGE";
      })(ChubSubType || (exports2.ChubSubType = ChubSubType = {}));
      var CarrionQueenSubType;
      (function(CarrionQueenSubType2) {
        CarrionQueenSubType2[CarrionQueenSubType2["NORMAL"] = 0] = "NORMAL";
        CarrionQueenSubType2[CarrionQueenSubType2["PINK"] = 1] = "PINK";
      })(CarrionQueenSubType || (exports2.CarrionQueenSubType = CarrionQueenSubType = {}));
      var GurdySubType;
      (function(GurdySubType2) {
        GurdySubType2[GurdySubType2["NORMAL"] = 0] = "NORMAL";
        GurdySubType2[GurdySubType2["GREEN"] = 1] = "GREEN";
      })(GurdySubType || (exports2.GurdySubType = GurdySubType = {}));
      var AngelicBabySubType;
      (function(AngelicBabySubType2) {
        AngelicBabySubType2[AngelicBabySubType2["NORMAL"] = 0] = "NORMAL";
        AngelicBabySubType2[AngelicBabySubType2["SMALL"] = 1] = "SMALL";
      })(AngelicBabySubType || (exports2.AngelicBabySubType = AngelicBabySubType = {}));
      var Monstro2SubType;
      (function(Monstro2SubType2) {
        Monstro2SubType2[Monstro2SubType2["NORMAL"] = 0] = "NORMAL";
        Monstro2SubType2[Monstro2SubType2["RED"] = 1] = "RED";
      })(Monstro2SubType || (exports2.Monstro2SubType = Monstro2SubType = {}));
      var MomSubType;
      (function(MomSubType2) {
        MomSubType2[MomSubType2["NORMAL"] = 0] = "NORMAL";
        MomSubType2[MomSubType2["BLUE"] = 1] = "BLUE";
        MomSubType2[MomSubType2["RED"] = 2] = "RED";
      })(MomSubType || (exports2.MomSubType = MomSubType = {}));
      var PinSubType;
      (function(PinSubType2) {
        PinSubType2[PinSubType2["NORMAL"] = 0] = "NORMAL";
        PinSubType2[PinSubType2["GREY"] = 1] = "GREY";
      })(PinSubType || (exports2.PinSubType = PinSubType = {}));
      var FrailSubType;
      (function(FrailSubType2) {
        FrailSubType2[FrailSubType2["NORMAL"] = 0] = "NORMAL";
        FrailSubType2[FrailSubType2["BLACK"] = 1] = "BLACK";
      })(FrailSubType || (exports2.FrailSubType = FrailSubType = {}));
      var FamineSubType;
      (function(FamineSubType2) {
        FamineSubType2[FamineSubType2["NORMAL"] = 0] = "NORMAL";
        FamineSubType2[FamineSubType2["BLUE"] = 1] = "BLUE";
      })(FamineSubType || (exports2.FamineSubType = FamineSubType = {}));
      var PestilenceSubType;
      (function(PestilenceSubType2) {
        PestilenceSubType2[PestilenceSubType2["NORMAL"] = 0] = "NORMAL";
        PestilenceSubType2[PestilenceSubType2["GREY"] = 1] = "GREY";
      })(PestilenceSubType || (exports2.PestilenceSubType = PestilenceSubType = {}));
      var WarSubType;
      (function(WarSubType2) {
        WarSubType2[WarSubType2["NORMAL"] = 0] = "NORMAL";
        WarSubType2[WarSubType2["GREY"] = 1] = "GREY";
      })(WarSubType || (exports2.WarSubType = WarSubType = {}));
      var DeathSubType;
      (function(DeathSubType2) {
        DeathSubType2[DeathSubType2["NORMAL"] = 0] = "NORMAL";
        DeathSubType2[DeathSubType2["BLACK"] = 1] = "BLACK";
      })(DeathSubType || (exports2.DeathSubType = DeathSubType = {}));
      var DukeOfFliesSubType;
      (function(DukeOfFliesSubType2) {
        DukeOfFliesSubType2[DukeOfFliesSubType2["NORMAL"] = 0] = "NORMAL";
        DukeOfFliesSubType2[DukeOfFliesSubType2["GREEN"] = 1] = "GREEN";
        DukeOfFliesSubType2[DukeOfFliesSubType2["ORANGE"] = 2] = "ORANGE";
      })(DukeOfFliesSubType || (exports2.DukeOfFliesSubType = DukeOfFliesSubType = {}));
      var HuskSubType;
      (function(HuskSubType2) {
        HuskSubType2[HuskSubType2["NORMAL"] = 0] = "NORMAL";
        HuskSubType2[HuskSubType2["BLACK"] = 1] = "BLACK";
        HuskSubType2[HuskSubType2["RED"] = 2] = "RED";
      })(HuskSubType || (exports2.HuskSubType = HuskSubType = {}));
      var PeepSubType;
      (function(PeepSubType2) {
        PeepSubType2[PeepSubType2["NORMAL"] = 0] = "NORMAL";
        PeepSubType2[PeepSubType2["YELLOW"] = 1] = "YELLOW";
        PeepSubType2[PeepSubType2["CYAN"] = 2] = "CYAN";
      })(PeepSubType || (exports2.PeepSubType = PeepSubType = {}));
      var BloatSubType;
      (function(BloatSubType2) {
        BloatSubType2[BloatSubType2["NORMAL"] = 0] = "NORMAL";
        BloatSubType2[BloatSubType2["GREEN"] = 1] = "GREEN";
      })(BloatSubType || (exports2.BloatSubType = BloatSubType = {}));
      var FistulaSubType;
      (function(FistulaSubType2) {
        FistulaSubType2[FistulaSubType2["NORMAL"] = 0] = "NORMAL";
        FistulaSubType2[FistulaSubType2["GREY"] = 1] = "GREY";
      })(FistulaSubType || (exports2.FistulaSubType = FistulaSubType = {}));
      var GeminiSubType;
      (function(GeminiSubType2) {
        GeminiSubType2[GeminiSubType2["NORMAL"] = 0] = "NORMAL";
        GeminiSubType2[GeminiSubType2["GREEN"] = 1] = "GREEN";
        GeminiSubType2[GeminiSubType2["BLUE"] = 2] = "BLUE";
      })(GeminiSubType || (exports2.GeminiSubType = GeminiSubType = {}));
      var GurdyJrSubType;
      (function(GurdyJrSubType2) {
        GurdyJrSubType2[GurdyJrSubType2["NORMAL"] = 0] = "NORMAL";
        GurdyJrSubType2[GurdyJrSubType2["BLUE"] = 1] = "BLUE";
        GurdyJrSubType2[GurdyJrSubType2["YELLOW"] = 2] = "YELLOW";
      })(GurdyJrSubType || (exports2.GurdyJrSubType = GurdyJrSubType = {}));
      var WidowSubType;
      (function(WidowSubType2) {
        WidowSubType2[WidowSubType2["NORMAL"] = 0] = "NORMAL";
        WidowSubType2[WidowSubType2["BLACK"] = 1] = "BLACK";
        WidowSubType2[WidowSubType2["PINK"] = 2] = "PINK";
      })(WidowSubType || (exports2.WidowSubType = WidowSubType = {}));
      var GurglingSubType;
      (function(GurglingSubType2) {
        GurglingSubType2[GurglingSubType2["NORMAL"] = 0] = "NORMAL";
        GurglingSubType2[GurglingSubType2["YELLOW"] = 1] = "YELLOW";
        GurglingSubType2[GurglingSubType2["BLACK"] = 2] = "BLACK";
      })(GurglingSubType || (exports2.GurglingSubType = GurglingSubType = {}));
      var ConstantStoneShooterSubType;
      (function(ConstantStoneShooterSubType2) {
        ConstantStoneShooterSubType2[ConstantStoneShooterSubType2["LEFT"] = 0] = "LEFT";
        ConstantStoneShooterSubType2[ConstantStoneShooterSubType2["UP"] = 1] = "UP";
        ConstantStoneShooterSubType2[ConstantStoneShooterSubType2["RIGHT"] = 2] = "RIGHT";
        ConstantStoneShooterSubType2[ConstantStoneShooterSubType2["DOWN"] = 3] = "DOWN";
      })(ConstantStoneShooterSubType || (exports2.ConstantStoneShooterSubType = ConstantStoneShooterSubType = {}));
      var HauntSubType;
      (function(HauntSubType2) {
        HauntSubType2[HauntSubType2["NORMAL"] = 0] = "NORMAL";
        HauntSubType2[HauntSubType2["BLACK"] = 1] = "BLACK";
        HauntSubType2[HauntSubType2["PINK"] = 2] = "PINK";
      })(HauntSubType || (exports2.HauntSubType = HauntSubType = {}));
      var DingleSubType;
      (function(DingleSubType2) {
        DingleSubType2[DingleSubType2["NORMAL"] = 0] = "NORMAL";
        DingleSubType2[DingleSubType2["RED"] = 1] = "RED";
        DingleSubType2[DingleSubType2["BLACK"] = 2] = "BLACK";
      })(DingleSubType || (exports2.DingleSubType = DingleSubType = {}));
      var MegaMawSubType;
      (function(MegaMawSubType2) {
        MegaMawSubType2[MegaMawSubType2["NORMAL"] = 0] = "NORMAL";
        MegaMawSubType2[MegaMawSubType2["RED"] = 1] = "RED";
        MegaMawSubType2[MegaMawSubType2["BLACK"] = 2] = "BLACK";
      })(MegaMawSubType || (exports2.MegaMawSubType = MegaMawSubType = {}));
      var GateSubType;
      (function(GateSubType2) {
        GateSubType2[GateSubType2["NORMAL"] = 0] = "NORMAL";
        GateSubType2[GateSubType2["RED"] = 1] = "RED";
        GateSubType2[GateSubType2["BLACK"] = 2] = "BLACK";
      })(GateSubType || (exports2.GateSubType = GateSubType = {}));
      var MegaFattySubType;
      (function(MegaFattySubType2) {
        MegaFattySubType2[MegaFattySubType2["NORMAL"] = 0] = "NORMAL";
        MegaFattySubType2[MegaFattySubType2["RED"] = 1] = "RED";
        MegaFattySubType2[MegaFattySubType2["BROWN"] = 2] = "BROWN";
      })(MegaFattySubType || (exports2.MegaFattySubType = MegaFattySubType = {}));
      var CageSubType;
      (function(CageSubType2) {
        CageSubType2[CageSubType2["NORMAL"] = 0] = "NORMAL";
        CageSubType2[CageSubType2["GREEN"] = 1] = "GREEN";
        CageSubType2[CageSubType2["PINK"] = 2] = "PINK";
      })(CageSubType || (exports2.CageSubType = CageSubType = {}));
      var PolycephalusSubType;
      (function(PolycephalusSubType2) {
        PolycephalusSubType2[PolycephalusSubType2["NORMAL"] = 0] = "NORMAL";
        PolycephalusSubType2[PolycephalusSubType2["RED"] = 1] = "RED";
        PolycephalusSubType2[PolycephalusSubType2["PINK"] = 2] = "PINK";
      })(PolycephalusSubType || (exports2.PolycephalusSubType = PolycephalusSubType = {}));
      var LeperSubType;
      (function(LeperSubType2) {
        LeperSubType2[LeperSubType2["STAGE_1"] = 0] = "STAGE_1";
        LeperSubType2[LeperSubType2["STAGE_2"] = 1] = "STAGE_2";
        LeperSubType2[LeperSubType2["STAGE_3"] = 2] = "STAGE_3";
        LeperSubType2[LeperSubType2["STAGE_4"] = 3] = "STAGE_4";
      })(LeperSubType || (exports2.LeperSubType = LeperSubType = {}));
      var StainSubType;
      (function(StainSubType2) {
        StainSubType2[StainSubType2["NORMAL"] = 0] = "NORMAL";
        StainSubType2[StainSubType2["GREY"] = 1] = "GREY";
      })(StainSubType || (exports2.StainSubType = StainSubType = {}));
      var BrownieSubType;
      (function(BrownieSubType2) {
        BrownieSubType2[BrownieSubType2["NORMAL"] = 0] = "NORMAL";
        BrownieSubType2[BrownieSubType2["BLACK"] = 1] = "BLACK";
      })(BrownieSubType || (exports2.BrownieSubType = BrownieSubType = {}));
      var ForsakenSubType;
      (function(ForsakenSubType2) {
        ForsakenSubType2[ForsakenSubType2["NORMAL"] = 0] = "NORMAL";
        ForsakenSubType2[ForsakenSubType2["BLACK"] = 1] = "BLACK";
      })(ForsakenSubType || (exports2.ForsakenSubType = ForsakenSubType = {}));
      var LittleHornSubType;
      (function(LittleHornSubType2) {
        LittleHornSubType2[LittleHornSubType2["NORMAL"] = 0] = "NORMAL";
        LittleHornSubType2[LittleHornSubType2["ORANGE"] = 1] = "ORANGE";
        LittleHornSubType2[LittleHornSubType2["BLACK"] = 2] = "BLACK";
      })(LittleHornSubType || (exports2.LittleHornSubType = LittleHornSubType = {}));
      var RagManSubType;
      (function(RagManSubType2) {
        RagManSubType2[RagManSubType2["NORMAL"] = 0] = "NORMAL";
        RagManSubType2[RagManSubType2["RED"] = 1] = "RED";
        RagManSubType2[RagManSubType2["BLACK"] = 2] = "BLACK";
      })(RagManSubType || (exports2.RagManSubType = RagManSubType = {}));
      var QuakeGrimaceSubType;
      (function(QuakeGrimaceSubType2) {
        QuakeGrimaceSubType2[QuakeGrimaceSubType2["LEFT"] = 0] = "LEFT";
        QuakeGrimaceSubType2[QuakeGrimaceSubType2["UP"] = 1] = "UP";
        QuakeGrimaceSubType2[QuakeGrimaceSubType2["RIGHT"] = 2] = "RIGHT";
        QuakeGrimaceSubType2[QuakeGrimaceSubType2["DOWN"] = 3] = "DOWN";
      })(QuakeGrimaceSubType || (exports2.QuakeGrimaceSubType = QuakeGrimaceSubType = {}));
      var DeepGaperSubType;
      (function(DeepGaperSubType2) {
        DeepGaperSubType2[DeepGaperSubType2["V1"] = 0] = "V1";
        DeepGaperSubType2[DeepGaperSubType2["V2"] = 1] = "V2";
        DeepGaperSubType2[DeepGaperSubType2["V3"] = 2] = "V3";
        DeepGaperSubType2[DeepGaperSubType2["V4"] = 3] = "V4";
        DeepGaperSubType2[DeepGaperSubType2["V5"] = 4] = "V5";
        DeepGaperSubType2[DeepGaperSubType2["V6"] = 5] = "V6";
        DeepGaperSubType2[DeepGaperSubType2["V7"] = 6] = "V7";
      })(DeepGaperSubType || (exports2.DeepGaperSubType = DeepGaperSubType = {}));
      var MorningStarSubType;
      (function(MorningStarSubType2) {
        MorningStarSubType2[MorningStarSubType2["RANDOM"] = 0] = "RANDOM";
        MorningStarSubType2[MorningStarSubType2["NORMAL"] = 1] = "NORMAL";
        MorningStarSubType2[MorningStarSubType2["ALTERNATE"] = 2] = "ALTERNATE";
      })(MorningStarSubType || (exports2.MorningStarSubType = MorningStarSubType = {}));
      var DarkEsauSubType;
      (function(DarkEsauSubType2) {
        DarkEsauSubType2[DarkEsauSubType2["DARK"] = 0] = "DARK";
        DarkEsauSubType2[DarkEsauSubType2["DARKER"] = 1] = "DARKER";
      })(DarkEsauSubType || (exports2.DarkEsauSubType = DarkEsauSubType = {}));
      var MazeRoamerSubType;
      (function(MazeRoamerSubType2) {
        MazeRoamerSubType2[MazeRoamerSubType2["NORMAL"] = 0] = "NORMAL";
        MazeRoamerSubType2[MazeRoamerSubType2["MIRRORED"] = 1] = "MIRRORED";
      })(MazeRoamerSubType || (exports2.MazeRoamerSubType = MazeRoamerSubType = {}));
      var MotherSubType;
      (function(MotherSubType2) {
        MotherSubType2[MotherSubType2["PHASE_1"] = 0] = "PHASE_1";
        MotherSubType2[MotherSubType2["PHASE_2"] = 1] = "PHASE_2";
        MotherSubType2[MotherSubType2["LEFT_ARM"] = 2] = "LEFT_ARM";
        MotherSubType2[MotherSubType2["RIGHT_ARM"] = 3] = "RIGHT_ARM";
        MotherSubType2[MotherSubType2["DISAPPEAR"] = 4] = "DISAPPEAR";
      })(MotherSubType || (exports2.MotherSubType = MotherSubType = {}));
      var MotherBallSubType;
      (function(MotherBallSubType2) {
        MotherBallSubType2[MotherBallSubType2["LARGE"] = 0] = "LARGE";
        MotherBallSubType2[MotherBallSubType2["MEDIUM"] = 1] = "MEDIUM";
        MotherBallSubType2[MotherBallSubType2["SMALL"] = 2] = "SMALL";
      })(MotherBallSubType || (exports2.MotherBallSubType = MotherBallSubType = {}));
      var BloodExplosionSubType;
      (function(BloodExplosionSubType2) {
        BloodExplosionSubType2[BloodExplosionSubType2["MEDIUM_WITH_LEFTOVER_BLOOD"] = 0] = "MEDIUM_WITH_LEFTOVER_BLOOD";
        BloodExplosionSubType2[BloodExplosionSubType2["SMALL"] = 1] = "SMALL";
        BloodExplosionSubType2[BloodExplosionSubType2["MEDIUM"] = 2] = "MEDIUM";
        BloodExplosionSubType2[BloodExplosionSubType2["LARGE"] = 3] = "LARGE";
        BloodExplosionSubType2[BloodExplosionSubType2["GIANT"] = 4] = "GIANT";
        BloodExplosionSubType2[BloodExplosionSubType2["SWIRL"] = 5] = "SWIRL";
      })(BloodExplosionSubType || (exports2.BloodExplosionSubType = BloodExplosionSubType = {}));
      var GibSubType;
      (function(GibSubType2) {
        GibSubType2[GibSubType2["BLOOD"] = 0] = "BLOOD";
        GibSubType2[GibSubType2["BONE"] = 1] = "BONE";
        GibSubType2[GibSubType2["GUT"] = 2] = "GUT";
        GibSubType2[GibSubType2["EYE"] = 3] = "EYE";
      })(GibSubType || (exports2.GibSubType = GibSubType = {}));
      var PoofSubType;
      (function(PoofSubType2) {
        PoofSubType2[PoofSubType2["NORMAL"] = 0] = "NORMAL";
        PoofSubType2[PoofSubType2["SMALL"] = 1] = "SMALL";
        PoofSubType2[PoofSubType2["LARGE"] = 3] = "LARGE";
      })(PoofSubType || (exports2.PoofSubType = PoofSubType = {}));
      var HeavenLightDoorSubType;
      (function(HeavenLightDoorSubType2) {
        HeavenLightDoorSubType2[HeavenLightDoorSubType2["HEAVEN_DOOR"] = 0] = "HEAVEN_DOOR";
        HeavenLightDoorSubType2[HeavenLightDoorSubType2["MOONLIGHT"] = 1] = "MOONLIGHT";
      })(HeavenLightDoorSubType || (exports2.HeavenLightDoorSubType = HeavenLightDoorSubType = {}));
      var CarpetSubType;
      (function(CarpetSubType2) {
        CarpetSubType2[CarpetSubType2["ISAACS_CARPET"] = 0] = "ISAACS_CARPET";
        CarpetSubType2[CarpetSubType2["MOMS_CARPET_1"] = 1] = "MOMS_CARPET_1";
        CarpetSubType2[CarpetSubType2["MOMS_CARPET_2"] = 2] = "MOMS_CARPET_2";
      })(CarpetSubType || (exports2.CarpetSubType = CarpetSubType = {}));
      var DiceFloorSubType;
      (function(DiceFloorSubType2) {
        DiceFloorSubType2[DiceFloorSubType2["ONE_PIP"] = 0] = "ONE_PIP";
        DiceFloorSubType2[DiceFloorSubType2["TWO_PIP"] = 1] = "TWO_PIP";
        DiceFloorSubType2[DiceFloorSubType2["THREE_PIP"] = 2] = "THREE_PIP";
        DiceFloorSubType2[DiceFloorSubType2["FOUR_PIP"] = 3] = "FOUR_PIP";
        DiceFloorSubType2[DiceFloorSubType2["FIVE_PIP"] = 4] = "FIVE_PIP";
        DiceFloorSubType2[DiceFloorSubType2["SIX_PIP"] = 5] = "SIX_PIP";
      })(DiceFloorSubType || (exports2.DiceFloorSubType = DiceFloorSubType = {}));
      var TallLadderSubType;
      (function(TallLadderSubType2) {
        TallLadderSubType2[TallLadderSubType2["TALL_LADDER"] = 0] = "TALL_LADDER";
        TallLadderSubType2[TallLadderSubType2["STAIRWAY"] = 1] = "STAIRWAY";
      })(TallLadderSubType || (exports2.TallLadderSubType = TallLadderSubType = {}));
      var PortalTeleportSubType;
      (function(PortalTeleportSubType2) {
        PortalTeleportSubType2[PortalTeleportSubType2["TREASURE_ROOM"] = 0] = "TREASURE_ROOM";
        PortalTeleportSubType2[PortalTeleportSubType2["BOSS_ROOM"] = 1] = "BOSS_ROOM";
        PortalTeleportSubType2[PortalTeleportSubType2["SECRET_ROOM"] = 2] = "SECRET_ROOM";
        PortalTeleportSubType2[PortalTeleportSubType2["RANDOM_ROOM"] = 3] = "RANDOM_ROOM";
      })(PortalTeleportSubType || (exports2.PortalTeleportSubType = PortalTeleportSubType = {}));
      var PurgatorySubType;
      (function(PurgatorySubType2) {
        PurgatorySubType2[PurgatorySubType2["RIFT"] = 0] = "RIFT";
        PurgatorySubType2[PurgatorySubType2["GHOST"] = 1] = "GHOST";
      })(PurgatorySubType || (exports2.PurgatorySubType = PurgatorySubType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/collections/variants.js
  var require_variants = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/collections/variants.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SuckerVariant = exports2.EyeVariant = exports2.ParaBiteVariant = exports2.MemBrainVariant = exports2.LeechVariant = exports2.DopleVariant = exports2.PrideVariant = exports2.EnvyVariant = exports2.GreedVariant = exports2.GluttonyVariant = exports2.WrathVariant = exports2.LustVariant = exports2.SlothVariant = exports2.MomVariant = exports2.PokyVariant = exports2.Monstro2Variant = exports2.GrimaceVariant = exports2.KnightVariant = exports2.GutsVariant = exports2.VisVariant = exports2.BabyVariant = exports2.MrMawVariant = exports2.LeaperVariant = exports2.FireplaceVariant = exports2.SpittyVariant = exports2.BoilVariant = exports2.HopperVariant = exports2.ChubVariant = exports2.HostVariant = exports2.MawVariant = exports2.BoomFlyVariant = exports2.GlobinVariant = exports2.ChargerVariant = exports2.HiveVariant = exports2.LarryJrVariant = exports2.ShopkeeperVariant = exports2.MulliganVariant = exports2.ClottyVariant = exports2.PooterVariant = exports2.GusherVariant = exports2.GaperVariant = exports2.ProjectileVariant = exports2.KnifeVariant = exports2.LaserVariant = exports2.SlotVariant = exports2.PickupVariant = exports2.BombVariant = exports2.FamiliarVariant = exports2.TearVariant = exports2.PlayerVariant = void 0;
      exports2.UltraCoinVariant = exports2.MoveableTNTVariant = exports2.PitfallVariant = exports2.MegaSatanVariant = exports2.LambVariant = exports2.AngelVariant = exports2.PolycephalusVariant = exports2.MamaGurdyVariant = exports2.DingleVariant = exports2.HauntVariant = exports2.ConjoinedFattyVariant = exports2.BegottenVariant = exports2.RaglingVariant = exports2.PoopEntityVariant = exports2.RoundWormVariant = exports2.RageCreepVariant = exports2.WallCreepVariant = exports2.GrubVariant = exports2.GurglingVariant = exports2.NerveEndingVariant = exports2.TumorVariant = exports2.HomunculusVariant = exports2.BonyVariant = exports2.SkinnyVariant = exports2.SquirtVariant = exports2.DipVariant = exports2.SwingerVariant = exports2.DeathsHeadVariant = exports2.FattyVariant = exports2.CrazyLongLegsVariant = exports2.BabyLongLegsVariant = exports2.ConstantStoneShooterVariant = exports2.IsaacVariant = exports2.DaddyLongLegsVariant = exports2.WidowVariant = exports2.MaskVariant = exports2.HeartVariant = exports2.WalkingBoilVariant = exports2.GurgleVariant = exports2.SatanVariant = exports2.FallenVariant = exports2.GeminiVariant = exports2.MomsHeartVariant = exports2.FistulaVariant = exports2.LokiVariant = exports2.PeepVariant = exports2.DukeOfFliesVariant = exports2.DeathVariant = exports2.WarVariant = exports2.PinVariant = void 0;
      exports2.EffectVariant = exports2.GenericPropVariant = exports2.BeastVariant = exports2.DogmaVariant = exports2.ClutchVariant = exports2.RaglichVariant = exports2.SingeVariant = exports2.MotherVariant = exports2.RotgutVariant = exports2.ChimeraVariant = exports2.ScourgeVariant = exports2.SirenVariant = exports2.VisageVariant = exports2.GoatVariant = exports2.VisFattyVariant = exports2.CultistVariant = exports2.NeedleVariant = exports2.DumpVariant = exports2.DarkEsauVariant = exports2.EvisVariant = exports2.Charger2Variant = exports2.Gaper2Variant = exports2.CanaryVariant = exports2.RevenantVariant = exports2.PeeperFattyVariant = exports2.WhipperVariant = exports2.ExorcistVariant = exports2.GuttyFattyVariant = exports2.BigBonyVariant = exports2.MoleVariant = exports2.FacelessVariant = exports2.GyroVariant = exports2.DannyVariant = exports2.FlyBombVariant = exports2.RockSpiderVariant = exports2.PreyVariant = exports2.PoltyVariant = exports2.SubHorfVariant = exports2.BloodPuppyVariant = exports2.BigHornVariant = exports2.RagMegaVariant = exports2.UltraGreedVariant = exports2.RagManVariant = exports2.LittleHornVariant = exports2.MrMineVariant = exports2.LeperVariant = exports2.PortalVariant = exports2.StoneyVariant = void 0;
      var PlayerVariant;
      (function(PlayerVariant2) {
        PlayerVariant2[PlayerVariant2["PLAYER"] = 0] = "PLAYER";
        PlayerVariant2[PlayerVariant2["COOP_BABY"] = 1] = "COOP_BABY";
      })(PlayerVariant || (exports2.PlayerVariant = PlayerVariant = {}));
      var TearVariant;
      (function(TearVariant2) {
        TearVariant2[TearVariant2["BLUE"] = 0] = "BLUE";
        TearVariant2[TearVariant2["BLOOD"] = 1] = "BLOOD";
        TearVariant2[TearVariant2["TOOTH"] = 2] = "TOOTH";
        TearVariant2[TearVariant2["METALLIC"] = 3] = "METALLIC";
        TearVariant2[TearVariant2["BOBS_HEAD"] = 4] = "BOBS_HEAD";
        TearVariant2[TearVariant2["FIRE_MIND"] = 5] = "FIRE_MIND";
        TearVariant2[TearVariant2["DARK_MATTER"] = 6] = "DARK_MATTER";
        TearVariant2[TearVariant2["MYSTERIOUS"] = 7] = "MYSTERIOUS";
        TearVariant2[TearVariant2["SCHYTHE"] = 8] = "SCHYTHE";
        TearVariant2[TearVariant2["CHAOS_CARD"] = 9] = "CHAOS_CARD";
        TearVariant2[TearVariant2["LOST_CONTACT"] = 10] = "LOST_CONTACT";
        TearVariant2[TearVariant2["CUPID_BLUE"] = 11] = "CUPID_BLUE";
        TearVariant2[TearVariant2["CUPID_BLOOD"] = 12] = "CUPID_BLOOD";
        TearVariant2[TearVariant2["NAIL"] = 13] = "NAIL";
        TearVariant2[TearVariant2["PUPULA"] = 14] = "PUPULA";
        TearVariant2[TearVariant2["PUPULA_BLOOD"] = 15] = "PUPULA_BLOOD";
        TearVariant2[TearVariant2["GODS_FLESH"] = 16] = "GODS_FLESH";
        TearVariant2[TearVariant2["GODS_FLESH_BLOOD"] = 17] = "GODS_FLESH_BLOOD";
        TearVariant2[TearVariant2["DIAMOND"] = 18] = "DIAMOND";
        TearVariant2[TearVariant2["EXPLOSIVO"] = 19] = "EXPLOSIVO";
        TearVariant2[TearVariant2["COIN"] = 20] = "COIN";
        TearVariant2[TearVariant2["MULTIDIMENSIONAL"] = 21] = "MULTIDIMENSIONAL";
        TearVariant2[TearVariant2["STONE"] = 22] = "STONE";
        TearVariant2[TearVariant2["NAIL_BLOOD"] = 23] = "NAIL_BLOOD";
        TearVariant2[TearVariant2["GLAUCOMA"] = 24] = "GLAUCOMA";
        TearVariant2[TearVariant2["GLAUCOMA_BLOOD"] = 25] = "GLAUCOMA_BLOOD";
        TearVariant2[TearVariant2["BOOGER"] = 26] = "BOOGER";
        TearVariant2[TearVariant2["EGG"] = 27] = "EGG";
        TearVariant2[TearVariant2["RAZOR"] = 28] = "RAZOR";
        TearVariant2[TearVariant2["BONE"] = 29] = "BONE";
        TearVariant2[TearVariant2["BLACK_TOOTH"] = 30] = "BLACK_TOOTH";
        TearVariant2[TearVariant2["NEEDLE"] = 31] = "NEEDLE";
        TearVariant2[TearVariant2["BELIAL"] = 32] = "BELIAL";
        TearVariant2[TearVariant2["EYE"] = 33] = "EYE";
        TearVariant2[TearVariant2["EYE_BLOOD"] = 34] = "EYE_BLOOD";
        TearVariant2[TearVariant2["BALLOON"] = 35] = "BALLOON";
        TearVariant2[TearVariant2["HUNGRY"] = 36] = "HUNGRY";
        TearVariant2[TearVariant2["BALLOON_BRIMSTONE"] = 37] = "BALLOON_BRIMSTONE";
        TearVariant2[TearVariant2["BALLOON_BOMB"] = 38] = "BALLOON_BOMB";
        TearVariant2[TearVariant2["FIST"] = 39] = "FIST";
        TearVariant2[TearVariant2["GRID_ENTITY"] = 40] = "GRID_ENTITY";
        TearVariant2[TearVariant2["ICE"] = 41] = "ICE";
        TearVariant2[TearVariant2["ROCK"] = 42] = "ROCK";
        TearVariant2[TearVariant2["KEY"] = 43] = "KEY";
        TearVariant2[TearVariant2["KEY_BLOOD"] = 44] = "KEY_BLOOD";
        TearVariant2[TearVariant2["ERASER"] = 45] = "ERASER";
        TearVariant2[TearVariant2["FIRE"] = 46] = "FIRE";
        TearVariant2[TearVariant2["SWORD_BEAM"] = 47] = "SWORD_BEAM";
        TearVariant2[TearVariant2["SPORE"] = 48] = "SPORE";
        TearVariant2[TearVariant2["TECH_SWORD_BEAM"] = 49] = "TECH_SWORD_BEAM";
        TearVariant2[TearVariant2["FETUS"] = 50] = "FETUS";
      })(TearVariant || (exports2.TearVariant = TearVariant = {}));
      var FamiliarVariant;
      (function(FamiliarVariant2) {
        FamiliarVariant2[FamiliarVariant2["FAMILIAR_NULL"] = 0] = "FAMILIAR_NULL";
        FamiliarVariant2[FamiliarVariant2["BROTHER_BOBBY"] = 1] = "BROTHER_BOBBY";
        FamiliarVariant2[FamiliarVariant2["DEMON_BABY"] = 2] = "DEMON_BABY";
        FamiliarVariant2[FamiliarVariant2["LITTLE_CHUBBY"] = 3] = "LITTLE_CHUBBY";
        FamiliarVariant2[FamiliarVariant2["LITTLE_GISH"] = 4] = "LITTLE_GISH";
        FamiliarVariant2[FamiliarVariant2["LITTLE_STEVEN"] = 5] = "LITTLE_STEVEN";
        FamiliarVariant2[FamiliarVariant2["ROBO_BABY"] = 6] = "ROBO_BABY";
        FamiliarVariant2[FamiliarVariant2["SISTER_MAGGY"] = 7] = "SISTER_MAGGY";
        FamiliarVariant2[FamiliarVariant2["ABEL"] = 8] = "ABEL";
        FamiliarVariant2[FamiliarVariant2["GHOST_BABY"] = 9] = "GHOST_BABY";
        FamiliarVariant2[FamiliarVariant2["HARLEQUIN_BABY"] = 10] = "HARLEQUIN_BABY";
        FamiliarVariant2[FamiliarVariant2["RAINBOW_BABY"] = 11] = "RAINBOW_BABY";
        FamiliarVariant2[FamiliarVariant2["ISAACS_HEAD"] = 12] = "ISAACS_HEAD";
        FamiliarVariant2[FamiliarVariant2["BLUE_BABY_SOUL"] = 13] = "BLUE_BABY_SOUL";
        FamiliarVariant2[FamiliarVariant2["DEAD_BIRD"] = 14] = "DEAD_BIRD";
        FamiliarVariant2[FamiliarVariant2["EVES_BIRD_FOOT"] = 15] = "EVES_BIRD_FOOT";
        FamiliarVariant2[FamiliarVariant2["DADDY_LONGLEGS"] = 16] = "DADDY_LONGLEGS";
        FamiliarVariant2[FamiliarVariant2["PEEPER"] = 17] = "PEEPER";
        FamiliarVariant2[FamiliarVariant2["BOMB_BAG"] = 20] = "BOMB_BAG";
        FamiliarVariant2[FamiliarVariant2["SACK_OF_PENNIES"] = 21] = "SACK_OF_PENNIES";
        FamiliarVariant2[FamiliarVariant2["LITTLE_CHAD"] = 22] = "LITTLE_CHAD";
        FamiliarVariant2[FamiliarVariant2["RELIC"] = 23] = "RELIC";
        FamiliarVariant2[FamiliarVariant2["BUM_FRIEND"] = 24] = "BUM_FRIEND";
        FamiliarVariant2[FamiliarVariant2["HOLY_WATER"] = 25] = "HOLY_WATER";
        FamiliarVariant2[FamiliarVariant2["KEY_PIECE_1"] = 26] = "KEY_PIECE_1";
        FamiliarVariant2[FamiliarVariant2["KEY_PIECE_2"] = 27] = "KEY_PIECE_2";
        FamiliarVariant2[FamiliarVariant2["KEY_FULL"] = 28] = "KEY_FULL";
        FamiliarVariant2[FamiliarVariant2["FOREVER_ALONE"] = 30] = "FOREVER_ALONE";
        FamiliarVariant2[FamiliarVariant2["DISTANT_ADMIRATION"] = 31] = "DISTANT_ADMIRATION";
        FamiliarVariant2[FamiliarVariant2["GUARDIAN_ANGEL"] = 32] = "GUARDIAN_ANGEL";
        FamiliarVariant2[FamiliarVariant2["FLY_ORBITAL"] = 33] = "FLY_ORBITAL";
        FamiliarVariant2[FamiliarVariant2["SACRIFICIAL_DAGGER"] = 35] = "SACRIFICIAL_DAGGER";
        FamiliarVariant2[FamiliarVariant2["DEAD_CAT"] = 40] = "DEAD_CAT";
        FamiliarVariant2[FamiliarVariant2["ONE_UP"] = 41] = "ONE_UP";
        FamiliarVariant2[FamiliarVariant2["GUPPYS_HAIRBALL"] = 42] = "GUPPYS_HAIRBALL";
        FamiliarVariant2[FamiliarVariant2["BLUE_FLY"] = 43] = "BLUE_FLY";
        FamiliarVariant2[FamiliarVariant2["CUBE_OF_MEAT_1"] = 44] = "CUBE_OF_MEAT_1";
        FamiliarVariant2[FamiliarVariant2["CUBE_OF_MEAT_2"] = 45] = "CUBE_OF_MEAT_2";
        FamiliarVariant2[FamiliarVariant2["CUBE_OF_MEAT_3"] = 46] = "CUBE_OF_MEAT_3";
        FamiliarVariant2[FamiliarVariant2["CUBE_OF_MEAT_4"] = 47] = "CUBE_OF_MEAT_4";
        FamiliarVariant2[FamiliarVariant2["ISAACS_BODY"] = 48] = "ISAACS_BODY";
        FamiliarVariant2[FamiliarVariant2["SMART_FLY"] = 50] = "SMART_FLY";
        FamiliarVariant2[FamiliarVariant2["DRY_BABY"] = 51] = "DRY_BABY";
        FamiliarVariant2[FamiliarVariant2["JUICY_SACK"] = 52] = "JUICY_SACK";
        FamiliarVariant2[FamiliarVariant2["ROBO_BABY_2"] = 53] = "ROBO_BABY_2";
        FamiliarVariant2[FamiliarVariant2["ROTTEN_BABY"] = 54] = "ROTTEN_BABY";
        FamiliarVariant2[FamiliarVariant2["HEADLESS_BABY"] = 55] = "HEADLESS_BABY";
        FamiliarVariant2[FamiliarVariant2["LEECH"] = 56] = "LEECH";
        FamiliarVariant2[FamiliarVariant2["MYSTERY_SACK"] = 57] = "MYSTERY_SACK";
        FamiliarVariant2[FamiliarVariant2["BBF"] = 58] = "BBF";
        FamiliarVariant2[FamiliarVariant2["BOBS_BRAIN"] = 59] = "BOBS_BRAIN";
        FamiliarVariant2[FamiliarVariant2["BEST_BUD"] = 60] = "BEST_BUD";
        FamiliarVariant2[FamiliarVariant2["LIL_BRIMSTONE"] = 61] = "LIL_BRIMSTONE";
        FamiliarVariant2[FamiliarVariant2["ISAACS_HEART"] = 62] = "ISAACS_HEART";
        FamiliarVariant2[FamiliarVariant2["LIL_HAUNT"] = 63] = "LIL_HAUNT";
        FamiliarVariant2[FamiliarVariant2["DARK_BUM"] = 64] = "DARK_BUM";
        FamiliarVariant2[FamiliarVariant2["BIG_FAN"] = 65] = "BIG_FAN";
        FamiliarVariant2[FamiliarVariant2["SISSY_LONGLEGS"] = 66] = "SISSY_LONGLEGS";
        FamiliarVariant2[FamiliarVariant2["PUNCHING_BAG"] = 67] = "PUNCHING_BAG";
        FamiliarVariant2[FamiliarVariant2["GUILLOTINE"] = 68] = "GUILLOTINE";
        FamiliarVariant2[FamiliarVariant2["BALL_OF_BANDAGES_1"] = 69] = "BALL_OF_BANDAGES_1";
        FamiliarVariant2[FamiliarVariant2["BALL_OF_BANDAGES_2"] = 70] = "BALL_OF_BANDAGES_2";
        FamiliarVariant2[FamiliarVariant2["BALL_OF_BANDAGES_3"] = 71] = "BALL_OF_BANDAGES_3";
        FamiliarVariant2[FamiliarVariant2["BALL_OF_BANDAGES_4"] = 72] = "BALL_OF_BANDAGES_4";
        FamiliarVariant2[FamiliarVariant2["BLUE_SPIDER"] = 73] = "BLUE_SPIDER";
        FamiliarVariant2[FamiliarVariant2["MONGO_BABY"] = 74] = "MONGO_BABY";
        FamiliarVariant2[FamiliarVariant2["SAMSONS_CHAINS"] = 75] = "SAMSONS_CHAINS";
        FamiliarVariant2[FamiliarVariant2["CAINS_OTHER_EYE"] = 76] = "CAINS_OTHER_EYE";
        FamiliarVariant2[FamiliarVariant2["BLUE_BABYS_ONLY_FRIEND"] = 77] = "BLUE_BABYS_ONLY_FRIEND";
        FamiliarVariant2[FamiliarVariant2["SCISSORS"] = 78] = "SCISSORS";
        FamiliarVariant2[FamiliarVariant2["GEMINI"] = 79] = "GEMINI";
        FamiliarVariant2[FamiliarVariant2["INCUBUS"] = 80] = "INCUBUS";
        FamiliarVariant2[FamiliarVariant2["FATES_REWARD"] = 81] = "FATES_REWARD";
        FamiliarVariant2[FamiliarVariant2["LIL_CHEST"] = 82] = "LIL_CHEST";
        FamiliarVariant2[FamiliarVariant2["SWORN_PROTECTOR"] = 83] = "SWORN_PROTECTOR";
        FamiliarVariant2[FamiliarVariant2["FRIEND_ZONE"] = 84] = "FRIEND_ZONE";
        FamiliarVariant2[FamiliarVariant2["LOST_FLY"] = 85] = "LOST_FLY";
        FamiliarVariant2[FamiliarVariant2["CHARGED_BABY"] = 86] = "CHARGED_BABY";
        FamiliarVariant2[FamiliarVariant2["LIL_GURDY"] = 87] = "LIL_GURDY";
        FamiliarVariant2[FamiliarVariant2["BUMBO"] = 88] = "BUMBO";
        FamiliarVariant2[FamiliarVariant2["CENSER"] = 89] = "CENSER";
        FamiliarVariant2[FamiliarVariant2["KEY_BUM"] = 90] = "KEY_BUM";
        FamiliarVariant2[FamiliarVariant2["RUNE_BAG"] = 91] = "RUNE_BAG";
        FamiliarVariant2[FamiliarVariant2["SERAPHIM"] = 92] = "SERAPHIM";
        FamiliarVariant2[FamiliarVariant2["GB_BUG"] = 93] = "GB_BUG";
        FamiliarVariant2[FamiliarVariant2["SPIDER_MOD"] = 94] = "SPIDER_MOD";
        FamiliarVariant2[FamiliarVariant2["FARTING_BABY"] = 95] = "FARTING_BABY";
        FamiliarVariant2[FamiliarVariant2["SUCCUBUS"] = 96] = "SUCCUBUS";
        FamiliarVariant2[FamiliarVariant2["LIL_LOKI"] = 97] = "LIL_LOKI";
        FamiliarVariant2[FamiliarVariant2["OBSESSED_FAN"] = 98] = "OBSESSED_FAN";
        FamiliarVariant2[FamiliarVariant2["PAPA_FLY"] = 99] = "PAPA_FLY";
        FamiliarVariant2[FamiliarVariant2["MILK"] = 100] = "MILK";
        FamiliarVariant2[FamiliarVariant2["MULTIDIMENSIONAL_BABY"] = 101] = "MULTIDIMENSIONAL_BABY";
        FamiliarVariant2[FamiliarVariant2["SUPER_BUM"] = 102] = "SUPER_BUM";
        FamiliarVariant2[FamiliarVariant2["TONSIL"] = 103] = "TONSIL";
        FamiliarVariant2[FamiliarVariant2["BIG_CHUBBY"] = 104] = "BIG_CHUBBY";
        FamiliarVariant2[FamiliarVariant2["DEPRESSION"] = 105] = "DEPRESSION";
        FamiliarVariant2[FamiliarVariant2["SHADE"] = 106] = "SHADE";
        FamiliarVariant2[FamiliarVariant2["HUSHY"] = 107] = "HUSHY";
        FamiliarVariant2[FamiliarVariant2["LIL_MONSTRO"] = 108] = "LIL_MONSTRO";
        FamiliarVariant2[FamiliarVariant2["KING_BABY"] = 109] = "KING_BABY";
        FamiliarVariant2[FamiliarVariant2["FINGER"] = 110] = "FINGER";
        FamiliarVariant2[FamiliarVariant2["YO_LISTEN"] = 111] = "YO_LISTEN";
        FamiliarVariant2[FamiliarVariant2["ACID_BABY"] = 112] = "ACID_BABY";
        FamiliarVariant2[FamiliarVariant2["SPIDER_BABY"] = 113] = "SPIDER_BABY";
        FamiliarVariant2[FamiliarVariant2["SACK_OF_SACKS"] = 114] = "SACK_OF_SACKS";
        FamiliarVariant2[FamiliarVariant2["BROWN_NUGGET_POOTER"] = 115] = "BROWN_NUGGET_POOTER";
        FamiliarVariant2[FamiliarVariant2["BLOODSHOT_EYE"] = 116] = "BLOODSHOT_EYE";
        FamiliarVariant2[FamiliarVariant2["MOMS_RAZOR"] = 117] = "MOMS_RAZOR";
        FamiliarVariant2[FamiliarVariant2["ANGRY_FLY"] = 118] = "ANGRY_FLY";
        FamiliarVariant2[FamiliarVariant2["BUDDY_IN_A_BOX"] = 119] = "BUDDY_IN_A_BOX";
        FamiliarVariant2[FamiliarVariant2["SPRINKLER"] = 120] = "SPRINKLER";
        FamiliarVariant2[FamiliarVariant2["LEPROSY"] = 121] = "LEPROSY";
        FamiliarVariant2[FamiliarVariant2["LIL_HARBINGERS"] = 122] = "LIL_HARBINGERS";
        FamiliarVariant2[FamiliarVariant2["ANGELIC_PRISM"] = 123] = "ANGELIC_PRISM";
        FamiliarVariant2[FamiliarVariant2["MYSTERY_EGG"] = 124] = "MYSTERY_EGG";
        FamiliarVariant2[FamiliarVariant2["LIL_SPEWER"] = 125] = "LIL_SPEWER";
        FamiliarVariant2[FamiliarVariant2["SLIPPED_RIB"] = 126] = "SLIPPED_RIB";
        FamiliarVariant2[FamiliarVariant2["POINTY_RIB"] = 127] = "POINTY_RIB";
        FamiliarVariant2[FamiliarVariant2["BONE_ORBITAL"] = 128] = "BONE_ORBITAL";
        FamiliarVariant2[FamiliarVariant2["HALLOWED_GROUND"] = 129] = "HALLOWED_GROUND";
        FamiliarVariant2[FamiliarVariant2["JAW_BONE"] = 130] = "JAW_BONE";
        FamiliarVariant2[FamiliarVariant2["INTRUDER"] = 200] = "INTRUDER";
        FamiliarVariant2[FamiliarVariant2["DIP"] = 201] = "DIP";
        FamiliarVariant2[FamiliarVariant2["DAMOCLES"] = 202] = "DAMOCLES";
        FamiliarVariant2[FamiliarVariant2["BLOOD_OATH"] = 203] = "BLOOD_OATH";
        FamiliarVariant2[FamiliarVariant2["PSY_FLY"] = 204] = "PSY_FLY";
        FamiliarVariant2[FamiliarVariant2["MENORAH"] = 205] = "MENORAH";
        FamiliarVariant2[FamiliarVariant2["WISP"] = 206] = "WISP";
        FamiliarVariant2[FamiliarVariant2["PEEPER_2"] = 207] = "PEEPER_2";
        FamiliarVariant2[FamiliarVariant2["BOILED_BABY"] = 208] = "BOILED_BABY";
        FamiliarVariant2[FamiliarVariant2["FREEZER_BABY"] = 209] = "FREEZER_BABY";
        FamiliarVariant2[FamiliarVariant2["BIRD_CAGE"] = 210] = "BIRD_CAGE";
        FamiliarVariant2[FamiliarVariant2["LOST_SOUL"] = 211] = "LOST_SOUL";
        FamiliarVariant2[FamiliarVariant2["LIL_DUMPY"] = 212] = "LIL_DUMPY";
        FamiliarVariant2[FamiliarVariant2["KNIFE_PIECE_1"] = 213] = "KNIFE_PIECE_1";
        FamiliarVariant2[FamiliarVariant2["KNIFE_PIECE_2"] = 214] = "KNIFE_PIECE_2";
        FamiliarVariant2[FamiliarVariant2["TINYTOMA"] = 216] = "TINYTOMA";
        FamiliarVariant2[FamiliarVariant2["TINYTOMA_2"] = 217] = "TINYTOMA_2";
        FamiliarVariant2[FamiliarVariant2["BOT_FLY"] = 218] = "BOT_FLY";
        FamiliarVariant2[FamiliarVariant2["SIREN_MINION"] = 220] = "SIREN_MINION";
        FamiliarVariant2[FamiliarVariant2["PASCHAL_CANDLE"] = 221] = "PASCHAL_CANDLE";
        FamiliarVariant2[FamiliarVariant2["STITCHES"] = 222] = "STITCHES";
        FamiliarVariant2[FamiliarVariant2["KNIFE_FULL"] = 223] = "KNIFE_FULL";
        FamiliarVariant2[FamiliarVariant2["BABY_PLUM"] = 224] = "BABY_PLUM";
        FamiliarVariant2[FamiliarVariant2["FRUITY_PLUM"] = 225] = "FRUITY_PLUM";
        FamiliarVariant2[FamiliarVariant2["SPIN_TO_WIN"] = 226] = "SPIN_TO_WIN";
        FamiliarVariant2[FamiliarVariant2["MINISAAC"] = 228] = "MINISAAC";
        FamiliarVariant2[FamiliarVariant2["SWARM_FLY_ORBITAL"] = 229] = "SWARM_FLY_ORBITAL";
        FamiliarVariant2[FamiliarVariant2["LIL_ABADDON"] = 230] = "LIL_ABADDON";
        FamiliarVariant2[FamiliarVariant2["ABYSS_LOCUST"] = 231] = "ABYSS_LOCUST";
        FamiliarVariant2[FamiliarVariant2["LIL_PORTAL"] = 232] = "LIL_PORTAL";
        FamiliarVariant2[FamiliarVariant2["WORM_FRIEND"] = 233] = "WORM_FRIEND";
        FamiliarVariant2[FamiliarVariant2["BONE_SPUR"] = 234] = "BONE_SPUR";
        FamiliarVariant2[FamiliarVariant2["TWISTED_BABY"] = 235] = "TWISTED_BABY";
        FamiliarVariant2[FamiliarVariant2["STAR_OF_BETHLEHEM"] = 236] = "STAR_OF_BETHLEHEM";
        FamiliarVariant2[FamiliarVariant2["ITEM_WISP"] = 237] = "ITEM_WISP";
        FamiliarVariant2[FamiliarVariant2["BLOOD_BABY"] = 238] = "BLOOD_BABY";
        FamiliarVariant2[FamiliarVariant2["CUBE_BABY"] = 239] = "CUBE_BABY";
        FamiliarVariant2[FamiliarVariant2["UMBILICAL_BABY"] = 240] = "UMBILICAL_BABY";
        FamiliarVariant2[FamiliarVariant2["BLOOD_PUPPY"] = 241] = "BLOOD_PUPPY";
        FamiliarVariant2[FamiliarVariant2["VANISHING_TWIN"] = 242] = "VANISHING_TWIN";
        FamiliarVariant2[FamiliarVariant2["DECAP_ATTACK"] = 243] = "DECAP_ATTACK";
        FamiliarVariant2[FamiliarVariant2["FORGOTTEN_BODY"] = 900] = "FORGOTTEN_BODY";
      })(FamiliarVariant || (exports2.FamiliarVariant = FamiliarVariant = {}));
      var BombVariant;
      (function(BombVariant2) {
        BombVariant2[BombVariant2["NORMAL"] = 0] = "NORMAL";
        BombVariant2[BombVariant2["BIG"] = 1] = "BIG";
        BombVariant2[BombVariant2["DECOY"] = 2] = "DECOY";
        BombVariant2[BombVariant2["TROLL"] = 3] = "TROLL";
        BombVariant2[BombVariant2["MEGA_TROLL"] = 4] = "MEGA_TROLL";
        BombVariant2[BombVariant2["POISON"] = 5] = "POISON";
        BombVariant2[BombVariant2["POISON_BIG"] = 6] = "POISON_BIG";
        BombVariant2[BombVariant2["SAD"] = 7] = "SAD";
        BombVariant2[BombVariant2["HOT"] = 8] = "HOT";
        BombVariant2[BombVariant2["BUTT"] = 9] = "BUTT";
        BombVariant2[BombVariant2["MR_MEGA"] = 10] = "MR_MEGA";
        BombVariant2[BombVariant2["BOBBY"] = 11] = "BOBBY";
        BombVariant2[BombVariant2["GLITTER"] = 12] = "GLITTER";
        BombVariant2[BombVariant2["THROWABLE"] = 13] = "THROWABLE";
        BombVariant2[BombVariant2["SMALL"] = 14] = "SMALL";
        BombVariant2[BombVariant2["BRIMSTONE"] = 15] = "BRIMSTONE";
        BombVariant2[BombVariant2["SAD_BLOOD"] = 16] = "SAD_BLOOD";
        BombVariant2[BombVariant2["GIGA"] = 17] = "GIGA";
        BombVariant2[BombVariant2["GOLDEN_TROLL"] = 18] = "GOLDEN_TROLL";
        BombVariant2[BombVariant2["ROCKET"] = 19] = "ROCKET";
        BombVariant2[BombVariant2["ROCKET_GIGA"] = 20] = "ROCKET_GIGA";
      })(BombVariant || (exports2.BombVariant = BombVariant = {}));
      var PickupVariant;
      (function(PickupVariant2) {
        PickupVariant2[PickupVariant2["NULL"] = 0] = "NULL";
        PickupVariant2[PickupVariant2["HEART"] = 10] = "HEART";
        PickupVariant2[PickupVariant2["COIN"] = 20] = "COIN";
        PickupVariant2[PickupVariant2["KEY"] = 30] = "KEY";
        PickupVariant2[PickupVariant2["BOMB"] = 40] = "BOMB";
        PickupVariant2[PickupVariant2["THROWABLE_BOMB"] = 41] = "THROWABLE_BOMB";
        PickupVariant2[PickupVariant2["POOP"] = 42] = "POOP";
        PickupVariant2[PickupVariant2["CHEST"] = 50] = "CHEST";
        PickupVariant2[PickupVariant2["BOMB_CHEST"] = 51] = "BOMB_CHEST";
        PickupVariant2[PickupVariant2["SPIKED_CHEST"] = 52] = "SPIKED_CHEST";
        PickupVariant2[PickupVariant2["ETERNAL_CHEST"] = 53] = "ETERNAL_CHEST";
        PickupVariant2[PickupVariant2["MIMIC_CHEST"] = 54] = "MIMIC_CHEST";
        PickupVariant2[PickupVariant2["OLD_CHEST"] = 55] = "OLD_CHEST";
        PickupVariant2[PickupVariant2["WOODEN_CHEST"] = 56] = "WOODEN_CHEST";
        PickupVariant2[PickupVariant2["MEGA_CHEST"] = 57] = "MEGA_CHEST";
        PickupVariant2[PickupVariant2["HAUNTED_CHEST"] = 58] = "HAUNTED_CHEST";
        PickupVariant2[PickupVariant2["LOCKED_CHEST"] = 60] = "LOCKED_CHEST";
        PickupVariant2[PickupVariant2["SACK"] = 69] = "SACK";
        PickupVariant2[PickupVariant2["PILL"] = 70] = "PILL";
        PickupVariant2[PickupVariant2["LIL_BATTERY"] = 90] = "LIL_BATTERY";
        PickupVariant2[PickupVariant2["COLLECTIBLE"] = 100] = "COLLECTIBLE";
        PickupVariant2[PickupVariant2["BROKEN_SHOVEL"] = 110] = "BROKEN_SHOVEL";
        PickupVariant2[PickupVariant2["SHOP_ITEM"] = 150] = "SHOP_ITEM";
        PickupVariant2[PickupVariant2["CARD"] = 300] = "CARD";
        PickupVariant2[PickupVariant2["BIG_CHEST"] = 340] = "BIG_CHEST";
        PickupVariant2[PickupVariant2["TRINKET"] = 350] = "TRINKET";
        PickupVariant2[PickupVariant2["RED_CHEST"] = 360] = "RED_CHEST";
        PickupVariant2[PickupVariant2["TROPHY"] = 370] = "TROPHY";
        PickupVariant2[PickupVariant2["BED"] = 380] = "BED";
        PickupVariant2[PickupVariant2["MOMS_CHEST"] = 390] = "MOMS_CHEST";
      })(PickupVariant || (exports2.PickupVariant = PickupVariant = {}));
      var SlotVariant;
      (function(SlotVariant2) {
        SlotVariant2[SlotVariant2["SLOT_MACHINE"] = 1] = "SLOT_MACHINE";
        SlotVariant2[SlotVariant2["BLOOD_DONATION_MACHINE"] = 2] = "BLOOD_DONATION_MACHINE";
        SlotVariant2[SlotVariant2["FORTUNE_TELLING_MACHINE"] = 3] = "FORTUNE_TELLING_MACHINE";
        SlotVariant2[SlotVariant2["BEGGAR"] = 4] = "BEGGAR";
        SlotVariant2[SlotVariant2["DEVIL_BEGGAR"] = 5] = "DEVIL_BEGGAR";
        SlotVariant2[SlotVariant2["SHELL_GAME"] = 6] = "SHELL_GAME";
        SlotVariant2[SlotVariant2["KEY_MASTER"] = 7] = "KEY_MASTER";
        SlotVariant2[SlotVariant2["DONATION_MACHINE"] = 8] = "DONATION_MACHINE";
        SlotVariant2[SlotVariant2["BOMB_BUM"] = 9] = "BOMB_BUM";
        SlotVariant2[SlotVariant2["SHOP_RESTOCK_MACHINE"] = 10] = "SHOP_RESTOCK_MACHINE";
        SlotVariant2[SlotVariant2["GREED_DONATION_MACHINE"] = 11] = "GREED_DONATION_MACHINE";
        SlotVariant2[SlotVariant2["MOMS_DRESSING_TABLE"] = 12] = "MOMS_DRESSING_TABLE";
        SlotVariant2[SlotVariant2["BATTERY_BUM"] = 13] = "BATTERY_BUM";
        SlotVariant2[SlotVariant2["ISAAC_SECRET"] = 14] = "ISAAC_SECRET";
        SlotVariant2[SlotVariant2["HELL_GAME"] = 15] = "HELL_GAME";
        SlotVariant2[SlotVariant2["CRANE_GAME"] = 16] = "CRANE_GAME";
        SlotVariant2[SlotVariant2["CONFESSIONAL"] = 17] = "CONFESSIONAL";
        SlotVariant2[SlotVariant2["ROTTEN_BEGGAR"] = 18] = "ROTTEN_BEGGAR";
      })(SlotVariant || (exports2.SlotVariant = SlotVariant = {}));
      var LaserVariant;
      (function(LaserVariant2) {
        LaserVariant2[LaserVariant2["THICK_RED"] = 1] = "THICK_RED";
        LaserVariant2[LaserVariant2["THIN_RED"] = 2] = "THIN_RED";
        LaserVariant2[LaserVariant2["SHOOP_DA_WHOOP"] = 3] = "SHOOP_DA_WHOOP";
        LaserVariant2[LaserVariant2["PRIDE"] = 4] = "PRIDE";
        LaserVariant2[LaserVariant2["LIGHT_BEAM"] = 5] = "LIGHT_BEAM";
        LaserVariant2[LaserVariant2["GIANT_RED"] = 6] = "GIANT_RED";
        LaserVariant2[LaserVariant2["TRACTOR_BEAM"] = 7] = "TRACTOR_BEAM";
        LaserVariant2[LaserVariant2["LIGHT_RING"] = 8] = "LIGHT_RING";
        LaserVariant2[LaserVariant2["BRIMSTONE_TECHNOLOGY"] = 9] = "BRIMSTONE_TECHNOLOGY";
        LaserVariant2[LaserVariant2["ELECTRIC"] = 10] = "ELECTRIC";
        LaserVariant2[LaserVariant2["THICKER_RED"] = 11] = "THICKER_RED";
        LaserVariant2[LaserVariant2["THICK_BROWN"] = 12] = "THICK_BROWN";
        LaserVariant2[LaserVariant2["BEAST"] = 13] = "BEAST";
        LaserVariant2[LaserVariant2["THICKER_BRIMSTONE_TECHNOLOGY"] = 14] = "THICKER_BRIMSTONE_TECHNOLOGY";
        LaserVariant2[LaserVariant2["GIANT_BRIMSTONE_TECHNOLOGY"] = 15] = "GIANT_BRIMSTONE_TECHNOLOGY";
      })(LaserVariant || (exports2.LaserVariant = LaserVariant = {}));
      var KnifeVariant;
      (function(KnifeVariant2) {
        KnifeVariant2[KnifeVariant2["MOMS_KNIFE"] = 0] = "MOMS_KNIFE";
        KnifeVariant2[KnifeVariant2["BONE_CLUB"] = 1] = "BONE_CLUB";
        KnifeVariant2[KnifeVariant2["BONE_SCYTHE"] = 2] = "BONE_SCYTHE";
        KnifeVariant2[KnifeVariant2["DONKEY_JAWBONE"] = 3] = "DONKEY_JAWBONE";
        KnifeVariant2[KnifeVariant2["BAG_OF_CRAFTING"] = 4] = "BAG_OF_CRAFTING";
        KnifeVariant2[KnifeVariant2["SUMPTORIUM"] = 5] = "SUMPTORIUM";
        KnifeVariant2[KnifeVariant2["NOTCHED_AXE"] = 9] = "NOTCHED_AXE";
        KnifeVariant2[KnifeVariant2["SPIRIT_SWORD"] = 10] = "SPIRIT_SWORD";
        KnifeVariant2[KnifeVariant2["TECH_SWORD"] = 11] = "TECH_SWORD";
      })(KnifeVariant || (exports2.KnifeVariant = KnifeVariant = {}));
      var ProjectileVariant;
      (function(ProjectileVariant2) {
        ProjectileVariant2[ProjectileVariant2["NORMAL"] = 0] = "NORMAL";
        ProjectileVariant2[ProjectileVariant2["BONE"] = 1] = "BONE";
        ProjectileVariant2[ProjectileVariant2["FIRE"] = 2] = "FIRE";
        ProjectileVariant2[ProjectileVariant2["PUKE"] = 3] = "PUKE";
        ProjectileVariant2[ProjectileVariant2["TEAR"] = 4] = "TEAR";
        ProjectileVariant2[ProjectileVariant2["CORN"] = 5] = "CORN";
        ProjectileVariant2[ProjectileVariant2["HUSH"] = 6] = "HUSH";
        ProjectileVariant2[ProjectileVariant2["COIN"] = 7] = "COIN";
        ProjectileVariant2[ProjectileVariant2["GRID"] = 8] = "GRID";
        ProjectileVariant2[ProjectileVariant2["ROCK"] = 9] = "ROCK";
        ProjectileVariant2[ProjectileVariant2["RING"] = 10] = "RING";
        ProjectileVariant2[ProjectileVariant2["MEAT"] = 11] = "MEAT";
        ProjectileVariant2[ProjectileVariant2["FCUK"] = 12] = "FCUK";
        ProjectileVariant2[ProjectileVariant2["WING"] = 13] = "WING";
        ProjectileVariant2[ProjectileVariant2["LAVA"] = 14] = "LAVA";
        ProjectileVariant2[ProjectileVariant2["HEAD"] = 15] = "HEAD";
        ProjectileVariant2[ProjectileVariant2["PEEP"] = 16] = "PEEP";
      })(ProjectileVariant || (exports2.ProjectileVariant = ProjectileVariant = {}));
      var GaperVariant;
      (function(GaperVariant2) {
        GaperVariant2[GaperVariant2["FROWNING_GAPER"] = 0] = "FROWNING_GAPER";
        GaperVariant2[GaperVariant2["GAPER"] = 1] = "GAPER";
        GaperVariant2[GaperVariant2["FLAMING_GAPER"] = 2] = "FLAMING_GAPER";
        GaperVariant2[GaperVariant2["ROTTEN_GAPER"] = 3] = "ROTTEN_GAPER";
      })(GaperVariant || (exports2.GaperVariant = GaperVariant = {}));
      var GusherVariant;
      (function(GusherVariant2) {
        GusherVariant2[GusherVariant2["GUSHER"] = 0] = "GUSHER";
        GusherVariant2[GusherVariant2["PACER"] = 1] = "PACER";
      })(GusherVariant || (exports2.GusherVariant = GusherVariant = {}));
      var PooterVariant;
      (function(PooterVariant2) {
        PooterVariant2[PooterVariant2["POOTER"] = 0] = "POOTER";
        PooterVariant2[PooterVariant2["SUPER_POOTER"] = 1] = "SUPER_POOTER";
        PooterVariant2[PooterVariant2["TAINTED_POOTER"] = 2] = "TAINTED_POOTER";
      })(PooterVariant || (exports2.PooterVariant = PooterVariant = {}));
      var ClottyVariant;
      (function(ClottyVariant2) {
        ClottyVariant2[ClottyVariant2["CLOTTY"] = 0] = "CLOTTY";
        ClottyVariant2[ClottyVariant2["CLOT"] = 1] = "CLOT";
        ClottyVariant2[ClottyVariant2["BLOB"] = 2] = "BLOB";
        ClottyVariant2[ClottyVariant2["GRILLED_CLOTTY"] = 3] = "GRILLED_CLOTTY";
      })(ClottyVariant || (exports2.ClottyVariant = ClottyVariant = {}));
      var MulliganVariant;
      (function(MulliganVariant2) {
        MulliganVariant2[MulliganVariant2["MULLIGAN"] = 0] = "MULLIGAN";
        MulliganVariant2[MulliganVariant2["MULLIGOON"] = 1] = "MULLIGOON";
        MulliganVariant2[MulliganVariant2["MULLIBOOM"] = 2] = "MULLIBOOM";
      })(MulliganVariant || (exports2.MulliganVariant = MulliganVariant = {}));
      var ShopkeeperVariant;
      (function(ShopkeeperVariant2) {
        ShopkeeperVariant2[ShopkeeperVariant2["SHOPKEEPER"] = 0] = "SHOPKEEPER";
        ShopkeeperVariant2[ShopkeeperVariant2["SECRET_ROOM_KEEPER"] = 1] = "SECRET_ROOM_KEEPER";
        ShopkeeperVariant2[ShopkeeperVariant2["ERROR_ROOM_KEEPER"] = 2] = "ERROR_ROOM_KEEPER";
        ShopkeeperVariant2[ShopkeeperVariant2["SPECIAL_SHOPKEEPER"] = 3] = "SPECIAL_SHOPKEEPER";
        ShopkeeperVariant2[ShopkeeperVariant2["SPECIAL_SECRET_ROOM_KEEPER"] = 4] = "SPECIAL_SECRET_ROOM_KEEPER";
      })(ShopkeeperVariant || (exports2.ShopkeeperVariant = ShopkeeperVariant = {}));
      var LarryJrVariant;
      (function(LarryJrVariant2) {
        LarryJrVariant2[LarryJrVariant2["LARRY_JR"] = 0] = "LARRY_JR";
        LarryJrVariant2[LarryJrVariant2["HOLLOW"] = 1] = "HOLLOW";
        LarryJrVariant2[LarryJrVariant2["TUFF_TWIN"] = 2] = "TUFF_TWIN";
        LarryJrVariant2[LarryJrVariant2["SHELL"] = 3] = "SHELL";
      })(LarryJrVariant || (exports2.LarryJrVariant = LarryJrVariant = {}));
      var HiveVariant;
      (function(HiveVariant2) {
        HiveVariant2[HiveVariant2["HIVE"] = 0] = "HIVE";
        HiveVariant2[HiveVariant2["DROWNED_HIVE"] = 1] = "DROWNED_HIVE";
        HiveVariant2[HiveVariant2["HOLY_MULLIGAN"] = 2] = "HOLY_MULLIGAN";
        HiveVariant2[HiveVariant2["TAINTED_MULLIGAN"] = 3] = "TAINTED_MULLIGAN";
      })(HiveVariant || (exports2.HiveVariant = HiveVariant = {}));
      var ChargerVariant;
      (function(ChargerVariant2) {
        ChargerVariant2[ChargerVariant2["CHARGER"] = 0] = "CHARGER";
        ChargerVariant2[ChargerVariant2["DROWNED_CHARGER"] = 1] = "DROWNED_CHARGER";
        ChargerVariant2[ChargerVariant2["DANK_CHARGER"] = 2] = "DANK_CHARGER";
        ChargerVariant2[ChargerVariant2["CARRION_PRINCESS"] = 3] = "CARRION_PRINCESS";
      })(ChargerVariant || (exports2.ChargerVariant = ChargerVariant = {}));
      var GlobinVariant;
      (function(GlobinVariant2) {
        GlobinVariant2[GlobinVariant2["GLOBIN"] = 0] = "GLOBIN";
        GlobinVariant2[GlobinVariant2["GAZING_GLOBIN"] = 1] = "GAZING_GLOBIN";
        GlobinVariant2[GlobinVariant2["DANK_GLOBIN"] = 2] = "DANK_GLOBIN";
        GlobinVariant2[GlobinVariant2["CURSED_GLOBIN"] = 3] = "CURSED_GLOBIN";
      })(GlobinVariant || (exports2.GlobinVariant = GlobinVariant = {}));
      var BoomFlyVariant;
      (function(BoomFlyVariant2) {
        BoomFlyVariant2[BoomFlyVariant2["BOOM_FLY"] = 0] = "BOOM_FLY";
        BoomFlyVariant2[BoomFlyVariant2["RED_BOOM_FLY"] = 1] = "RED_BOOM_FLY";
        BoomFlyVariant2[BoomFlyVariant2["DROWNED_BOOM_FLY"] = 2] = "DROWNED_BOOM_FLY";
        BoomFlyVariant2[BoomFlyVariant2["DRAGON_FLY"] = 3] = "DRAGON_FLY";
        BoomFlyVariant2[BoomFlyVariant2["BONE_FLY"] = 4] = "BONE_FLY";
        BoomFlyVariant2[BoomFlyVariant2["SICK_BOOM_FLY"] = 5] = "SICK_BOOM_FLY";
        BoomFlyVariant2[BoomFlyVariant2["TAINTED_BOOM_FLY"] = 6] = "TAINTED_BOOM_FLY";
      })(BoomFlyVariant || (exports2.BoomFlyVariant = BoomFlyVariant = {}));
      var MawVariant;
      (function(MawVariant2) {
        MawVariant2[MawVariant2["MAW"] = 0] = "MAW";
        MawVariant2[MawVariant2["RED_MAW"] = 1] = "RED_MAW";
        MawVariant2[MawVariant2["PSYCHIC_MAW"] = 2] = "PSYCHIC_MAW";
      })(MawVariant || (exports2.MawVariant = MawVariant = {}));
      var HostVariant;
      (function(HostVariant2) {
        HostVariant2[HostVariant2["HOST"] = 0] = "HOST";
        HostVariant2[HostVariant2["RED_HOST"] = 1] = "RED_HOST";
        HostVariant2[HostVariant2["HARD_HOST"] = 3] = "HARD_HOST";
      })(HostVariant || (exports2.HostVariant = HostVariant = {}));
      var ChubVariant;
      (function(ChubVariant2) {
        ChubVariant2[ChubVariant2["CHUB"] = 0] = "CHUB";
        ChubVariant2[ChubVariant2["CHAD"] = 1] = "CHAD";
        ChubVariant2[ChubVariant2["CARRION_QUEEN"] = 2] = "CARRION_QUEEN";
      })(ChubVariant || (exports2.ChubVariant = ChubVariant = {}));
      var HopperVariant;
      (function(HopperVariant2) {
        HopperVariant2[HopperVariant2["HOPPER"] = 0] = "HOPPER";
        HopperVariant2[HopperVariant2["TRITE"] = 1] = "TRITE";
        HopperVariant2[HopperVariant2["EGGY"] = 2] = "EGGY";
        HopperVariant2[HopperVariant2["TAINTED_HOPPER"] = 3] = "TAINTED_HOPPER";
      })(HopperVariant || (exports2.HopperVariant = HopperVariant = {}));
      var BoilVariant;
      (function(BoilVariant2) {
        BoilVariant2[BoilVariant2["BOIL"] = 0] = "BOIL";
        BoilVariant2[BoilVariant2["GUT"] = 1] = "GUT";
        BoilVariant2[BoilVariant2["SACK"] = 2] = "SACK";
      })(BoilVariant || (exports2.BoilVariant = BoilVariant = {}));
      var SpittyVariant;
      (function(SpittyVariant2) {
        SpittyVariant2[SpittyVariant2["SPITTY"] = 0] = "SPITTY";
        SpittyVariant2[SpittyVariant2["TAINTED_SPITTY"] = 1] = "TAINTED_SPITTY";
      })(SpittyVariant || (exports2.SpittyVariant = SpittyVariant = {}));
      var FireplaceVariant;
      (function(FireplaceVariant2) {
        FireplaceVariant2[FireplaceVariant2["NORMAL"] = 0] = "NORMAL";
        FireplaceVariant2[FireplaceVariant2["RED"] = 1] = "RED";
        FireplaceVariant2[FireplaceVariant2["BLUE"] = 2] = "BLUE";
        FireplaceVariant2[FireplaceVariant2["PURPLE"] = 3] = "PURPLE";
        FireplaceVariant2[FireplaceVariant2["WHITE"] = 4] = "WHITE";
        FireplaceVariant2[FireplaceVariant2["MOVEABLE"] = 10] = "MOVEABLE";
        FireplaceVariant2[FireplaceVariant2["COAL"] = 11] = "COAL";
        FireplaceVariant2[FireplaceVariant2["MOVEABLE_BLUE"] = 12] = "MOVEABLE_BLUE";
        FireplaceVariant2[FireplaceVariant2["MOVEABLE_PURPLE"] = 13] = "MOVEABLE_PURPLE";
      })(FireplaceVariant || (exports2.FireplaceVariant = FireplaceVariant = {}));
      var LeaperVariant;
      (function(LeaperVariant2) {
        LeaperVariant2[LeaperVariant2["LEAPER"] = 0] = "LEAPER";
        LeaperVariant2[LeaperVariant2["STICKY_LEAPER"] = 1] = "STICKY_LEAPER";
      })(LeaperVariant || (exports2.LeaperVariant = LeaperVariant = {}));
      var MrMawVariant;
      (function(MrMawVariant2) {
        MrMawVariant2[MrMawVariant2["MR_MAW"] = 0] = "MR_MAW";
        MrMawVariant2[MrMawVariant2["MR_MAW_HEAD"] = 1] = "MR_MAW_HEAD";
        MrMawVariant2[MrMawVariant2["MR_RED_MAW"] = 2] = "MR_RED_MAW";
        MrMawVariant2[MrMawVariant2["MR_RED_MAW_HEAD"] = 3] = "MR_RED_MAW_HEAD";
        MrMawVariant2[MrMawVariant2["MR_MAW_NECK"] = 10] = "MR_MAW_NECK";
      })(MrMawVariant || (exports2.MrMawVariant = MrMawVariant = {}));
      var BabyVariant;
      (function(BabyVariant2) {
        BabyVariant2[BabyVariant2["BABY"] = 0] = "BABY";
        BabyVariant2[BabyVariant2["ANGELIC_BABY"] = 1] = "ANGELIC_BABY";
        BabyVariant2[BabyVariant2["ULTRA_PRIDE_BABY"] = 2] = "ULTRA_PRIDE_BABY";
        BabyVariant2[BabyVariant2["WRINKLY_BABY"] = 3] = "WRINKLY_BABY";
      })(BabyVariant || (exports2.BabyVariant = BabyVariant = {}));
      var VisVariant;
      (function(VisVariant2) {
        VisVariant2[VisVariant2["VIS"] = 0] = "VIS";
        VisVariant2[VisVariant2["DOUBLE_VIS"] = 1] = "DOUBLE_VIS";
        VisVariant2[VisVariant2["CHUBBER"] = 2] = "CHUBBER";
        VisVariant2[VisVariant2["SCARRED_DOUBLE_VIS"] = 3] = "SCARRED_DOUBLE_VIS";
        VisVariant2[VisVariant2["CHUBBER_PROJECTILE"] = 22] = "CHUBBER_PROJECTILE";
      })(VisVariant || (exports2.VisVariant = VisVariant = {}));
      var GutsVariant;
      (function(GutsVariant2) {
        GutsVariant2[GutsVariant2["GUTS"] = 0] = "GUTS";
        GutsVariant2[GutsVariant2["SCARRED_GUTS"] = 1] = "SCARRED_GUTS";
        GutsVariant2[GutsVariant2["SLOG"] = 2] = "SLOG";
      })(GutsVariant || (exports2.GutsVariant = GutsVariant = {}));
      var KnightVariant;
      (function(KnightVariant2) {
        KnightVariant2[KnightVariant2["KNIGHT"] = 0] = "KNIGHT";
        KnightVariant2[KnightVariant2["SELFLESS_KNIGHT"] = 1] = "SELFLESS_KNIGHT";
        KnightVariant2[KnightVariant2["LOOSE_KNIGHT"] = 2] = "LOOSE_KNIGHT";
        KnightVariant2[KnightVariant2["BRAINLESS_KNIGHT"] = 3] = "BRAINLESS_KNIGHT";
        KnightVariant2[KnightVariant2["BLACK_KNIGHT"] = 4] = "BLACK_KNIGHT";
      })(KnightVariant || (exports2.KnightVariant = KnightVariant = {}));
      var GrimaceVariant;
      (function(GrimaceVariant2) {
        GrimaceVariant2[GrimaceVariant2["STONE_GRIMACE"] = 0] = "STONE_GRIMACE";
        GrimaceVariant2[GrimaceVariant2["VOMIT_GRIMACE"] = 1] = "VOMIT_GRIMACE";
        GrimaceVariant2[GrimaceVariant2["TRIPLE_GRIMACE"] = 2] = "TRIPLE_GRIMACE";
      })(GrimaceVariant || (exports2.GrimaceVariant = GrimaceVariant = {}));
      var Monstro2Variant;
      (function(Monstro2Variant2) {
        Monstro2Variant2[Monstro2Variant2["MONSTRO_2"] = 0] = "MONSTRO_2";
        Monstro2Variant2[Monstro2Variant2["GISH"] = 1] = "GISH";
      })(Monstro2Variant || (exports2.Monstro2Variant = Monstro2Variant = {}));
      var PokyVariant;
      (function(PokyVariant2) {
        PokyVariant2[PokyVariant2["POKY"] = 0] = "POKY";
        PokyVariant2[PokyVariant2["SLIDE"] = 1] = "SLIDE";
      })(PokyVariant || (exports2.PokyVariant = PokyVariant = {}));
      var MomVariant;
      (function(MomVariant2) {
        MomVariant2[MomVariant2["MOM"] = 0] = "MOM";
        MomVariant2[MomVariant2["STOMP"] = 10] = "STOMP";
      })(MomVariant || (exports2.MomVariant = MomVariant = {}));
      var SlothVariant;
      (function(SlothVariant2) {
        SlothVariant2[SlothVariant2["SLOTH"] = 0] = "SLOTH";
        SlothVariant2[SlothVariant2["SUPER_SLOTH"] = 1] = "SUPER_SLOTH";
        SlothVariant2[SlothVariant2["ULTRA_PRIDE"] = 2] = "ULTRA_PRIDE";
      })(SlothVariant || (exports2.SlothVariant = SlothVariant = {}));
      var LustVariant;
      (function(LustVariant2) {
        LustVariant2[LustVariant2["LUST"] = 0] = "LUST";
        LustVariant2[LustVariant2["SUPER_LUST"] = 1] = "SUPER_LUST";
      })(LustVariant || (exports2.LustVariant = LustVariant = {}));
      var WrathVariant;
      (function(WrathVariant2) {
        WrathVariant2[WrathVariant2["WRATH"] = 0] = "WRATH";
        WrathVariant2[WrathVariant2["SUPER_WRATH"] = 1] = "SUPER_WRATH";
      })(WrathVariant || (exports2.WrathVariant = WrathVariant = {}));
      var GluttonyVariant;
      (function(GluttonyVariant2) {
        GluttonyVariant2[GluttonyVariant2["GLUTTONY"] = 0] = "GLUTTONY";
        GluttonyVariant2[GluttonyVariant2["SUPER_GLUTTONY"] = 1] = "SUPER_GLUTTONY";
      })(GluttonyVariant || (exports2.GluttonyVariant = GluttonyVariant = {}));
      var GreedVariant;
      (function(GreedVariant2) {
        GreedVariant2[GreedVariant2["GREED"] = 0] = "GREED";
        GreedVariant2[GreedVariant2["SUPER_GREED"] = 1] = "SUPER_GREED";
      })(GreedVariant || (exports2.GreedVariant = GreedVariant = {}));
      var EnvyVariant;
      (function(EnvyVariant2) {
        EnvyVariant2[EnvyVariant2["ENVY"] = 0] = "ENVY";
        EnvyVariant2[EnvyVariant2["SUPER_ENVY"] = 1] = "SUPER_ENVY";
        EnvyVariant2[EnvyVariant2["ENVY_BIG"] = 10] = "ENVY_BIG";
        EnvyVariant2[EnvyVariant2["SUPER_ENVY_BIG"] = 11] = "SUPER_ENVY_BIG";
        EnvyVariant2[EnvyVariant2["ENVY_MEDIUM"] = 20] = "ENVY_MEDIUM";
        EnvyVariant2[EnvyVariant2["SUPER_ENVY_MEDIUM"] = 21] = "SUPER_ENVY_MEDIUM";
        EnvyVariant2[EnvyVariant2["ENVY_SMALL"] = 30] = "ENVY_SMALL";
        EnvyVariant2[EnvyVariant2["SUPER_ENVY_SMALL"] = 31] = "SUPER_ENVY_SMALL";
      })(EnvyVariant || (exports2.EnvyVariant = EnvyVariant = {}));
      var PrideVariant;
      (function(PrideVariant2) {
        PrideVariant2[PrideVariant2["PRIDE"] = 0] = "PRIDE";
        PrideVariant2[PrideVariant2["SUPER_PRIDE"] = 1] = "SUPER_PRIDE";
      })(PrideVariant || (exports2.PrideVariant = PrideVariant = {}));
      var DopleVariant;
      (function(DopleVariant2) {
        DopleVariant2[DopleVariant2["DOPLE"] = 0] = "DOPLE";
        DopleVariant2[DopleVariant2["EVIL_TWIN"] = 1] = "EVIL_TWIN";
      })(DopleVariant || (exports2.DopleVariant = DopleVariant = {}));
      var LeechVariant;
      (function(LeechVariant2) {
        LeechVariant2[LeechVariant2["LEECH"] = 0] = "LEECH";
        LeechVariant2[LeechVariant2["KAMIKAZE_LEECH"] = 1] = "KAMIKAZE_LEECH";
        LeechVariant2[LeechVariant2["HOLY_LEECH"] = 2] = "HOLY_LEECH";
      })(LeechVariant || (exports2.LeechVariant = LeechVariant = {}));
      var MemBrainVariant;
      (function(MemBrainVariant2) {
        MemBrainVariant2[MemBrainVariant2["MEMBRAIN"] = 0] = "MEMBRAIN";
        MemBrainVariant2[MemBrainVariant2["MAMA_GUTS"] = 1] = "MAMA_GUTS";
        MemBrainVariant2[MemBrainVariant2["DEAD_MEAT"] = 2] = "DEAD_MEAT";
      })(MemBrainVariant || (exports2.MemBrainVariant = MemBrainVariant = {}));
      var ParaBiteVariant;
      (function(ParaBiteVariant2) {
        ParaBiteVariant2[ParaBiteVariant2["PARA_BITE"] = 0] = "PARA_BITE";
        ParaBiteVariant2[ParaBiteVariant2["SCARRED_PARA_BITE"] = 1] = "SCARRED_PARA_BITE";
      })(ParaBiteVariant || (exports2.ParaBiteVariant = ParaBiteVariant = {}));
      var EyeVariant;
      (function(EyeVariant2) {
        EyeVariant2[EyeVariant2["EYE"] = 0] = "EYE";
        EyeVariant2[EyeVariant2["BLOODSHOT_EYE"] = 1] = "BLOODSHOT_EYE";
        EyeVariant2[EyeVariant2["HOLY_EYE"] = 2] = "HOLY_EYE";
      })(EyeVariant || (exports2.EyeVariant = EyeVariant = {}));
      var SuckerVariant;
      (function(SuckerVariant2) {
        SuckerVariant2[SuckerVariant2["SUCKER"] = 0] = "SUCKER";
        SuckerVariant2[SuckerVariant2["SPIT"] = 1] = "SPIT";
        SuckerVariant2[SuckerVariant2["SOUL_SUCKER"] = 2] = "SOUL_SUCKER";
        SuckerVariant2[SuckerVariant2["INK"] = 3] = "INK";
        SuckerVariant2[SuckerVariant2["MAMA_FLY"] = 4] = "MAMA_FLY";
        SuckerVariant2[SuckerVariant2["BULB"] = 5] = "BULB";
        SuckerVariant2[SuckerVariant2["BLOOD_FLY"] = 6] = "BLOOD_FLY";
        SuckerVariant2[SuckerVariant2["TAINTED_SUCKER"] = 7] = "TAINTED_SUCKER";
      })(SuckerVariant || (exports2.SuckerVariant = SuckerVariant = {}));
      var PinVariant;
      (function(PinVariant2) {
        PinVariant2[PinVariant2["PIN"] = 0] = "PIN";
        PinVariant2[PinVariant2["SCOLEX"] = 1] = "SCOLEX";
        PinVariant2[PinVariant2["FRAIL"] = 2] = "FRAIL";
        PinVariant2[PinVariant2["WORMWOOD"] = 3] = "WORMWOOD";
      })(PinVariant || (exports2.PinVariant = PinVariant = {}));
      var WarVariant;
      (function(WarVariant2) {
        WarVariant2[WarVariant2["WAR"] = 0] = "WAR";
        WarVariant2[WarVariant2["CONQUEST"] = 1] = "CONQUEST";
        WarVariant2[WarVariant2["WAR_WITHOUT_HORSE"] = 2] = "WAR_WITHOUT_HORSE";
      })(WarVariant || (exports2.WarVariant = WarVariant = {}));
      var DeathVariant;
      (function(DeathVariant2) {
        DeathVariant2[DeathVariant2["DEATH"] = 0] = "DEATH";
        DeathVariant2[DeathVariant2["DEATH_SCYTHE"] = 10] = "DEATH_SCYTHE";
        DeathVariant2[DeathVariant2["DEATH_HORSE"] = 20] = "DEATH_HORSE";
        DeathVariant2[DeathVariant2["DEATH_WITHOUT_HORSE"] = 30] = "DEATH_WITHOUT_HORSE";
      })(DeathVariant || (exports2.DeathVariant = DeathVariant = {}));
      var DukeOfFliesVariant;
      (function(DukeOfFliesVariant2) {
        DukeOfFliesVariant2[DukeOfFliesVariant2["DUKE_OF_FLIES"] = 0] = "DUKE_OF_FLIES";
        DukeOfFliesVariant2[DukeOfFliesVariant2["HUSK"] = 1] = "HUSK";
      })(DukeOfFliesVariant || (exports2.DukeOfFliesVariant = DukeOfFliesVariant = {}));
      var PeepVariant;
      (function(PeepVariant2) {
        PeepVariant2[PeepVariant2["PEEP"] = 0] = "PEEP";
        PeepVariant2[PeepVariant2["BLOAT"] = 1] = "BLOAT";
        PeepVariant2[PeepVariant2["PEEP_EYE"] = 10] = "PEEP_EYE";
        PeepVariant2[PeepVariant2["BLOAT_EYE"] = 11] = "BLOAT_EYE";
      })(PeepVariant || (exports2.PeepVariant = PeepVariant = {}));
      var LokiVariant;
      (function(LokiVariant2) {
        LokiVariant2[LokiVariant2["LOKI"] = 0] = "LOKI";
        LokiVariant2[LokiVariant2["LOKII"] = 1] = "LOKII";
      })(LokiVariant || (exports2.LokiVariant = LokiVariant = {}));
      var FistulaVariant;
      (function(FistulaVariant2) {
        FistulaVariant2[FistulaVariant2["FISTULA"] = 0] = "FISTULA";
        FistulaVariant2[FistulaVariant2["TERATOMA"] = 1] = "TERATOMA";
      })(FistulaVariant || (exports2.FistulaVariant = FistulaVariant = {}));
      var MomsHeartVariant;
      (function(MomsHeartVariant2) {
        MomsHeartVariant2[MomsHeartVariant2["MOMS_HEART"] = 0] = "MOMS_HEART";
        MomsHeartVariant2[MomsHeartVariant2["IT_LIVES"] = 1] = "IT_LIVES";
        MomsHeartVariant2[MomsHeartVariant2["MOMS_GUTS"] = 10] = "MOMS_GUTS";
      })(MomsHeartVariant || (exports2.MomsHeartVariant = MomsHeartVariant = {}));
      var GeminiVariant;
      (function(GeminiVariant2) {
        GeminiVariant2[GeminiVariant2["GEMINI"] = 0] = "GEMINI";
        GeminiVariant2[GeminiVariant2["STEVEN"] = 1] = "STEVEN";
        GeminiVariant2[GeminiVariant2["BLIGHTED_OVUM"] = 2] = "BLIGHTED_OVUM";
        GeminiVariant2[GeminiVariant2["GEMINI_BABY"] = 10] = "GEMINI_BABY";
        GeminiVariant2[GeminiVariant2["STEVEN_BABY"] = 11] = "STEVEN_BABY";
        GeminiVariant2[GeminiVariant2["BLIGHTED_OVUM_BABY"] = 12] = "BLIGHTED_OVUM_BABY";
        GeminiVariant2[GeminiVariant2["UMBILICAL_CORD"] = 20] = "UMBILICAL_CORD";
      })(GeminiVariant || (exports2.GeminiVariant = GeminiVariant = {}));
      var FallenVariant;
      (function(FallenVariant2) {
        FallenVariant2[FallenVariant2["FALLEN"] = 0] = "FALLEN";
        FallenVariant2[FallenVariant2["KRAMPUS"] = 1] = "KRAMPUS";
      })(FallenVariant || (exports2.FallenVariant = FallenVariant = {}));
      var SatanVariant;
      (function(SatanVariant2) {
        SatanVariant2[SatanVariant2["SATAN"] = 0] = "SATAN";
        SatanVariant2[SatanVariant2["STOMP"] = 10] = "STOMP";
      })(SatanVariant || (exports2.SatanVariant = SatanVariant = {}));
      var GurgleVariant;
      (function(GurgleVariant2) {
        GurgleVariant2[GurgleVariant2["GURGLE"] = 0] = "GURGLE";
        GurgleVariant2[GurgleVariant2["CRACKLE"] = 1] = "CRACKLE";
      })(GurgleVariant || (exports2.GurgleVariant = GurgleVariant = {}));
      var WalkingBoilVariant;
      (function(WalkingBoilVariant2) {
        WalkingBoilVariant2[WalkingBoilVariant2["WALKING_BOIL"] = 0] = "WALKING_BOIL";
        WalkingBoilVariant2[WalkingBoilVariant2["WALKING_GUT"] = 1] = "WALKING_GUT";
        WalkingBoilVariant2[WalkingBoilVariant2["WALKING_SACK"] = 2] = "WALKING_SACK";
      })(WalkingBoilVariant || (exports2.WalkingBoilVariant = WalkingBoilVariant = {}));
      var HeartVariant;
      (function(HeartVariant2) {
        HeartVariant2[HeartVariant2["HEART"] = 0] = "HEART";
        HeartVariant2[HeartVariant2["HALF_HEART"] = 1] = "HALF_HEART";
      })(HeartVariant || (exports2.HeartVariant = HeartVariant = {}));
      var MaskVariant;
      (function(MaskVariant2) {
        MaskVariant2[MaskVariant2["MASK"] = 0] = "MASK";
        MaskVariant2[MaskVariant2["MASK_2"] = 1] = "MASK_2";
      })(MaskVariant || (exports2.MaskVariant = MaskVariant = {}));
      var WidowVariant;
      (function(WidowVariant2) {
        WidowVariant2[WidowVariant2["WIDOW"] = 0] = "WIDOW";
        WidowVariant2[WidowVariant2["WRETCHED"] = 1] = "WRETCHED";
      })(WidowVariant || (exports2.WidowVariant = WidowVariant = {}));
      var DaddyLongLegsVariant;
      (function(DaddyLongLegsVariant2) {
        DaddyLongLegsVariant2[DaddyLongLegsVariant2["DADDY_LONG_LEGS"] = 0] = "DADDY_LONG_LEGS";
        DaddyLongLegsVariant2[DaddyLongLegsVariant2["TRIACHNID"] = 1] = "TRIACHNID";
      })(DaddyLongLegsVariant || (exports2.DaddyLongLegsVariant = DaddyLongLegsVariant = {}));
      var IsaacVariant;
      (function(IsaacVariant2) {
        IsaacVariant2[IsaacVariant2["ISAAC"] = 0] = "ISAAC";
        IsaacVariant2[IsaacVariant2["BLUE_BABY"] = 1] = "BLUE_BABY";
        IsaacVariant2[IsaacVariant2["BLUE_BABY_HUSH"] = 2] = "BLUE_BABY_HUSH";
      })(IsaacVariant || (exports2.IsaacVariant = IsaacVariant = {}));
      var ConstantStoneShooterVariant;
      (function(ConstantStoneShooterVariant2) {
        ConstantStoneShooterVariant2[ConstantStoneShooterVariant2["CONSTANT_STONE_SHOOTER"] = 0] = "CONSTANT_STONE_SHOOTER";
        ConstantStoneShooterVariant2[ConstantStoneShooterVariant2["CROSS_STONE_SHOOTER"] = 10] = "CROSS_STONE_SHOOTER";
        ConstantStoneShooterVariant2[ConstantStoneShooterVariant2["CROSS_STONE_SHOOTER_ALWAYS_ON"] = 11] = "CROSS_STONE_SHOOTER_ALWAYS_ON";
      })(ConstantStoneShooterVariant || (exports2.ConstantStoneShooterVariant = ConstantStoneShooterVariant = {}));
      var BabyLongLegsVariant;
      (function(BabyLongLegsVariant2) {
        BabyLongLegsVariant2[BabyLongLegsVariant2["BABY_LONG_LEGS"] = 0] = "BABY_LONG_LEGS";
        BabyLongLegsVariant2[BabyLongLegsVariant2["SMALL_BABY_LONG_LEGS"] = 1] = "SMALL_BABY_LONG_LEGS";
      })(BabyLongLegsVariant || (exports2.BabyLongLegsVariant = BabyLongLegsVariant = {}));
      var CrazyLongLegsVariant;
      (function(CrazyLongLegsVariant2) {
        CrazyLongLegsVariant2[CrazyLongLegsVariant2["CRAZY_LONG_LEGS"] = 0] = "CRAZY_LONG_LEGS";
        CrazyLongLegsVariant2[CrazyLongLegsVariant2["SMALL_CRAZY_LONG_LEGS"] = 1] = "SMALL_CRAZY_LONG_LEGS";
      })(CrazyLongLegsVariant || (exports2.CrazyLongLegsVariant = CrazyLongLegsVariant = {}));
      var FattyVariant;
      (function(FattyVariant2) {
        FattyVariant2[FattyVariant2["FATTY"] = 0] = "FATTY";
        FattyVariant2[FattyVariant2["PALE_FATTY"] = 1] = "PALE_FATTY";
        FattyVariant2[FattyVariant2["FLAMING_FATTY"] = 2] = "FLAMING_FATTY";
      })(FattyVariant || (exports2.FattyVariant = FattyVariant = {}));
      var DeathsHeadVariant;
      (function(DeathsHeadVariant2) {
        DeathsHeadVariant2[DeathsHeadVariant2["DEATHS_HEAD"] = 0] = "DEATHS_HEAD";
        DeathsHeadVariant2[DeathsHeadVariant2["DANK_DEATHS_HEAD"] = 1] = "DANK_DEATHS_HEAD";
        DeathsHeadVariant2[DeathsHeadVariant2["CURSED_DEATHS_HEAD"] = 2] = "CURSED_DEATHS_HEAD";
        DeathsHeadVariant2[DeathsHeadVariant2["BRIMSTONE_DEATHS_HEAD"] = 3] = "BRIMSTONE_DEATHS_HEAD";
        DeathsHeadVariant2[DeathsHeadVariant2["RED_SKULL"] = 4] = "RED_SKULL";
      })(DeathsHeadVariant || (exports2.DeathsHeadVariant = DeathsHeadVariant = {}));
      var SwingerVariant;
      (function(SwingerVariant2) {
        SwingerVariant2[SwingerVariant2["SWINGER"] = 0] = "SWINGER";
        SwingerVariant2[SwingerVariant2["SWINGER_HEAD"] = 1] = "SWINGER_HEAD";
        SwingerVariant2[SwingerVariant2["SWINGER_NECK"] = 10] = "SWINGER_NECK";
      })(SwingerVariant || (exports2.SwingerVariant = SwingerVariant = {}));
      var DipVariant;
      (function(DipVariant2) {
        DipVariant2[DipVariant2["DIP"] = 0] = "DIP";
        DipVariant2[DipVariant2["CORN"] = 1] = "CORN";
        DipVariant2[DipVariant2["BROWNIE_CORN"] = 2] = "BROWNIE_CORN";
        DipVariant2[DipVariant2["BIG_CORN"] = 3] = "BIG_CORN";
      })(DipVariant || (exports2.DipVariant = DipVariant = {}));
      var SquirtVariant;
      (function(SquirtVariant2) {
        SquirtVariant2[SquirtVariant2["SQUIRT"] = 0] = "SQUIRT";
        SquirtVariant2[SquirtVariant2["DANK_SQUIRT"] = 1] = "DANK_SQUIRT";
      })(SquirtVariant || (exports2.SquirtVariant = SquirtVariant = {}));
      var SkinnyVariant;
      (function(SkinnyVariant2) {
        SkinnyVariant2[SkinnyVariant2["SKINNY"] = 0] = "SKINNY";
        SkinnyVariant2[SkinnyVariant2["ROTTY"] = 1] = "ROTTY";
        SkinnyVariant2[SkinnyVariant2["CRISPY"] = 2] = "CRISPY";
      })(SkinnyVariant || (exports2.SkinnyVariant = SkinnyVariant = {}));
      var BonyVariant;
      (function(BonyVariant2) {
        BonyVariant2[BonyVariant2["BONY"] = 0] = "BONY";
        BonyVariant2[BonyVariant2["HOLY_BONY"] = 1] = "HOLY_BONY";
      })(BonyVariant || (exports2.BonyVariant = BonyVariant = {}));
      var HomunculusVariant;
      (function(HomunculusVariant2) {
        HomunculusVariant2[HomunculusVariant2["HOMUNCULUS"] = 0] = "HOMUNCULUS";
        HomunculusVariant2[HomunculusVariant2["HOMUNCULUS_CORD"] = 10] = "HOMUNCULUS_CORD";
      })(HomunculusVariant || (exports2.HomunculusVariant = HomunculusVariant = {}));
      var TumorVariant;
      (function(TumorVariant2) {
        TumorVariant2[TumorVariant2["TUMOR"] = 0] = "TUMOR";
        TumorVariant2[TumorVariant2["PLANETOID"] = 1] = "PLANETOID";
      })(TumorVariant || (exports2.TumorVariant = TumorVariant = {}));
      var NerveEndingVariant;
      (function(NerveEndingVariant2) {
        NerveEndingVariant2[NerveEndingVariant2["NERVE_ENDING"] = 0] = "NERVE_ENDING";
        NerveEndingVariant2[NerveEndingVariant2["NERVE_ENDING_2"] = 1] = "NERVE_ENDING_2";
      })(NerveEndingVariant || (exports2.NerveEndingVariant = NerveEndingVariant = {}));
      var GurglingVariant;
      (function(GurglingVariant2) {
        GurglingVariant2[GurglingVariant2["GURGLING"] = 0] = "GURGLING";
        GurglingVariant2[GurglingVariant2["GURGLING_BOSS"] = 1] = "GURGLING_BOSS";
        GurglingVariant2[GurglingVariant2["TURDLING"] = 2] = "TURDLING";
      })(GurglingVariant || (exports2.GurglingVariant = GurglingVariant = {}));
      var GrubVariant;
      (function(GrubVariant2) {
        GrubVariant2[GrubVariant2["GRUB"] = 0] = "GRUB";
        GrubVariant2[GrubVariant2["CORPSE_EATER"] = 1] = "CORPSE_EATER";
        GrubVariant2[GrubVariant2["CARRION_RIDER"] = 2] = "CARRION_RIDER";
      })(GrubVariant || (exports2.GrubVariant = GrubVariant = {}));
      var WallCreepVariant;
      (function(WallCreepVariant2) {
        WallCreepVariant2[WallCreepVariant2["WALL_CREEP"] = 0] = "WALL_CREEP";
        WallCreepVariant2[WallCreepVariant2["SOY_CREEP"] = 1] = "SOY_CREEP";
        WallCreepVariant2[WallCreepVariant2["RAG_CREEP"] = 2] = "RAG_CREEP";
        WallCreepVariant2[WallCreepVariant2["TAINTED_SOY_CREEP"] = 3] = "TAINTED_SOY_CREEP";
      })(WallCreepVariant || (exports2.WallCreepVariant = WallCreepVariant = {}));
      var RageCreepVariant;
      (function(RageCreepVariant2) {
        RageCreepVariant2[RageCreepVariant2["RAGE_CREEP"] = 0] = "RAGE_CREEP";
        RageCreepVariant2[RageCreepVariant2["SPLIT_RAGE_CREEP"] = 1] = "SPLIT_RAGE_CREEP";
      })(RageCreepVariant || (exports2.RageCreepVariant = RageCreepVariant = {}));
      var RoundWormVariant;
      (function(RoundWormVariant2) {
        RoundWormVariant2[RoundWormVariant2["ROUND_WORM"] = 0] = "ROUND_WORM";
        RoundWormVariant2[RoundWormVariant2["TUBE_WORM"] = 1] = "TUBE_WORM";
        RoundWormVariant2[RoundWormVariant2["TAINTED_ROUND_WORM"] = 2] = "TAINTED_ROUND_WORM";
        RoundWormVariant2[RoundWormVariant2["TAINTED_TUBE_WORM"] = 3] = "TAINTED_TUBE_WORM";
      })(RoundWormVariant || (exports2.RoundWormVariant = RoundWormVariant = {}));
      var PoopEntityVariant;
      (function(PoopEntityVariant2) {
        PoopEntityVariant2[PoopEntityVariant2["NORMAL"] = 0] = "NORMAL";
        PoopEntityVariant2[PoopEntityVariant2["GOLDEN"] = 1] = "GOLDEN";
        PoopEntityVariant2[PoopEntityVariant2["STONE"] = 11] = "STONE";
        PoopEntityVariant2[PoopEntityVariant2["CORNY"] = 12] = "CORNY";
        PoopEntityVariant2[PoopEntityVariant2["BURNING"] = 13] = "BURNING";
        PoopEntityVariant2[PoopEntityVariant2["STINKY"] = 14] = "STINKY";
        PoopEntityVariant2[PoopEntityVariant2["BLACK"] = 15] = "BLACK";
        PoopEntityVariant2[PoopEntityVariant2["WHITE"] = 16] = "WHITE";
      })(PoopEntityVariant || (exports2.PoopEntityVariant = PoopEntityVariant = {}));
      var RaglingVariant;
      (function(RaglingVariant2) {
        RaglingVariant2[RaglingVariant2["RAGLING"] = 0] = "RAGLING";
        RaglingVariant2[RaglingVariant2["RAG_MANS_RAGLING"] = 1] = "RAG_MANS_RAGLING";
      })(RaglingVariant || (exports2.RaglingVariant = RaglingVariant = {}));
      var BegottenVariant;
      (function(BegottenVariant2) {
        BegottenVariant2[BegottenVariant2["BEGOTTEN"] = 0] = "BEGOTTEN";
        BegottenVariant2[BegottenVariant2["BEGOTTEN_CHAIN"] = 10] = "BEGOTTEN_CHAIN";
      })(BegottenVariant || (exports2.BegottenVariant = BegottenVariant = {}));
      var ConjoinedFattyVariant;
      (function(ConjoinedFattyVariant2) {
        ConjoinedFattyVariant2[ConjoinedFattyVariant2["CONJOINED_FATTY"] = 0] = "CONJOINED_FATTY";
        ConjoinedFattyVariant2[ConjoinedFattyVariant2["BLUE_CONJOINED_FATTY"] = 1] = "BLUE_CONJOINED_FATTY";
      })(ConjoinedFattyVariant || (exports2.ConjoinedFattyVariant = ConjoinedFattyVariant = {}));
      var HauntVariant;
      (function(HauntVariant2) {
        HauntVariant2[HauntVariant2["HAUNT"] = 0] = "HAUNT";
        HauntVariant2[HauntVariant2["LIL_HAUNT"] = 10] = "LIL_HAUNT";
      })(HauntVariant || (exports2.HauntVariant = HauntVariant = {}));
      var DingleVariant;
      (function(DingleVariant2) {
        DingleVariant2[DingleVariant2["DINGLE"] = 0] = "DINGLE";
        DingleVariant2[DingleVariant2["DANGLE"] = 1] = "DANGLE";
      })(DingleVariant || (exports2.DingleVariant = DingleVariant = {}));
      var MamaGurdyVariant;
      (function(MamaGurdyVariant2) {
        MamaGurdyVariant2[MamaGurdyVariant2["MAMA_GURDY"] = 0] = "MAMA_GURDY";
        MamaGurdyVariant2[MamaGurdyVariant2["LEFT_HAND"] = 1] = "LEFT_HAND";
        MamaGurdyVariant2[MamaGurdyVariant2["RIGHT_HAND"] = 2] = "RIGHT_HAND";
      })(MamaGurdyVariant || (exports2.MamaGurdyVariant = MamaGurdyVariant = {}));
      var PolycephalusVariant;
      (function(PolycephalusVariant2) {
        PolycephalusVariant2[PolycephalusVariant2["POLYCEPHALUS"] = 0] = "POLYCEPHALUS";
        PolycephalusVariant2[PolycephalusVariant2["PILE"] = 1] = "PILE";
      })(PolycephalusVariant || (exports2.PolycephalusVariant = PolycephalusVariant = {}));
      var AngelVariant;
      (function(AngelVariant2) {
        AngelVariant2[AngelVariant2["NORMAL"] = 0] = "NORMAL";
        AngelVariant2[AngelVariant2["FALLEN"] = 1] = "FALLEN";
      })(AngelVariant || (exports2.AngelVariant = AngelVariant = {}));
      var LambVariant;
      (function(LambVariant2) {
        LambVariant2[LambVariant2["LAMB"] = 0] = "LAMB";
        LambVariant2[LambVariant2["BODY"] = 10] = "BODY";
      })(LambVariant || (exports2.LambVariant = LambVariant = {}));
      var MegaSatanVariant;
      (function(MegaSatanVariant2) {
        MegaSatanVariant2[MegaSatanVariant2["MEGA_SATAN"] = 0] = "MEGA_SATAN";
        MegaSatanVariant2[MegaSatanVariant2["MEGA_SATAN_RIGHT_HAND"] = 1] = "MEGA_SATAN_RIGHT_HAND";
        MegaSatanVariant2[MegaSatanVariant2["MEGA_SATAN_LEFT_HAND"] = 2] = "MEGA_SATAN_LEFT_HAND";
      })(MegaSatanVariant || (exports2.MegaSatanVariant = MegaSatanVariant = {}));
      var PitfallVariant;
      (function(PitfallVariant2) {
        PitfallVariant2[PitfallVariant2["PITFALL"] = 0] = "PITFALL";
        PitfallVariant2[PitfallVariant2["SUCTION_PITFALL"] = 1] = "SUCTION_PITFALL";
        PitfallVariant2[PitfallVariant2["TELEPORT_PITFALL"] = 2] = "TELEPORT_PITFALL";
      })(PitfallVariant || (exports2.PitfallVariant = PitfallVariant = {}));
      var MoveableTNTVariant;
      (function(MoveableTNTVariant2) {
        MoveableTNTVariant2[MoveableTNTVariant2["MOVEABLE_TNT"] = 0] = "MOVEABLE_TNT";
        MoveableTNTVariant2[MoveableTNTVariant2["MINE_CRAFTER"] = 1] = "MINE_CRAFTER";
      })(MoveableTNTVariant || (exports2.MoveableTNTVariant = MoveableTNTVariant = {}));
      var UltraCoinVariant;
      (function(UltraCoinVariant2) {
        UltraCoinVariant2[UltraCoinVariant2["SPINNER"] = 0] = "SPINNER";
        UltraCoinVariant2[UltraCoinVariant2["KEY"] = 1] = "KEY";
        UltraCoinVariant2[UltraCoinVariant2["BOMB"] = 2] = "BOMB";
        UltraCoinVariant2[UltraCoinVariant2["HEART"] = 3] = "HEART";
      })(UltraCoinVariant || (exports2.UltraCoinVariant = UltraCoinVariant = {}));
      var StoneyVariant;
      (function(StoneyVariant2) {
        StoneyVariant2[StoneyVariant2["STONEY"] = 0] = "STONEY";
        StoneyVariant2[StoneyVariant2["CROSS_STONEY"] = 10] = "CROSS_STONEY";
      })(StoneyVariant || (exports2.StoneyVariant = StoneyVariant = {}));
      var PortalVariant;
      (function(PortalVariant2) {
        PortalVariant2[PortalVariant2["PORTAL"] = 0] = "PORTAL";
        PortalVariant2[PortalVariant2["LIL_PORTAL"] = 1] = "LIL_PORTAL";
      })(PortalVariant || (exports2.PortalVariant = PortalVariant = {}));
      var LeperVariant;
      (function(LeperVariant2) {
        LeperVariant2[LeperVariant2["LEPER"] = 0] = "LEPER";
        LeperVariant2[LeperVariant2["LEPER_FLESH"] = 1] = "LEPER_FLESH";
      })(LeperVariant || (exports2.LeperVariant = LeperVariant = {}));
      var MrMineVariant;
      (function(MrMineVariant2) {
        MrMineVariant2[MrMineVariant2["MR_MINE"] = 0] = "MR_MINE";
        MrMineVariant2[MrMineVariant2["MR_MINE_NECK"] = 10] = "MR_MINE_NECK";
      })(MrMineVariant || (exports2.MrMineVariant = MrMineVariant = {}));
      var LittleHornVariant;
      (function(LittleHornVariant2) {
        LittleHornVariant2[LittleHornVariant2["LITTLE_HORN"] = 0] = "LITTLE_HORN";
        LittleHornVariant2[LittleHornVariant2["DARK_BALL"] = 1] = "DARK_BALL";
      })(LittleHornVariant || (exports2.LittleHornVariant = LittleHornVariant = {}));
      var RagManVariant;
      (function(RagManVariant2) {
        RagManVariant2[RagManVariant2["RAG_MAN"] = 0] = "RAG_MAN";
        RagManVariant2[RagManVariant2["RAG_MAN_HEAD"] = 1] = "RAG_MAN_HEAD";
      })(RagManVariant || (exports2.RagManVariant = RagManVariant = {}));
      var UltraGreedVariant;
      (function(UltraGreedVariant2) {
        UltraGreedVariant2[UltraGreedVariant2["ULTRA_GREED"] = 0] = "ULTRA_GREED";
        UltraGreedVariant2[UltraGreedVariant2["ULTRA_GREEDIER"] = 1] = "ULTRA_GREEDIER";
      })(UltraGreedVariant || (exports2.UltraGreedVariant = UltraGreedVariant = {}));
      var RagMegaVariant;
      (function(RagMegaVariant2) {
        RagMegaVariant2[RagMegaVariant2["RAG_MEGA"] = 0] = "RAG_MEGA";
        RagMegaVariant2[RagMegaVariant2["PURPLE_BALL"] = 1] = "PURPLE_BALL";
        RagMegaVariant2[RagMegaVariant2["REBIRTH_PILLAR"] = 2] = "REBIRTH_PILLAR";
      })(RagMegaVariant || (exports2.RagMegaVariant = RagMegaVariant = {}));
      var BigHornVariant;
      (function(BigHornVariant2) {
        BigHornVariant2[BigHornVariant2["BIG_HORN"] = 0] = "BIG_HORN";
        BigHornVariant2[BigHornVariant2["SMALL_HOLE"] = 1] = "SMALL_HOLE";
        BigHornVariant2[BigHornVariant2["BIG_HOLE"] = 2] = "BIG_HOLE";
      })(BigHornVariant || (exports2.BigHornVariant = BigHornVariant = {}));
      var BloodPuppyVariant;
      (function(BloodPuppyVariant2) {
        BloodPuppyVariant2[BloodPuppyVariant2["SMALL"] = 0] = "SMALL";
        BloodPuppyVariant2[BloodPuppyVariant2["LARGE"] = 1] = "LARGE";
      })(BloodPuppyVariant || (exports2.BloodPuppyVariant = BloodPuppyVariant = {}));
      var SubHorfVariant;
      (function(SubHorfVariant2) {
        SubHorfVariant2[SubHorfVariant2["SUB_HORF"] = 0] = "SUB_HORF";
        SubHorfVariant2[SubHorfVariant2["TAINTED_SUB_HORF"] = 1] = "TAINTED_SUB_HORF";
      })(SubHorfVariant || (exports2.SubHorfVariant = SubHorfVariant = {}));
      var PoltyVariant;
      (function(PoltyVariant2) {
        PoltyVariant2[PoltyVariant2["POLTY"] = 0] = "POLTY";
        PoltyVariant2[PoltyVariant2["KINETI"] = 1] = "KINETI";
      })(PoltyVariant || (exports2.PoltyVariant = PoltyVariant = {}));
      var PreyVariant;
      (function(PreyVariant2) {
        PreyVariant2[PreyVariant2["PREY"] = 0] = "PREY";
        PreyVariant2[PreyVariant2["MULLIGHOUL"] = 1] = "MULLIGHOUL";
      })(PreyVariant || (exports2.PreyVariant = PreyVariant = {}));
      var RockSpiderVariant;
      (function(RockSpiderVariant2) {
        RockSpiderVariant2[RockSpiderVariant2["ROCK_SPIDER"] = 0] = "ROCK_SPIDER";
        RockSpiderVariant2[RockSpiderVariant2["TINTED_ROCK_SPIDER"] = 1] = "TINTED_ROCK_SPIDER";
        RockSpiderVariant2[RockSpiderVariant2["COAL_SPIDER"] = 2] = "COAL_SPIDER";
      })(RockSpiderVariant || (exports2.RockSpiderVariant = RockSpiderVariant = {}));
      var FlyBombVariant;
      (function(FlyBombVariant2) {
        FlyBombVariant2[FlyBombVariant2["FLY_BOMB"] = 0] = "FLY_BOMB";
        FlyBombVariant2[FlyBombVariant2["ETERNAL_FLY_BOMB"] = 1] = "ETERNAL_FLY_BOMB";
      })(FlyBombVariant || (exports2.FlyBombVariant = FlyBombVariant = {}));
      var DannyVariant;
      (function(DannyVariant2) {
        DannyVariant2[DannyVariant2["DANNY"] = 0] = "DANNY";
        DannyVariant2[DannyVariant2["COAL_BOY"] = 1] = "COAL_BOY";
      })(DannyVariant || (exports2.DannyVariant = DannyVariant = {}));
      var GyroVariant;
      (function(GyroVariant2) {
        GyroVariant2[GyroVariant2["GYRO"] = 0] = "GYRO";
        GyroVariant2[GyroVariant2["GRILLED_GYRO"] = 1] = "GRILLED_GYRO";
      })(GyroVariant || (exports2.GyroVariant = GyroVariant = {}));
      var FacelessVariant;
      (function(FacelessVariant2) {
        FacelessVariant2[FacelessVariant2["FACELESS"] = 0] = "FACELESS";
        FacelessVariant2[FacelessVariant2["TAINTED_FACELESS"] = 1] = "TAINTED_FACELESS";
      })(FacelessVariant || (exports2.FacelessVariant = FacelessVariant = {}));
      var MoleVariant;
      (function(MoleVariant2) {
        MoleVariant2[MoleVariant2["MOLE"] = 0] = "MOLE";
        MoleVariant2[MoleVariant2["TAINTED_MOLE"] = 1] = "TAINTED_MOLE";
      })(MoleVariant || (exports2.MoleVariant = MoleVariant = {}));
      var BigBonyVariant;
      (function(BigBonyVariant2) {
        BigBonyVariant2[BigBonyVariant2["BIG_BONY"] = 0] = "BIG_BONY";
        BigBonyVariant2[BigBonyVariant2["BIG_BONE"] = 10] = "BIG_BONE";
      })(BigBonyVariant || (exports2.BigBonyVariant = BigBonyVariant = {}));
      var GuttyFattyVariant;
      (function(GuttyFattyVariant2) {
        GuttyFattyVariant2[GuttyFattyVariant2["GUTTED_FATTY"] = 0] = "GUTTED_FATTY";
        GuttyFattyVariant2[GuttyFattyVariant2["GUTTY_FATTY_EYE"] = 10] = "GUTTY_FATTY_EYE";
        GuttyFattyVariant2[GuttyFattyVariant2["FESTERING_GUTS"] = 20] = "FESTERING_GUTS";
      })(GuttyFattyVariant || (exports2.GuttyFattyVariant = GuttyFattyVariant = {}));
      var ExorcistVariant;
      (function(ExorcistVariant2) {
        ExorcistVariant2[ExorcistVariant2["EXORCIST"] = 0] = "EXORCIST";
        ExorcistVariant2[ExorcistVariant2["FANATIC"] = 1] = "FANATIC";
      })(ExorcistVariant || (exports2.ExorcistVariant = ExorcistVariant = {}));
      var WhipperVariant;
      (function(WhipperVariant2) {
        WhipperVariant2[WhipperVariant2["WHIPPER"] = 0] = "WHIPPER";
        WhipperVariant2[WhipperVariant2["SNAPPER"] = 1] = "SNAPPER";
        WhipperVariant2[WhipperVariant2["FLAGELLANT"] = 2] = "FLAGELLANT";
      })(WhipperVariant || (exports2.WhipperVariant = WhipperVariant = {}));
      var PeeperFattyVariant;
      (function(PeeperFattyVariant2) {
        PeeperFattyVariant2[PeeperFattyVariant2["PEEPING_FATTY"] = 0] = "PEEPING_FATTY";
        PeeperFattyVariant2[PeeperFattyVariant2["PEEPING_FATTY_EYE"] = 10] = "PEEPING_FATTY_EYE";
      })(PeeperFattyVariant || (exports2.PeeperFattyVariant = PeeperFattyVariant = {}));
      var RevenantVariant;
      (function(RevenantVariant2) {
        RevenantVariant2[RevenantVariant2["REVENANT"] = 0] = "REVENANT";
        RevenantVariant2[RevenantVariant2["QUAD_REVENANT"] = 1] = "QUAD_REVENANT";
      })(RevenantVariant || (exports2.RevenantVariant = RevenantVariant = {}));
      var CanaryVariant;
      (function(CanaryVariant2) {
        CanaryVariant2[CanaryVariant2["CANARY"] = 0] = "CANARY";
        CanaryVariant2[CanaryVariant2["FOREIGNER"] = 1] = "FOREIGNER";
      })(CanaryVariant || (exports2.CanaryVariant = CanaryVariant = {}));
      var Gaper2Variant;
      (function(Gaper2Variant2) {
        Gaper2Variant2[Gaper2Variant2["GAPER"] = 0] = "GAPER";
        Gaper2Variant2[Gaper2Variant2["HORF"] = 1] = "HORF";
        Gaper2Variant2[Gaper2Variant2["GUSHER"] = 2] = "GUSHER";
      })(Gaper2Variant || (exports2.Gaper2Variant = Gaper2Variant = {}));
      var Charger2Variant;
      (function(Charger2Variant2) {
        Charger2Variant2[Charger2Variant2["CHARGER"] = 0] = "CHARGER";
        Charger2Variant2[Charger2Variant2["ELLEECH"] = 1] = "ELLEECH";
      })(Charger2Variant || (exports2.Charger2Variant = Charger2Variant = {}));
      var EvisVariant;
      (function(EvisVariant2) {
        EvisVariant2[EvisVariant2["EVIS"] = 0] = "EVIS";
        EvisVariant2[EvisVariant2["EVIS_GUTS"] = 10] = "EVIS_GUTS";
      })(EvisVariant || (exports2.EvisVariant = EvisVariant = {}));
      var DarkEsauVariant;
      (function(DarkEsauVariant2) {
        DarkEsauVariant2[DarkEsauVariant2["DARK_ESAU"] = 0] = "DARK_ESAU";
        DarkEsauVariant2[DarkEsauVariant2["PIT"] = 1] = "PIT";
      })(DarkEsauVariant || (exports2.DarkEsauVariant = DarkEsauVariant = {}));
      var DumpVariant;
      (function(DumpVariant2) {
        DumpVariant2[DumpVariant2["DUMP"] = 0] = "DUMP";
        DumpVariant2[DumpVariant2["DUMP_HEAD"] = 1] = "DUMP_HEAD";
      })(DumpVariant || (exports2.DumpVariant = DumpVariant = {}));
      var NeedleVariant;
      (function(NeedleVariant2) {
        NeedleVariant2[NeedleVariant2["NEEDLE"] = 0] = "NEEDLE";
        NeedleVariant2[NeedleVariant2["PASTY"] = 1] = "PASTY";
      })(NeedleVariant || (exports2.NeedleVariant = NeedleVariant = {}));
      var CultistVariant;
      (function(CultistVariant2) {
        CultistVariant2[CultistVariant2["CULTIST"] = 0] = "CULTIST";
        CultistVariant2[CultistVariant2["BLOOD_CULTIST"] = 1] = "BLOOD_CULTIST";
        CultistVariant2[CultistVariant2["BONE_TRAP"] = 10] = "BONE_TRAP";
      })(CultistVariant || (exports2.CultistVariant = CultistVariant = {}));
      var VisFattyVariant;
      (function(VisFattyVariant2) {
        VisFattyVariant2[VisFattyVariant2["VIS_FATTY"] = 0] = "VIS_FATTY";
        VisFattyVariant2[VisFattyVariant2["FETAL_DEMON"] = 1] = "FETAL_DEMON";
      })(VisFattyVariant || (exports2.VisFattyVariant = VisFattyVariant = {}));
      var GoatVariant;
      (function(GoatVariant2) {
        GoatVariant2[GoatVariant2["GOAT"] = 0] = "GOAT";
        GoatVariant2[GoatVariant2["BLACK_GOAT"] = 1] = "BLACK_GOAT";
      })(GoatVariant || (exports2.GoatVariant = GoatVariant = {}));
      var VisageVariant;
      (function(VisageVariant2) {
        VisageVariant2[VisageVariant2["VISAGE"] = 0] = "VISAGE";
        VisageVariant2[VisageVariant2["VISAGE_MASK"] = 1] = "VISAGE_MASK";
        VisageVariant2[VisageVariant2["VISAGE_CHAIN"] = 10] = "VISAGE_CHAIN";
        VisageVariant2[VisageVariant2["VISAGE_PLASMA"] = 20] = "VISAGE_PLASMA";
      })(VisageVariant || (exports2.VisageVariant = VisageVariant = {}));
      var SirenVariant;
      (function(SirenVariant2) {
        SirenVariant2[SirenVariant2["SIREN"] = 0] = "SIREN";
        SirenVariant2[SirenVariant2["SIREN_SKULL"] = 1] = "SIREN_SKULL";
        SirenVariant2[SirenVariant2["SIREN_HELPER_PROJECTILE"] = 10] = "SIREN_HELPER_PROJECTILE";
      })(SirenVariant || (exports2.SirenVariant = SirenVariant = {}));
      var ScourgeVariant;
      (function(ScourgeVariant2) {
        ScourgeVariant2[ScourgeVariant2["SCOURGE"] = 0] = "SCOURGE";
        ScourgeVariant2[ScourgeVariant2["SCOURGE_CHAIN"] = 10] = "SCOURGE_CHAIN";
      })(ScourgeVariant || (exports2.ScourgeVariant = ScourgeVariant = {}));
      var ChimeraVariant;
      (function(ChimeraVariant2) {
        ChimeraVariant2[ChimeraVariant2["CHIMERA"] = 0] = "CHIMERA";
        ChimeraVariant2[ChimeraVariant2["CHIMERA_BODY"] = 1] = "CHIMERA_BODY";
        ChimeraVariant2[ChimeraVariant2["CHIMERA_HEAD"] = 2] = "CHIMERA_HEAD";
      })(ChimeraVariant || (exports2.ChimeraVariant = ChimeraVariant = {}));
      var RotgutVariant;
      (function(RotgutVariant2) {
        RotgutVariant2[RotgutVariant2["PHASE_1_HEAD"] = 0] = "PHASE_1_HEAD";
        RotgutVariant2[RotgutVariant2["PHASE_2_MAGGOT"] = 1] = "PHASE_2_MAGGOT";
        RotgutVariant2[RotgutVariant2["PHASE_3_HEART"] = 2] = "PHASE_3_HEART";
      })(RotgutVariant || (exports2.RotgutVariant = RotgutVariant = {}));
      var MotherVariant;
      (function(MotherVariant2) {
        MotherVariant2[MotherVariant2["MOTHER_1"] = 0] = "MOTHER_1";
        MotherVariant2[MotherVariant2["MOTHER_2"] = 10] = "MOTHER_2";
        MotherVariant2[MotherVariant2["DEAD_ISAAC"] = 20] = "DEAD_ISAAC";
        MotherVariant2[MotherVariant2["WORM"] = 30] = "WORM";
        MotherVariant2[MotherVariant2["BALL"] = 100] = "BALL";
      })(MotherVariant || (exports2.MotherVariant = MotherVariant = {}));
      var SingeVariant;
      (function(SingeVariant2) {
        SingeVariant2[SingeVariant2["SINGE"] = 0] = "SINGE";
        SingeVariant2[SingeVariant2["SINGE_BALL"] = 1] = "SINGE_BALL";
      })(SingeVariant || (exports2.SingeVariant = SingeVariant = {}));
      var RaglichVariant;
      (function(RaglichVariant2) {
        RaglichVariant2[RaglichVariant2["RAGLICH"] = 0] = "RAGLICH";
        RaglichVariant2[RaglichVariant2["RAGLICH_ARM"] = 1] = "RAGLICH_ARM";
      })(RaglichVariant || (exports2.RaglichVariant = RaglichVariant = {}));
      var ClutchVariant;
      (function(ClutchVariant2) {
        ClutchVariant2[ClutchVariant2["CLUTCH"] = 0] = "CLUTCH";
        ClutchVariant2[ClutchVariant2["CLUTCH_ORBITAL"] = 1] = "CLUTCH_ORBITAL";
      })(ClutchVariant || (exports2.ClutchVariant = ClutchVariant = {}));
      var DogmaVariant;
      (function(DogmaVariant2) {
        DogmaVariant2[DogmaVariant2["DOGMA_PHASE_1"] = 0] = "DOGMA_PHASE_1";
        DogmaVariant2[DogmaVariant2["TV"] = 1] = "TV";
        DogmaVariant2[DogmaVariant2["ANGEL_PHASE_2"] = 2] = "ANGEL_PHASE_2";
        DogmaVariant2[DogmaVariant2["ANGEL_BABY_UNUSED"] = 10] = "ANGEL_BABY_UNUSED";
      })(DogmaVariant || (exports2.DogmaVariant = DogmaVariant = {}));
      var BeastVariant;
      (function(BeastVariant2) {
        BeastVariant2[BeastVariant2["BEAST"] = 0] = "BEAST";
        BeastVariant2[BeastVariant2["STALACTITE"] = 1] = "STALACTITE";
        BeastVariant2[BeastVariant2["ROCK_PROJECTILE"] = 2] = "ROCK_PROJECTILE";
        BeastVariant2[BeastVariant2["SOUL"] = 3] = "SOUL";
        BeastVariant2[BeastVariant2["ULTRA_FAMINE"] = 10] = "ULTRA_FAMINE";
        BeastVariant2[BeastVariant2["ULTRA_FAMINE_FLY"] = 11] = "ULTRA_FAMINE_FLY";
        BeastVariant2[BeastVariant2["ULTRA_PESTILENCE"] = 20] = "ULTRA_PESTILENCE";
        BeastVariant2[BeastVariant2["ULTRA_PESTILENCE_FLY"] = 21] = "ULTRA_PESTILENCE_FLY";
        BeastVariant2[BeastVariant2["ULTRA_PESTILENCE_MAGGOT"] = 22] = "ULTRA_PESTILENCE_MAGGOT";
        BeastVariant2[BeastVariant2["ULTRA_PESTILENCE_FLY_BALL"] = 23] = "ULTRA_PESTILENCE_FLY_BALL";
        BeastVariant2[BeastVariant2["ULTRA_WAR"] = 30] = "ULTRA_WAR";
        BeastVariant2[BeastVariant2["ULTRA_WAR_BOMB"] = 31] = "ULTRA_WAR_BOMB";
        BeastVariant2[BeastVariant2["ULTRA_DEATH"] = 40] = "ULTRA_DEATH";
        BeastVariant2[BeastVariant2["ULTRA_DEATH_SCYTHE"] = 41] = "ULTRA_DEATH_SCYTHE";
        BeastVariant2[BeastVariant2["ULTRA_DEATH_HEAD"] = 42] = "ULTRA_DEATH_HEAD";
        BeastVariant2[BeastVariant2["BACKGROUND_BEAST"] = 100] = "BACKGROUND_BEAST";
        BeastVariant2[BeastVariant2["BACKGROUND_FAMINE"] = 101] = "BACKGROUND_FAMINE";
        BeastVariant2[BeastVariant2["BACKGROUND_PESTILENCE"] = 102] = "BACKGROUND_PESTILENCE";
        BeastVariant2[BeastVariant2["BACKGROUND_WAR"] = 103] = "BACKGROUND_WAR";
        BeastVariant2[BeastVariant2["BACKGROUND_DEATH"] = 104] = "BACKGROUND_DEATH";
      })(BeastVariant || (exports2.BeastVariant = BeastVariant = {}));
      var GenericPropVariant;
      (function(GenericPropVariant2) {
        GenericPropVariant2[GenericPropVariant2["GENERIC_PROP"] = 0] = "GENERIC_PROP";
        GenericPropVariant2[GenericPropVariant2["MOMS_DRESSER"] = 1] = "MOMS_DRESSER";
        GenericPropVariant2[GenericPropVariant2["MOMS_VANITY"] = 2] = "MOMS_VANITY";
        GenericPropVariant2[GenericPropVariant2["COUCH"] = 3] = "COUCH";
        GenericPropVariant2[GenericPropVariant2["TV"] = 4] = "TV";
      })(GenericPropVariant || (exports2.GenericPropVariant = GenericPropVariant = {}));
      var EffectVariant;
      (function(EffectVariant2) {
        EffectVariant2[EffectVariant2["EFFECT_NULL"] = 0] = "EFFECT_NULL";
        EffectVariant2[EffectVariant2["BOMB_EXPLOSION"] = 1] = "BOMB_EXPLOSION";
        EffectVariant2[EffectVariant2["BLOOD_EXPLOSION"] = 2] = "BLOOD_EXPLOSION";
        EffectVariant2[EffectVariant2["FLY_EXPLOSION"] = 3] = "FLY_EXPLOSION";
        EffectVariant2[EffectVariant2["ROCK_PARTICLE"] = 4] = "ROCK_PARTICLE";
        EffectVariant2[EffectVariant2["BLOOD_PARTICLE"] = 5] = "BLOOD_PARTICLE";
        EffectVariant2[EffectVariant2["DEVIL"] = 6] = "DEVIL";
        EffectVariant2[EffectVariant2["BLOOD_SPLAT"] = 7] = "BLOOD_SPLAT";
        EffectVariant2[EffectVariant2["LADDER"] = 8] = "LADDER";
        EffectVariant2[EffectVariant2["ANGEL"] = 9] = "ANGEL";
        EffectVariant2[EffectVariant2["BLUE_FLAME"] = 10] = "BLUE_FLAME";
        EffectVariant2[EffectVariant2["BULLET_POOF"] = 11] = "BULLET_POOF";
        EffectVariant2[EffectVariant2["TEAR_POOF_A"] = 12] = "TEAR_POOF_A";
        EffectVariant2[EffectVariant2["TEAR_POOF_B"] = 13] = "TEAR_POOF_B";
        EffectVariant2[EffectVariant2["RIPPLE_POOF"] = 14] = "RIPPLE_POOF";
        EffectVariant2[EffectVariant2["POOF_1"] = 15] = "POOF_1";
        EffectVariant2[EffectVariant2["POOF_2"] = 16] = "POOF_2";
        EffectVariant2[EffectVariant2["POOF_4"] = 17] = "POOF_4";
        EffectVariant2[EffectVariant2["BOMB_CRATER"] = 18] = "BOMB_CRATER";
        EffectVariant2[EffectVariant2["CRACK_THE_SKY"] = 19] = "CRACK_THE_SKY";
        EffectVariant2[EffectVariant2["SCYTHE_BREAK"] = 20] = "SCYTHE_BREAK";
        EffectVariant2[EffectVariant2["TINY_BUG"] = 21] = "TINY_BUG";
        EffectVariant2[EffectVariant2["CREEP_RED"] = 22] = "CREEP_RED";
        EffectVariant2[EffectVariant2["CREEP_GREEN"] = 23] = "CREEP_GREEN";
        EffectVariant2[EffectVariant2["CREEP_YELLOW"] = 24] = "CREEP_YELLOW";
        EffectVariant2[EffectVariant2["CREEP_WHITE"] = 25] = "CREEP_WHITE";
        EffectVariant2[EffectVariant2["CREEP_BLACK"] = 26] = "CREEP_BLACK";
        EffectVariant2[EffectVariant2["WOOD_PARTICLE"] = 27] = "WOOD_PARTICLE";
        EffectVariant2[EffectVariant2["MONSTROS_TOOTH"] = 28] = "MONSTROS_TOOTH";
        EffectVariant2[EffectVariant2["MOM_FOOT_STOMP"] = 29] = "MOM_FOOT_STOMP";
        EffectVariant2[EffectVariant2["TARGET"] = 30] = "TARGET";
        EffectVariant2[EffectVariant2["ROCKET"] = 31] = "ROCKET";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_LEMON_MISHAP"] = 32] = "PLAYER_CREEP_LEMON_MISHAP";
        EffectVariant2[EffectVariant2["TINY_FLY"] = 33] = "TINY_FLY";
        EffectVariant2[EffectVariant2["FART"] = 34] = "FART";
        EffectVariant2[EffectVariant2["TOOTH_PARTICLE"] = 35] = "TOOTH_PARTICLE";
        EffectVariant2[EffectVariant2["XRAY_WALL"] = 36] = "XRAY_WALL";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_HOLY_WATER"] = 37] = "PLAYER_CREEP_HOLY_WATER";
        EffectVariant2[EffectVariant2["SPIDER_EXPLOSION"] = 38] = "SPIDER_EXPLOSION";
        EffectVariant2[EffectVariant2["HEAVEN_LIGHT_DOOR"] = 39] = "HEAVEN_LIGHT_DOOR";
        EffectVariant2[EffectVariant2["STAR_FLASH"] = 40] = "STAR_FLASH";
        EffectVariant2[EffectVariant2["WATER_DROPLET"] = 41] = "WATER_DROPLET";
        EffectVariant2[EffectVariant2["BLOOD_GUSH"] = 42] = "BLOOD_GUSH";
        EffectVariant2[EffectVariant2["POOP_EXPLOSION"] = 43] = "POOP_EXPLOSION";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_WHITE"] = 44] = "PLAYER_CREEP_WHITE";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_BLACK"] = 45] = "PLAYER_CREEP_BLACK";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_RED"] = 46] = "PLAYER_CREEP_RED";
        EffectVariant2[EffectVariant2["TRINITY_SHIELD"] = 47] = "TRINITY_SHIELD";
        EffectVariant2[EffectVariant2["BATTERY"] = 48] = "BATTERY";
        EffectVariant2[EffectVariant2["HEART"] = 49] = "HEART";
        EffectVariant2[EffectVariant2["LASER_IMPACT"] = 50] = "LASER_IMPACT";
        EffectVariant2[EffectVariant2["HOT_BOMB_FIRE"] = 51] = "HOT_BOMB_FIRE";
        EffectVariant2[EffectVariant2["RED_CANDLE_FLAME"] = 52] = "RED_CANDLE_FLAME";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_GREEN"] = 53] = "PLAYER_CREEP_GREEN";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_HOLY_WATER_TRAIL"] = 54] = "PLAYER_CREEP_HOLY_WATER_TRAIL";
        EffectVariant2[EffectVariant2["SPIKE"] = 55] = "SPIKE";
        EffectVariant2[EffectVariant2["CREEP_BROWN"] = 56] = "CREEP_BROWN";
        EffectVariant2[EffectVariant2["PULLING_EFFECT"] = 57] = "PULLING_EFFECT";
        EffectVariant2[EffectVariant2["POOP_PARTICLE"] = 58] = "POOP_PARTICLE";
        EffectVariant2[EffectVariant2["DUST_CLOUD"] = 59] = "DUST_CLOUD";
        EffectVariant2[EffectVariant2["BOOMERANG"] = 60] = "BOOMERANG";
        EffectVariant2[EffectVariant2["SHOCKWAVE"] = 61] = "SHOCKWAVE";
        EffectVariant2[EffectVariant2["ROCK_EXPLOSION"] = 62] = "ROCK_EXPLOSION";
        EffectVariant2[EffectVariant2["WORM"] = 63] = "WORM";
        EffectVariant2[EffectVariant2["BEETLE"] = 64] = "BEETLE";
        EffectVariant2[EffectVariant2["WISP"] = 65] = "WISP";
        EffectVariant2[EffectVariant2["EMBER_PARTICLE"] = 66] = "EMBER_PARTICLE";
        EffectVariant2[EffectVariant2["SHOCKWAVE_DIRECTIONAL"] = 67] = "SHOCKWAVE_DIRECTIONAL";
        EffectVariant2[EffectVariant2["WALL_BUG"] = 68] = "WALL_BUG";
        EffectVariant2[EffectVariant2["BUTTERFLY"] = 69] = "BUTTERFLY";
        EffectVariant2[EffectVariant2["BLOOD_DROP"] = 70] = "BLOOD_DROP";
        EffectVariant2[EffectVariant2["BRIMSTONE_SWIRL"] = 71] = "BRIMSTONE_SWIRL";
        EffectVariant2[EffectVariant2["CRACK_WAVE"] = 72] = "CRACK_WAVE";
        EffectVariant2[EffectVariant2["SHOCKWAVE_RANDOM"] = 73] = "SHOCKWAVE_RANDOM";
        EffectVariant2[EffectVariant2["CARPET"] = 74] = "CARPET";
        EffectVariant2[EffectVariant2["BAR_PARTICLE"] = 75] = "BAR_PARTICLE";
        EffectVariant2[EffectVariant2["DICE_FLOOR"] = 76] = "DICE_FLOOR";
        EffectVariant2[EffectVariant2["LARGE_BLOOD_EXPLOSION"] = 77] = "LARGE_BLOOD_EXPLOSION";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_LEMON_PARTY"] = 78] = "PLAYER_CREEP_LEMON_PARTY";
        EffectVariant2[EffectVariant2["TEAR_POOF_SMALL"] = 79] = "TEAR_POOF_SMALL";
        EffectVariant2[EffectVariant2["TEAR_POOF_VERY_SMALL"] = 80] = "TEAR_POOF_VERY_SMALL";
        EffectVariant2[EffectVariant2["FRIEND_BALL"] = 81] = "FRIEND_BALL";
        EffectVariant2[EffectVariant2["WOMB_TELEPORT"] = 82] = "WOMB_TELEPORT";
        EffectVariant2[EffectVariant2["SPEAR_OF_DESTINY"] = 83] = "SPEAR_OF_DESTINY";
        EffectVariant2[EffectVariant2["EVIL_EYE"] = 84] = "EVIL_EYE";
        EffectVariant2[EffectVariant2["DIAMOND_PARTICLE"] = 85] = "DIAMOND_PARTICLE";
        EffectVariant2[EffectVariant2["NAIL_PARTICLE"] = 86] = "NAIL_PARTICLE";
        EffectVariant2[EffectVariant2["FALLING_EMBER"] = 87] = "FALLING_EMBER";
        EffectVariant2[EffectVariant2["DARK_BALL_SMOKE_PARTICLE"] = 88] = "DARK_BALL_SMOKE_PARTICLE";
        EffectVariant2[EffectVariant2["ULTRA_GREED_FOOTPRINT"] = 89] = "ULTRA_GREED_FOOTPRINT";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_PUDDLE_MILK"] = 90] = "PLAYER_CREEP_PUDDLE_MILK";
        EffectVariant2[EffectVariant2["MOMS_HAND"] = 91] = "MOMS_HAND";
        EffectVariant2[EffectVariant2["PLAYER_CREEP_BLACK_POWDER"] = 92] = "PLAYER_CREEP_BLACK_POWDER";
        EffectVariant2[EffectVariant2["PENTAGRAM_BLACK_POWDER"] = 93] = "PENTAGRAM_BLACK_POWDER";
        EffectVariant2[EffectVariant2["CREEP_SLIPPERY_BROWN"] = 94] = "CREEP_SLIPPERY_BROWN";
        EffectVariant2[EffectVariant2["GOLD_PARTICLE"] = 95] = "GOLD_PARTICLE";
        EffectVariant2[EffectVariant2["HUSH_LASER"] = 96] = "HUSH_LASER";
        EffectVariant2[EffectVariant2["IMPACT"] = 97] = "IMPACT";
        EffectVariant2[EffectVariant2["COIN_PARTICLE"] = 98] = "COIN_PARTICLE";
        EffectVariant2[EffectVariant2["WATER_SPLASH"] = 99] = "WATER_SPLASH";
        EffectVariant2[EffectVariant2["HUSH_ASHES"] = 100] = "HUSH_ASHES";
        EffectVariant2[EffectVariant2["HUSH_LASER_UP"] = 101] = "HUSH_LASER_UP";
        EffectVariant2[EffectVariant2["BULLET_POOF_HUSH"] = 102] = "BULLET_POOF_HUSH";
        EffectVariant2[EffectVariant2["ULTRA_GREED_BLING"] = 103] = "ULTRA_GREED_BLING";
        EffectVariant2[EffectVariant2["FIREWORKS"] = 104] = "FIREWORKS";
        EffectVariant2[EffectVariant2["BROWN_CLOUD"] = 105] = "BROWN_CLOUD";
        EffectVariant2[EffectVariant2["FART_RING"] = 106] = "FART_RING";
        EffectVariant2[EffectVariant2["BLACK_HOLE"] = 107] = "BLACK_HOLE";
        EffectVariant2[EffectVariant2["MR_ME"] = 108] = "MR_ME";
        EffectVariant2[EffectVariant2["DEATH_SKULL"] = 109] = "DEATH_SKULL";
        EffectVariant2[EffectVariant2["ENEMY_BRIMSTONE_SWIRL"] = 110] = "ENEMY_BRIMSTONE_SWIRL";
        EffectVariant2[EffectVariant2["HAEMO_TRAIL"] = 111] = "HAEMO_TRAIL";
        EffectVariant2[EffectVariant2["HALLOWED_GROUND"] = 112] = "HALLOWED_GROUND";
        EffectVariant2[EffectVariant2["BRIMSTONE_BALL"] = 113] = "BRIMSTONE_BALL";
        EffectVariant2[EffectVariant2["FORGOTTEN_CHAIN"] = 114] = "FORGOTTEN_CHAIN";
        EffectVariant2[EffectVariant2["BROKEN_SHOVEL_SHADOW"] = 115] = "BROKEN_SHOVEL_SHADOW";
        EffectVariant2[EffectVariant2["DIRT_PATCH"] = 116] = "DIRT_PATCH";
        EffectVariant2[EffectVariant2["FORGOTTEN_SOUL"] = 117] = "FORGOTTEN_SOUL";
        EffectVariant2[EffectVariant2["SMALL_ROCKET"] = 118] = "SMALL_ROCKET";
        EffectVariant2[EffectVariant2["TIMER"] = 119] = "TIMER";
        EffectVariant2[EffectVariant2["SPAWNER"] = 120] = "SPAWNER";
        EffectVariant2[EffectVariant2["LIGHT"] = 121] = "LIGHT";
        EffectVariant2[EffectVariant2["BIG_HORN_HOLE_HELPER"] = 122] = "BIG_HORN_HOLE_HELPER";
        EffectVariant2[EffectVariant2["HALO"] = 123] = "HALO";
        EffectVariant2[EffectVariant2["TAR_BUBBLE"] = 124] = "TAR_BUBBLE";
        EffectVariant2[EffectVariant2["BIG_HORN_HAND"] = 125] = "BIG_HORN_HAND";
        EffectVariant2[EffectVariant2["TECH_DOT"] = 126] = "TECH_DOT";
        EffectVariant2[EffectVariant2["MAMA_MEGA_EXPLOSION"] = 127] = "MAMA_MEGA_EXPLOSION";
        EffectVariant2[EffectVariant2["OPTION_LINE"] = 128] = "OPTION_LINE";
        EffectVariant2[EffectVariant2["LEECH_EXPLOSION"] = 130] = "LEECH_EXPLOSION";
        EffectVariant2[EffectVariant2["MAGGOT_EXPLOSION"] = 131] = "MAGGOT_EXPLOSION";
        EffectVariant2[EffectVariant2["BIG_SPLASH"] = 132] = "BIG_SPLASH";
        EffectVariant2[EffectVariant2["WATER_RIPPLE"] = 133] = "WATER_RIPPLE";
        EffectVariant2[EffectVariant2["PEDESTAL_RIPPLE"] = 134] = "PEDESTAL_RIPPLE";
        EffectVariant2[EffectVariant2["RAIN_DROP"] = 135] = "RAIN_DROP";
        EffectVariant2[EffectVariant2["GRID_ENTITY_PROJECTILE_HELPER"] = 136] = "GRID_ENTITY_PROJECTILE_HELPER";
        EffectVariant2[EffectVariant2["WORMWOOD_HOLE"] = 137] = "WORMWOOD_HOLE";
        EffectVariant2[EffectVariant2["MIST"] = 138] = "MIST";
        EffectVariant2[EffectVariant2["TRAPDOOR_COVER"] = 139] = "TRAPDOOR_COVER";
        EffectVariant2[EffectVariant2["BACKDROP_DECORATION"] = 140] = "BACKDROP_DECORATION";
        EffectVariant2[EffectVariant2["SMOKE_CLOUD"] = 141] = "SMOKE_CLOUD";
        EffectVariant2[EffectVariant2["WHIRLPOOL"] = 142] = "WHIRLPOOL";
        EffectVariant2[EffectVariant2["FART_WAVE"] = 143] = "FART_WAVE";
        EffectVariant2[EffectVariant2["ENEMY_GHOST"] = 144] = "ENEMY_GHOST";
        EffectVariant2[EffectVariant2["ROCK_POOF"] = 145] = "ROCK_POOF";
        EffectVariant2[EffectVariant2["DIRT_PILE"] = 146] = "DIRT_PILE";
        EffectVariant2[EffectVariant2["FIRE_JET"] = 147] = "FIRE_JET";
        EffectVariant2[EffectVariant2["FIRE_WAVE"] = 148] = "FIRE_WAVE";
        EffectVariant2[EffectVariant2["BIG_ROCK_EXPLOSION"] = 149] = "BIG_ROCK_EXPLOSION";
        EffectVariant2[EffectVariant2["BIG_CRACK_WAVE"] = 150] = "BIG_CRACK_WAVE";
        EffectVariant2[EffectVariant2["BIG_ATTRACT"] = 151] = "BIG_ATTRACT";
        EffectVariant2[EffectVariant2["HORNFEL_ROOM_CONTROLLER"] = 152] = "HORNFEL_ROOM_CONTROLLER";
        EffectVariant2[EffectVariant2["OCCULT_TARGET"] = 153] = "OCCULT_TARGET";
        EffectVariant2[EffectVariant2["DOOR_OUTLINE"] = 154] = "DOOR_OUTLINE";
        EffectVariant2[EffectVariant2["CREEP_SLIPPERY_BROWN_GROWING"] = 155] = "CREEP_SLIPPERY_BROWN_GROWING";
        EffectVariant2[EffectVariant2["TALL_LADDER"] = 156] = "TALL_LADDER";
        EffectVariant2[EffectVariant2["WILLO_SPAWNER"] = 157] = "WILLO_SPAWNER";
        EffectVariant2[EffectVariant2["TADPOLE"] = 158] = "TADPOLE";
        EffectVariant2[EffectVariant2["LIL_GHOST"] = 159] = "LIL_GHOST";
        EffectVariant2[EffectVariant2["BISHOP_SHIELD"] = 160] = "BISHOP_SHIELD";
        EffectVariant2[EffectVariant2["PORTAL_TELEPORT"] = 161] = "PORTAL_TELEPORT";
        EffectVariant2[EffectVariant2["HERETIC_PENTAGRAM"] = 162] = "HERETIC_PENTAGRAM";
        EffectVariant2[EffectVariant2["CHAIN_GIB"] = 163] = "CHAIN_GIB";
        EffectVariant2[EffectVariant2["SIREN_RING"] = 164] = "SIREN_RING";
        EffectVariant2[EffectVariant2["CHARM_EFFECT"] = 165] = "CHARM_EFFECT";
        EffectVariant2[EffectVariant2["SPRITE_TRAIL"] = 166] = "SPRITE_TRAIL";
        EffectVariant2[EffectVariant2["CHAIN_LIGHTNING"] = 167] = "CHAIN_LIGHTNING";
        EffectVariant2[EffectVariant2["COLOSTOMIA_PUDDLE"] = 168] = "COLOSTOMIA_PUDDLE";
        EffectVariant2[EffectVariant2["CREEP_STATIC"] = 169] = "CREEP_STATIC";
        EffectVariant2[EffectVariant2["DOGMA_DEBRIS"] = 170] = "DOGMA_DEBRIS";
        EffectVariant2[EffectVariant2["DOGMA_BLACK_HOLE"] = 171] = "DOGMA_BLACK_HOLE";
        EffectVariant2[EffectVariant2["DOGMA_ORB"] = 172] = "DOGMA_ORB";
        EffectVariant2[EffectVariant2["CRACKED_ORB_POOF"] = 173] = "CRACKED_ORB_POOF";
        EffectVariant2[EffectVariant2["SHOP_SPIKES"] = 174] = "SHOP_SPIKES";
        EffectVariant2[EffectVariant2["KINETI_BEAM"] = 175] = "KINETI_BEAM";
        EffectVariant2[EffectVariant2["CLEAVER_SLASH"] = 176] = "CLEAVER_SLASH";
        EffectVariant2[EffectVariant2["REVERSE_EXPLOSION"] = 177] = "REVERSE_EXPLOSION";
        EffectVariant2[EffectVariant2["URN_OF_SOULS"] = 178] = "URN_OF_SOULS";
        EffectVariant2[EffectVariant2["ENEMY_SOUL"] = 179] = "ENEMY_SOUL";
        EffectVariant2[EffectVariant2["RIFT"] = 180] = "RIFT";
        EffectVariant2[EffectVariant2["LAVA_SPAWNER"] = 181] = "LAVA_SPAWNER";
        EffectVariant2[EffectVariant2["BIG_KNIFE"] = 182] = "BIG_KNIFE";
        EffectVariant2[EffectVariant2["MOTHER_SHOCKWAVE"] = 183] = "MOTHER_SHOCKWAVE";
        EffectVariant2[EffectVariant2["WORM_FRIEND_SNARE"] = 184] = "WORM_FRIEND_SNARE";
        EffectVariant2[EffectVariant2["REDEMPTION"] = 185] = "REDEMPTION";
        EffectVariant2[EffectVariant2["HUNGRY_SOUL"] = 186] = "HUNGRY_SOUL";
        EffectVariant2[EffectVariant2["EXPLOSION_WAVE"] = 187] = "EXPLOSION_WAVE";
        EffectVariant2[EffectVariant2["DIVINE_INTERVENTION"] = 188] = "DIVINE_INTERVENTION";
        EffectVariant2[EffectVariant2["PURGATORY"] = 189] = "PURGATORY";
        EffectVariant2[EffectVariant2["MOTHER_TRACER"] = 190] = "MOTHER_TRACER";
        EffectVariant2[EffectVariant2["PICKUP_GHOST"] = 191] = "PICKUP_GHOST";
        EffectVariant2[EffectVariant2["FISSURE_SPAWNER"] = 192] = "FISSURE_SPAWNER";
        EffectVariant2[EffectVariant2["ANIMA_CHAIN"] = 193] = "ANIMA_CHAIN";
        EffectVariant2[EffectVariant2["DARK_SNARE"] = 194] = "DARK_SNARE";
        EffectVariant2[EffectVariant2["CREEP_LIQUID_POOP"] = 195] = "CREEP_LIQUID_POOP";
        EffectVariant2[EffectVariant2["GROUND_GLOW"] = 196] = "GROUND_GLOW";
        EffectVariant2[EffectVariant2["DEAD_BIRD"] = 197] = "DEAD_BIRD";
        EffectVariant2[EffectVariant2["GENERIC_TRACER"] = 198] = "GENERIC_TRACER";
        EffectVariant2[EffectVariant2["ULTRA_DEATH_SCYTHE"] = 199] = "ULTRA_DEATH_SCYTHE";
      })(EffectVariant || (exports2.EffectVariant = EffectVariant = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/ActionTrigger.js
  var require_ActionTrigger = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/ActionTrigger.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ActionTriggerZero = exports2.ActionTrigger = void 0;
      var ActionTriggerInternal = {
        /** 1 << -1 (0) */
        NONE: 1 << -1,
        /** 1 << 0 (1) */
        BOMB_PLACED: 1 << 0,
        /** 1 << 1 (2) */
        MOVED: 1 << 1,
        /** 1 << 2 (4) */
        SHOOTING: 1 << 2,
        /** 1 << 3 (8) */
        CARD_PILL_USED: 1 << 3,
        /** 1 << 4 (16) */
        ITEM_ACTIVATED: 1 << 4,
        /** 1 << 5 (32) */
        ITEMS_DROPPED: 1 << 5
      };
      exports2.ActionTrigger = ActionTriggerInternal;
      exports2.ActionTriggerZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/CacheFlag.js
  var require_CacheFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/CacheFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CacheFlagZero = exports2.CacheFlag = void 0;
      var CacheFlagInternal = {
        /** 1 << 0 (1) */
        DAMAGE: 1 << 0,
        /** 1 << 1 (2) */
        FIRE_DELAY: 1 << 1,
        /** 1 << 2 (4) */
        SHOT_SPEED: 1 << 2,
        /** 1 << 3 (8) */
        RANGE: 1 << 3,
        /** 1 << 4 (16) */
        SPEED: 1 << 4,
        /** 1 << 5 (32) */
        TEAR_FLAG: 1 << 5,
        /** 1 << 6 (64) */
        TEAR_COLOR: 1 << 6,
        /** 1 << 7 (128) */
        FLYING: 1 << 7,
        /** 1 << 8 (256) */
        WEAPON: 1 << 8,
        /** 1 << 9 (512) */
        FAMILIARS: 1 << 9,
        /** 1 << 10 (1024) */
        LUCK: 1 << 10,
        /** 1 << 11 (2048) */
        SIZE: 1 << 11,
        /** 1 << 12 (4096) */
        COLOR: 1 << 12,
        /** 1 << 13 (8192) */
        PICKUP_VISION: 1 << 13,
        /** (1 << 16) - 1 */
        ALL: (1 << 16) - 1,
        /** 1 << 31 (2147483648) */
        TWIN_SYNC: 1 << 31
      };
      exports2.CacheFlag = CacheFlagInternal;
      exports2.CacheFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/DamageFlag.js
  var require_DamageFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/DamageFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DamageFlagZero = exports2.DamageFlag = void 0;
      var DamageFlagInternal = {
        /** 1 << 0 (1) */
        NO_KILL: 1 << 0,
        /**
         * e.g. fireplace
         *
         * 1 << 1 (2)
         */
        FIRE: 1 << 1,
        /** 1 << 2 (4) */
        EXPLOSION: 1 << 2,
        /** 1 << 3 (8) */
        LASER: 1 << 3,
        /** 1 << 4 (16) */
        ACID: 1 << 4,
        /** 1 << 5 (32) */
        RED_HEARTS: 1 << 5,
        /** 1 << 6 (64) */
        COUNTDOWN: 1 << 6,
        /** 1 << 7 (128) */
        SPIKES: 1 << 7,
        /** 1 << 8 (256) */
        CLONES: 1 << 8,
        /** 1 << 9 (512) */
        POOP: 1 << 9,
        /** 1 << 10 (1024) */
        DEVIL: 1 << 10,
        /** 1 << 11 (2048) */
        ISSAC_HEART: 1 << 11,
        /** 1 << 12 (4096) */
        TNT: 1 << 12,
        /** 1 << 13 (8192) */
        INVINCIBLE: 1 << 13,
        /** 1 << 14 (16384) */
        SPAWN_FLY: 1 << 14,
        /** 1 << 15 (32768) */
        POISON_BURN: 1 << 15,
        /** 1 << 16 (65536) */
        CURSED_DOOR: 1 << 16,
        /** 1 << 17 (131072) */
        TIMER: 1 << 17,
        /** 1 << 18 (262144) */
        IV_BAG: 1 << 18,
        /** 1 << 19 (524288) */
        PITFALL: 1 << 19,
        /** 1 << 20 (1048576) */
        CHEST: 1 << 20,
        /** 1 << 21 (2097152) */
        FAKE: 1 << 21,
        /** 1 << 22 (4194304) */
        BOOGER: 1 << 22,
        /** 1 << 23 (8388608) */
        SPAWN_BLACK_HEART: 1 << 23,
        /**
         * Comes from a strong impact. Can damage Tuff Twins or The Shell (e.g. Mom's foot, shockwaves,
         * rock tears).
         *
         * 1 << 24 (16777216)
         */
        CRUSH: 1 << 24,
        /** 1 << 25 (33554432) */
        NO_MODIFIERS: 1 << 25,
        /** 1 << 26 (67108864) */
        SPAWN_RED_HEART: 1 << 26,
        /** 1 << 27 (134217728) */
        SPAWN_COIN: 1 << 27,
        /** 1 << 28 (268435456) */
        NO_PENALTIES: 1 << 28,
        /** 1 << 29 (536870912) */
        SPAWN_TEMP_HEART: 1 << 29,
        /** 1 << 30 (1073741824) */
        IGNORE_ARMOR: 1 << 30,
        /** 1 << 31 (2147483648) */
        SPAWN_CARD: 1 << 31,
        /** 1 << 32 (4294967296) */
        SPAWN_RUNE: 1 << 32
      };
      exports2.DamageFlag = DamageFlagInternal;
      exports2.DamageFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/DisplayFlag.js
  var require_DisplayFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/DisplayFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DisplayFlagZero = exports2.DisplayFlag = void 0;
      var DisplayFlagInternal = {
        /** 1 << -1 (0) */
        INVISIBLE: 1 << -1,
        /** 1 << 0 (1) */
        VISIBLE: 1 << 0,
        /** 1 << 1 (2) */
        SHADOW: 1 << 1,
        /** 1 << 2 (4) */
        SHOW_ICON: 1 << 2
      };
      exports2.DisplayFlag = DisplayFlagInternal;
      exports2.DisplayFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/DoorSlotFlag.js
  var require_DoorSlotFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/DoorSlotFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DoorSlotFlagZero = exports2.DoorSlotFlag = void 0;
      var DoorSlot_1 = require_DoorSlot();
      var DoorSlotFlagInternal = {
        /** 1 << 0 (1) */
        LEFT_0: 1 << DoorSlot_1.DoorSlot.LEFT_0,
        /** 1 << 1 (2) */
        UP_0: 1 << DoorSlot_1.DoorSlot.UP_0,
        /** 1 << 2 (4) */
        RIGHT_0: 1 << DoorSlot_1.DoorSlot.RIGHT_0,
        /** 1 << 3 (8) */
        DOWN_0: 1 << DoorSlot_1.DoorSlot.DOWN_0,
        /** 1 << 4 (16) */
        LEFT_1: 1 << DoorSlot_1.DoorSlot.LEFT_1,
        /** 1 << 5 (32) */
        UP_1: 1 << DoorSlot_1.DoorSlot.UP_1,
        /** 1 << 6 (64) */
        RIGHT_1: 1 << DoorSlot_1.DoorSlot.RIGHT_1,
        /** 1 << 7 (128) */
        DOWN_1: 1 << DoorSlot_1.DoorSlot.DOWN_1
      };
      exports2.DoorSlotFlag = DoorSlotFlagInternal;
      exports2.DoorSlotFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/EntityFlag.js
  var require_EntityFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/EntityFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityFlagZero = exports2.EntityFlag = void 0;
      var EntityFlagInternal = {
        /**
         * Prevents status effects from applying to the entity (e.g. freeze, poison, slow, charm,
         * confusion, fear, burn, etc.).
         *
         * 1 << 0 (1)
         */
        NO_STATUS_EFFECTS: 1 << 0,
        /**
         * Do not interpolate the position.
         *
         * 1 << 1 (2)
         */
        NO_INTERPOLATE: 1 << 1,
        /**
         * The "Appear" animation will be played after the entity is initialized.
         *
         * 1 << 2 (4)
         */
        APPEAR: 1 << 2,
        /**
         * Meant for entities that have a sprite loaded that represent a floor texture. Entities with this
         * flag will be removed after their first render. (Removing the entity is desirable because we
         * would not want it to override other things that render to the floor, like bomb explosions.) You
         * can use `EntityFlag.NO_REMOVE_ON_TEX_RENDER` to disable this behavior.
         *
         * 1 << 3 (8)
         */
        RENDER_FLOOR: 1 << 3,
        /**
         * Will not be a target of NPCs or familiars.
         *
         * 1 << 4 (16)
         */
        NO_TARGET: 1 << 4,
        /** 1 << 5 (32) */
        FREEZE: 1 << 5,
        /** 1 << 6 (64) */
        POISON: 1 << 6,
        /** 1 << 7 (128) */
        SLOW: 1 << 7,
        /** 1 << 8 (256) */
        CHARM: 1 << 8,
        /** 1 << 9 (512) */
        CONFUSION: 1 << 9,
        /** 1 << 10 (1024) */
        MIDAS_FREEZE: 1 << 10,
        /**
         * Fleeing in fear (from e.g. Mom's Pad).
         *
         * 1 << 11 (2048)
         */
        FEAR: 1 << 11,
        /**
         * Caused by Fire Mind tears. Works like poison except with a red color effect.
         *
         * 1 << 12 (4096)
         */
        BURN: 1 << 12,
        /**
         * Meant for entities that have a sprite loaded that represent a wall texture. Entities with this
         * flag will be removed after their first render. (Removing the entity is desirable because we
         * would not want it to override other things that render to the wall, like bomb explosions.) You
         * can use `EntityFlag.NO_REMOVE_ON_TEX_RENDER` to disable this behavior.
         *
         * 1 << 13 (8192)
         */
        RENDER_WALL: 1 << 13,
        /**
         * The entity is updating at 60 frames per second and this is an odd frame.
         *
         * 1 << 14 (16384)
         */
        INTERPOLATION_UPDATE: 1 << 14,
        /**
         * Indicates that the entity is in a side-scrolling room and is within a gravity zone.
         *
         * 1 << 15 (32768)
         */
        APPLY_GRAVITY: 1 << 15,
        /** 1 << 16 (65536) */
        NO_BLOOD_SPLASH: 1 << 16,
        /**
         * See `EntityFlag.FLAG_RENDER_FLOOR` and `EntityFlag.FLAG_RENDER_WALL`.
         *
         * 1 << 17 (131072)
         */
        NO_REMOVE_ON_TEX_RENDER: 1 << 17,
        /** 1 << 18 (262144) */
        NO_DEATH_TRIGGER: 1 << 18,
        /**
         * This shares the same value as `FLAG_LASER_POP` and `FLAG_ITEM_SHOULD_DUPLICATE`, but has a
         * different meaning depending on the entity type.
         *
         * 1 << 19 (524288)
         */
        NO_SPIKE_DAMAGE: 1 << 19,
        /**
         * This shares the same value as `FLAG_NO_SPIKE_DAMAGE` and `FLAG_ITEM_SHOULD_DUPLICATE`, but has
         * a different meaning depending on the entity type.
         *
         * 1 << 19 (524288)
         */
        LASER_POP: 1 << 19,
        /**
         * A collectible affected by Damocles. The flag indicates that it will be duplicated at the end of
         * the current frame.
         *
         * This shares the same value as `FLAG_NO_SPIKE_DAMAGE` and `FLAG_LASER_POP`, but has a different
         * meaning depending on the entity type.
         *
         * 1 << 19 (524288)
         */
        ITEM_SHOULD_DUPLICATE: 1 << 19,
        /**
         * Some bosses (like Lamb or Mother) can die but they will still appear to be active in the room
         * (`IsActiveEnemy`). You can check this flag in those cases.
         *
         * 1 << 20 (1048576)
         */
        BOSS_DEATH_TRIGGERED: 1 << 20,
        /** 1 << 21 (2097152) */
        DONT_OVERWRITE: 1 << 21,
        /** 1 << 22 (4194304) */
        SPAWN_STICKY_SPIDERS: 1 << 22,
        /** 1 << 23 (8388608) */
        SPAWN_BLACK_HP: 1 << 23,
        /** 1 << 24 (16777216) */
        SHRINK: 1 << 24,
        /** 1 << 25 (33554432) */
        NO_FLASH_ON_DAMAGE: 1 << 25,
        /** 1 << 26 (67108864) */
        NO_KNOCKBACK: 1 << 26,
        /** 1 << 27 (134217728) */
        SLIPPERY_PHYSICS: 1 << 27,
        /** 1 << 28 (268435456) */
        ADD_JAR_FLY: 1 << 28,
        /** 1 << 29 (536870912) */
        FRIENDLY: 1 << 29,
        /** 1 << 30 (1073741824) */
        NO_PHYSICS_KNOCKBACK: 1 << 30,
        /** 1 << 31 (2147483648) */
        DONT_COUNT_BOSS_HP: 1 << 31,
        /** 1 << 32 (4294967296) */
        NO_SPRITE_UPDATE: 1 << 32,
        /** 1 << 33 */
        CONTAGIOUS: 1 << 33,
        /**
         * Used by the Mom's Razor collectible.
         *
         * 1 << 34
         */
        BLEED_OUT: 1 << 34,
        /**
         * Hides the HP bar generated by the Spider Mod collectible.
         *
         * 1 << 35
         */
        HIDE_HP_BAR: 1 << 35,
        /** 1 << 36 */
        NO_DAMAGE_BLINK: 1 << 36,
        /**
         * The entity will persist between rooms.
         *
         * 1 << 37
         */
        PERSISTENT: 1 << 37,
        /** 1 << 38 */
        BACKDROP_DETAIL: 1 << 38,
        /** 1 << 39 */
        AMBUSH: 1 << 39,
        /** 1 << 40 */
        GLITCH: 1 << 40,
        /** 1 << 41 */
        SPIN: 1 << 41,
        /** 1 << 42 */
        NO_REWARD: 1 << 42,
        /** 1 << 43 */
        REDUCE_GIBS: 1 << 43,
        /** 1 << 44 */
        TRANSITION_UPDATE: 1 << 44,
        /** 1 << 45 */
        NO_PLAYER_CONTROL: 1 << 45,
        /** 1 << 46 */
        NO_QUERY: 1 << 46,
        /** 1 << 47 */
        KNOCKED_BACK: 1 << 47,
        /** 1 << 48 */
        APPLY_IMPACT_DAMAGE: 1 << 48,
        /** 1 << 49 */
        ICE_FROZEN: 1 << 49,
        /** 1 << 50 */
        ICE: 1 << 50,
        /** 1 << 51 */
        MAGNETIZED: 1 << 51,
        /** 1 << 52 */
        BAITED: 1 << 52,
        /** 1 << 53 */
        KILL_SWITCH: 1 << 53,
        /** 1 << 54 */
        WEAKNESS: 1 << 54,
        /** 1 << 55 */
        EXTRA_GORE: 1 << 55,
        /** 1 << 56 */
        BRIMSTONE_MARKED: 1 << 56,
        /** 1 << 57 */
        HELD: 1 << 57,
        /** 1 << 58 */
        THROWN: 1 << 58,
        /** 1 << 59 */
        FRIENDLY_BALL: 1 << 59
      };
      exports2.EntityFlag = EntityFlagInternal;
      exports2.EntityFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/EntityPartition.js
  var require_EntityPartition = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/EntityPartition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityPartitionZero = exports2.EntityPartition = void 0;
      var EntityPartitionInternal = {
        /** 1 << 0 (1) */
        FAMILIAR: 1 << 0,
        /** 1 << 1 (2) */
        BULLET: 1 << 1,
        /** 1 << 2 (4) */
        TEAR: 1 << 2,
        /** 1 << 3 (8) */
        ENEMY: 1 << 3,
        /** 1 << 4 (16) */
        PICKUP: 1 << 4,
        /** 1 << 5 (32) */
        PLAYER: 1 << 5,
        /**
         * 1 << 6 (64)
         *
         * @deprecated The `Isaac.FindInRadius` method will only work with entities that have collision.
         *             Since effects do not have collision, they will never be returned. Thus, this enum
         *             is useless.
         */
        // eslint-disable-next-line deprecation/deprecation
        EFFECT: 1 << 6
      };
      exports2.EntityPartition = EntityPartitionInternal;
      exports2.EntityPartitionZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/ItemConfigTag.js
  var require_ItemConfigTag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/ItemConfigTag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemConfigTagZero = exports2.ItemConfigTag = void 0;
      var ItemConfigTagInternal = {
        /**
         * Dead things (for the Parasite unlock).
         *
         * Equal to "dead" in "items_metadata.xml".
         *
         * 1 << 0 (1)
         */
        DEAD: 1 << 0,
        /**
         * Syringes (for Little Baggy and the Spun transformation).
         *
         * Equal to "syringe" in "items_metadata.xml".
         *
         * 1 << 1 (2)
         */
        SYRINGE: 1 << 1,
        /**
         * Mom's things (for Mom's Contact and the Yes Mother transformation).
         *
         * Equal to "mom" in "items_metadata.xml".
         *
         * 1 << 2 (4)
         */
        MOM: 1 << 2,
        /**
         * Technology items (for the Technology Zero unlock).
         *
         * Equal to "tech" in "items_metadata.xml".
         *
         * 1 << 3 (8)
         */
        TECH: 1 << 3,
        /**
         * Battery items (for the Jumper Cables unlock).
         *
         * Equal to "battery" in "items_metadata.xml".
         *
         * 1 << 4 (16)
         */
        BATTERY: 1 << 4,
        /**
         * Guppy items (Guppy transformation).
         *
         * Equal to "guppy" in "items_metadata.xml".
         *
         * 1 << 5 (32)
         */
        GUPPY: 1 << 5,
        /**
         * Fly items (Beelzebub transformation).
         *
         * Equal to "fly" in "items_metadata.xml".
         *
         * 1 << 6 (64)
         */
        FLY: 1 << 6,
        /**
         * Bob items (Bob transformation).
         *
         * Equal to "bob" in "items_metadata.xml".
         *
         * 1 << 7 (128)
         */
        BOB: 1 << 7,
        /**
         * Mushroom items (Fun Guy transformation).
         *
         * Equal to "mushroom" in "items_metadata.xml".
         *
         * 1 << 8 (256)
         */
        MUSHROOM: 1 << 8,
        /**
         * Baby items (Conjoined transformation).
         *
         * Equal to "mushroom" in "items_metadata.xml".
         *
         * 1 << 9 (512)
         */
        BABY: 1 << 9,
        /**
         * Angel items (Seraphim transformation).
         *
         * Equal to "angel" in "items_metadata.xml".
         *
         * 1 << 10 (1024)
         */
        ANGEL: 1 << 10,
        /**
         * Devil items (Leviathan transformation).
         *
         * Equal to "devil" in "items_metadata.xml".
         *
         * 1 << 11 (2048)
         */
        DEVIL: 1 << 11,
        /**
         * Poop items (Oh Shit transformation).
         *
         * Equal to "poop" in "items_metadata.xml".
         *
         * 1 << 12 (4096)
         */
        POOP: 1 << 12,
        /**
         * Book items (Book Worm transformation).
         *
         * Equal to "book" in "items_metadata.xml".
         *
         * 1 << 13 (8192)
         */
        BOOK: 1 << 13,
        /**
         * Spider items (Spider Baby transformation).
         *
         * Equal to "spider" in "items_metadata.xml".
         *
         * 1 << 14 (16384)
         */
        SPIDER: 1 << 14,
        /**
         * Quest item (cannot be rerolled or randomly obtained).
         *
         * Equal to "quest" in "items_metadata.xml".
         *
         * 1 << 15 (32768)
         */
        QUEST: 1 << 15,
        /**
         * Can be spawned by Monster Manual.
         *
         * Equal to "monstermanual" in "items_metadata.xml".
         *
         * 1 << 16 (65536)
         */
        MONSTER_MANUAL: 1 << 16,
        /**
         * Cannot appear in Greed Mode.
         *
         * Equal to "nogreed" in "items_metadata.xml".
         *
         * 1 << 17 (131072)
         */
        NO_GREED: 1 << 17,
        /**
         * Food item (for Binge Eater).
         *
         * Equal to "food" in "items_metadata.xml".
         *
         * 1 << 18 (262144)
         */
        FOOD: 1 << 18,
        /**
         * Tears up item (for Lachryphagy unlock detection).
         *
         * Equal to "tearsup" in "items_metadata.xml".
         *
         * 1 << 19 (524288)
         */
        TEARS_UP: 1 << 19,
        /**
         * Whitelisted item for Tainted Lost.
         *
         * Equal to "offensive" in "items_metadata.xml".
         *
         * 1 << 20 (1048576)
         */
        OFFENSIVE: 1 << 20,
        /**
         * Blacklisted item for Keeper & Tainted Keeper.
         *
         * Equal to "nokeeper" in "items_metadata.xml".
         *
         * 1 << 21 (2097152)
         */
        NO_KEEPER: 1 << 21,
        /**
         * Blacklisted item for The Lost's Birthright.
         *
         * Equal to "nolostbr" in "items_metadata.xml".
         *
         * 1 << 22 (4194304)
         */
        NO_LOST_BR: 1 << 22,
        /**
         * Star themed items (for the Planetarium unlock).
         *
         * Equal to "stars" in "items_metadata.xml".
         *
         * 1 << 23 (8388608)
         */
        STARS: 1 << 23,
        /**
         * Summonable items (for Tainted Bethany).
         *
         * Equal to "summonable" in "items_metadata.xml".
         *
         * 1 << 24 (16777216)
         */
        SUMMONABLE: 1 << 24,
        /**
         * Can't be obtained in Cantripped challenge.
         *
         * Equal to "nocantrip" in "items_metadata.xml".
         *
         * 1 << 25 (33554432)
         */
        NO_CANTRIP: 1 << 25,
        /**
         * Active items that have wisps attached to them (automatically set).
         *
         * Not equal to any particular tag in "items_metadata.xml". Instead, this is set for all of the
         * items in the "wisps.xml" file.
         *
         * 1 << 26 (67108864)
         */
        WISP: 1 << 26,
        /**
         * Unique familiars that cannot be duplicated.
         *
         * Equal to "uniquefamiliar" in "items_metadata.xml".
         *
         * 1 << 27 (134217728)
         */
        UNIQUE_FAMILIAR: 1 << 27,
        /**
         * Items that should not be obtainable in challenges.
         *
         * Equal to "nochallenge" in "items_metadata.xml".
         *
         * 1 << 28 (268435456)
         */
        NO_CHALLENGE: 1 << 28,
        /**
         * Items that should not be obtainable in daily runs.
         *
         * Equal to "nodaily" in "items_metadata.xml".
         *
         * 1 << 29 (536870912)
         */
        NO_DAILY: 1 << 29,
        /**
         * Items that should be shared between Tainted Lazarus' forms.
         *
         * This is different from `LAZ_SHARED_GLOBAL` in that it does apply stat changes from the item for
         * both characters.
         *
         * Equal to "lazarusshared" in "items_metadata.xml".
         *
         * 1 << 30 (1073741824)
         */
        LAZ_SHARED: 1 << 30,
        /**
         * Items that should be shared between Tainted Lazarus' forms but only through global checks (such
         * as `PlayerManager::HasCollectible`).
         *
         * This is different from `LAZ_SHARED` in that it does not apply stat changes from the item for
         * both characters.
         *
         * Equal to "lazarussharedglobal" in "items_metadata.xml".
         *
         * 1 << 31 (2147483648)
         */
        LAZ_SHARED_GLOBAL: 1 << 31,
        /**
         * Items that will not be a random starting item for Eden and Tainted Eden.
         *
         * Equal to "noeden" in "items_metadata.xml".
         *
         * 1 << 32 (4294967296)
         */
        NO_EDEN: 1 << 32
      };
      exports2.ItemConfigTag = ItemConfigTagInternal;
      exports2.ItemConfigTagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/LevelCurse.js
  var require_LevelCurse = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/LevelCurse.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LevelCurseZero = exports2.LevelCurse = void 0;
      var CurseID_1 = require_CurseID();
      var LevelCurseInternal = {
        /** 1 << -1 (0) */
        NONE: 0,
        /**
         * 1 << 0 (1)
         *
         * Corresponds to `CurseID.DARKNESS` (1).
         */
        DARKNESS: getLevelCurse(CurseID_1.CurseID.DARKNESS),
        /**
         * 1 << 1 (2)
         *
         * Corresponds to `CurseID.LABYRINTH` (2).
         */
        LABYRINTH: getLevelCurse(CurseID_1.CurseID.LABYRINTH),
        /**
         * 1 << 2 (4)
         *
         * Corresponds to `CurseID.LOST` (3).
         */
        LOST: getLevelCurse(CurseID_1.CurseID.LOST),
        /**
         * 1 << 3 (8)
         *
         * Corresponds to `CurseID.UNKNOWN` (4).
         */
        UNKNOWN: getLevelCurse(CurseID_1.CurseID.UNKNOWN),
        /**
         * 1 << 4 (16)
         *
         * Corresponds to `CurseID.CURSED` (5).
         */
        CURSED: getLevelCurse(CurseID_1.CurseID.CURSED),
        /**
         * 1 << 5 (32)
         *
         * Corresponds to `CurseID.MAZE` (6).
         */
        MAZE: getLevelCurse(CurseID_1.CurseID.MAZE),
        /**
         * 1 << 6 (64)
         *
         * Corresponds to `CurseID.BLIND` (7).
         */
        BLIND: getLevelCurse(CurseID_1.CurseID.BLIND),
        /**
         * 1 << 7 (128)
         *
         * Corresponds to `CurseID.GIANT` (8).
         */
        GIANT: getLevelCurse(CurseID_1.CurseID.GIANT)
      };
      exports2.LevelCurse = LevelCurseInternal;
      exports2.LevelCurseZero = 0;
      function getLevelCurse(curseID) {
        return 1 << curseID - 1;
      }
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/ProjectileFlag.js
  var require_ProjectileFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/ProjectileFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ProjectileFlagZero = exports2.ProjectileFlag = void 0;
      var ProjectileFlagInternal = {
        /** 1 << 0 (1) */
        SMART: 1 << 0,
        /** 1 << 1 (2) */
        EXPLODE: 1 << 1,
        /** 1 << 2 (4) */
        ACID_GREEN: 1 << 2,
        /** 1 << 3 (8) */
        GOO: 1 << 3,
        /** 1 << 4 (16) */
        GHOST: 1 << 4,
        /** 1 << 5 (32) */
        WIGGLE: 1 << 5,
        /** 1 << 6 (64) */
        BOOMERANG: 1 << 6,
        /** 1 << 7 (1280 */
        HIT_ENEMIES: 1 << 7,
        /** 1 << 8 (256) */
        ACID_RED: 1 << 8,
        /** 1 << 9 (512) */
        GREED: 1 << 9,
        /** 1 << 10 (1024) */
        RED_CREEP: 1 << 10,
        /** 1 << 11 (2048) */
        ORBIT_CW: 1 << 11,
        /** 1 << 12 (4096) */
        ORBIT_CCW: 1 << 12,
        /** 1 << 13 (8192) */
        NO_WALL_COLLIDE: 1 << 13,
        /** 1 << 14 (16384) */
        CREEP_BROWN: 1 << 14,
        /** 1 << 15 (32768) */
        FIRE: 1 << 15,
        /** 1 << 16 (65536) */
        BURST: 1 << 16,
        /** 1 << 17 (131072) */
        ANY_HEIGHT_ENTITY_HIT: 1 << 17,
        /** 1 << 18 (262144) */
        CURVE_LEFT: 1 << 18,
        /** 1 << 19 (524288) */
        CURVE_RIGHT: 1 << 19,
        /** 1 << 20 (1048576) */
        TURN_HORIZONTAL: 1 << 20,
        /** 1 << 21 (2097152) */
        SINE_VELOCITY: 1 << 21,
        /** 1 << 22 (4194304) */
        MEGA_WIGGLE: 1 << 22,
        /** 1 << 23 (8388608) */
        SAWTOOTH_WIGGLE: 1 << 23,
        /** 1 << 24 (16777216) */
        SLOWED: 1 << 24,
        /** 1 << 25 (33554432) */
        TRIANGLE: 1 << 25,
        /** 1 << 26 (67108864) */
        MOVE_TO_PARENT: 1 << 26,
        /** 1 << 27 (134217728) */
        ACCELERATE: 1 << 27,
        /** 1 << 28 (268435456) */
        DECELERATE: 1 << 28,
        /** 1 << 29 (536870912) */
        BURST3: 1 << 29,
        /** 1 << 30 (1073741824) */
        CONTINUUM: 1 << 30,
        /** 1 << 31 (2147483648) */
        CANT_HIT_PLAYER: 1 << 31,
        /** 1 << 32 (4294967296) */
        CHANGE_FLAGS_AFTER_TIMEOUT: 1 << 32,
        /** 1 << 33 */
        CHANGE_VELOCITY_AFTER_TIMEOUT: 1 << 33,
        /** 1 << 34 */
        STASIS: 1 << 34,
        /** 1 << 35 */
        FIRE_WAVE: 1 << 35,
        /** 1 << 36 */
        FIRE_WAVE_X: 1 << 36,
        /** 1 << 37 */
        ACCELERATE_EX: 1 << 37,
        /** 1 << 38 */
        BURST8: 1 << 38,
        /** 1 << 39 */
        FIRE_SPAWN: 1 << 39,
        /** 1 << 40 */
        ANTI_GRAVITY: 1 << 40,
        /** 1 << 41 */
        TRACTOR_BEAM: 1 << 41,
        /** 1 << 42 */
        BOUNCE: 1 << 42,
        /** 1 << 43 */
        BOUNCE_FLOOR: 1 << 43,
        /** 1 << 44 */
        SHIELDED: 1 << 44,
        /** 1 << 45 */
        BLUE_FIRE_SPAWN: 1 << 45,
        /** 1 << 46 */
        LASER_SHOT: 1 << 46,
        /** 1 << 47 */
        GODHEAD: 1 << 47,
        /** 1 << 48 */
        SMART_PERFECT: 1 << 48,
        /** 1 << 49 */
        BURST_SPLIT: 1 << 49,
        /** 1 << 50 */
        WIGGLE_ROTGUT: 1 << 50,
        /** 1 << 51 */
        FREEZE: 1 << 51,
        /** 1 << 52 */
        ACCELERATE_TO_POSITION: 1 << 52,
        /**
         * The cluster of tears that Mother shoots.
         *
         * 1 << 53
         */
        BROCCOLI: 1 << 53,
        /** 1 << 54 */
        BACK_SPLIT: 1 << 54,
        /** 1 << 55 */
        SIDE_WAVE: 1 << 55,
        /** 1 << 56 */
        ORBIT_PARENT: 1 << 56,
        /** 1 << 57 */
        FADEOUT: 1 << 57
      };
      exports2.ProjectileFlag = ProjectileFlagInternal;
      exports2.ProjectileFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/RoomDescriptorFlag.js
  var require_RoomDescriptorFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/RoomDescriptorFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomDescriptorFlagZero = exports2.RoomDescriptorFlag = void 0;
      var RoomDescriptorFlagInternal = {
        /**
         * Room is clear, don't spawn enemies when visiting.
         *
         * 1 << 0 (1)
         */
        CLEAR: 1 << 0,
        /**
         * All pressure plates have been triggered in this room. This won't be set if there are no trigger
         * pressure plates in the first place.
         *
         * 1 << 1 (2)
         */
        PRESSURE_PLATES_TRIGGERED: 1 << 1,
        /**
         * A Sacrifice Room has paid out.
         *
         * 1 << 2 (4)
         */
        SACRIFICE_DONE: 1 << 2,
        /**
         * A Challenge Room has finished.
         *
         * 1 << 3 (8)
         */
        CHALLENGE_DONE: 1 << 3,
        /**
         * Load Greed/Krampus instead of the room specified by the type & variant.
         *
         * 1 << 4 (16)
         */
        SURPRISE_MINIBOSS: 1 << 4,
        /**
         * Pits in this room contain water.
         *
         * 1 << 5 (32)
         */
        HAS_WATER: 1 << 5,
        /**
         * Play alternate boss music in this room.
         *
         * 1 << 6 (64)
         */
        ALT_BOSS_MUSIC: 1 << 6,
        /**
         * Don't pay out with a reward when clearing this room. Used for traps that lock the player in the
         * room when triggered.
         *
         * 1 << 7 (128)
         */
        NO_REWARD: 1 << 7,
        /**
         * Was flooded by an item (i.e. Flush).
         *
         * 1 << 8 (256)
         */
        FLOODED: 1 << 8,
        /**
         * Complete darkness.
         *
         * 1 << 9 (512)
         */
        PITCH_BLACK: 1 << 9,
        /**
         * Room spawned by Red Key.
         *
         * 1 << 10 (1024)
         */
        RED_ROOM: 1 << 10,
        /**
         * Treasure room transformed by Devil's Crown.
         *
         * 1 << 11 (2048)
         */
        DEVIL_TREASURE: 1 << 11,
        /**
         * Use an alternate backdrop. (This is used by some floors such as Dross and Ashpit.)
         *
         * 1 << 12 (4096)
         */
        USE_ALTERNATE_BACKDROP: 1 << 12,
        /**
         * The room is covered in cursed mist; the player is temporarily reduced to base items and stats.
         *
         * 1 << 13 (8192)
         */
        CURSED_MIST: 1 << 13,
        /**
         * Mama Mega has activated in this room.
         *
         * 1 << 14 (16384)
         */
        MAMA_MEGA: 1 << 14,
        /**
         * Don't generate walls (for Beast arena).
         *
         * 1 << 15 (32768)
         */
        NO_WALLS: 1 << 15,
        /**
         * Rotgut's heart was killed, immediately play Rotgut's death animation when reentering this room.
         *
         * 1 << 16 (65536)
         */
        ROTGUT_CLEARED: 1 << 16,
        /**
         * A portal spawned by Lil Portal now links to this room; don't create more portals that link to
         * it.
         *
         * 1 << 17 (131072)
         */
        PORTAL_LINKED: 1 << 17,
        /**
         * If walking into this room through a door, redirect to a Blue Womb room instead. (This is used
         * by Blue Key.)
         *
         * 1 << 18 (262144)
         */
        BLUE_REDIRECT: 1 << 18
      };
      exports2.RoomDescriptorFlag = RoomDescriptorFlagInternal;
      exports2.RoomDescriptorFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/TargetFlag.js
  var require_TargetFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/TargetFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TargetFlagZero = exports2.TargetFlag = void 0;
      var TargetFlagInternal = {
        /**
         * Allow switching to a better target even if we already have one.
         *
         * 1 << 0 (1)
         */
        ALLOW_SWITCHING: 1 << 0,
        /**
         * Do not prioritize enemies that are close to the familiar's owner.
         *
         * 1 << 1 (2)
         */
        DONT_PRIORITIZE_ENEMIES_CLOSE_TO_PLAYER: 1 << 1,
        /**
         * Prioritize enemies with higher HP.
         *
         * 1 << 2 (4)
         */
        PRIORITIZE_ENEMIES_WITH_HIGH_HP: 1 << 2,
        /**
         * Prioritize enemies with higher HP.
         *
         * 1 << 3 (8)
         */
        PRIORITIZE_ENEMIES_WITH_LOW_HP: 1 << 3,
        /**
         * Give a lower priority to our current target. (This makes it more likely for the familiar to
         * switch between targets.)
         *
         * 1 << 4 (16)
         */
        GIVE_LOWER_PRIORITY_TO_CURRENT_TARGET: 1 << 4
      };
      exports2.TargetFlag = TargetFlagInternal;
      exports2.TargetFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/TearFlag.js
  var require_TearFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/TearFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TearFlagZero = exports2.TearFlag = void 0;
      var TearFlagInternal = {
        /**
         * Default tear (no special effects).
         *
         * 1 << -1 (0)
         */
        NORMAL: BitSet128(0, 0),
        /**
         * Goes through obstacles. Used by Ouija Board.
         *
         * 1 << 0 (1)
         */
        SPECTRAL: getTearFlag(0),
        /**
         * Goes through enemies. Used by Cupid's Arrow.
         *
         * 1 << 1 (2)
         */
        PIERCING: getTearFlag(1),
        /**
         * Used by Spoon Bender.
         *
         * 1 << 2 (4)
         */
        HOMING: getTearFlag(2),
        /**
         * Slows enemies on contact. Used by Spider Bite.
         *
         * 1 << 3 (8)
         */
        SLOW: getTearFlag(3),
        /**
         * Used by The Common Cold.
         *
         * 1 << 4 (16)
         */
        POISON: getTearFlag(4),
        /**
         * Freezes enemies in place. (For the ice effect, see `TearFlag.TEAR_ICE`.) Used by Mom's
         * Contacts.
         *
         * 1 << 5 (32)
         */
        FREEZE: getTearFlag(5),
        /**
         * Splits into two different tears on collision. Used by The Parasite.
         *
         * 1 << 6 (64)
         */
        SPLIT: getTearFlag(6),
        /**
         * The tear increases in size and damage the longer it travels. Used by Lump of Coal.
         *
         * 1 << 7 (128)
         */
        GROW: getTearFlag(7),
        /**
         * Returns backwards after traveling for a little while. Used by My Reflection.
         *
         * 1 << 8 (256)
         */
        BOOMERANG: getTearFlag(8),
        /**
         * Keeps going past enemies that it kills (with less damage). Used by Polyphemus.
         *
         * 1 << 9 (512)
         */
        PERSISTENT: getTearFlag(9),
        /**
         * Used by the Wiggle Worm trinket.
         *
         * 1 << 10 (1024)
         */
        WIGGLE: getTearFlag(10),
        /**
         * Created a blue fly on hit. Used by The Mulligan.
         *
         * 1 << 11 (2048)
         */
        MULLIGAN: getTearFlag(11),
        /**
         * Explodes on hit. Used by Ipecac.
         *
         * 1 << 12 (4096)
         */
        EXPLOSIVE: getTearFlag(12),
        /**
         * Used by Mom's Eyeshadow.
         *
         * 1 << 13 (8192)
         */
        CHARM: getTearFlag(13),
        /**
         * Used by Iron Bar.
         *
         * 1 << 14 (16384)
         */
        CONFUSION: getTearFlag(14),
        /**
         * Enemies killed have a 33% chance to drop a heart. Used by Tainted Magdalene.
         *
         * 1 << 15 (32768)
         */
        HP_DROP: getTearFlag(15),
        /**
         * Tears orbit around the player. Used by Tiny Planet.
         *
         * 1 << 16 (65536)
         */
        ORBIT: getTearFlag(16),
        /**
         * Floats in place until the player releases the fire button. Used by Anti-Gravity.
         *
         * 1 << 17 (131072)
         */
        WAIT: getTearFlag(17),
        /**
         * Splits into four different tears on collision. Used by Cricket's Body.
         *
         * 1 << 18 (262144)
         */
        QUAD_SPLIT: getTearFlag(18),
        /**
         * Bounces off of enemies, walls, rocks, and so on. Used by Rubber Cement.
         *
         * 1 << 19 (524288)
         */
        BOUNCE: getTearFlag(19),
        /**
         * Used by Mom's Perfume.
         *
         * 1 << 20 (1048576)
         */
        FEAR: getTearFlag(20),
        /**
         * The tear shrinks the longer it travels. Used by Proptosis.
         *
         * 1 << 21 (2097152)
         */
        SHRINK: getTearFlag(21),
        /**
         * Used by Fire Mind.
         *
         * 1 << 22 (4194304)
         */
        BURN: getTearFlag(22),
        /**
         * Attracts enemies and pickups. Used by Strange Attractor.
         *
         * 1 << 23 (8388608)
         */
        ATTRACTOR: getTearFlag(23),
        /**
         * Pushes enemies back further than normal.
         *
         * 1 << 24 (16777216)
         */
        KNOCKBACK: getTearFlag(24),
        /**
         * Used by Pulse Worm.
         *
         * 1 << 25 (33554432)
         */
        PULSE: getTearFlag(25),
        /**
         * Used by Ring Worm.
         *
         * 1 << 26 (67108864)
         */
        SPIRAL: getTearFlag(26),
        /**
         * Used by Flat Worm.
         *
         * 1 << 27 (134217728)
         */
        FLAT: getTearFlag(27),
        /**
         * Makes tears explode out of the bomb. Used by Sad Bombs.
         *
         * 1 << 28 (268435456)
         */
        SAD_BOMB: getTearFlag(28),
        /**
         * Damages everything in the room when it explodes. Used by Butt Bombs.
         *
         * 1 << 29 (536870912)
         */
        BUTT_BOMB: getTearFlag(29),
        /**
         * Used by Hook Worm.
         *
         * 1 << 30 (1073741824)
         */
        SQUARE: getTearFlag(30),
        /**
         * Creates an aura around the tear. Used by Godhead.
         *
         * 1 << 31 (2147483648)
         */
        GLOW: getTearFlag(31),
        /**
         * Slows enemies and colors them black. Used by Lil Gish.
         *
         * 1 << 32 (4294967296)
         */
        GISH: getTearFlag(32),
        /**
         * Spawns green creep on hit. Used by Mysterious Liquid.
         *
         * 1 << 33
         */
        MYSTERIOUS_LIQUID_CREEP: getTearFlag(33),
        /**
         * Deletes projectiles that it collides with. Used by Lost Contact.
         *
         * 1 << 34
         */
        SHIELDED: getTearFlag(34),
        /**
         * Spawns a pickup upon exploding. Used by Glitter Bombs.
         *
         * 1 << 35
         */
        GLITTER_BOMB: getTearFlag(35),
        /**
         * Splits into 5 little bombs upon exploding. Used by Scatter Bombs.
         *
         * 1 << 36
         */
        SCATTER_BOMB: getTearFlag(36),
        /**
         * Sticks to enemies and continues to deal damage. Used by Explosivo and Sticky Bombs.
         *
         * 1 << 37
         */
        STICKY: getTearFlag(37),
        /**
         * Pass through walls to loop around the screen. Used by Continuum.
         *
         * 1 << 38
         */
        CONTINUUM: getTearFlag(38),
        /**
         * Creates a light beam on hit. Used by Holy Light.
         *
         * 1 << 39
         */
        LIGHT_FROM_HEAVEN: getTearFlag(39),
        /**
         * Spawns a coin on hit. Used by Bumbo.
         *
         * 1 << 40
         */
        COIN_DROP: getTearFlag(40),
        /**
         * Enemies killed will spawn a black heart.
         *
         * 1 << 41
         */
        BLACK_HP_DROP: getTearFlag(41),
        /**
         * Follows the parent player's beam. Used by Tractor Beam.
         *
         * 1 << 42
         */
        TRACTOR_BEAM: getTearFlag(42),
        /**
         * Shrink enemies on hit. Used by God's Flesh.
         *
         * 1 << 43
         */
        GODS_FLESH: getTearFlag(43),
        /**
         * Have a chance to spawn a coin on hit.
         *
         * 1 << 44
         */
        GREED_COIN: getTearFlag(44),
        /**
         * Causes a large explosion in the shape of a cross. Used by Bomber Boy.
         *
         * 1 << 45
         */
        CROSS_BOMB: getTearFlag(45),
        /**
         * Used by Ouroboros Worm.
         *
         * 1 << 46
         */
        BIG_SPIRAL: getTearFlag(46),
        /**
         * Used by Glaucoma.
         *
         * 1 << 47
         */
        PERMANENT_CONFUSION: getTearFlag(47),
        /**
         * Sticks to enemies and does damage over time. Used by Sinus Infection.
         *
         * 1 << 48
         */
        BOOGER: getTearFlag(48),
        /**
         * Spawns creep on hit and spawns blue flies or spiders. Used by Parasitoid.
         *
         * 1 << 49
         */
        EGG: getTearFlag(49),
        /**
         * Can open doors or break grid entities. Used by Sulfuric Acid.
         *
         * 1 << 50
         */
        ACID: getTearFlag(50),
        /**
         * Splits into two tears. Used by Compound Fracture.
         *
         * 1 << 51
         */
        BONE: getTearFlag(51),
        /**
         * Piercing. When passing through an enemy, gains homing and does double damage. Used by Eye of
         * Belial.
         *
         * 1 << 52
         */
        BELIAL: getTearFlag(52),
        /**
         * Enemies turn gold and drop coins on death. Used by Midas' Touch.
         *
         * 1 << 53
         */
        MIDAS: getTearFlag(53),
        /**
         * Used by Euthanasia.
         *
         * 1 << 54
         */
        NEEDLE: getTearFlag(54),
        /**
         * Causes electricity to ripple around the room, damaging enemies. Used by Jacob's Ladder.
         *
         * 1 << 55
         */
        JACOBS: getTearFlag(55),
        /**
         * Void tears. Instantly kills enemies. Used by Little Horn.
         *
         * 1 << 56
         */
        HORN: getTearFlag(56),
        /**
         * Electricity arcs between tears. Used by Technology Zero.
         *
         * 1 << 57
         */
        LASER: getTearFlag(57),
        /**
         * Tears stay in the air and bump into each other. Used by Pop!
         *
         * 1 << 58
         */
        POP: getTearFlag(58),
        /**
         * Tears combine when they collide into each other. Used by Lachryphagy.
         *
         * 1 << 59
         */
        ABSORB: getTearFlag(59),
        /**
         * Lasers are generated on top of the tear. Used by Trisagion.
         *
         * 1 << 60
         */
        LASER_SHOT: getTearFlag(60),
        /**
         * Continually bounces as it travels. Used by Flat Stone.
         *
         * 1 << 61
         */
        HYDRO_BOUNCE: getTearFlag(61),
        /**
         * Arcing shots that split into smaller tears on impact. Used by Haemolacria.
         *
         * 1 << 62
         */
        BURST_SPLIT: getTearFlag(62),
        /**
         * Spawns green creep. Used by Bob's Bladder.
         *
         * 1 << 63
         */
        CREEP_TRAIL: getTearFlag(63),
        /**
         * Knockback tears. Used by Knockout Drops.
         *
         * 1 << 64
         */
        PUNCH: getTearFlag(64),
        /**
         * Enemies become frozen on death. (For the freeze-in-place effect, see `TearFlag.FREEZE`.)
         *
         * 1 << 65
         */
        ICE: getTearFlag(65),
        /**
         * Enemies being magnetized and pull other things towards them. Used by Lodestone.
         *
         * 1 << 66
         */
        MAGNETIZE: getTearFlag(66),
        /**
         * Marks enemies. Marked enemies will attack and damage each other, as well as have reduced
         * movement speed. Used by Rotten Tomato.
         *
         * 1 << 67
         */
        BAIT: getTearFlag(67),
        /**
         * Velocity can be adjusted by the player while in the air. Used by Eye of the Occult.
         *
         * 1 << 68
         */
        OCCULT: getTearFlag(68),
        /**
         * Tears orbit in a narrow and stable orbit. Used by Saturnus.
         *
         * 1 << 69
         */
        ORBIT_ADVANCED: getTearFlag(69),
        /**
         * Chance to break rocks and open doors. Deals extra damage to rock-type enemies.
         *
         * 1 << 70
         */
        ROCK: getTearFlag(70),
        /**
         * Tears turn and go horizontally when moving past an enemy. Used by Brain Worm.
         *
         * 1 << 71
         */
        TURN_HORIZONTAL: getTearFlag(71),
        /**
         * Spawns red creep.
         *
         * 1 << 72
         */
        BLOOD_BOMB: getTearFlag(72),
        /**
         * Enemies are turned into poop.
         *
         * 1 << 73
         */
        ECOLI: getTearFlag(73),
        /**
         * Enemies have a chance to drop a coin on death. Used by The Hanged Man?
         *
         * 1 << 74
         */
        COIN_DROP_DEATH: getTearFlag(74),
        /**
         * Explosion creates a Brimstone laser cross pattern.
         *
         * 1 << 75
         */
        BRIMSTONE_BOMB: getTearFlag(75),
        /**
         * Creates a black hole on impact.
         *
         * 1 << 76
         */
        RIFT: getTearFlag(76),
        /**
         * Sticks to enemies and multiplies on enemy death.
         *
         * 1 << 77
         */
        SPORE: getTearFlag(77),
        /**
         * Spawns a ghost upon explosion.
         *
         * 1 << 78
         */
        GHOST_BOMB: getTearFlag(78),
        /**
         * Killed enemies will drop a random tarot card.
         *
         * 1 << 79
         */
        CARD_DROP_DEATH: getTearFlag(79),
        /**
         * Killed enemies will drop a random rune.
         *
         * 1 << 80
         */
        RUNE_DROP_DEATH: getTearFlag(80),
        /**
         * Enemies will teleport to a different part of the room on hit.
         *
         * 1 << 81
         */
        TELEPORT: getTearFlag(81),
        /**
         * Used on tears fired on the G-Fuel seed to keep them lingering on a single spot before dropping
         * to the ground. (This is only present on some of the weapon types.)
         *
         * 1 << 82
         */
        TEAR_DECELERATE: getTearFlag(82),
        /**
         * Used on tears fired on the G-Fuel seed to make them accelerate over time. (This is only present
         * on some of the weapon types.)
         *
         * 1 << 83
         */
        TEAR_ACCELERATE: getTearFlag(83),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Similar to `TearFlag.BOUNCE` but only bounces off walls, not enemies.
         *
         * 1 << 104
         */
        BOUNCE_WALLS_ONLY: getTearFlag(104),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Cannot deal damage to grid entities. This is used by Saturnus to prevent unfair damage in some
         * rooms.
         *
         * 1 << 105
         */
        NO_GRID_DAMAGE: getTearFlag(105),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Deals extra damage from behind and inflicts bleeding.
         *
         * 1 << 106
         */
        BACKSTAB: getTearFlag(106),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses whack their target with a sword and perform spin attacks.
         *
         * 1 << 107
         */
        FETUS_SWORD: getTearFlag(107),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses whack their target with a bone club instead of ramming into them.
         *
         * 1 << 108
         */
        FETUS_BONE: getTearFlag(108),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses carry a knife.
         *
         * 1 << 109
         */
        FETUS_KNIFE: getTearFlag(109),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses have a Tech X ring around them.
         *
         * 1 << 110
         */
        FETUS_TECH_X: getTearFlag(110),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses keep their distance and occasionally shoot tech lasers at their target.
         *
         * 1 << 111
         */
        FETUS_TECH: getTearFlag(111),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses shoot a brimstone beam at the first enemy they hit.
         *
         * 1 << 112
         */
        FETUS_BRIMSTONE: getTearFlag(112),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * Fetuses drop a bomb on their first impact with an enemy.
         *
         * 1 << 113
         */
        FETUS_BOMBER: getTearFlag(113),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * The base flag for C-Section fetuses.
         *
         * 1 << 114
         */
        FETUS: getTearFlag(114),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 115
         */
        REROLL_ROCK_WISP: getTearFlag(115),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 116
         */
        MOM_STOMP_WISP: getTearFlag(116),
        /**
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 117
         */
        ENEMY_TO_WISP: getTearFlag(117),
        /**
         * Chance to reroll the enemy on hit. Used by D10 wisps.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 118
         */
        REROLL_ENEMY: getTearFlag(118),
        /**
         * Causes giant explosions that create pits. Used by Giga Bombs.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 119
         */
        GIGA_BOMB: getTearFlag(119),
        /**
         * Enemies explode into more gibs on death than normal. Used by Berserk!
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 120
         */
        EXTRA_GORE: getTearFlag(120),
        /**
         * Lasers cycle between colors, causing a rainbow effect.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 121
         */
        RAINBOW: getTearFlag(121),
        /**
         * Bombs can be detonated by Remote Detonator.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 122
         */
        DETONATE: getTearFlag(122),
        /**
         * Tears stick to each other and form a chain that can be swung around. Used by Akeldama.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 123
         */
        CHAIN: getTearFlag(123),
        /**
         * Black aura effect. Used by Dark Matter.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 124
         */
        DARK_MATTER: getTearFlag(124),
        /**
         * Bombs dropped while having a Golden Bomb will have this flag.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 125
         */
        GOLDEN_BOMB: getTearFlag(125),
        /**
         * Bombs dropped while having Fast Bombs will have this flag.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 126
         */
        FAST_BOMB: getTearFlag(126),
        /**
         * A single tear controlled by the player with the shooting keys. Used by The Ludovico Technique.
         *
         * This is a reserved flag and cannot be randomly picked.
         *
         * 1 << 127
         */
        LUDOVICO: getTearFlag(127)
      };
      exports2.TearFlag = TearFlagInternal;
      exports2.TearFlagZero = exports2.TearFlag.NORMAL;
      function getTearFlag(shift) {
        return shift >= 64 ? BitSet128(0, 1 << shift - 64) : BitSet128(1 << shift, 0);
      }
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/flags/UseFlag.js
  var require_UseFlag = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/flags/UseFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.UseFlagZero = exports2.UseFlag = void 0;
      var UseFlagInternal = {
        /**
         * Don't play use animations.
         *
         * 1 << 0 (1)
         */
        NO_ANIMATION: 1 << 0,
        /**
         * Don't add costume.
         *
         * 1 << 1 (2)
         */
        NO_COSTUME: 1 << 1,
        /**
         * Effect was triggered by an active item owned by the player.
         *
         * 1 << 2 (4)
         */
        OWNED: 1 << 2,
        /**
         * Allow the effect to trigger on non-main players (i.e. coop babies).
         *
         * 1 << 3 (8)
         */
        ALLOW_NON_MAIN_PLAYERS: 1 << 3,
        /**
         * D4 only: Reroll the player's active item.
         *
         * 1 << 4 (16)
         */
        REMOVE_ACTIVE: 1 << 4,
        /**
         * Effect was triggered a second time by Car Battery (or Tarot Cloth for cards).
         *
         * 1 << 5 (32)
         */
        CAR_BATTERY: 1 << 5,
        /**
         * Effect was triggered by Void.
         *
         * 1 << 6 (64)
         */
        VOID: 1 << 6,
        /**
         * Effect was mimicked by an active item (Blank Card, Placebo).
         *
         * 1 << 7 (128)
         */
        MIMIC: 1 << 7,
        /**
         * Never play announcer voice.
         *
         * 1 << 8 (256)
         */
        NO_ANNOUNCER_VOICE: 1 << 8,
        /**
         * This allows an item to spawn wisps when called from another item usage as the wisps generator
         * checks for `NO_ANIMATION`, so usually you want to use this with `NO_ANIMATION` call.
         *
         * 1 << 9 (512)
         */
        ALLOW_WISP_SPAWN: 1 << 9,
        /**
         * If set, forces UseActiveItem to use the CustomVarData argument instead of the active item's
         * stored VarData.
         *
         * 1 << 10 (1024)
         */
        CUSTOM_VARDATA: 1 << 10,
        /**
         * Don't display text in the HUD. (This is currently only used by Echo Chamber.)
         *
         * 1 << 11 (2048)
         */
        NO_HUD: 1 << 11
      };
      exports2.UseFlag = UseFlagInternal;
      exports2.UseFlagZero = 0;
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/mods/EncyclopediaItemPoolType.js
  var require_EncyclopediaItemPoolType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/mods/EncyclopediaItemPoolType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EncyclopediaItemPoolType = void 0;
      var EncyclopediaItemPoolType;
      (function(EncyclopediaItemPoolType2) {
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_TREASURE"] = 1] = "POOL_TREASURE";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_SHOP"] = 2] = "POOL_SHOP";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_BOSS"] = 3] = "POOL_BOSS";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_DEVIL"] = 4] = "POOL_DEVIL";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_ANGEL"] = 5] = "POOL_ANGEL";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_SECRET"] = 6] = "POOL_SECRET";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_ENCYCLOPEDIARARY"] = 7] = "POOL_ENCYCLOPEDIARARY";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_SHELL_GAME"] = 8] = "POOL_SHELL_GAME";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GOLDEN_CHEST"] = 9] = "POOL_GOLDEN_CHEST";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_RED_CHEST"] = 10] = "POOL_RED_CHEST";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_BEGGAR"] = 11] = "POOL_BEGGAR";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_DEMON_BEGGAR"] = 12] = "POOL_DEMON_BEGGAR";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_CURSE"] = 13] = "POOL_CURSE";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_KEY_MASTER"] = 14] = "POOL_KEY_MASTER";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_BATTERY_BUM"] = 15] = "POOL_BATTERY_BUM";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_MOMS_CHEST"] = 16] = "POOL_MOMS_CHEST";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_TREASURE"] = 17] = "POOL_GREED_TREASURE";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_BOSS"] = 18] = "POOL_GREED_BOSS";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_SHOP"] = 19] = "POOL_GREED_SHOP";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_DEVIL"] = 20] = "POOL_GREED_DEVIL";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_ANGEL"] = 21] = "POOL_GREED_ANGEL";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_CURSE"] = 22] = "POOL_GREED_CURSE";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_GREED_SECRET"] = 23] = "POOL_GREED_SECRET";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_CRANE_GAME"] = 24] = "POOL_CRANE_GAME";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_ULTRA_SECRET"] = 25] = "POOL_ULTRA_SECRET";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_BOMB_BUM"] = 26] = "POOL_BOMB_BUM";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_PLANETARIUM"] = 27] = "POOL_PLANETARIUM";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_OLD_CHEST"] = 28] = "POOL_OLD_CHEST";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_BABY_SHOP"] = 29] = "POOL_BABY_SHOP";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_WOODEN_CHEST"] = 30] = "POOL_WOODEN_CHEST";
        EncyclopediaItemPoolType2[EncyclopediaItemPoolType2["POOL_ROTTEN_BEGGAR"] = 31] = "POOL_ROTTEN_BEGGAR";
      })(EncyclopediaItemPoolType || (exports2.EncyclopediaItemPoolType = EncyclopediaItemPoolType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/mods/ModConfigMenuOptionType.js
  var require_ModConfigMenuOptionType = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/mods/ModConfigMenuOptionType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModConfigMenuOptionType = void 0;
      var ModConfigMenuOptionType;
      (function(ModConfigMenuOptionType2) {
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["TEXT"] = 1] = "TEXT";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["SPACE"] = 2] = "SPACE";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["SCROLL"] = 3] = "SCROLL";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["BOOLEAN"] = 4] = "BOOLEAN";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["NUMBER"] = 5] = "NUMBER";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["KEY_BIND_KEYBOARD"] = 6] = "KEY_BIND_KEYBOARD";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["KEY_BIND_CONTROLLER"] = 7] = "KEY_BIND_CONTROLLER";
        ModConfigMenuOptionType2[ModConfigMenuOptionType2["TITLE"] = 8] = "TITLE";
      })(ModConfigMenuOptionType || (exports2.ModConfigMenuOptionType = ModConfigMenuOptionType = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/enums/mods/StageAPIEnums.js
  var require_StageAPIEnums = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/enums/mods/StageAPIEnums.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StageAPIPickupRandomGroupVariant = exports2.StageAPILayoutSpikesOnOffVariant = exports2.StageAPILayoutRockSubtype = exports2.StageAPILayoutPoopSubtype = exports2.StageAPILayoutPitfallVariant = exports2.StageAPILayoutGridType = exports2.StageAPILayoutCornyPoopSubtype = exports2.StageAPILayoutButtonVariant = exports2.StageAPICallback = void 0;
      var StageAPICallback;
      (function(StageAPICallback2) {
        StageAPICallback2["POST_CHANGE_ROOM_GFX"] = "POST_CHANGE_ROOM_GFX";
        StageAPICallback2["POST_CHECK_VALID_ROOM"] = "POST_CHECK_VALID_ROOM";
        StageAPICallback2["POST_CUSTOM_DOOR_UPDATE"] = "POST_CUSTOM_DOOR_UPDATE";
        StageAPICallback2["POST_CUSTOM_GRID_PROJECTILE_HELPER_UPDATE"] = "POST_CUSTOM_GRID_PROJECTILE_HELPER_UPDATE";
        StageAPICallback2["POST_CUSTOM_GRID_PROJECTILE_UPDATE"] = "POST_CUSTOM_GRID_PROJECTILE_UPDATE";
        StageAPICallback2["POST_CUSTOM_GRID_REMOVE"] = "POST_CUSTOM_GRID_REMOVE";
        StageAPICallback2["POST_CUSTOM_GRID_UPDATE"] = "POST_CUSTOM_GRID_UPDATE";
        StageAPICallback2["POST_GRID_UPDATE"] = "POST_GRID_UPDATE";
        StageAPICallback2["POST_OVERRIDDEN_GRID_BREAK"] = "POST_OVERRIDDEN_GRID_BREAK";
        StageAPICallback2["POST_ROOM_INIT"] = "POST_ROOM_INIT";
        StageAPICallback2["POST_ROOM_LOAD"] = "POST_ROOM_LOAD";
        StageAPICallback2["POST_SPAWN_CUSTOM_DOOR"] = "POST_SPAWN_CUSTOM_DOOR";
        StageAPICallback2["POST_SPAWN_CUSTOM_GRID"] = "POST_SPAWN_CUSTOM_GRID";
        StageAPICallback2["POST_STAGEAPI_NEW_ROOM"] = "POST_STAGEAPI_NEW_ROOM";
        StageAPICallback2["POST_STAGEAPI_NEW_ROOM_GENERATION"] = "POST_STAGEAPI_NEW_ROOM_GENERATION";
        StageAPICallback2["PRE_BOSS_SELECT"] = "PRE_BOSS_SELECT";
        StageAPICallback2["PRE_CHANGE_ROOM_GFX"] = "PRE_CHANGE_ROOM_GFX";
        StageAPICallback2["PRE_ROOM_LAYOUT_CHOOSE"] = "PRE_ROOM_LAYOUT_CHOOSE";
        StageAPICallback2["PRE_SELECT_ENTITY_LIST"] = "PRE_SELECT_ENTITY_LIST";
        StageAPICallback2["PRE_SELECT_GRIDENTITY_LIST"] = "PRE_SELECT_GRIDENTITY_LIST";
        StageAPICallback2["PRE_SELECT_NEXT_STAGE"] = "PRE_SELECT_NEXT_STAGE";
        StageAPICallback2["PRE_SPAWN_ENTITY"] = "PRE_SPAWN_ENTITY";
        StageAPICallback2["PRE_SPAWN_ENTITY_LIST"] = "PRE_SPAWN_ENTITY_LIST";
        StageAPICallback2["PRE_SPAWN_GRID"] = "PRE_SPAWN_GRID";
        StageAPICallback2["PRE_STAGEAPI_NEW_ROOM"] = "PRE_STAGEAPI_NEW_ROOM";
        StageAPICallback2["PRE_TRANSITION_RENDER"] = "PRE_TRANSITION_RENDER";
        StageAPICallback2["PRE_UPDATE_GRID_GFX"] = "PRE_UPDATE_GRID_GFX";
      })(StageAPICallback || (exports2.StageAPICallback = StageAPICallback = {}));
      var StageAPILayoutButtonVariant;
      (function(StageAPILayoutButtonVariant2) {
        StageAPILayoutButtonVariant2[StageAPILayoutButtonVariant2["ROOM_CLEAR"] = 0] = "ROOM_CLEAR";
        StageAPILayoutButtonVariant2[StageAPILayoutButtonVariant2["REWARD"] = 1] = "REWARD";
        StageAPILayoutButtonVariant2[StageAPILayoutButtonVariant2["GREED"] = 2] = "GREED";
        StageAPILayoutButtonVariant2[StageAPILayoutButtonVariant2["KILL"] = 9] = "KILL";
        StageAPILayoutButtonVariant2[StageAPILayoutButtonVariant2["RAIL"] = 3] = "RAIL";
      })(StageAPILayoutButtonVariant || (exports2.StageAPILayoutButtonVariant = StageAPILayoutButtonVariant = {}));
      var StageAPILayoutCornyPoopSubtype;
      (function(StageAPILayoutCornyPoopSubtype2) {
        StageAPILayoutCornyPoopSubtype2[StageAPILayoutCornyPoopSubtype2["NORMAL"] = 0] = "NORMAL";
        StageAPILayoutCornyPoopSubtype2[StageAPILayoutCornyPoopSubtype2["NON_REPLACEABLE"] = 1] = "NON_REPLACEABLE";
      })(StageAPILayoutCornyPoopSubtype || (exports2.StageAPILayoutCornyPoopSubtype = StageAPILayoutCornyPoopSubtype = {}));
      var StageAPILayoutGridType;
      (function(StageAPILayoutGridType2) {
        StageAPILayoutGridType2[StageAPILayoutGridType2["ROCK"] = 1e3] = "ROCK";
        StageAPILayoutGridType2[StageAPILayoutGridType2["ROCK_ALT"] = 1002] = "ROCK_ALT";
        StageAPILayoutGridType2[StageAPILayoutGridType2["ROCK_BOMB"] = 1001] = "ROCK_BOMB";
        StageAPILayoutGridType2[StageAPILayoutGridType2["ROCK_SPIKE"] = 1010] = "ROCK_SPIKE";
        StageAPILayoutGridType2[StageAPILayoutGridType2["ROCK_GOLD"] = 1011] = "ROCK_GOLD";
        StageAPILayoutGridType2[StageAPILayoutGridType2["MARKED_SKULL"] = 1008] = "MARKED_SKULL";
        StageAPILayoutGridType2[StageAPILayoutGridType2["BLOCK_METAL"] = 1900] = "BLOCK_METAL";
        StageAPILayoutGridType2[StageAPILayoutGridType2["BLOCK_METAL_TALL"] = 1901] = "BLOCK_METAL_TALL";
        StageAPILayoutGridType2[StageAPILayoutGridType2["BLOCK_INVISIBLE"] = 1999] = "BLOCK_INVISIBLE";
        StageAPILayoutGridType2[StageAPILayoutGridType2["BLOCK_KEY"] = 4e3] = "BLOCK_KEY";
        StageAPILayoutGridType2[StageAPILayoutGridType2["PIT"] = 3e3] = "PIT";
        StageAPILayoutGridType2[StageAPILayoutGridType2["TNT"] = 1300] = "TNT";
        StageAPILayoutGridType2[StageAPILayoutGridType2["TNT_PUSHABLE"] = 292] = "TNT_PUSHABLE";
        StageAPILayoutGridType2[StageAPILayoutGridType2["SPIKES"] = 1930] = "SPIKES";
        StageAPILayoutGridType2[StageAPILayoutGridType2["SPIKES_ON_OFF"] = 1931] = "SPIKES_ON_OFF";
        StageAPILayoutGridType2[StageAPILayoutGridType2["COBWEB"] = 1940] = "COBWEB";
        StageAPILayoutGridType2[StageAPILayoutGridType2["BUTTON"] = 4500] = "BUTTON";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP"] = 1500] = "POOP";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_CORNY"] = 1495] = "POOP_CORNY";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_RED"] = 1490] = "POOP_RED";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_GOLD"] = 1496] = "POOP_GOLD";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_RAINBOW"] = 1494] = "POOP_RAINBOW";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_BLACK"] = 1497] = "POOP_BLACK";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_HOLY"] = 1498] = "POOP_HOLY";
        StageAPILayoutGridType2[StageAPILayoutGridType2["POOP_CHARMING"] = 1501] = "POOP_CHARMING";
        StageAPILayoutGridType2[StageAPILayoutGridType2["GRAVITY"] = 1e4] = "GRAVITY";
        StageAPILayoutGridType2[StageAPILayoutGridType2["PITFALL"] = 291] = "PITFALL";
        StageAPILayoutGridType2[StageAPILayoutGridType2["PROP_A"] = 10] = "PROP_A";
        StageAPILayoutGridType2[StageAPILayoutGridType2["PROP_B"] = 20] = "PROP_B";
        StageAPILayoutGridType2[StageAPILayoutGridType2["PROP_C"] = 30] = "PROP_C";
      })(StageAPILayoutGridType || (exports2.StageAPILayoutGridType = StageAPILayoutGridType = {}));
      var StageAPILayoutPitfallVariant;
      (function(StageAPILayoutPitfallVariant2) {
        StageAPILayoutPitfallVariant2[StageAPILayoutPitfallVariant2["NORMAL"] = 0] = "NORMAL";
        StageAPILayoutPitfallVariant2[StageAPILayoutPitfallVariant2["SUCTION"] = 1] = "SUCTION";
        StageAPILayoutPitfallVariant2[StageAPILayoutPitfallVariant2["TELEPORT"] = 2] = "TELEPORT";
      })(StageAPILayoutPitfallVariant || (exports2.StageAPILayoutPitfallVariant = StageAPILayoutPitfallVariant = {}));
      var StageAPILayoutPoopSubtype;
      (function(StageAPILayoutPoopSubtype2) {
        StageAPILayoutPoopSubtype2[StageAPILayoutPoopSubtype2["NORMAL"] = 0] = "NORMAL";
        StageAPILayoutPoopSubtype2[StageAPILayoutPoopSubtype2["NON_REPLACEABLE"] = 1] = "NON_REPLACEABLE";
      })(StageAPILayoutPoopSubtype || (exports2.StageAPILayoutPoopSubtype = StageAPILayoutPoopSubtype = {}));
      var StageAPILayoutRockSubtype;
      (function(StageAPILayoutRockSubtype2) {
        StageAPILayoutRockSubtype2[StageAPILayoutRockSubtype2["NORMAL"] = 0] = "NORMAL";
        StageAPILayoutRockSubtype2[StageAPILayoutRockSubtype2["NON_REPLACEABLE"] = 1] = "NON_REPLACEABLE";
      })(StageAPILayoutRockSubtype || (exports2.StageAPILayoutRockSubtype = StageAPILayoutRockSubtype = {}));
      var StageAPILayoutSpikesOnOffVariant;
      (function(StageAPILayoutSpikesOnOffVariant2) {
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["NORMAL"] = 0] = "NORMAL";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["DOWN_1_FIFTH"] = 1] = "DOWN_1_FIFTH";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["DOWN_2_FIFTHS"] = 2] = "DOWN_2_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["DOWN_3_FIFTHS"] = 3] = "DOWN_3_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["DOWN_4_FIFTHS"] = 4] = "DOWN_4_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["DOWN_5_FIFTHS"] = 5] = "DOWN_5_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["UP_1_FIFTH"] = 6] = "UP_1_FIFTH";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["UP_2_FIFTHS"] = 7] = "UP_2_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["UP_3_FIFTHS"] = 8] = "UP_3_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["UP_4_FIFTHS"] = 9] = "UP_4_FIFTHS";
        StageAPILayoutSpikesOnOffVariant2[StageAPILayoutSpikesOnOffVariant2["UP_5_FIFTHS"] = 10] = "UP_5_FIFTHS";
      })(StageAPILayoutSpikesOnOffVariant || (exports2.StageAPILayoutSpikesOnOffVariant = StageAPILayoutSpikesOnOffVariant = {}));
      var StageAPIPickupRandomGroupVariant;
      (function(StageAPIPickupRandomGroupVariant2) {
        StageAPIPickupRandomGroupVariant2[StageAPIPickupRandomGroupVariant2["ANY"] = 0] = "ANY";
        StageAPIPickupRandomGroupVariant2[StageAPIPickupRandomGroupVariant2["NOT_CHEST_ITEM"] = 1] = "NOT_CHEST_ITEM";
        StageAPIPickupRandomGroupVariant2[StageAPIPickupRandomGroupVariant2["NOT_ITEM"] = 2] = "NOT_ITEM";
        StageAPIPickupRandomGroupVariant2[StageAPIPickupRandomGroupVariant2["NOT_CHEST_ITEM_COIN"] = 3] = "NOT_CHEST_ITEM_COIN";
        StageAPIPickupRandomGroupVariant2[StageAPIPickupRandomGroupVariant2["NOT_CHEST_ITEM_TRINKET"] = 4] = "NOT_CHEST_ITEM_TRINKET";
      })(StageAPIPickupRandomGroupVariant || (exports2.StageAPIPickupRandomGroupVariant = StageAPIPickupRandomGroupVariant = {}));
    }
  });

  // node_modules/isaac-typescript-definitions/dist/index.js
  var require_dist = __commonJS({
    "node_modules/isaac-typescript-definitions/dist/index.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding(exports3, m, p);
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      __exportStar(require_ActiveSlot(), exports2);
      __exportStar(require_BackdropType(), exports2);
      __exportStar(require_BrokenWatchState(), exports2);
      __exportStar(require_ButtonAction(), exports2);
      __exportStar(require_CallbackPriority(), exports2);
      __exportStar(require_Challenge(), exports2);
      __exportStar(require_ChampionColor(), exports2);
      __exportStar(require_CollectibleAnimation(), exports2);
      __exportStar(require_CollectiblePedestalType(), exports2);
      __exportStar(require_CollectibleSpriteLayer(), exports2);
      __exportStar(require_Controller(), exports2);
      __exportStar(require_ControllerIndex(), exports2);
      __exportStar(require_CopyableIsaacAPIClassType(), exports2);
      __exportStar(require_CurseID(), exports2);
      __exportStar(require_DebugCommand(), exports2);
      __exportStar(require_Difficulty(), exports2);
      __exportStar(require_Dimension(), exports2);
      __exportStar(require_Direction(), exports2);
      __exportStar(require_DoorSlot(), exports2);
      __exportStar(require_Ending(), exports2);
      __exportStar(require_EntityCollisionClass(), exports2);
      __exportStar(require_EntityGridCollisionClass(), exports2);
      __exportStar(require_EntityType(), exports2);
      __exportStar(require_FadeoutTarget(), exports2);
      __exportStar(require_GameStateFlag(), exports2);
      __exportStar(require_GridCollisionClass(), exports2);
      __exportStar(require_GridEntityType(), exports2);
      __exportStar(require_GridEntityXMLType(), exports2);
      __exportStar(require_GridPath(), exports2);
      __exportStar(require_GridRoom(), exports2);
      __exportStar(require_InputHook(), exports2);
      __exportStar(require_ItemConfigCardType(), exports2);
      __exportStar(require_ItemConfigChargeType(), exports2);
      __exportStar(require_ItemConfigPillEffectClass(), exports2);
      __exportStar(require_ItemConfigPillEffectType(), exports2);
      __exportStar(require_ItemPoolType(), exports2);
      __exportStar(require_ItemType(), exports2);
      __exportStar(require_Keyboard(), exports2);
      __exportStar(require_LanguageAbbreviation(), exports2);
      __exportStar(require_LaserOffset(), exports2);
      __exportStar(require_LevelStage(), exports2);
      __exportStar(require_LevelStateFlag(), exports2);
      __exportStar(require_LineCheckMode(), exports2);
      __exportStar(require_ModCallback(), exports2);
      __exportStar(require_Mouse(), exports2);
      __exportStar(require_Music(), exports2);
      __exportStar(require_NPCID(), exports2);
      __exportStar(require_NPCState(), exports2);
      __exportStar(require_NullItemID(), exports2);
      __exportStar(require_PickupPrice(), exports2);
      __exportStar(require_PillEffect(), exports2);
      __exportStar(require_PlayerForm(), exports2);
      __exportStar(require_PlayerItemAnimation(), exports2);
      __exportStar(require_PlayerSpriteLayer(), exports2);
      __exportStar(require_PocketItemSlot(), exports2);
      __exportStar(require_PoopSpellType(), exports2);
      __exportStar(require_ProjectilesMode(), exports2);
      __exportStar(require_RenderMode(), exports2);
      __exportStar(require_RoomDescriptorDisplayType(), exports2);
      __exportStar(require_RoomDifficulty(), exports2);
      __exportStar(require_RoomShape(), exports2);
      __exportStar(require_RoomTransitionAnim(), exports2);
      __exportStar(require_RoomType(), exports2);
      __exportStar(require_SeedEffect(), exports2);
      __exportStar(require_SkinColor(), exports2);
      __exportStar(require_SortingLayer(), exports2);
      __exportStar(require_SoundEffect(), exports2);
      __exportStar(require_StageID(), exports2);
      __exportStar(require_StageTransition(), exports2);
      __exportStar(require_StageType(), exports2);
      __exportStar(require_TrinketSlot(), exports2);
      __exportStar(require_WeaponType(), exports2);
      __exportStar(require_gridEntityStates(), exports2);
      __exportStar(require_gridEntityVariants(), exports2);
      __exportStar(require_npcStates(), exports2);
      __exportStar(require_roomSubTypes(), exports2);
      __exportStar(require_subTypes(), exports2);
      __exportStar(require_variants(), exports2);
      __exportStar(require_ActionTrigger(), exports2);
      __exportStar(require_CacheFlag(), exports2);
      __exportStar(require_DamageFlag(), exports2);
      __exportStar(require_DisplayFlag(), exports2);
      __exportStar(require_DoorSlotFlag(), exports2);
      __exportStar(require_EntityFlag(), exports2);
      __exportStar(require_EntityPartition(), exports2);
      __exportStar(require_ItemConfigTag(), exports2);
      __exportStar(require_LevelCurse(), exports2);
      __exportStar(require_ProjectileFlag(), exports2);
      __exportStar(require_RoomDescriptorFlag(), exports2);
      __exportStar(require_TargetFlag(), exports2);
      __exportStar(require_TearFlag(), exports2);
      __exportStar(require_UseFlag(), exports2);
      __exportStar(require_EncyclopediaItemPoolType(), exports2);
      __exportStar(require_ModConfigMenuOptionType(), exports2);
      __exportStar(require_StageAPIEnums(), exports2);
    }
  });

  // node_modules/isaacscript-common/dist/functions/types.js
  var require_types = __commonJS({
    "node_modules/isaacscript-common/dist/functions/types.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.parseIntSafe = exports2.isUserdata = exports2.isTable = exports2.isString = exports2.isPrimitive = exports2.isNumber = exports2.isInteger = exports2.isFunction = exports2.isBoolean = exports2.asTrinketType = exports2.asString = exports2.asRoomType = exports2.asPlayerType = exports2.asPillEffect = exports2.asPillColor = exports2.asNumber = exports2.asNPCState = exports2.asLevelStage = exports2.asInt = exports2.asFloat = exports2.asCollectibleType = exports2.asCardType = void 0;
      function asCardType(num) {
        return num;
      }
      exports2.asCardType = asCardType;
      function asCollectibleType(num) {
        return num;
      }
      exports2.asCollectibleType = asCollectibleType;
      function asFloat(num) {
        return num;
      }
      exports2.asFloat = asFloat;
      function asInt(num) {
        return num;
      }
      exports2.asInt = asInt;
      function asLevelStage(num) {
        return num;
      }
      exports2.asLevelStage = asLevelStage;
      function asNPCState(num) {
        return num;
      }
      exports2.asNPCState = asNPCState;
      function asNumber(num) {
        return num;
      }
      exports2.asNumber = asNumber;
      function asPillColor(num) {
        return num;
      }
      exports2.asPillColor = asPillColor;
      function asPillEffect(num) {
        return num;
      }
      exports2.asPillEffect = asPillEffect;
      function asPlayerType(num) {
        return num;
      }
      exports2.asPlayerType = asPlayerType;
      function asRoomType(num) {
        return num;
      }
      exports2.asRoomType = asRoomType;
      function asString(str) {
        return str;
      }
      exports2.asString = asString;
      function asTrinketType(num) {
        return num;
      }
      exports2.asTrinketType = asTrinketType;
      function isBoolean(variable) {
        return typeof variable === "boolean";
      }
      exports2.isBoolean = isBoolean;
      function isFunction(variable) {
        return typeof variable === "function";
      }
      exports2.isFunction = isFunction;
      function isInteger(variable) {
        if (!isNumber(variable)) {
          return false;
        }
        return variable === Math.floor(variable);
      }
      exports2.isInteger = isInteger;
      function isNumber(variable) {
        return typeof variable === "number";
      }
      exports2.isNumber = isNumber;
      function isPrimitive(variable) {
        const variableType = typeof variable;
        return variableType === "boolean" || variableType === "number" || variableType === "string";
      }
      exports2.isPrimitive = isPrimitive;
      function isString(variable) {
        return typeof variable === "string";
      }
      exports2.isString = isString;
      function isTable(variable) {
        return type(variable) === "table";
      }
      exports2.isTable = isTable;
      function isUserdata(variable) {
        return type(variable) === "userdata";
      }
      exports2.isUserdata = isUserdata;
      function parseIntSafe2(string2) {
        if (!isString(string2)) {
          return void 0;
        }
        const number = tonumber(string2);
        if (number === void 0) {
          return void 0;
        }
        const flooredNumber = Math.floor(number);
        return number === flooredNumber ? flooredNumber : void 0;
      }
      exports2.parseIntSafe = parseIntSafe2;
    }
  });

  // node_modules/isaacscript-common/dist/classes/DefaultMap.js
  var require_DefaultMap = __commonJS({
    "node_modules/isaacscript-common/dist/classes/DefaultMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DefaultMap = void 0;
      var types_1 = require_types();
      var DefaultMap = class extends Map {
        defaultValue;
        defaultValueFactory;
        /**
         * See the main `DefaultMap` documentation:
         * https://isaacscript.github.io/isaacscript-common/other/classes/DefaultMap
         */
        constructor(defaultValueOrFactoryFunction, initializerArray) {
          const argIsPrimitive = (0, types_1.isPrimitive)(defaultValueOrFactoryFunction);
          const argIsFunction = (0, types_1.isFunction)(defaultValueOrFactoryFunction);
          if (!argIsPrimitive && !argIsFunction) {
            error(`Failed to instantiate a DefaultMap since the provided default value was of type "${typeof defaultValueOrFactoryFunction}". This error usually means that you are trying to use an array (or some other non-primitive data structure that is passed by reference) as the default value. Instead, return the data structure in a factory function, like "() => []". See the DefaultMap documentation for more details.`);
          }
          super(initializerArray);
          if (argIsFunction) {
            this.defaultValue = void 0;
            this.defaultValueFactory = defaultValueOrFactoryFunction;
          } else {
            this.defaultValue = defaultValueOrFactoryFunction;
            this.defaultValueFactory = void 0;
          }
        }
        /**
         * If the key exists, this will return the same thing as the normal `Map.get` method. Otherwise,
         * it will set a default value for the provided key, and then return the default value.
         *
         * @allowEmptyVariadic
         */
        getAndSetDefault(key, ...args) {
          const value = super.get(key);
          if (value !== void 0) {
            return value;
          }
          const defaultValue = this.getDefaultValue(...args);
          this.set(key, defaultValue);
          return defaultValue;
        }
        /**
         * Returns the default value to be used for a new key. (If a factory function was provided during
         * instantiation, this will execute the factory function.)
         */
        getDefaultValue(...args) {
          if (this.defaultValue !== void 0) {
            return this.defaultValue;
          }
          if (this.defaultValueFactory !== void 0) {
            return this.defaultValueFactory(...args);
          }
          error("A DefaultMap was incorrectly instantiated.");
        }
        /**
         * Helper method for cloning the map. Returns either the default value or a reference to the
         * factory function.
         */
        getConstructorArg() {
          if (this.defaultValue !== void 0) {
            return this.defaultValue;
          }
          if (this.defaultValueFactory !== void 0) {
            return this.defaultValueFactory;
          }
          error("A DefaultMap was incorrectly instantiated.");
        }
      };
      exports2.DefaultMap = DefaultMap;
    }
  });

  // node_modules/isaacscript-common/dist/types/ReadonlySet.js
  var require_ReadonlySet = __commonJS({
    "node_modules/isaacscript-common/dist/types/ReadonlySet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ReadonlySet = void 0;
      exports2.ReadonlySet = Set;
    }
  });

  // node_modules/isaacscript-common/dist/core/cachedClasses.js
  var require_cachedClasses = __commonJS({
    "node_modules/isaacscript-common/dist/core/cachedClasses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.fonts = exports2.sfxManager = exports2.musicManager = exports2.itemConfig = exports2.game = void 0;
      exports2.game = Game();
      exports2.itemConfig = Isaac.GetItemConfig();
      exports2.musicManager = MusicManager();
      exports2.sfxManager = SFXManager();
      exports2.fonts = {
        droid: Font(),
        pfTempestaSevenCondensed: Font(),
        teamMeatFont10: Font(),
        teamMeatFont12: Font(),
        teamMeatFont16Bold: Font(),
        terminus: Font(),
        upheaval: Font()
      };
      exports2.fonts.droid.Load("font/droid.fnt");
      exports2.fonts.pfTempestaSevenCondensed.Load("font/pftempestasevencondensed.fnt");
      exports2.fonts.teamMeatFont10.Load("font/teammeatfont10.fnt");
      exports2.fonts.teamMeatFont12.Load("font/teammeatfont12.fnt");
      exports2.fonts.teamMeatFont16Bold.Load("font/teammeatfont16bold.fnt");
      exports2.fonts.terminus.Load("font/terminus.fnt");
      exports2.fonts.upheaval.Load("font/upheaval.fnt");
    }
  });

  // node_modules/isaacscript-common/dist/enums/private/SerializationBrand.js
  var require_SerializationBrand = __commonJS({
    "node_modules/isaacscript-common/dist/enums/private/SerializationBrand.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SerializationBrand = void 0;
      var SerializationBrand;
      (function(SerializationBrand2) {
        SerializationBrand2["DEFAULT_MAP"] = "__TSTL_DEFAULT_MAP";
        SerializationBrand2["MAP"] = "__TSTL_MAP";
        SerializationBrand2["SET"] = "__TSTL_SET";
        SerializationBrand2["BIT_SET_128"] = "__BIT_SET_128";
        SerializationBrand2["COLOR"] = "__COLOR";
        SerializationBrand2["K_COLOR"] = "__K_COLOR";
        SerializationBrand2["RNG"] = "__RNG";
        SerializationBrand2["VECTOR"] = "__VECTOR";
        SerializationBrand2["DEFAULT_MAP_VALUE"] = "__TSTL_DEFAULT_MAP_VALUE";
        SerializationBrand2["OBJECT_WITH_NUMBER_KEYS"] = "__TSTL_OBJECT_WITH_NUMBER_KEYS";
        SerializationBrand2["TSTL_CLASS"] = "__TSTL_CLASS";
      })(SerializationBrand || (exports2.SerializationBrand = SerializationBrand = {}));
    }
  });

  // node_modules/isaacscript-common/dist/functions/log.js
  var require_log = __commonJS({
    "node_modules/isaacscript-common/dist/functions/log.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.logError = exports2.logAndPrint = exports2.log = exports2.getParentFunctionDescription = void 0;
      var types_1 = require_types();
      function getParentFunctionDescription(levels = 3) {
        if (debug !== void 0) {
          const debugTable = debug.getinfo(levels);
          if (debugTable !== void 0) {
            return `${debugTable.name}:${debugTable.linedefined}`;
          }
        }
        if (SandboxGetParentFunctionDescription !== void 0) {
          return SandboxGetParentFunctionDescription(levels);
        }
        return void 0;
      }
      exports2.getParentFunctionDescription = getParentFunctionDescription;
      function log(msg, includeParentFunction = true) {
        if ((0, types_1.isNumber)(msg)) {
          msg = msg.toString();
        }
        const parentFunctionDescription = includeParentFunction ? getParentFunctionDescription() : void 0;
        const debugMsg = parentFunctionDescription === void 0 ? msg : `${parentFunctionDescription} - ${msg}`;
        Isaac.DebugString(debugMsg);
      }
      exports2.log = log;
      function logAndPrint(msg) {
        log(msg);
        print(msg);
      }
      exports2.logAndPrint = logAndPrint;
      function logError(msg) {
        const errorMsg = `Error: ${msg}`;
        logAndPrint(errorMsg);
      }
      exports2.logError = logError;
    }
  });

  // node_modules/isaacscript-common/dist/functions/debugFunctions.js
  var require_debugFunctions = __commonJS({
    "node_modules/isaacscript-common/dist/functions/debugFunctions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.traceback = exports2.isLuaDebugEnabled = exports2.getTraceback = exports2.getTime = exports2.getElapsedTimeSince = void 0;
      var log_1 = require_log();
      function getElapsedTimeSince(time, useSocketIfAvailable = true) {
        return getTime(useSocketIfAvailable) - time;
      }
      exports2.getElapsedTimeSince = getElapsedTimeSince;
      function getTime(useSocketIfAvailable = true) {
        if (useSocketIfAvailable) {
          if (SandboxGetTime !== void 0) {
            return SandboxGetTime();
          }
          if (isLuaDebugEnabled()) {
            const [ok, requiredSocket] = pcall(__require, "socket");
            if (ok) {
              const socket = requiredSocket;
              return socket.gettime();
            }
          }
        }
        return Isaac.GetTime();
      }
      exports2.getTime = getTime;
      function getTraceback() {
        if (SandboxGetTraceback !== void 0) {
          return SandboxGetTraceback();
        }
        if (debug !== void 0) {
          return debug.traceback();
        }
        return 'stack traceback:\n(the "--luadebug" flag is not enabled)';
      }
      exports2.getTraceback = getTraceback;
      function isLuaDebugEnabled() {
        return _G.package !== void 0;
      }
      exports2.isLuaDebugEnabled = isLuaDebugEnabled;
      function traceback() {
        const tracebackOutput = getTraceback();
        (0, log_1.log)(tracebackOutput);
      }
      exports2.traceback = traceback;
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerIndex.js
  var require_playerIndex = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerIndex.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isFoundSoul = exports2.isChildPlayer = exports2.getSubPlayerParent = exports2.getPlayers = exports2.getPlayerIndexVanilla = exports2.getPlayerIndex = exports2.getPlayerFromIndex = exports2.getOtherPlayers = exports2.getAllPlayers = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ReadonlySet_1 = require_ReadonlySet();
      var DEFAULT_COLLECTIBLE_TYPE = isaac_typescript_definitions_1.CollectibleType.SAD_ONION;
      var EXCLUDED_CHARACTERS = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerType.ESAU,
        isaac_typescript_definitions_1.PlayerType.SOUL_B
        // 40
      ]);
      function getAllPlayers() {
        const numPlayers = cachedClasses_1.game.GetNumPlayers();
        const players = [];
        for (let i = 0; i < numPlayers; i++) {
          const player = Isaac.GetPlayer(i);
          players.push(player);
        }
        return players;
      }
      exports2.getAllPlayers = getAllPlayers;
      function getOtherPlayers(player) {
        const playerPtrHash = GetPtrHash(player);
        const players = getAllPlayers();
        return players.filter((otherPlayer) => GetPtrHash(otherPlayer) !== playerPtrHash);
      }
      exports2.getOtherPlayers = getOtherPlayers;
      function getPlayerFromIndex(playerIndex) {
        const players = getAllPlayers();
        return players.find((player) => getPlayerIndex(player) === playerIndex);
      }
      exports2.getPlayerFromIndex = getPlayerFromIndex;
      function getPlayerIndex(player, differentiateForgottenAndSoul = false) {
        let playerToUse = player;
        const isSubPlayer = player.IsSubPlayer();
        if (isSubPlayer) {
          const subPlayer = player;
          const playerParent = getSubPlayerParent(subPlayer);
          if (playerParent !== void 0) {
            playerToUse = playerParent;
          }
        }
        const collectibleType = getPlayerIndexCollectibleType(player, differentiateForgottenAndSoul);
        const collectibleRNG = playerToUse.GetCollectibleRNG(collectibleType);
        const seed = collectibleRNG.GetSeed();
        return seed;
      }
      exports2.getPlayerIndex = getPlayerIndex;
      function getPlayerIndexCollectibleType(player, differentiateForgottenAndSoul) {
        const character = player.GetPlayerType();
        if (character === isaac_typescript_definitions_1.PlayerType.SOUL) {
          return differentiateForgottenAndSoul ? isaac_typescript_definitions_1.CollectibleType.INNER_EYE : DEFAULT_COLLECTIBLE_TYPE;
        }
        return DEFAULT_COLLECTIBLE_TYPE;
      }
      function getPlayerIndexVanilla(playerToFind) {
        const numPlayers = cachedClasses_1.game.GetNumPlayers();
        const playerToFindHash = GetPtrHash(playerToFind);
        for (let i = 0; i < numPlayers; i++) {
          const player = Isaac.GetPlayer(i);
          const playerHash = GetPtrHash(player);
          if (playerHash === playerToFindHash) {
            return i;
          }
        }
        return void 0;
      }
      exports2.getPlayerIndexVanilla = getPlayerIndexVanilla;
      function getPlayers(performCharacterExclusions = false) {
        const players = getAllPlayers();
        const nonChildPlayers = players.filter((player) => !isChildPlayer(player));
        const nonChildPlayersFiltered = nonChildPlayers.filter((player) => {
          const character = player.GetPlayerType();
          return !EXCLUDED_CHARACTERS.has(character);
        });
        return performCharacterExclusions ? nonChildPlayersFiltered : nonChildPlayers;
      }
      exports2.getPlayers = getPlayers;
      function getSubPlayerParent(subPlayer) {
        const subPlayerPtrHash = GetPtrHash(subPlayer);
        const players = getPlayers();
        return players.find((player) => {
          const thisPlayerSubPlayer = player.GetSubPlayer();
          if (thisPlayerSubPlayer === void 0) {
            return false;
          }
          const thisPlayerSubPlayerPtrHash = GetPtrHash(thisPlayerSubPlayer);
          return thisPlayerSubPlayerPtrHash === subPlayerPtrHash;
        });
      }
      exports2.getSubPlayerParent = getSubPlayerParent;
      function isChildPlayer(player) {
        return player.Parent !== void 0;
      }
      exports2.isChildPlayer = isChildPlayer;
      function isFoundSoul(player) {
        return isChildPlayer(player) && player.Variant === isaac_typescript_definitions_1.PlayerVariant.COOP_BABY && player.SubType === isaac_typescript_definitions_1.BabySubType.FOUND_SOUL;
      }
      exports2.isFoundSoul = isFoundSoul;
    }
  });

  // node_modules/isaacscript-common/dist/functions/utils.js
  var require_utils = __commonJS({
    "node_modules/isaacscript-common/dist/functions/utils.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.todo = exports2.repeat = exports2.isRepentance = exports2.isMultiplayer = exports2.inRange = exports2.iRange = exports2.getTraversalDescription = exports2.eRange = exports2.assertNotNull = exports2.assertDefined = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      var playerIndex_1 = require_playerIndex();
      var types_1 = require_types();
      function assertDefined3(value, ...[msg]) {
        if (value === void 0) {
          error(msg);
        }
      }
      exports2.assertDefined = assertDefined3;
      function assertNotNull(value, ...[msg]) {
        if (value === null) {
          error(msg);
        }
      }
      exports2.assertNotNull = assertNotNull;
      function eRange(start, end, increment = 1) {
        if (end === void 0) {
          return eRange(0, start, increment);
        }
        const array = [];
        for (let i = start; i < end; i += increment) {
          array.push(i);
        }
        return array;
      }
      exports2.eRange = eRange;
      function getTraversalDescription(key, traversalDescription) {
        if (traversalDescription !== "") {
          traversalDescription += " --> ";
        }
        traversalDescription += tostring(key);
        return traversalDescription;
      }
      exports2.getTraversalDescription = getTraversalDescription;
      function iRange(start, end, increment = 1) {
        if (end === void 0) {
          return iRange(0, start, increment);
        }
        const exclusiveEnd = end + 1;
        return eRange(start, exclusiveEnd, increment);
      }
      exports2.iRange = iRange;
      function inRange(num, start, end) {
        return num >= start && num <= end;
      }
      exports2.inRange = inRange;
      function isMultiplayer() {
        const players = (0, playerIndex_1.getAllPlayers)();
        const controllerIndexes = players.map((player) => player.ControllerIndex);
        const controllerIndexesSet = new ReadonlySet_1.ReadonlySet(controllerIndexes);
        return controllerIndexesSet.size > 1;
      }
      exports2.isMultiplayer = isMultiplayer;
      function isRepentance() {
        const metatable = getmetatable(Sprite);
        assertDefined3(metatable, "Failed to get the metatable of the Sprite global table.");
        const classTable = metatable.get("__class");
        assertDefined3(classTable, 'Failed to get the "__class" key of the Sprite metatable.');
        const getAnimation = classTable.get("GetAnimation");
        return (0, types_1.isFunction)(getAnimation);
      }
      exports2.isRepentance = isRepentance;
      function repeat(num, func) {
        for (let i = 0; i < num; i++) {
          func(i);
        }
      }
      exports2.repeat = repeat;
      function todo(...args) {
      }
      exports2.todo = todo;
    }
  });

  // node_modules/isaacscript-common/dist/functions/string.js
  var require_string = __commonJS({
    "node_modules/isaacscript-common/dist/functions/string.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.uncapitalizeFirstLetter = exports2.trimSuffix = exports2.trimPrefix = exports2.removeSubstring = exports2.removeNonAlphanumericCharacters = exports2.removeCharactersBefore = exports2.removeAllCharacters = exports2.parseSemanticVersion = exports2.getPartialMatch = exports2.getObjectPartialMatch = exports2.getMapPartialMatch = exports2.capitalizeFirstLetter = void 0;
      var types_1 = require_types();
      var utils_1 = require_utils();
      function capitalizeFirstLetter(string2) {
        if (string2 === "") {
          return string2;
        }
        const firstCharacter = string2.charAt(0);
        const capitalizedFirstLetter = firstCharacter.toUpperCase();
        const restOfString = string2.slice(1);
        return `${capitalizedFirstLetter}${restOfString}`;
      }
      exports2.capitalizeFirstLetter = capitalizeFirstLetter;
      function getMapPartialMatch(searchText, map) {
        const keys = [...map.keys()];
        const matchingKey = getPartialMatch(searchText, keys);
        if (matchingKey === void 0) {
          return void 0;
        }
        const value = map.get(matchingKey);
        (0, utils_1.assertDefined)(value, `Failed to get the map value corresponding to the partial match of: ${matchingKey}`);
        return [matchingKey, value];
      }
      exports2.getMapPartialMatch = getMapPartialMatch;
      function getObjectPartialMatch(searchText, object) {
        const keys = Object.keys(object);
        const matchingKey = getPartialMatch(searchText, keys);
        if (matchingKey === void 0) {
          return void 0;
        }
        const value = object[matchingKey];
        (0, utils_1.assertDefined)(value, `Failed to get the object value corresponding to the partial match of: ${matchingKey}`);
        return [matchingKey, value];
      }
      exports2.getObjectPartialMatch = getObjectPartialMatch;
      function getPartialMatch(searchText, array) {
        const sortedArray = array.toSorted();
        searchText = searchText.toLowerCase();
        searchText = searchText.replaceAll(" ", "");
        const matchingElements = sortedArray.filter((element) => element.toLowerCase().startsWith(searchText));
        matchingElements.sort();
        return matchingElements[0];
      }
      exports2.getPartialMatch = getPartialMatch;
      function parseSemanticVersion(versionString) {
        const [majorVersionString, minorVersionString, patchVersionString] = string.match(versionString, "(%d+).(%d+).(%d+)");
        if (majorVersionString === void 0 || minorVersionString === void 0 || patchVersionString === void 0) {
          return void 0;
        }
        const majorVersion = (0, types_1.parseIntSafe)(majorVersionString);
        const minorVersion = (0, types_1.parseIntSafe)(minorVersionString);
        const patchVersion = (0, types_1.parseIntSafe)(patchVersionString);
        if (majorVersion === void 0 || minorVersion === void 0 || patchVersion === void 0) {
          return void 0;
        }
        return { majorVersion, minorVersion, patchVersion };
      }
      exports2.parseSemanticVersion = parseSemanticVersion;
      function removeAllCharacters(string2, character) {
        return string2.replaceAll(character, "");
      }
      exports2.removeAllCharacters = removeAllCharacters;
      function removeCharactersBefore(string2, substring) {
        const index = string2.indexOf(substring);
        return string2.slice(index);
      }
      exports2.removeCharactersBefore = removeCharactersBefore;
      function removeNonAlphanumericCharacters(str) {
        const [returnValue, _] = string.gsub(str, "%W", "");
        return returnValue;
      }
      exports2.removeNonAlphanumericCharacters = removeNonAlphanumericCharacters;
      function removeSubstring(string2, ...substrings) {
        for (const substring of substrings) {
          string2 = string2.replaceAll(substring, "");
        }
        return string2;
      }
      exports2.removeSubstring = removeSubstring;
      function trimPrefix(string2, prefix) {
        if (!string2.startsWith(prefix)) {
          return string2;
        }
        return string2.slice(prefix.length);
      }
      exports2.trimPrefix = trimPrefix;
      function trimSuffix(string2, prefix) {
        if (!string2.endsWith(prefix)) {
          return string2;
        }
        const endCharacter = string2.length - prefix.length;
        return string2.slice(0, endCharacter);
      }
      exports2.trimSuffix = trimSuffix;
      function uncapitalizeFirstLetter(string2) {
        if (string2 === "") {
          return string2;
        }
        const firstCharacter = string2.charAt(0);
        const uncapitalizedFirstLetter = firstCharacter.toLowerCase();
        const restOfString = string2.slice(1);
        return `${uncapitalizedFirstLetter}${restOfString}`;
      }
      exports2.uncapitalizeFirstLetter = uncapitalizeFirstLetter;
    }
  });

  // node_modules/isaacscript-common/dist/functions/isaacAPIClass.js
  var require_isaacAPIClass = __commonJS({
    "node_modules/isaacscript-common/dist/functions/isaacAPIClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isaacAPIClassEquals = exports2.isTear = exports2.isTNT = exports2.isSpikes = exports2.isRock = exports2.isProjectile = exports2.isPressurePlate = exports2.isPoop = exports2.isPlayer = exports2.isPit = exports2.isPickup = exports2.isNPC = exports2.isLaser = exports2.isKnife = exports2.isIsaacAPIClassOfType = exports2.isIsaacAPIClass = exports2.isGridEntity = exports2.isFamiliar = exports2.isEntity = exports2.isEffect = exports2.isDoor = exports2.isBomb = exports2.getIsaacAPIClassName = void 0;
      var string_1 = require_string();
      var types_1 = require_types();
      function getIsaacAPIClassName(object) {
        if (!(0, types_1.isUserdata)(object)) {
          return void 0;
        }
        const metatable = getmetatable(object);
        if (metatable === void 0) {
          return void 0;
        }
        const classType = metatable.get("__type");
        if (!(0, types_1.isString)(classType)) {
          return void 0;
        }
        return (0, string_1.trimPrefix)(classType, "const ");
      }
      exports2.getIsaacAPIClassName = getIsaacAPIClassName;
      function isBomb(variable) {
        return getIsaacAPIClassName(variable) === "EntityBomb";
      }
      exports2.isBomb = isBomb;
      function isDoor(variable) {
        return getIsaacAPIClassName(variable) === "GridEntityDoor";
      }
      exports2.isDoor = isDoor;
      function isEffect(variable) {
        return getIsaacAPIClassName(variable) === "EntityEffect";
      }
      exports2.isEffect = isEffect;
      function isEntity(variable) {
        return getIsaacAPIClassName(variable) === "Entity";
      }
      exports2.isEntity = isEntity;
      function isFamiliar(variable) {
        return getIsaacAPIClassName(variable) === "EntityEffect";
      }
      exports2.isFamiliar = isFamiliar;
      function isGridEntity(variable) {
        return getIsaacAPIClassName(variable) === "GridEntity";
      }
      exports2.isGridEntity = isGridEntity;
      function isIsaacAPIClass(object) {
        const isaacAPIClassType = getIsaacAPIClassName(object);
        return isaacAPIClassType !== void 0;
      }
      exports2.isIsaacAPIClass = isIsaacAPIClass;
      function isIsaacAPIClassOfType(object, classType) {
        const isaacAPIClassType = getIsaacAPIClassName(object);
        return isaacAPIClassType === classType || isaacAPIClassType === `const ${classType}`;
      }
      exports2.isIsaacAPIClassOfType = isIsaacAPIClassOfType;
      function isKnife(variable) {
        return getIsaacAPIClassName(variable) === "EntityKnife";
      }
      exports2.isKnife = isKnife;
      function isLaser(variable) {
        return getIsaacAPIClassName(variable) === "EntityLaser";
      }
      exports2.isLaser = isLaser;
      function isNPC(variable) {
        return getIsaacAPIClassName(variable) === "EntityNPC";
      }
      exports2.isNPC = isNPC;
      function isPickup(variable) {
        return getIsaacAPIClassName(variable) === "EntityPickup";
      }
      exports2.isPickup = isPickup;
      function isPit(variable) {
        return getIsaacAPIClassName(variable) === "GridEntityPit";
      }
      exports2.isPit = isPit;
      function isPlayer(variable) {
        return getIsaacAPIClassName(variable) === "EntityPlayer";
      }
      exports2.isPlayer = isPlayer;
      function isPoop(variable) {
        return getIsaacAPIClassName(variable) === "GridEntityPoop";
      }
      exports2.isPoop = isPoop;
      function isPressurePlate(variable) {
        return getIsaacAPIClassName(variable) === "GridEntityPressurePlate";
      }
      exports2.isPressurePlate = isPressurePlate;
      function isProjectile(variable) {
        return getIsaacAPIClassName(variable) === "EntityProjectile";
      }
      exports2.isProjectile = isProjectile;
      function isRock(variable) {
        return getIsaacAPIClassName(variable) === "GridEntityRock";
      }
      exports2.isRock = isRock;
      function isSpikes(variable) {
        return getIsaacAPIClassName(variable) === "GridEntitySpikes";
      }
      exports2.isSpikes = isSpikes;
      function isTNT(variable) {
        return getIsaacAPIClassName(variable) === "GridEntityTNT";
      }
      exports2.isTNT = isTNT;
      function isTear(variable) {
        return getIsaacAPIClassName(variable) === "EntityTear";
      }
      exports2.isTear = isTear;
      function isaacAPIClassEquals(object1, object2, keys) {
        const table1 = object1;
        const table2 = object2;
        return keys.every((key) => table1.get(key) === table2.get(key));
      }
      exports2.isaacAPIClassEquals = isaacAPIClassEquals;
    }
  });

  // node_modules/isaacscript-common/dist/functions/table.js
  var require_table = __commonJS({
    "node_modules/isaacscript-common/dist/functions/table.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.tableHasKeys = exports2.iterateTableInOrder = exports2.isTableEmpty = exports2.getStringsFromTable = exports2.getNumbersFromTable = exports2.getBooleansFromTable = exports2.copyUserdataValuesToTable = exports2.clearTable = void 0;
      var types_1 = require_types();
      var utils_1 = require_utils();
      function clearTable(luaMap) {
        for (const [key] of luaMap) {
          luaMap.delete(key);
        }
      }
      exports2.clearTable = clearTable;
      function copyUserdataValuesToTable(object, keys, luaMap) {
        if (!(0, types_1.isUserdata)(object)) {
          error(`Failed to copy an object values to a table, since the object was of type: ${type(object)}`);
        }
        const userdata = object;
        for (const key of keys) {
          const value = userdata.get(key);
          luaMap.set(key, value);
        }
      }
      exports2.copyUserdataValuesToTable = copyUserdataValuesToTable;
      function getBooleansFromTable(luaMap, objectName, ...keys) {
        const booleans = [];
        for (const key of keys) {
          const value = luaMap.get(key);
          (0, utils_1.assertDefined)(value, `Failed to find a value for "${key}" in a table representing a "${objectName}" object.`);
          if ((0, types_1.isBoolean)(value)) {
            booleans.push(value);
          } else {
            error(`Failed to get the boolean for the "${key}" value of a table representing a "${objectName}" object because the type was: ${typeof value}`);
          }
        }
        return booleans;
      }
      exports2.getBooleansFromTable = getBooleansFromTable;
      function getNumbersFromTable(luaMap, objectName, ...keys) {
        const numbers = [];
        for (const key of keys) {
          const value = luaMap.get(key);
          (0, utils_1.assertDefined)(value, `Failed to find a value for "${key}" in a table representing a "${objectName}" object.`);
          if ((0, types_1.isNumber)(value)) {
            numbers.push(value);
          } else if ((0, types_1.isString)(value)) {
            const number = tonumber(value);
            (0, utils_1.assertDefined)(number, `Failed to convert the "${key}" value of a table representing a "${objectName}" object to a number: ${value}`);
            numbers.push(number);
          } else {
            error(`Failed to get the number for the "${key}" value of a table representing a "${objectName}" object because the type was: ${typeof value}`);
          }
        }
        return numbers;
      }
      exports2.getNumbersFromTable = getNumbersFromTable;
      function getStringsFromTable(luaMap, objectName, ...keys) {
        const strings = [];
        for (const key of keys) {
          const value = luaMap.get(key);
          (0, utils_1.assertDefined)(value, `Failed to find a value for "${key}" in a table representing a "${objectName}" object.`);
          if ((0, types_1.isString)(value)) {
            strings.push(value);
          } else {
            const string2 = tostring(value);
            strings.push(string2);
          }
        }
        return strings;
      }
      exports2.getStringsFromTable = getStringsFromTable;
      function isTableEmpty(luaMap) {
        for (const [_key, _value] of luaMap) {
          return false;
        }
        return true;
      }
      exports2.isTableEmpty = isTableEmpty;
      function iterateTableInOrder(luaMap, func, inOrder = true) {
        if (!inOrder) {
          for (const [key, value] of luaMap) {
            func(key, value);
          }
          return;
        }
        const keys = Object.keys(luaMap);
        const hasAllNumberKeys = keys.every((key) => (0, types_1.isNumber)(key));
        const hasAllStringKeys = keys.every((key) => (0, types_1.isString)(key));
        if (!hasAllNumberKeys && !hasAllStringKeys) {
          for (const [key, value] of luaMap) {
            func(key, value);
          }
          return;
        }
        keys.sort();
        for (const key of keys) {
          const keyIndex = key;
          const value = luaMap.get(keyIndex);
          if (value !== void 0) {
            func(keyIndex, value);
          }
        }
      }
      exports2.iterateTableInOrder = iterateTableInOrder;
      function tableHasKeys(luaMap, ...keys) {
        return keys.every((key) => luaMap.has(key));
      }
      exports2.tableHasKeys = tableHasKeys;
    }
  });

  // node_modules/isaacscript-common/dist/functions/rng.js
  var require_rng = __commonJS({
    "node_modules/isaacscript-common/dist/functions/rng.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setSeed = exports2.setAllRNGToStartSeed = exports2.setAllRNGToSeed = exports2.serializeRNG = exports2.rngEquals = exports2.newRNG = exports2.isSerializedRNG = exports2.isRNG = exports2.getRandomSeed = exports2.deserializeRNG = exports2.copyRNG = void 0;
      var cachedClasses_1 = require_cachedClasses();
      var SerializationBrand_1 = require_SerializationBrand();
      var debugFunctions_1 = require_debugFunctions();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var log_1 = require_log();
      var table_1 = require_table();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var RECOMMENDED_SHIFT_IDX = 35;
      var OBJECT_NAME = "RNG";
      var KEYS = ["seed"];
      function copyRNG(rng) {
        if (!isRNG(rng)) {
          error(`Failed to copy a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const seed = rng.GetSeed();
        return newRNG(seed);
      }
      exports2.copyRNG = copyRNG;
      function deserializeRNG(rng) {
        if (!(0, types_1.isTable)(rng)) {
          error(`Failed to deserialize a ${OBJECT_NAME} object since the provided object was not a Lua table.`);
        }
        const [seed] = (0, table_1.getNumbersFromTable)(rng, OBJECT_NAME, ...KEYS);
        (0, utils_1.assertDefined)(seed, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: seed`);
        return newRNG(seed);
      }
      exports2.deserializeRNG = deserializeRNG;
      function getRandomSeed() {
        const randomNumber = Random();
        const safeRandomNumber = randomNumber === 0 ? 1 : randomNumber;
        return safeRandomNumber;
      }
      exports2.getRandomSeed = getRandomSeed;
      function isRNG(object) {
        return (0, isaacAPIClass_1.isIsaacAPIClassOfType)(object, OBJECT_NAME);
      }
      exports2.isRNG = isRNG;
      function isSerializedRNG(object) {
        if (!(0, types_1.isTable)(object)) {
          return false;
        }
        return (0, table_1.tableHasKeys)(object, ...KEYS) && object.has(SerializationBrand_1.SerializationBrand.RNG);
      }
      exports2.isSerializedRNG = isSerializedRNG;
      function newRNG(seed = getRandomSeed()) {
        const rng = RNG();
        setSeed(rng, seed);
        return rng;
      }
      exports2.newRNG = newRNG;
      function rngEquals(rng1, rng2) {
        return (0, isaacAPIClass_1.isaacAPIClassEquals)(rng1, rng2, KEYS);
      }
      exports2.rngEquals = rngEquals;
      function serializeRNG(rng) {
        if (!isRNG(rng)) {
          error(`Failed to serialize a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const seed = rng.GetSeed();
        const rngTable = new LuaMap();
        rngTable.set("seed", seed);
        rngTable.set(SerializationBrand_1.SerializationBrand.RNG, "");
        return rngTable;
      }
      exports2.serializeRNG = serializeRNG;
      function setAllRNGToSeed(object, seed) {
        if (!(0, types_1.isTable)(object)) {
          error(`Failed to iterate over the object containing RNG objects since the type of the provided object was: ${typeof object}`);
        }
        let setAtLeastOneSeed = false;
        for (const [_key, value] of object) {
          if (isRNG(value)) {
            setSeed(value, seed);
            setAtLeastOneSeed = true;
          }
        }
        if (!setAtLeastOneSeed) {
          error(`Failed to set all RNG objects to seed ${seed} because the parent object did not contain any RNG objects.`);
        }
      }
      exports2.setAllRNGToSeed = setAllRNGToSeed;
      function setAllRNGToStartSeed(object) {
        const seeds = cachedClasses_1.game.GetSeeds();
        const startSeed = seeds.GetStartSeed();
        setAllRNGToSeed(object, startSeed);
      }
      exports2.setAllRNGToStartSeed = setAllRNGToStartSeed;
      function setSeed(rng, seed) {
        if (seed === 0) {
          seed = getRandomSeed();
          (0, log_1.logError)("Failed to set a RNG object to a seed of 0. Using a random value instead.");
          (0, debugFunctions_1.traceback)();
        }
        rng.SetSeed(seed, RECOMMENDED_SHIFT_IDX);
      }
      exports2.setSeed = setSeed;
    }
  });

  // node_modules/isaacscript-common/dist/functions/random.js
  var require_random = __commonJS({
    "node_modules/isaacscript-common/dist/functions/random.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getRandomInt = exports2.getRandomFloat = exports2.getRandom = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      var rng_1 = require_rng();
      function getRandom(seedOrRNG) {
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        return rng.RandomFloat();
      }
      exports2.getRandom = getRandom;
      function getRandomFloat(min, max, seedOrRNG) {
        if (min > max) {
          const oldMin = min;
          const oldMax = max;
          min = oldMax;
          max = oldMin;
        }
        return min + getRandom(seedOrRNG) * (max - min);
      }
      exports2.getRandomFloat = getRandomFloat;
      function getRandomInt2(min, max, seedOrRNG, exceptions = []) {
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        min = Math.ceil(min);
        max = Math.floor(max);
        if (min > max) {
          const oldMin = min;
          const oldMax = max;
          min = oldMax;
          max = oldMin;
        }
        const exceptionsSet = new ReadonlySet_1.ReadonlySet(exceptions);
        let randomInt;
        do {
          randomInt = rng.RandomInt(max - min + 1) + min;
        } while (exceptionsSet.has(randomInt));
        return randomInt;
      }
      exports2.getRandomInt = getRandomInt2;
    }
  });

  // node_modules/isaacscript-common/dist/functions/sort.js
  var require_sort = __commonJS({
    "node_modules/isaacscript-common/dist/functions/sort.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.stableSort = exports2.sortTwoDimensionalArray = exports2.sortObjectArrayByKey = exports2.sortNormal = void 0;
      var types_1 = require_types();
      function sortNormal(a2, b2) {
        if (!(0, types_1.isNumber)(a2) && !(0, types_1.isString)(a2)) {
          error(`Failed to normal sort since the first value was not a number or string and was instead: ${type(a2)}`);
        }
        if (!(0, types_1.isNumber)(b2) && !(0, types_1.isString)(b2)) {
          error(`Failed to normal sort since the second value was not a number or string and was instead: ${type(b2)}`);
        }
        if (a2 < b2) {
          return -1;
        }
        if (a2 > b2) {
          return 1;
        }
        return 0;
      }
      exports2.sortNormal = sortNormal;
      function sortObjectArrayByKey(key) {
        return (a2, b2) => {
          if (!(0, types_1.isTable)(a2)) {
            error(`Failed to sort an object array by the key of "${key}" since the first element was not a table and was instead: ${type(a2)}`);
          }
          if (!(0, types_1.isTable)(b2)) {
            error(`Failed to sort an object array by the key of "${key}" since the second element was not a table and was instead: ${type(b2)}.`);
          }
          const aValue = a2.get(key);
          const bValue = b2.get(key);
          return sortNormal(aValue, bValue);
        };
      }
      exports2.sortObjectArrayByKey = sortObjectArrayByKey;
      function sortTwoDimensionalArray(a2, b2) {
        const aType = type(a2);
        const bType = type(b2);
        if (aType !== bType) {
          error(`Failed to two-dimensional sort since the two elements were disparate types: ${a2} & ${b2} (${aType} & ${bType})`);
        }
        if (aType === "string" || aType === "number") {
          return sortNormal(a2, b2);
        }
        if (aType !== "table") {
          error("Failed to two-dimensional sort since the first element was not a string, number, or table.");
        }
        if (bType !== "table") {
          error("Failed to two-dimensional sort since the second element was not a string, number, or table.");
        }
        const firstElement1 = a2[0];
        const firstElement2 = b2[0];
        if (firstElement1 === void 0 || firstElement1 === null) {
          error("Failed to two-dimensional sort since the first element of the first array was undefined.");
        }
        if (firstElement2 === void 0 || firstElement2 === null) {
          error("Failed to two-dimensional sort since the first element of the second array was undefined.");
        }
        const elementType1 = type(firstElement1);
        const elementType2 = type(firstElement2);
        if (elementType1 !== elementType2) {
          error(`Failed to two-dimensional sort since the first element of each array were disparate types: ${firstElement1} & ${firstElement2} (${elementType1} & ${elementType2})`);
        }
        return sortNormal(firstElement1, firstElement2);
      }
      exports2.sortTwoDimensionalArray = sortTwoDimensionalArray;
      function stableSort(array, sortFunc = sortNormal) {
        if (array.length <= 1) {
          return array;
        }
        const middleIndex = Math.floor(array.length / 2);
        const leftArray = array.slice(0, middleIndex);
        const rightArray = array.slice(middleIndex);
        const sortedLeftArray = stableSort(leftArray, sortFunc);
        const sortedRightArray = stableSort(rightArray, sortFunc);
        const mergedArray = [];
        let leftIndex = 0;
        let rightIndex = 0;
        while (leftIndex < sortedLeftArray.length && rightIndex < sortedRightArray.length) {
          const left = sortedLeftArray[leftIndex];
          const right = sortedRightArray[rightIndex];
          const sortResult = sortFunc(left, right);
          if (sortResult === -1 || sortResult === 0) {
            mergedArray.push(left);
            leftIndex++;
          } else {
            mergedArray.push(right);
            rightIndex++;
          }
        }
        while (leftIndex < sortedLeftArray.length) {
          const left = sortedLeftArray[leftIndex];
          mergedArray.push(left);
          leftIndex++;
        }
        while (rightIndex < sortedRightArray.length) {
          const right = sortedRightArray[rightIndex];
          mergedArray.push(right);
          rightIndex++;
        }
        return mergedArray;
      }
      exports2.stableSort = stableSort;
    }
  });

  // node_modules/isaacscript-common/dist/functions/array.js
  var require_array = __commonJS({
    "node_modules/isaacscript-common/dist/functions/array.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.swapArrayElements = exports2.sumArray = exports2.shuffleArrayInPlace = exports2.shuffleArray = exports2.setAllArrayElements = exports2.isArrayInArray = exports2.isArrayElementsUnique = exports2.isArrayContiguous = exports2.isArray = exports2.includes = exports2.getRandomArrayIndex = exports2.getRandomArrayElementAndRemove = exports2.getRandomArrayElement = exports2.getLowestArrayElement = exports2.getHighestArrayElement = exports2.getArrayIndexes = exports2.getArrayDuplicateElements = exports2.getArrayCombinations = exports2.filterMap = exports2.emptyArray = exports2.copyArray = exports2.combineArrays = exports2.arrayToString = exports2.arrayRemoveIndexInPlace = exports2.arrayRemoveIndex = exports2.arrayRemoveInPlace = exports2.arrayRemoveAllInPlace = exports2.arrayRemoveAll = exports2.arrayRemove = exports2.arrayEquals = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      var random_1 = require_random();
      var rng_1 = require_rng();
      var sort_1 = require_sort();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function arrayEquals(array1, array2) {
        if (array1.length !== array2.length) {
          return false;
        }
        return array1.every((array1Element, i) => {
          const array2Element = array2[i];
          return array1Element === array2Element;
        });
      }
      exports2.arrayEquals = arrayEquals;
      function arrayRemove(originalArray, ...elementsToRemove) {
        const elementsToRemoveSet = new ReadonlySet_1.ReadonlySet(elementsToRemove);
        const array = [];
        for (const element of originalArray) {
          if (!elementsToRemoveSet.has(element)) {
            array.push(element);
          }
        }
        return array;
      }
      exports2.arrayRemove = arrayRemove;
      function arrayRemoveAll(originalArray, ...elementsToRemove) {
        const array = copyArray(originalArray);
        arrayRemoveAllInPlace(array, ...elementsToRemove);
        return array;
      }
      exports2.arrayRemoveAll = arrayRemoveAll;
      function arrayRemoveAllInPlace(array, ...elementsToRemove) {
        let removedOneOrMoreElements = false;
        for (const element of elementsToRemove) {
          let index;
          do {
            index = array.indexOf(element);
            if (index > -1) {
              removedOneOrMoreElements = true;
              array.splice(index, 1);
            }
          } while (index > -1);
        }
        return removedOneOrMoreElements;
      }
      exports2.arrayRemoveAllInPlace = arrayRemoveAllInPlace;
      function arrayRemoveInPlace(array, ...elementsToRemove) {
        const removedElements = [];
        for (const element of elementsToRemove) {
          const index = array.indexOf(element);
          if (index > -1) {
            const removedElement = array.splice(index, 1);
            removedElements.push(...removedElement);
          }
        }
        return removedElements;
      }
      exports2.arrayRemoveInPlace = arrayRemoveInPlace;
      function arrayRemoveIndex(originalArray, ...indexesToRemove) {
        const indexesToRemoveSet = new ReadonlySet_1.ReadonlySet(indexesToRemove);
        const array = [];
        for (const [i, element] of originalArray.entries()) {
          if (!indexesToRemoveSet.has(i)) {
            array.push(element);
          }
        }
        return array;
      }
      exports2.arrayRemoveIndex = arrayRemoveIndex;
      function arrayRemoveIndexInPlace(array, ...indexesToRemove) {
        const legalIndexes = indexesToRemove.filter((i) => i >= 0 && i < array.length);
        if (legalIndexes.length === 0) {
          return [];
        }
        const legalIndexesSet = new ReadonlySet_1.ReadonlySet(legalIndexes);
        const removedElements = [];
        for (let i = array.length - 1; i >= 0; i--) {
          if (legalIndexesSet.has(i)) {
            const removedElement = array.splice(i, 1);
            removedElements.push(...removedElement);
          }
        }
        return removedElements;
      }
      exports2.arrayRemoveIndexInPlace = arrayRemoveIndexInPlace;
      function arrayToString(array) {
        if (array.length === 0) {
          return "[]";
        }
        const strings = array.map((element) => tostring(element));
        const commaSeparatedStrings = strings.join(", ");
        return `[${commaSeparatedStrings}]`;
      }
      exports2.arrayToString = arrayToString;
      function combineArrays(...arrays) {
        const elements = [];
        for (const array of arrays) {
          for (const element of array) {
            elements.push(element);
          }
        }
        return elements;
      }
      exports2.combineArrays = combineArrays;
      function copyArray(oldArray, numElements) {
        if (numElements === void 0) {
          return [...oldArray];
        }
        const newArrayWithFirstNElements = [];
        for (let i = 0; i < numElements; i++) {
          newArrayWithFirstNElements.push(oldArray[i]);
        }
        return newArrayWithFirstNElements;
      }
      exports2.copyArray = copyArray;
      function emptyArray(array) {
        array.splice(0, array.length);
      }
      exports2.emptyArray = emptyArray;
      function filterMap(array, func) {
        const newArray = [];
        for (const element of array) {
          const newElement = func(element);
          if (newElement !== void 0) {
            newArray.push(newElement);
          }
        }
        return newArray;
      }
      exports2.filterMap = filterMap;
      function getArrayCombinations(array, includeEmptyArray, min, max) {
        if (min === void 0 || min <= 0) {
          min = 1;
        }
        if (max === void 0 || max <= 0) {
          max = array.length;
        }
        const all = [];
        for (let i = min; i < array.length; i++) {
          addCombinations(i, array, [], all);
        }
        if (array.length === max) {
          all.push(array);
        }
        if (includeEmptyArray) {
          all.unshift([]);
        }
        return all;
      }
      exports2.getArrayCombinations = getArrayCombinations;
      function addCombinations(n, src, got, all) {
        if (n === 0) {
          if (got.length > 0) {
            all[all.length] = got;
          }
          return;
        }
        for (const [i, element] of src.entries()) {
          addCombinations(n - 1, src.slice(i + 1), [...got, element], all);
        }
      }
      function getArrayDuplicateElements(array) {
        const duplicateElements = /* @__PURE__ */ new Set();
        const set = /* @__PURE__ */ new Set();
        for (const element of array) {
          if (set.has(element)) {
            duplicateElements.add(element);
          }
          set.add(element);
        }
        const values = [...duplicateElements];
        return values.sort(sort_1.sortNormal);
      }
      exports2.getArrayDuplicateElements = getArrayDuplicateElements;
      function getArrayIndexes(array) {
        return (0, utils_1.eRange)(array.length);
      }
      exports2.getArrayIndexes = getArrayIndexes;
      function getHighestArrayElement(array) {
        if (array.length === 0) {
          return void 0;
        }
        let highestValue;
        for (const element of array) {
          if (highestValue === void 0 || element > highestValue) {
            highestValue = element;
          }
        }
        return highestValue;
      }
      exports2.getHighestArrayElement = getHighestArrayElement;
      function getLowestArrayElement(array) {
        if (array.length === 0) {
          return void 0;
        }
        let lowestValue;
        for (const element of array) {
          if (lowestValue === void 0 || element < lowestValue) {
            lowestValue = element;
          }
        }
        return lowestValue;
      }
      exports2.getLowestArrayElement = getLowestArrayElement;
      function getRandomArrayElement(array, seedOrRNG, exceptions = []) {
        if (array.length === 0) {
          error("Failed to get a random array element since the provided array is empty.");
        }
        const arrayToUse = exceptions.length > 0 ? arrayRemove(array, ...exceptions) : array;
        const randomIndex = getRandomArrayIndex(arrayToUse, seedOrRNG);
        const randomElement = arrayToUse[randomIndex];
        (0, utils_1.assertDefined)(randomElement, `Failed to get a random array element since the random index of ${randomIndex} was not valid.`);
        return randomElement;
      }
      exports2.getRandomArrayElement = getRandomArrayElement;
      function getRandomArrayElementAndRemove(array, seedOrRNG, exceptions = []) {
        const randomArrayElement = getRandomArrayElement(array, seedOrRNG, exceptions);
        arrayRemoveInPlace(array, randomArrayElement);
        return randomArrayElement;
      }
      exports2.getRandomArrayElementAndRemove = getRandomArrayElementAndRemove;
      function getRandomArrayIndex(array, seedOrRNG, exceptions = []) {
        if (array.length === 0) {
          error("Failed to get a random array index since the provided array is empty.");
        }
        return (0, random_1.getRandomInt)(0, array.length - 1, seedOrRNG, exceptions);
      }
      exports2.getRandomArrayIndex = getRandomArrayIndex;
      function includes(array, searchElement) {
        const widenedArray = array;
        return widenedArray.includes(searchElement);
      }
      exports2.includes = includes;
      function isArray(object, ensureContiguousValues = true) {
        if (!(0, types_1.isTable)(object)) {
          return false;
        }
        const metatable = getmetatable(object);
        if (metatable !== void 0) {
          return false;
        }
        const keys = Object.keys(object);
        if (keys.length === 0) {
          return true;
        }
        const hasAllNumberKeys = keys.every((key) => (0, types_1.isNumber)(key));
        if (!hasAllNumberKeys) {
          return false;
        }
        if (ensureContiguousValues) {
          for (let i = 1; i <= keys.length; i++) {
            const element = object.get(i);
            if (element === void 0) {
              return false;
            }
          }
        }
        return true;
      }
      exports2.isArray = isArray;
      function isArrayContiguous(array) {
        let lastValue;
        for (const element of array) {
          if (lastValue === void 0) {
            lastValue = element - 1;
          }
          if (element !== lastValue - 1) {
            return false;
          }
        }
        return true;
      }
      exports2.isArrayContiguous = isArrayContiguous;
      function isArrayElementsUnique(array) {
        const set = new Set(array);
        return set.size === array.length;
      }
      exports2.isArrayElementsUnique = isArrayElementsUnique;
      function isArrayInArray(arrayToMatch, parentArray) {
        return parentArray.some((element) => arrayEquals(element, arrayToMatch));
      }
      exports2.isArrayInArray = isArrayInArray;
      function setAllArrayElements(array, value) {
        for (let i = 0; i < array.length; i++) {
          array[i] = value;
        }
      }
      exports2.setAllArrayElements = setAllArrayElements;
      function shuffleArray(originalArray, seedOrRNG) {
        const array = copyArray(originalArray);
        shuffleArrayInPlace(array, seedOrRNG);
        return array;
      }
      exports2.shuffleArray = shuffleArray;
      function shuffleArrayInPlace(array, seedOrRNG) {
        let currentIndex = array.length;
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        while (currentIndex > 0) {
          currentIndex--;
          const randomIndex = getRandomArrayIndex(array, rng);
          swapArrayElements(array, currentIndex, randomIndex);
        }
      }
      exports2.shuffleArrayInPlace = shuffleArrayInPlace;
      function sumArray(array) {
        return array.reduce((accumulator, element) => accumulator + element, 0);
      }
      exports2.sumArray = sumArray;
      function swapArrayElements(array, i, j) {
        const value1 = array[i];
        const value2 = array[j];
        array[i] = value2;
        array[j] = value1;
      }
      exports2.swapArrayElements = swapArrayElements;
    }
  });

  // node_modules/isaacscript-common/dist/functions/tstlClass.js
  var require_tstlClass = __commonJS({
    "node_modules/isaacscript-common/dist/functions/tstlClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.newTSTLClass = exports2.isTSTLSet = exports2.isTSTLMap = exports2.isTSTLClass = exports2.isDefaultMap = exports2.getTSTLClassName = exports2.getTSTLClassConstructor = void 0;
      var types_1 = require_types();
      var utils_1 = require_utils();
      function getTSTLClassConstructor(object) {
        if (!(0, types_1.isTable)(object)) {
          return void 0;
        }
        const metatable = getmetatable(object);
        if (metatable === void 0) {
          return void 0;
        }
        return metatable.constructor;
      }
      exports2.getTSTLClassConstructor = getTSTLClassConstructor;
      function getTSTLClassName(object) {
        const constructor = getTSTLClassConstructor(object);
        if (constructor === void 0) {
          return void 0;
        }
        return constructor.name;
      }
      exports2.getTSTLClassName = getTSTLClassName;
      function isDefaultMap(object) {
        const className = getTSTLClassName(object);
        return className === "DefaultMap";
      }
      exports2.isDefaultMap = isDefaultMap;
      function isTSTLClass(object) {
        const tstlClassName = getTSTLClassName(object);
        return tstlClassName !== void 0;
      }
      exports2.isTSTLClass = isTSTLClass;
      function isTSTLMap(object) {
        const className = getTSTLClassName(object);
        return className === "Map";
      }
      exports2.isTSTLMap = isTSTLMap;
      function isTSTLSet(object) {
        const className = getTSTLClassName(object);
        return className === "Set";
      }
      exports2.isTSTLSet = isTSTLSet;
      function newTSTLClass(oldClass) {
        const constructor = getTSTLClassConstructor(oldClass);
        (0, utils_1.assertDefined)(constructor, "Failed to instantiate a new TypeScriptToLua class since the provided old class does not have a metatable/constructor.");
        const newClass = new LuaMap();
        const newClassMetatable = setmetatable(newClass, constructor.prototype);
        newClassMetatable.____constructor();
        return newClass;
      }
      exports2.newTSTLClass = newTSTLClass;
    }
  });

  // node_modules/isaacscript-common/dist/classes/ModFeature.js
  var require_ModFeature = __commonJS({
    "node_modules/isaacscript-common/dist/classes/ModFeature.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModFeature = exports2.MOD_FEATURE_CUSTOM_CALLBACKS_KEY = exports2.MOD_FEATURE_CALLBACKS_KEY = void 0;
      var array_1 = require_array();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      exports2.MOD_FEATURE_CALLBACKS_KEY = "__callbacks";
      exports2.MOD_FEATURE_CUSTOM_CALLBACKS_KEY = "__customCallbacks";
      var WRAPPED_CALLBACK_METHODS_KEY = "__wrappedCallbackMethods";
      var WRAPPED_CUSTOM_CALLBACK_METHODS_KEY = "__wrappedCustomCallbacksMethods";
      var ModFeature = class {
        mod;
        /**
         * An optional method that allows for conditional callback execution. If specified, any class
         * method that is annotated with a `@Callback` or `@CallbackCustom` decorator will only be fired
         * if the executed conditional function returns true.
         *
         * This property is used to easily turn entire mod features on and off (rather than repeating
         * conditional logic and early returning at the beginning of every callback function).
         *
         * Since the specific information for the firing callback is passed as arguments into the
         * conditional method, you can also write logic that would only apply to a specific type of
         * callback.
         *
         * By default, this is set to null, which means that all callback methods will fire
         * unconditionally. Override this property in your class if you need to use it.
         *
         * The function has the following signature:
         *
         * ```ts
         * <T extends boolean>(
         *   vanilla: T, // Whether this is a vanilla or custom callback.
         *   modCallback: T extends true ? ModCallback : ModCallbackCustom,
         *   ...callbackArgs: unknown[] // This would be e.g. `pickup: EntityPickup` for the `POST_PICKUP_INIT` callback.
         * ) => boolean;
         * ```
         */
        shouldCallbackMethodsFire = null;
        /**
         * Whether the feature has registered its callbacks yet.
         *
         * This will almost always be equal to true unless you explicitly passed `false` to the second
         * argument of the constructor.
         */
        initialized = false;
        constructor(mod, init = true) {
          this.mod = mod;
          if (init) {
            this.init();
          }
        }
        /**
         * Runs the `Mod.AddCallback` and `ModUpgraded.AddCallbackCustom` methods for all of the decorated
         * callbacks. Also registers/unregisters the "v" variable on the save data manager.
         *
         * @param init Optional. Whether to initialize or uninitialize. Default is true.
         */
        init(init = true) {
          if (this.initialized === init) {
            return;
          }
          this.initialized = init;
          const constructor = (0, tstlClass_1.getTSTLClassConstructor)(this);
          (0, utils_1.assertDefined)(constructor, "Failed to get the TSTL class constructor for a mod feature.");
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(this);
          (0, utils_1.assertDefined)(tstlClassName, "Failed to get the TSTL class name for a mod feature.");
          initDecoratedCallbacks(this, constructor, tstlClassName, true, init);
          initDecoratedCallbacks(this, constructor, tstlClassName, false, init);
          initSaveDataManager(this, tstlClassName, init);
        }
        /**
         * Runs the `Mod.RemoveCallback` and `ModUpgraded.RemoveCallbackCustom` methods for all of the
         * decorated callbacks.
         *
         * This is just an alias for `ModFeature.init(false)`.
         */
        uninit() {
          this.init(false);
        }
      };
      exports2.ModFeature = ModFeature;
      function initDecoratedCallbacks(modFeature, constructor, tstlClassName, vanilla, init) {
        const modFeatureConstructor = constructor;
        const callbackTuplesKey = vanilla ? exports2.MOD_FEATURE_CALLBACKS_KEY : exports2.MOD_FEATURE_CUSTOM_CALLBACKS_KEY;
        const callbackTuples = modFeatureConstructor[callbackTuplesKey];
        if (callbackTuples === void 0) {
          return;
        }
        if (!(0, array_1.isArray)(callbackTuples)) {
          error(`Failed to initialize/uninitialize the decorated callbacks on a mod feature since the callback arguments on the key of "${callbackTuplesKey}" was not an array and was instead of type: ${type(callbackTuples)}`);
        }
        for (const callbackTuple of callbackTuples) {
          if (!(0, array_1.isArray)(callbackTuple)) {
            error(`Failed to initialize/uninitialize the decorated callbacks on a mod feature since one of the callback arguments on the key of "${callbackTuplesKey}" was not an array and was instead of type: ${type(callbackTuple)}`);
          }
          const modCallback = callbackTuple[0];
          if (!(0, types_1.isInteger)(modCallback)) {
            error(`Failed to get the callback number from the callback tuple for class: ${tstlClassName}`);
          }
          const priority = callbackTuple[1];
          if (!(0, types_1.isInteger)(priority)) {
            error(`Failed to get the callback priority from the callback tuple for class: ${tstlClassName}`);
          }
          const callback = callbackTuple[2];
          if (!(0, types_1.isFunction)(callback)) {
            error(`Failed to get the callback function from the callback tuple for class: ${tstlClassName}`);
          }
          const parameters = callbackTuple[3];
          if (!(0, array_1.isArray)(parameters, false)) {
            error(`Failed to get the callback parameters from the callback tuple for class: ${tstlClassName}`);
          }
          const mod = modFeature["mod"];
          if (init) {
            addCallback(
              modFeature,
              modFeatureConstructor,
              mod,
              modCallback,
              // eslint-disable-line isaacscript/strict-enums
              priority,
              callback,
              parameters,
              vanilla
            );
          } else {
            removeCallback(
              modFeatureConstructor,
              mod,
              modCallback,
              // eslint-disable-line isaacscript/strict-enums
              vanilla
            );
          }
        }
      }
      function addCallback(modFeature, modFeatureConstructor, mod, modCallback, priority, callback, parameters, vanilla) {
        const wrappedCallback = (...callbackArgs) => {
          const conditionalFunc = modFeature["shouldCallbackMethodsFire"];
          if (conditionalFunc !== null) {
            const shouldRun = conditionalFunc(vanilla, modCallback, ...callbackArgs);
            if (!shouldRun) {
              return void 0;
            }
          }
          const castedCallback = callback;
          return castedCallback(modFeature, ...callbackArgs);
        };
        if (vanilla) {
          const modCallbackVanilla = modCallback;
          let wrappedMethodsMap = modFeatureConstructor[WRAPPED_CALLBACK_METHODS_KEY];
          if (wrappedMethodsMap === void 0) {
            wrappedMethodsMap = /* @__PURE__ */ new Map();
            modFeatureConstructor[WRAPPED_CALLBACK_METHODS_KEY] = wrappedMethodsMap;
          }
          wrappedMethodsMap.set(modCallbackVanilla, wrappedCallback);
        } else {
          const modCallbackCustom = modCallback;
          let wrappedMethodsMap = modFeatureConstructor[WRAPPED_CUSTOM_CALLBACK_METHODS_KEY];
          if (wrappedMethodsMap === void 0) {
            wrappedMethodsMap = /* @__PURE__ */ new Map();
            modFeatureConstructor[WRAPPED_CUSTOM_CALLBACK_METHODS_KEY] = wrappedMethodsMap;
          }
          wrappedMethodsMap.set(modCallbackCustom, wrappedCallback);
        }
        if (vanilla) {
          mod.AddPriorityCallback(modCallback, priority, wrappedCallback, ...parameters);
        } else {
          mod.AddPriorityCallbackCustom(modCallback, priority, wrappedCallback, ...parameters);
        }
      }
      function removeCallback(modFeatureConstructor, mod, modCallback, vanilla) {
        if (vanilla) {
          const modCallbackVanilla = modCallback;
          const wrappedMethodsMap = modFeatureConstructor[WRAPPED_CALLBACK_METHODS_KEY];
          if (wrappedMethodsMap === void 0) {
            return;
          }
          const wrappedCallback = wrappedMethodsMap.get(modCallbackVanilla);
          mod.RemoveCallback(modCallback, wrappedCallback);
        } else {
          const modCallbackCustom = modCallback;
          const wrappedMethodsMap = modFeatureConstructor[WRAPPED_CUSTOM_CALLBACK_METHODS_KEY];
          if (wrappedMethodsMap === void 0) {
            return;
          }
          const wrappedCallback = wrappedMethodsMap.get(modCallbackCustom);
          mod.RemoveCallbackCustom(modCallback, wrappedCallback);
        }
      }
      function initSaveDataManager(modFeature, tstlClassName, init) {
        const { v } = modFeature;
        if (v === void 0) {
          return;
        }
        if (!(0, types_1.isTable)(v)) {
          error('Failed to initialize a mod feature class due to having a "v" property that is not an object. (The "v" property is supposed to be an object that holds the variables for the class, managed by the save data manager.)');
        }
        const mod = modFeature["mod"];
        const saveDataManagerMethodName = init ? "saveDataManager" : "saveDataManagerRemove";
        const saveDataManagerMethod = mod[saveDataManagerMethodName];
        (0, utils_1.assertDefined)(saveDataManagerMethod, 'Failed to initialize a mod feature class due to having a "v" object and not having the save data manager initialized. You must pass "ISCFeature.SAVE_DATA_MANAGER" to the "upgradeMod" function.');
        if (typeof saveDataManagerMethod !== "function") {
          error(`The "${saveDataManagerMethodName}" property of the "ModUpgraded" object was not a function.`);
        }
        if (init) {
          saveDataManagerMethod(tstlClassName, v);
        } else {
          saveDataManagerMethod(tstlClassName);
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/enums/HealthType.js
  var require_HealthType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/HealthType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.HealthType = void 0;
      var HealthType;
      (function(HealthType2) {
        HealthType2[HealthType2["RED"] = 0] = "RED";
        HealthType2[HealthType2["SOUL"] = 1] = "SOUL";
        HealthType2[HealthType2["ETERNAL"] = 2] = "ETERNAL";
        HealthType2[HealthType2["BLACK"] = 3] = "BLACK";
        HealthType2[HealthType2["GOLDEN"] = 4] = "GOLDEN";
        HealthType2[HealthType2["BONE"] = 5] = "BONE";
        HealthType2[HealthType2["ROTTEN"] = 6] = "ROTTEN";
        HealthType2[HealthType2["BROKEN"] = 7] = "BROKEN";
        HealthType2[HealthType2["MAX_HEARTS"] = 8] = "MAX_HEARTS";
      })(HealthType || (exports2.HealthType = HealthType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/enums/ModCallbackCustom.js
  var require_ModCallbackCustom = __commonJS({
    "node_modules/isaacscript-common/dist/enums/ModCallbackCustom.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModCallbackCustom = void 0;
      var ModCallbackCustom;
      (function(ModCallbackCustom2) {
        ModCallbackCustom2[ModCallbackCustom2["ENTITY_TAKE_DMG_FILTER"] = 0] = "ENTITY_TAKE_DMG_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["ENTITY_TAKE_DMG_PLAYER"] = 1] = "ENTITY_TAKE_DMG_PLAYER";
        ModCallbackCustom2[ModCallbackCustom2["INPUT_ACTION_FILTER"] = 2] = "INPUT_ACTION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["INPUT_ACTION_PLAYER"] = 3] = "INPUT_ACTION_PLAYER";
        ModCallbackCustom2[ModCallbackCustom2["POST_AMBUSH_FINISHED"] = 4] = "POST_AMBUSH_FINISHED";
        ModCallbackCustom2[ModCallbackCustom2["POST_AMBUSH_STARTED"] = 5] = "POST_AMBUSH_STARTED";
        ModCallbackCustom2[ModCallbackCustom2["POST_BOMB_EXPLODED"] = 6] = "POST_BOMB_EXPLODED";
        ModCallbackCustom2[ModCallbackCustom2["POST_BOMB_INIT_FILTER"] = 7] = "POST_BOMB_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_BOMB_INIT_LATE"] = 8] = "POST_BOMB_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_BOMB_RENDER_FILTER"] = 9] = "POST_BOMB_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_BOMB_UPDATE_FILTER"] = 10] = "POST_BOMB_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_BONE_SWING"] = 11] = "POST_BONE_SWING";
        ModCallbackCustom2[ModCallbackCustom2["POST_COLLECTIBLE_EMPTY"] = 12] = "POST_COLLECTIBLE_EMPTY";
        ModCallbackCustom2[ModCallbackCustom2["POST_CURSED_TELEPORT"] = 13] = "POST_CURSED_TELEPORT";
        ModCallbackCustom2[ModCallbackCustom2["POST_CUSTOM_REVIVE"] = 14] = "POST_CUSTOM_REVIVE";
        ModCallbackCustom2[ModCallbackCustom2["POST_DICE_ROOM_ACTIVATED"] = 15] = "POST_DICE_ROOM_ACTIVATED";
        ModCallbackCustom2[ModCallbackCustom2["POST_DOOR_RENDER"] = 16] = "POST_DOOR_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_DOOR_UPDATE"] = 17] = "POST_DOOR_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_EFFECT_INIT_FILTER"] = 18] = "POST_EFFECT_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_EFFECT_INIT_LATE"] = 19] = "POST_EFFECT_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_EFFECT_RENDER_FILTER"] = 20] = "POST_EFFECT_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_EFFECT_STATE_CHANGED"] = 21] = "POST_EFFECT_STATE_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_EFFECT_UPDATE_FILTER"] = 22] = "POST_EFFECT_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_ENTITY_KILL_FILTER"] = 23] = "POST_ENTITY_KILL_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_ESAU_JR"] = 24] = "POST_ESAU_JR";
        ModCallbackCustom2[ModCallbackCustom2["POST_FAMILIAR_INIT_FILTER"] = 25] = "POST_FAMILIAR_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_FAMILIAR_INIT_LATE"] = 26] = "POST_FAMILIAR_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_FAMILIAR_RENDER_FILTER"] = 27] = "POST_FAMILIAR_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_FAMILIAR_STATE_CHANGED"] = 28] = "POST_FAMILIAR_STATE_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_FAMILIAR_UPDATE_FILTER"] = 29] = "POST_FAMILIAR_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_FIRST_ESAU_JR"] = 30] = "POST_FIRST_ESAU_JR";
        ModCallbackCustom2[ModCallbackCustom2["POST_FIRST_FLIP"] = 31] = "POST_FIRST_FLIP";
        ModCallbackCustom2[ModCallbackCustom2["POST_FLIP"] = 32] = "POST_FLIP";
        ModCallbackCustom2[ModCallbackCustom2["POST_GAME_END_FILTER"] = 33] = "POST_GAME_END_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_GAME_STARTED_REORDERED"] = 34] = "POST_GAME_STARTED_REORDERED";
        ModCallbackCustom2[ModCallbackCustom2["POST_GAME_STARTED_REORDERED_LAST"] = 35] = "POST_GAME_STARTED_REORDERED_LAST";
        ModCallbackCustom2[ModCallbackCustom2["POST_GREED_MODE_WAVE"] = 36] = "POST_GREED_MODE_WAVE";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_BROKEN"] = 37] = "POST_GRID_ENTITY_BROKEN";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_COLLISION"] = 38] = "POST_GRID_ENTITY_COLLISION";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_BROKEN"] = 39] = "POST_GRID_ENTITY_CUSTOM_BROKEN";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_COLLISION"] = 40] = "POST_GRID_ENTITY_CUSTOM_COLLISION";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_INIT"] = 41] = "POST_GRID_ENTITY_CUSTOM_INIT";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_REMOVE"] = 42] = "POST_GRID_ENTITY_CUSTOM_REMOVE";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_RENDER"] = 43] = "POST_GRID_ENTITY_CUSTOM_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_STATE_CHANGED"] = 44] = "POST_GRID_ENTITY_CUSTOM_STATE_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_CUSTOM_UPDATE"] = 45] = "POST_GRID_ENTITY_CUSTOM_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_INIT"] = 46] = "POST_GRID_ENTITY_INIT";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_REMOVE"] = 47] = "POST_GRID_ENTITY_REMOVE";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_RENDER"] = 48] = "POST_GRID_ENTITY_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_STATE_CHANGED"] = 49] = "POST_GRID_ENTITY_STATE_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_GRID_ENTITY_UPDATE"] = 50] = "POST_GRID_ENTITY_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_HOLY_MANTLE_REMOVED"] = 51] = "POST_HOLY_MANTLE_REMOVED";
        ModCallbackCustom2[ModCallbackCustom2["POST_ITEM_DISCHARGE"] = 52] = "POST_ITEM_DISCHARGE";
        ModCallbackCustom2[ModCallbackCustom2["POST_ITEM_PICKUP"] = 53] = "POST_ITEM_PICKUP";
        ModCallbackCustom2[ModCallbackCustom2["POST_KEYBOARD_CHANGED"] = 54] = "POST_KEYBOARD_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_KNIFE_INIT_FILTER"] = 55] = "POST_KNIFE_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_KNIFE_INIT_LATE"] = 56] = "POST_KNIFE_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_KNIFE_RENDER_FILTER"] = 57] = "POST_KNIFE_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_KNIFE_UPDATE_FILTER"] = 58] = "POST_KNIFE_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_LASER_INIT_FILTER"] = 59] = "POST_LASER_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_LASER_INIT_LATE"] = 60] = "POST_LASER_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_LASER_RENDER_FILTER"] = 61] = "POST_LASER_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_LASER_UPDATE_FILTER"] = 62] = "POST_LASER_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_NEW_LEVEL_REORDERED"] = 63] = "POST_NEW_LEVEL_REORDERED";
        ModCallbackCustom2[ModCallbackCustom2["POST_NEW_ROOM_EARLY"] = 64] = "POST_NEW_ROOM_EARLY";
        ModCallbackCustom2[ModCallbackCustom2["POST_NEW_ROOM_REORDERED"] = 65] = "POST_NEW_ROOM_REORDERED";
        ModCallbackCustom2[ModCallbackCustom2["POST_NPC_DEATH_FILTER"] = 66] = "POST_NPC_DEATH_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_NPC_INIT_FILTER"] = 67] = "POST_NPC_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_NPC_INIT_LATE"] = 68] = "POST_NPC_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_NPC_RENDER_FILTER"] = 69] = "POST_NPC_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_NPC_STATE_CHANGED"] = 70] = "POST_NPC_STATE_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_NPC_UPDATE_FILTER"] = 71] = "POST_NPC_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PEFFECT_UPDATE_REORDERED"] = 72] = "POST_PEFFECT_UPDATE_REORDERED";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_CHANGED"] = 73] = "POST_PICKUP_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_COLLECT"] = 74] = "POST_PICKUP_COLLECT";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_INIT_FILTER"] = 75] = "POST_PICKUP_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_INIT_FIRST"] = 76] = "POST_PICKUP_INIT_FIRST";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_INIT_LATE"] = 77] = "POST_PICKUP_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_RENDER_FILTER"] = 78] = "POST_PICKUP_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_SELECTION_FILTER"] = 79] = "POST_PICKUP_SELECTION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_STATE_CHANGED"] = 80] = "POST_PICKUP_STATE_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_PICKUP_UPDATE_FILTER"] = 81] = "POST_PICKUP_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PIT_RENDER"] = 82] = "POST_PIT_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PIT_UPDATE"] = 83] = "POST_PIT_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_CHANGE_HEALTH"] = 84] = "POST_PLAYER_CHANGE_HEALTH";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_CHANGE_STAT"] = 85] = "POST_PLAYER_CHANGE_STAT";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_CHANGE_TYPE"] = 86] = "POST_PLAYER_CHANGE_TYPE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_COLLECTIBLE_ADDED"] = 87] = "POST_PLAYER_COLLECTIBLE_ADDED";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_COLLECTIBLE_REMOVED"] = 88] = "POST_PLAYER_COLLECTIBLE_REMOVED";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_FATAL_DAMAGE"] = 89] = "POST_PLAYER_FATAL_DAMAGE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_INIT_FIRST"] = 90] = "POST_PLAYER_INIT_FIRST";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_INIT_LATE"] = 91] = "POST_PLAYER_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_RENDER_REORDERED"] = 92] = "POST_PLAYER_RENDER_REORDERED";
        ModCallbackCustom2[ModCallbackCustom2["POST_PLAYER_UPDATE_REORDERED"] = 93] = "POST_PLAYER_UPDATE_REORDERED";
        ModCallbackCustom2[ModCallbackCustom2["POST_POOP_RENDER"] = 94] = "POST_POOP_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_POOP_UPDATE"] = 95] = "POST_POOP_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PRESSURE_PLATE_RENDER"] = 96] = "POST_PRESSURE_PLATE_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PRESSURE_PLATE_UPDATE"] = 97] = "POST_PRESSURE_PLATE_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PROJECTILE_INIT_FILTER"] = 98] = "POST_PROJECTILE_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PROJECTILE_INIT_LATE"] = 99] = "POST_PROJECTILE_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_PROJECTILE_KILL"] = 100] = "POST_PROJECTILE_KILL";
        ModCallbackCustom2[ModCallbackCustom2["POST_PROJECTILE_RENDER_FILTER"] = 101] = "POST_PROJECTILE_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PROJECTILE_UPDATE_FILTER"] = 102] = "POST_PROJECTILE_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_PURCHASE"] = 103] = "POST_PURCHASE";
        ModCallbackCustom2[ModCallbackCustom2["POST_ROCK_RENDER"] = 104] = "POST_ROCK_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_ROCK_UPDATE"] = 105] = "POST_ROCK_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_ROOM_CLEAR_CHANGED"] = 106] = "POST_ROOM_CLEAR_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_SACRIFICE"] = 107] = "POST_SACRIFICE";
        ModCallbackCustom2[ModCallbackCustom2["POST_SLOT_ANIMATION_CHANGED"] = 108] = "POST_SLOT_ANIMATION_CHANGED";
        ModCallbackCustom2[ModCallbackCustom2["POST_SLOT_COLLISION"] = 109] = "POST_SLOT_COLLISION";
        ModCallbackCustom2[ModCallbackCustom2["POST_SLOT_DESTROYED"] = 110] = "POST_SLOT_DESTROYED";
        ModCallbackCustom2[ModCallbackCustom2["POST_SLOT_INIT"] = 111] = "POST_SLOT_INIT";
        ModCallbackCustom2[ModCallbackCustom2["POST_SLOT_RENDER"] = 112] = "POST_SLOT_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_SLOT_UPDATE"] = 113] = "POST_SLOT_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_SPIKES_RENDER"] = 114] = "POST_SPIKES_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_SPIKES_UPDATE"] = 115] = "POST_SPIKES_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_TEAR_INIT_FILTER"] = 116] = "POST_TEAR_INIT_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_TEAR_INIT_LATE"] = 117] = "POST_TEAR_INIT_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_TEAR_INIT_VERY_LATE"] = 118] = "POST_TEAR_INIT_VERY_LATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_TEAR_KILL"] = 119] = "POST_TEAR_KILL";
        ModCallbackCustom2[ModCallbackCustom2["POST_TEAR_RENDER_FILTER"] = 120] = "POST_TEAR_RENDER_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_TEAR_UPDATE_FILTER"] = 121] = "POST_TEAR_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["POST_TNT_RENDER"] = 122] = "POST_TNT_RENDER";
        ModCallbackCustom2[ModCallbackCustom2["POST_TNT_UPDATE"] = 123] = "POST_TNT_UPDATE";
        ModCallbackCustom2[ModCallbackCustom2["POST_TRANSFORMATION"] = 124] = "POST_TRANSFORMATION";
        ModCallbackCustom2[ModCallbackCustom2["POST_TRINKET_BREAK"] = 125] = "POST_TRINKET_BREAK";
        ModCallbackCustom2[ModCallbackCustom2["POST_USE_PILL_FILTER"] = 126] = "POST_USE_PILL_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_BERSERK_DEATH"] = 127] = "PRE_BERSERK_DEATH";
        ModCallbackCustom2[ModCallbackCustom2["PRE_BOMB_COLLISION_FILTER"] = 128] = "PRE_BOMB_COLLISION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_CUSTOM_REVIVE"] = 129] = "PRE_CUSTOM_REVIVE";
        ModCallbackCustom2[ModCallbackCustom2["PRE_ENTITY_SPAWN_FILTER"] = 130] = "PRE_ENTITY_SPAWN_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_FAMILIAR_COLLISION_FILTER"] = 131] = "PRE_FAMILIAR_COLLISION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_GET_PEDESTAL"] = 132] = "PRE_GET_PEDESTAL";
        ModCallbackCustom2[ModCallbackCustom2["PRE_ITEM_PICKUP"] = 133] = "PRE_ITEM_PICKUP";
        ModCallbackCustom2[ModCallbackCustom2["PRE_KNIFE_COLLISION_FILTER"] = 134] = "PRE_KNIFE_COLLISION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_NEW_LEVEL"] = 135] = "PRE_NEW_LEVEL";
        ModCallbackCustom2[ModCallbackCustom2["PRE_NPC_COLLISION_FILTER"] = 136] = "PRE_NPC_COLLISION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_NPC_UPDATE_FILTER"] = 137] = "PRE_NPC_UPDATE_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_PROJECTILE_COLLISION_FILTER"] = 138] = "PRE_PROJECTILE_COLLISION_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_ROOM_ENTITY_SPAWN_FILTER"] = 139] = "PRE_ROOM_ENTITY_SPAWN_FILTER";
        ModCallbackCustom2[ModCallbackCustom2["PRE_TEAR_COLLISION_FILTER"] = 140] = "PRE_TEAR_COLLISION_FILTER";
      })(ModCallbackCustom || (exports2.ModCallbackCustom = ModCallbackCustom = {}));
    }
  });

  // node_modules/isaacscript-common/dist/enums/PlayerStat.js
  var require_PlayerStat = __commonJS({
    "node_modules/isaacscript-common/dist/enums/PlayerStat.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerStat = void 0;
      var PlayerStat;
      (function(PlayerStat2) {
        PlayerStat2[PlayerStat2["DAMAGE"] = 0] = "DAMAGE";
        PlayerStat2[PlayerStat2["FIRE_DELAY"] = 1] = "FIRE_DELAY";
        PlayerStat2[PlayerStat2["SHOT_SPEED"] = 2] = "SHOT_SPEED";
        PlayerStat2[PlayerStat2["TEAR_HEIGHT"] = 3] = "TEAR_HEIGHT";
        PlayerStat2[PlayerStat2["TEAR_RANGE"] = 4] = "TEAR_RANGE";
        PlayerStat2[PlayerStat2["TEAR_FALLING_ACCELERATION"] = 5] = "TEAR_FALLING_ACCELERATION";
        PlayerStat2[PlayerStat2["TEAR_FALLING_SPEED"] = 6] = "TEAR_FALLING_SPEED";
        PlayerStat2[PlayerStat2["MOVE_SPEED"] = 7] = "MOVE_SPEED";
        PlayerStat2[PlayerStat2["TEAR_FLAG"] = 8] = "TEAR_FLAG";
        PlayerStat2[PlayerStat2["TEAR_COLOR"] = 9] = "TEAR_COLOR";
        PlayerStat2[PlayerStat2["FLYING"] = 10] = "FLYING";
        PlayerStat2[PlayerStat2["LUCK"] = 11] = "LUCK";
        PlayerStat2[PlayerStat2["SIZE"] = 12] = "SIZE";
      })(PlayerStat || (exports2.PlayerStat = PlayerStat = {}));
    }
  });

  // node_modules/isaacscript-common/dist/functions/enums.js
  var require_enums = __commonJS({
    "node_modules/isaacscript-common/dist/functions/enums.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.validateInterfaceMatchesEnum = exports2.validateEnumContiguous = exports2.validateCustomEnum = exports2.isEnumValue = exports2.getRandomEnumValue = exports2.getLowestEnumValue = exports2.getHighestEnumValue = exports2.getEnumValues = exports2.getEnumNames = exports2.getEnumLength = exports2.getEnumKeys = exports2.getEnumEntries = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      var array_1 = require_array();
      var sort_1 = require_sort();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function getEnumEntries(transpiledEnum) {
        const entries = Object.entries(transpiledEnum);
        const numberEntries = entries.filter(([_key, value]) => typeof value === "number");
        const entriesToReturn = numberEntries.length > 0 ? numberEntries : entries;
        entriesToReturn.sort(([_key1, value1], [_key2, value2]) => value1 < value2 ? -1 : value1 > value2 ? 1 : 0);
        return entriesToReturn;
      }
      exports2.getEnumEntries = getEnumEntries;
      function getEnumKeys(transpiledEnum) {
        const enumEntries = getEnumEntries(transpiledEnum);
        return enumEntries.map(([key, _value]) => key);
      }
      exports2.getEnumKeys = getEnumKeys;
      function getEnumLength(transpiledEnum) {
        const enumEntries = getEnumEntries(transpiledEnum);
        return enumEntries.length;
      }
      exports2.getEnumLength = getEnumLength;
      function getEnumNames(transpiledEnum) {
        const enumNames = [];
        for (const [key, _value] of pairs(transpiledEnum)) {
          if ((0, types_1.isString)(key)) {
            enumNames.push(key);
          }
        }
        enumNames.sort();
        return enumNames;
      }
      exports2.getEnumNames = getEnumNames;
      function getEnumValues2(transpiledEnum) {
        const enumEntries = getEnumEntries(transpiledEnum);
        return enumEntries.map(([_key, value]) => value);
      }
      exports2.getEnumValues = getEnumValues2;
      function getHighestEnumValue(transpiledEnum) {
        const enumValues = getEnumValues2(transpiledEnum);
        const sortedValues = enumValues.toSorted(sort_1.sortNormal);
        const lastElement = sortedValues.at(-1);
        (0, utils_1.assertDefined)(lastElement, "Failed to get the highest value from an enum since the enum was empty.");
        return lastElement;
      }
      exports2.getHighestEnumValue = getHighestEnumValue;
      function getLowestEnumValue(transpiledEnum) {
        const enumValues = getEnumValues2(transpiledEnum);
        const sortedValues = enumValues.toSorted(sort_1.sortNormal);
        const firstElement = sortedValues[0];
        (0, utils_1.assertDefined)(firstElement, "Failed to get the lowest value from an enum since the enum was empty.");
        return firstElement;
      }
      exports2.getLowestEnumValue = getLowestEnumValue;
      function getRandomEnumValue(transpiledEnum, seedOrRNG, exceptions = []) {
        const enumValues = getEnumValues2(transpiledEnum);
        return (0, array_1.getRandomArrayElement)(enumValues, seedOrRNG, exceptions);
      }
      exports2.getRandomEnumValue = getRandomEnumValue;
      function isEnumValue(value, transpiledEnum) {
        const enumValues = getEnumValues2(transpiledEnum);
        return enumValues.includes(value);
      }
      exports2.isEnumValue = isEnumValue;
      function validateCustomEnum(transpiledEnumName, transpiledEnum) {
        for (const [key, value] of getEnumEntries(transpiledEnum)) {
          if (value === -1) {
            error(`Failed to find the custom enum value: ${transpiledEnumName}.${key}`);
          }
        }
      }
      exports2.validateCustomEnum = validateCustomEnum;
      function validateEnumContiguous(transpiledEnumName, transpiledEnum) {
        const values = getEnumValues2(transpiledEnum);
        const lastValue = values.at(-1);
        (0, utils_1.assertDefined)(lastValue, "Failed to validate that an enum was contiguous, since the last value was undefined.");
        if (!(0, types_1.isNumber)(lastValue)) {
          error("Failed to validate that an enum was contiguous, since the last value was not a number.");
        }
        const valuesSet = new ReadonlySet_1.ReadonlySet(values);
        for (const value of (0, utils_1.iRange)(lastValue)) {
          if (!valuesSet.has(value)) {
            error(`Failed to find a custom enum value of ${value} for: ${transpiledEnumName}`);
          }
        }
      }
      exports2.validateEnumContiguous = validateEnumContiguous;
      function validateInterfaceMatchesEnum() {
      }
      exports2.validateInterfaceMatchesEnum = validateInterfaceMatchesEnum;
    }
  });

  // node_modules/isaacscript-common/dist/cachedEnumValues.js
  var require_cachedEnumValues = __commonJS({
    "node_modules/isaacscript-common/dist/cachedEnumValues.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TRINKET_SLOT_VALUES = exports2.PLAYER_STAT_VALUES = exports2.SOUND_EFFECT_VALUES = exports2.SERIALIZATION_BRAND_VALUES = exports2.SEED_EFFECTS = exports2.ROOM_SHAPE_VALUES = exports2.POCKET_ITEM_SLOT_VALUES = exports2.PLAYER_FORM_VALUES = exports2.PILL_COLOR_VALUES = exports2.HEALTH_TYPE_VALUES = exports2.KEYBOARD_VALUES = exports2.ITEM_POOL_TYPE_VALUES = exports2.ITEM_CONFIG_CARD_TYPE_VALUES = exports2.ITEM_CONFIG_TAG_VALUES = exports2.MOD_CALLBACK_CUSTOM_VALUES = exports2.GRID_ENTITY_XML_TYPE_VALUES = exports2.GRID_ENTITY_TYPE_VALUES = exports2.DOOR_SLOT_VALUES = exports2.DOOR_SLOT_FLAG_VALUES = exports2.CONTROLLER_INDEX_VALUES = exports2.CACHE_FLAG_VALUES = exports2.BOSS_ID_VALUES = exports2.ACTIVE_SLOT_VALUES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var HealthType_1 = require_HealthType();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var PlayerStat_1 = require_PlayerStat();
      var SerializationBrand_1 = require_SerializationBrand();
      var enums_1 = require_enums();
      exports2.ACTIVE_SLOT_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.ActiveSlot);
      exports2.BOSS_ID_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.BossID);
      exports2.CACHE_FLAG_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.CacheFlag);
      exports2.CONTROLLER_INDEX_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.ControllerIndex);
      exports2.DOOR_SLOT_FLAG_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.DoorSlotFlag);
      exports2.DOOR_SLOT_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.DoorSlot);
      exports2.GRID_ENTITY_TYPE_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.GridEntityType);
      exports2.GRID_ENTITY_XML_TYPE_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.GridEntityXMLType);
      exports2.MOD_CALLBACK_CUSTOM_VALUES = (0, enums_1.getEnumValues)(ModCallbackCustom_1.ModCallbackCustom);
      exports2.ITEM_CONFIG_TAG_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.ItemConfigTag);
      exports2.ITEM_CONFIG_CARD_TYPE_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.ItemConfigCardType);
      exports2.ITEM_POOL_TYPE_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.ItemPoolType);
      exports2.KEYBOARD_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.Keyboard);
      exports2.HEALTH_TYPE_VALUES = (0, enums_1.getEnumValues)(HealthType_1.HealthType);
      exports2.PILL_COLOR_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.PillColor);
      exports2.PLAYER_FORM_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.PlayerForm);
      exports2.POCKET_ITEM_SLOT_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.PocketItemSlot);
      exports2.ROOM_SHAPE_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.RoomShape);
      exports2.SEED_EFFECTS = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.SeedEffect);
      exports2.SERIALIZATION_BRAND_VALUES = (0, enums_1.getEnumValues)(SerializationBrand_1.SerializationBrand);
      exports2.SOUND_EFFECT_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.SoundEffect);
      exports2.PLAYER_STAT_VALUES = (0, enums_1.getEnumValues)(PlayerStat_1.PlayerStat);
      exports2.TRINKET_SLOT_VALUES = (0, enums_1.getEnumValues)(isaac_typescript_definitions_1.TrinketSlot);
    }
  });

  // node_modules/isaacscript-common/dist/shouldFire.js
  var require_shouldFire = __commonJS({
    "node_modules/isaacscript-common/dist/shouldFire.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.shouldFireTrinketType = exports2.shouldFireTear = exports2.shouldFireTNT = exports2.shouldFireSpikes = exports2.shouldFireSlot = exports2.shouldFireRoom = exports2.shouldFireRock = exports2.shouldFireProjectile = exports2.shouldFirePressurePlate = exports2.shouldFirePoop = exports2.shouldFirePlayer = exports2.shouldFirePit = exports2.shouldFirePickup = exports2.shouldFireNPC = exports2.shouldFireLevel = exports2.shouldFireLaser = exports2.shouldFireKnife = exports2.shouldFireItemPickup = exports2.shouldFireGridEntityCustom = exports2.shouldFireGridEntity = exports2.shouldFireFamiliar = exports2.shouldFireEntity = exports2.shouldFireEffect = exports2.shouldFireDoor = exports2.shouldFireCollectibleType = exports2.shouldFireBoolean = exports2.shouldFireBomb = exports2.shouldFireAmbush = void 0;
      function shouldFireAmbush(fireArgs, optionalArgs) {
        const [ambushType] = fireArgs;
        const [callbackAmbushType] = optionalArgs;
        return callbackAmbushType === void 0 || callbackAmbushType === ambushType;
      }
      exports2.shouldFireAmbush = shouldFireAmbush;
      function shouldFireBomb(fireArgs, optionalArgs) {
        const [bomb] = fireArgs;
        const [callbackBombVariant, callbackSubType] = optionalArgs;
        return (callbackBombVariant === void 0 || callbackBombVariant === bomb.Variant) && (callbackSubType === void 0 || callbackSubType === bomb.SubType);
      }
      exports2.shouldFireBomb = shouldFireBomb;
      function shouldFireBoolean(fireArgs, optionalArgs) {
        const [fireArg] = fireArgs;
        const [optionalArg] = optionalArgs;
        return optionalArg === void 0 || optionalArg === fireArg;
      }
      exports2.shouldFireBoolean = shouldFireBoolean;
      function shouldFireCollectibleType(fireArgs, optionalArgs) {
        const [_player, collectibleType] = fireArgs;
        const [callbackCollectibleType] = optionalArgs;
        return callbackCollectibleType === void 0 || callbackCollectibleType === collectibleType;
      }
      exports2.shouldFireCollectibleType = shouldFireCollectibleType;
      function shouldFireDoor(fireArgs, optionalArgs) {
        const [door] = fireArgs;
        const [callbackDoorVariant] = optionalArgs;
        const doorVariant = door.GetVariant();
        return callbackDoorVariant === void 0 || callbackDoorVariant === doorVariant;
      }
      exports2.shouldFireDoor = shouldFireDoor;
      function shouldFireEffect(fireArgs, optionalArgs) {
        const [effect] = fireArgs;
        const [callbackEffectVariant, callbackSubType] = optionalArgs;
        return (callbackEffectVariant === void 0 || callbackEffectVariant === effect.Variant) && (callbackSubType === void 0 || callbackSubType === effect.SubType);
      }
      exports2.shouldFireEffect = shouldFireEffect;
      function shouldFireEntity(fireArgs, optionalArgs) {
        const [entity] = fireArgs;
        const [callbackEntityType, callbackVariant, callbackSubType] = optionalArgs;
        return (callbackEntityType === void 0 || callbackEntityType === entity.Type) && (callbackVariant === void 0 || callbackVariant === entity.Variant) && (callbackSubType === void 0 || callbackSubType === entity.SubType);
      }
      exports2.shouldFireEntity = shouldFireEntity;
      function shouldFireFamiliar(fireArgs, optionalArgs) {
        const [familiar] = fireArgs;
        const [callbackFamiliarVariant, callbackSubType] = optionalArgs;
        return (callbackFamiliarVariant === void 0 || callbackFamiliarVariant === familiar.Variant) && (callbackSubType === void 0 || callbackSubType === familiar.SubType);
      }
      exports2.shouldFireFamiliar = shouldFireFamiliar;
      function shouldFireGridEntity(fireArgs, optionalArgs) {
        const [gridEntity] = fireArgs;
        const [callbackGridEntityType, callbackVariant] = optionalArgs;
        const gridEntityType = gridEntity.GetType();
        const variant = gridEntity.GetVariant();
        return (callbackGridEntityType === void 0 || callbackGridEntityType === gridEntityType) && (callbackVariant === void 0 || callbackVariant === variant);
      }
      exports2.shouldFireGridEntity = shouldFireGridEntity;
      function shouldFireGridEntityCustom(fireArgs, optionalArgs) {
        const [_gridEntity, gridEntityTypeCustom] = fireArgs;
        const [callbackGridEntityTypeCustom] = optionalArgs;
        return callbackGridEntityTypeCustom === void 0 || callbackGridEntityTypeCustom === gridEntityTypeCustom;
      }
      exports2.shouldFireGridEntityCustom = shouldFireGridEntityCustom;
      function shouldFireItemPickup(fireArgs, optionalArgs) {
        const [_player, pickingUpItem] = fireArgs;
        const [callbackItemType, callbackSubtype] = optionalArgs;
        return (callbackItemType === void 0 || callbackItemType === pickingUpItem.itemType) && (callbackSubtype === void 0 || callbackSubtype === pickingUpItem.subType);
      }
      exports2.shouldFireItemPickup = shouldFireItemPickup;
      function shouldFireKnife(fireArgs, optionalArgs) {
        const [knife] = fireArgs;
        const [callbackKnifeVariant, callbackSubType] = optionalArgs;
        return (callbackKnifeVariant === void 0 || callbackKnifeVariant === knife.Variant) && (callbackSubType === void 0 || callbackSubType === knife.SubType);
      }
      exports2.shouldFireKnife = shouldFireKnife;
      function shouldFireLaser(fireArgs, optionalArgs) {
        const [laser] = fireArgs;
        const [callbackLaserVariant, callbackSubType] = optionalArgs;
        return (callbackLaserVariant === void 0 || callbackLaserVariant === laser.Variant) && (callbackSubType === void 0 || callbackSubType === laser.SubType);
      }
      exports2.shouldFireLaser = shouldFireLaser;
      function shouldFireLevel(fireArgs, optionalArgs) {
        const [stage, stageType] = fireArgs;
        const [callbackStage, callbackStageType] = optionalArgs;
        return (callbackStage === void 0 || callbackStage === stage) && (callbackStageType === void 0 || callbackStageType === stageType);
      }
      exports2.shouldFireLevel = shouldFireLevel;
      function shouldFireNPC(fireArgs, optionalArgs) {
        const [npc] = fireArgs;
        const [callbackEntityType, callbackVariant, callbackSubType] = optionalArgs;
        return (callbackEntityType === void 0 || callbackEntityType === npc.Type) && (callbackVariant === void 0 || callbackVariant === npc.Variant) && (callbackSubType === void 0 || callbackSubType === npc.SubType);
      }
      exports2.shouldFireNPC = shouldFireNPC;
      function shouldFirePickup(fireArgs, optionalArgs) {
        const [pickup] = fireArgs;
        const [callbackPickupVariant, callbackPickupSubType] = optionalArgs;
        return (callbackPickupVariant === void 0 || callbackPickupVariant === pickup.Variant) && (callbackPickupSubType === void 0 || callbackPickupSubType === pickup.SubType);
      }
      exports2.shouldFirePickup = shouldFirePickup;
      function shouldFirePit(fireArgs, optionalArgs) {
        const [pit] = fireArgs;
        const [callbackPitVariant] = optionalArgs;
        const pitVariant = pit.GetVariant();
        return callbackPitVariant === void 0 || callbackPitVariant === pitVariant;
      }
      exports2.shouldFirePit = shouldFirePit;
      function shouldFirePlayer(fireArgs, optionalArgs) {
        const [player] = fireArgs;
        const [callbackPlayerVariant, callbackCharacter] = optionalArgs;
        const character = player.GetPlayerType();
        return (callbackPlayerVariant === void 0 || callbackPlayerVariant === player.Variant) && (callbackCharacter === void 0 || callbackCharacter === character);
      }
      exports2.shouldFirePlayer = shouldFirePlayer;
      function shouldFirePoop(fireArgs, optionalArgs) {
        const [poop] = fireArgs;
        const [callbackPoopGridEntityVariant] = optionalArgs;
        const poopGridEntityVariant = poop.GetVariant();
        return callbackPoopGridEntityVariant === void 0 || callbackPoopGridEntityVariant === poopGridEntityVariant;
      }
      exports2.shouldFirePoop = shouldFirePoop;
      function shouldFirePressurePlate(fireArgs, optionalArgs) {
        const [pressurePlate] = fireArgs;
        const [callbackPressurePlateVariant] = optionalArgs;
        const pressurePlateVariant = pressurePlate.GetVariant();
        return callbackPressurePlateVariant === void 0 || callbackPressurePlateVariant === pressurePlateVariant;
      }
      exports2.shouldFirePressurePlate = shouldFirePressurePlate;
      function shouldFireProjectile(fireArgs, optionalArgs) {
        const [projectile] = fireArgs;
        const [callbackProjectileVariant, callbackSubType] = optionalArgs;
        return (callbackProjectileVariant === void 0 || callbackProjectileVariant === projectile.Variant) && (callbackSubType === void 0 || callbackSubType === projectile.SubType);
      }
      exports2.shouldFireProjectile = shouldFireProjectile;
      function shouldFireRock(fireArgs, optionalArgs) {
        const [rock] = fireArgs;
        const [callbackGridEntity, callbackVariant] = optionalArgs;
        const gridEntityType = rock.GetType();
        const variant = rock.GetVariant();
        return (callbackGridEntity === void 0 || callbackGridEntity === gridEntityType) && (callbackVariant === void 0 || callbackVariant === variant);
      }
      exports2.shouldFireRock = shouldFireRock;
      function shouldFireRoom(fireArgs, optionalArgs) {
        const [roomType] = fireArgs;
        const [callbackRoomType] = optionalArgs;
        return callbackRoomType === void 0 || callbackRoomType === roomType;
      }
      exports2.shouldFireRoom = shouldFireRoom;
      function shouldFireSlot(fireArgs, optionalArgs) {
        const [slot] = fireArgs;
        const [callbackSlotVariant, callbackSubType] = optionalArgs;
        return (callbackSlotVariant === void 0 || callbackSlotVariant === slot.Variant) && (callbackSubType === void 0 || callbackSubType === slot.SubType);
      }
      exports2.shouldFireSlot = shouldFireSlot;
      function shouldFireSpikes(fireArgs, optionalArgs) {
        const [spikes] = fireArgs;
        const [callbackVariant] = optionalArgs;
        const variant = spikes.GetVariant();
        return callbackVariant === void 0 || callbackVariant === variant;
      }
      exports2.shouldFireSpikes = shouldFireSpikes;
      function shouldFireTNT(fireArgs, optionalArgs) {
        const [tnt] = fireArgs;
        const [callbackVariant] = optionalArgs;
        const variant = tnt.GetVariant();
        return callbackVariant === void 0 || callbackVariant === variant;
      }
      exports2.shouldFireTNT = shouldFireTNT;
      function shouldFireTear(fireArgs, optionalArgs) {
        const [tear] = fireArgs;
        const [callbackTearVariant, callbackSubType] = optionalArgs;
        return (callbackTearVariant === void 0 || callbackTearVariant === tear.Variant) && (callbackSubType === void 0 || callbackSubType === tear.SubType);
      }
      exports2.shouldFireTear = shouldFireTear;
      function shouldFireTrinketType(fireArgs, optionalArgs) {
        const [_player, trinketType] = fireArgs;
        const [callbackTrinketType] = optionalArgs;
        return callbackTrinketType === void 0 || callbackTrinketType === trinketType;
      }
      exports2.shouldFireTrinketType = shouldFireTrinketType;
    }
  });

  // node_modules/isaacscript-common/dist/classes/private/Feature.js
  var require_Feature = __commonJS({
    "node_modules/isaacscript-common/dist/classes/private/Feature.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Feature = void 0;
      var Feature = class _Feature {
        /**
         * All features should only be instantiated once and are passed around to other features using
         * dependency injection. We provide a run-time check in order to prevent the bug of any feature
         * accidentally being instantiated twice.
         */
        static constructedClassNames = /* @__PURE__ */ new Set();
        /** @internal */
        initialized = false;
        /** @internal */
        numConsumers = 0;
        /** @internal */
        v;
        /** @internal */
        vConditionalFunc;
        /** @internal */
        featuresUsed;
        /** @internal */
        callbacksUsed;
        /** @internal */
        customCallbacksUsed;
        constructor() {
          if (_Feature.constructedClassNames.has(this.constructor.name)) {
            error(`Failed to instantiate feature class "${this.constructor.name}" because it has already been instantiated once.`);
          }
          _Feature.constructedClassNames.add(this.constructor.name);
        }
      };
      exports2.Feature = Feature;
    }
  });

  // node_modules/isaacscript-common/dist/classes/private/CustomCallback.js
  var require_CustomCallback = __commonJS({
    "node_modules/isaacscript-common/dist/classes/private/CustomCallback.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomCallback = void 0;
      var sort_1 = require_sort();
      var Feature_1 = require_Feature();
      var CustomCallback = class extends Feature_1.Feature {
        subscriptions = [];
        addSubscriber(priority, callbackFunc, ...optionalArgs) {
          const subscription = {
            priority,
            callbackFunc,
            optionalArgs
          };
          this.subscriptions.push(subscription);
          this.subscriptions = (0, sort_1.stableSort)(this.subscriptions, (0, sort_1.sortObjectArrayByKey)("priority"));
        }
        /**
         * If the submitted function does not match any of the existing subscriptions, this method will do
         * nothing.
         */
        removeSubscriber(callback) {
          const subscriptionIndexMatchingCallback = this.subscriptions.findIndex((subscription) => {
            const subscriptionCallback = subscription.callbackFunc;
            return callback === subscriptionCallback;
          });
          if (subscriptionIndexMatchingCallback !== -1) {
            this.subscriptions.splice(subscriptionIndexMatchingCallback, 1);
          }
        }
        fire = (...fireArgs) => {
          for (const subscription of this.subscriptions) {
            const { callbackFunc, optionalArgs } = subscription;
            if (this.shouldFire(fireArgs, optionalArgs)) {
              const value = callbackFunc(fireArgs[0], fireArgs[1], fireArgs[2], fireArgs[3], fireArgs[4], fireArgs[5], fireArgs[6]);
              if (value !== void 0) {
                return value;
              }
            }
          }
          return void 0;
        };
        /**
         * This method needs to be overwritten for any callback that has optional filtration arguments.
         * See "shouldFire.ts" for methods tailored to specific kinds of callbacks.
         */
        shouldFire = () => true;
      };
      exports2.CustomCallback = CustomCallback;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/EntityTakeDmgFilter.js
  var require_EntityTakeDmgFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/EntityTakeDmgFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityTakeDmgFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var EntityTakeDmgFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 11
            [isaac_typescript_definitions_1.ModCallback.ENTITY_TAKE_DMG, this.entityTakeDmg]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEntity;
        // ModCallback.ENTITY_TAKE_DMG (11)
        entityTakeDmg = (entity, amount, damageFlags, source, countdownFrames) => this.fire(entity, amount, damageFlags, source, countdownFrames);
      };
      exports2.EntityTakeDmgFilter = EntityTakeDmgFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/EntityTakeDmgPlayer.js
  var require_EntityTakeDmgPlayer = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/EntityTakeDmgPlayer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EntityTakeDmgPlayer = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var EntityTakeDmgPlayer = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 11
            [
              isaac_typescript_definitions_1.ModCallback.ENTITY_TAKE_DMG,
              this.entityTakeDmgPlayer,
              [isaac_typescript_definitions_1.EntityType.PLAYER]
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallback.ENTITY_TAKE_DMG (11)
        entityTakeDmgPlayer = (entity, amount, damageFlags, source, countdownFrames) => {
          const player = entity.ToPlayer();
          if (player === void 0) {
            return void 0;
          }
          return this.fire(player, amount, damageFlags, source, countdownFrames);
        };
      };
      exports2.EntityTakeDmgPlayer = EntityTakeDmgPlayer;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/InputActionFilter.js
  var require_InputActionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/InputActionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.InputActionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CustomCallback_1 = require_CustomCallback();
      var InputActionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 13
            [isaac_typescript_definitions_1.ModCallback.INPUT_ACTION, this.inputAction]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_entity, inputHook, buttonAction] = fireArgs;
          const [callbackInputHook, callbackButtonAction] = optionalArgs;
          return (callbackInputHook === void 0 || callbackInputHook === inputHook) && (callbackButtonAction === void 0 || callbackButtonAction === buttonAction);
        };
        // ModCallback.INPUT_ACTION (13)
        inputAction = (entity, inputHook, buttonAction) => this.fire(entity, inputHook, buttonAction);
      };
      exports2.InputActionFilter = InputActionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/InputActionPlayer.js
  var require_InputActionPlayer = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/InputActionPlayer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.InputActionPlayer = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CustomCallback_1 = require_CustomCallback();
      var InputActionPlayer = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 13
            [isaac_typescript_definitions_1.ModCallback.INPUT_ACTION, this.inputAction]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [player, inputHook, buttonAction] = fireArgs;
          const [callbackPlayerVariant, callbackCharacter, callbackInputHook, callbackButtonAction] = optionalArgs;
          const character = player.GetPlayerType();
          return (callbackPlayerVariant === void 0 || callbackPlayerVariant === player.Variant) && (callbackCharacter === void 0 || callbackCharacter === character) && (callbackInputHook === void 0 || callbackInputHook === inputHook) && (callbackButtonAction === void 0 || callbackButtonAction === buttonAction);
        };
        // ModCallback.INPUT_ACTION (13)
        inputAction = (entity, inputHook, buttonAction) => {
          if (entity === void 0) {
            return void 0;
          }
          const player = entity.ToPlayer();
          if (player === void 0) {
            return void 0;
          }
          return this.fire(player, inputHook, buttonAction);
        };
      };
      exports2.InputActionPlayer = InputActionPlayer;
    }
  });

  // node_modules/isaacscript-common/dist/enums/AmbushType.js
  var require_AmbushType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/AmbushType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.AmbushType = void 0;
      var AmbushType;
      (function(AmbushType2) {
        AmbushType2[AmbushType2["CHALLENGE_ROOM"] = 0] = "CHALLENGE_ROOM";
        AmbushType2[AmbushType2["BOSS_RUSH"] = 1] = "BOSS_RUSH";
      })(AmbushType || (exports2.AmbushType = AmbushType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/functions/ambush.js
  var require_ambush = __commonJS({
    "node_modules/isaacscript-common/dist/functions/ambush.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getAmbushType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var AmbushType_1 = require_AmbushType();
      function getAmbushType() {
        const room = cachedClasses_1.game.GetRoom();
        const roomType = room.GetType();
        switch (roomType) {
          case isaac_typescript_definitions_1.RoomType.BOSS_RUSH: {
            return AmbushType_1.AmbushType.BOSS_RUSH;
          }
          case isaac_typescript_definitions_1.RoomType.CHALLENGE: {
            return AmbushType_1.AmbushType.CHALLENGE_ROOM;
          }
          default: {
            return void 0;
          }
        }
      }
      exports2.getAmbushType = getAmbushType;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostAmbushFinished.js
  var require_PostAmbushFinished = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostAmbushFinished.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostAmbushFinished = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ambush_1 = require_ambush();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          ambushDone: false
        }
      };
      var PostAmbushFinished = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireAmbush;
        postUpdate = () => {
          if (v.room.ambushDone) {
            return;
          }
          const room = cachedClasses_1.game.GetRoom();
          const ambushDone = room.IsAmbushDone();
          if (!ambushDone) {
            return;
          }
          v.room.ambushDone = true;
          const ambushType = (0, ambush_1.getAmbushType)();
          if (ambushType !== void 0) {
            this.fire(ambushType);
          }
        };
      };
      exports2.PostAmbushFinished = PostAmbushFinished;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostAmbushStarted.js
  var require_PostAmbushStarted = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostAmbushStarted.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostAmbushStarted = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ambush_1 = require_ambush();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          ambushActive: false
        }
      };
      var PostAmbushStarted = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireAmbush;
        postUpdate = () => {
          if (v.room.ambushActive) {
            return;
          }
          const room = cachedClasses_1.game.GetRoom();
          const ambushActive = room.IsAmbushActive();
          if (!ambushActive) {
            return;
          }
          v.room.ambushActive = true;
          const ambushType = (0, ambush_1.getAmbushType)();
          if (ambushType !== void 0) {
            this.fire(ambushType);
          }
        };
      };
      exports2.PostAmbushStarted = PostAmbushStarted;
    }
  });

  // node_modules/isaacscript-common/dist/functions/flag.js
  var require_flag = __commonJS({
    "node_modules/isaacscript-common/dist/functions/flag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.removeFlag = exports2.isSelfDamage = exports2.isEmptyFlag = exports2.hasFlag = exports2.getFlagName = exports2.bitFlags = exports2.addFlag = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      function addFlag(flags, ...flagsToAdd) {
        let flagsAsInt = flags;
        for (const flagToAdd of flagsToAdd) {
          flagsAsInt |= flagToAdd;
        }
        return flagsAsInt;
      }
      exports2.addFlag = addFlag;
      function bitFlags(flag) {
        return flag;
      }
      exports2.bitFlags = bitFlags;
      function getFlagName(flag, flagEnum) {
        for (const [key, value] of Object.entries(flagEnum)) {
          if (value === flag) {
            return key;
          }
        }
        return void 0;
      }
      exports2.getFlagName = getFlagName;
      function hasFlag(flags, ...flagsToCheck) {
        const flagsAsInt = flags;
        for (const flagToCheck of flagsToCheck) {
          if (!((flagsAsInt & flagToCheck) === flagToCheck)) {
            return false;
          }
        }
        return true;
      }
      exports2.hasFlag = hasFlag;
      function isEmptyFlag(flag) {
        return flag === 0;
      }
      exports2.isEmptyFlag = isEmptyFlag;
      function isSelfDamage(damageFlags) {
        return (
          // Exclude self-damage from e.g. Curse Room door spikes.
          hasFlag(damageFlags, isaac_typescript_definitions_1.DamageFlag.NO_PENALTIES) || // Exclude self-damage from e.g. Razor.
          hasFlag(damageFlags, isaac_typescript_definitions_1.DamageFlag.RED_HEARTS)
        );
      }
      exports2.isSelfDamage = isSelfDamage;
      function removeFlag(flags, ...flagsToRemove) {
        let flagsAsInt = flags;
        for (const flagToRemove of flagsToRemove) {
          flagsAsInt &= ~flagToRemove;
        }
        return flagsAsInt;
      }
      exports2.removeFlag = removeFlag;
    }
  });

  // node_modules/isaacscript-common/dist/functions/readOnly.js
  var require_readOnly = __commonJS({
    "node_modules/isaacscript-common/dist/functions/readOnly.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.newReadonlyVector = exports2.newReadonlyKColor = exports2.newReadonlyColor = void 0;
      function newReadonlyColor(r, g2, b2, a2, ro, go, bo) {
        return Color(r, g2, b2, a2, ro, go, bo);
      }
      exports2.newReadonlyColor = newReadonlyColor;
      function newReadonlyKColor(r, g2, b2, a2) {
        return KColor(r, g2, b2, a2);
      }
      exports2.newReadonlyKColor = newReadonlyKColor;
      function newReadonlyVector(x, y) {
        return Vector(x, y);
      }
      exports2.newReadonlyVector = newReadonlyVector;
    }
  });

  // node_modules/isaacscript-common/dist/core/constantsFirstLast.js
  var require_constantsFirstLast = __commonJS({
    "node_modules/isaacscript-common/dist/core/constantsFirstLast.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NUM_VANILLA_CHALLENGES = exports2.LAST_VANILLA_CHARACTER = exports2.FIRST_CHARACTER = exports2.NUM_NORMAL_PILL_COLORS = exports2.LAST_HORSE_PILL_COLOR = exports2.FIRST_HORSE_PILL_COLOR = exports2.LAST_NORMAL_PILL_COLOR = exports2.FIRST_PILL_COLOR = exports2.NUM_VANILLA_PILL_EFFECTS = exports2.LAST_VANILLA_PILL_EFFECT = exports2.FIRST_PILL_EFFECT = exports2.NUM_VANILLA_CARD_TYPES = exports2.LAST_VANILLA_CARD_TYPE = exports2.FIRST_CARD_TYPE = exports2.NUM_VANILLA_TRINKET_TYPES = exports2.LAST_VANILLA_TRINKET_TYPE = exports2.FIRST_TRINKET_TYPE = exports2.NUM_VANILLA_COLLECTIBLE_TYPES = exports2.LAST_VANILLA_COLLECTIBLE_TYPE = exports2.FIRST_COLLECTIBLE_TYPE = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var enums_1 = require_enums();
      exports2.FIRST_COLLECTIBLE_TYPE = isaac_typescript_definitions_1.CollectibleType.SAD_ONION;
      exports2.LAST_VANILLA_COLLECTIBLE_TYPE = (0, enums_1.getHighestEnumValue)(isaac_typescript_definitions_1.CollectibleType);
      exports2.NUM_VANILLA_COLLECTIBLE_TYPES = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.CollectibleType) - 1;
      exports2.FIRST_TRINKET_TYPE = isaac_typescript_definitions_1.TrinketType.SWALLOWED_PENNY;
      exports2.LAST_VANILLA_TRINKET_TYPE = (0, enums_1.getHighestEnumValue)(isaac_typescript_definitions_1.TrinketType);
      exports2.NUM_VANILLA_TRINKET_TYPES = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.TrinketType) - 1;
      exports2.FIRST_CARD_TYPE = isaac_typescript_definitions_1.CardType.FOOL;
      exports2.LAST_VANILLA_CARD_TYPE = (0, enums_1.getHighestEnumValue)(isaac_typescript_definitions_1.CardType);
      exports2.NUM_VANILLA_CARD_TYPES = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.CardType) - 1;
      exports2.FIRST_PILL_EFFECT = isaac_typescript_definitions_1.PillEffect.BAD_GAS;
      exports2.LAST_VANILLA_PILL_EFFECT = (0, enums_1.getHighestEnumValue)(isaac_typescript_definitions_1.PillEffect);
      exports2.NUM_VANILLA_PILL_EFFECTS = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.PillEffect);
      exports2.FIRST_PILL_COLOR = isaac_typescript_definitions_1.PillColor.BLUE_BLUE;
      exports2.LAST_NORMAL_PILL_COLOR = isaac_typescript_definitions_1.PillColor.WHITE_YELLOW;
      exports2.FIRST_HORSE_PILL_COLOR = isaac_typescript_definitions_1.PillColor.HORSE_BLUE_BLUE;
      exports2.LAST_HORSE_PILL_COLOR = isaac_typescript_definitions_1.PillColor.HORSE_WHITE_YELLOW;
      exports2.NUM_NORMAL_PILL_COLORS = exports2.LAST_NORMAL_PILL_COLOR - exports2.FIRST_PILL_COLOR + 1;
      exports2.FIRST_CHARACTER = isaac_typescript_definitions_1.PlayerType.ISAAC;
      exports2.LAST_VANILLA_CHARACTER = (0, enums_1.getHighestEnumValue)(isaac_typescript_definitions_1.PlayerType);
      exports2.NUM_VANILLA_CHALLENGES = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.Challenge) - 1;
    }
  });

  // node_modules/isaacscript-common/dist/core/constants.js
  var require_constants = __commonJS({
    "node_modules/isaacscript-common/dist/core/constants.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TELEPORTER_ACTIVATION_DISTANCE = exports2.TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE = exports2.STARTING_ROOM_GRID_INDEX = exports2.RESOLUTION_1600_900 = exports2.RESOLUTION_FULL_SCREEN = exports2.MINUTE_IN_MILLISECONDS = exports2.SECOND_IN_MILLISECONDS = exports2.MAX_QUALITY = exports2.QUALITIES = exports2.ONE_BY_ONE_ROOM_GRID_SIZE = exports2.NUM_PILL_COLORS_IN_POOL = exports2.DIMENSIONS = exports2.NUM_DIMENSIONS = exports2.MAX_TAINTED_SAMSON_BERSERK_CHARGE = exports2.NEW_RUN_PLAYER_STARTING_POSITION = exports2.NEW_FLOOR_STARTING_POSITION_GREED_MODE = exports2.NEW_FLOOR_STARTING_POSITION_NORMAL_MODE = exports2.MAX_SPEED_STAT = exports2.MIN_PLAYER_SPEED_STAT = exports2.MIN_PLAYER_SHOT_SPEED_STAT = exports2.MAX_PLAYER_TRINKET_SLOTS = exports2.MAX_PLAYER_SPEED_IN_UNITS = exports2.MAX_PLAYER_HEART_CONTAINERS = exports2.MAX_NUM_INPUTS = exports2.MAX_NUM_FAMILIARS = exports2.MAX_LEVEL_GRID_INDEX = exports2.MAPPING_COLLECTIBLES = exports2.LEVEL_GRID_ROW_WIDTH = exports2.LEVEL_GRID_COLUMN_HEIGHT = exports2.GRID_INDEX_CENTER_OF_1X1_ROOM = exports2.RENDER_FRAMES_PER_MINUTE = exports2.RENDER_FRAMES_PER_SECOND = exports2.MAIN_CHARACTERS = exports2.GAME_FRAMES_PER_MINUTE = exports2.GAME_FRAMES_PER_SECOND = exports2.FLYING_CHARACTERS = exports2.FIRST_GLITCHED_COLLECTIBLE_TYPE = exports2.EMPTY_PNG_PATH = exports2.EGGY_STATE_FRAME_OF_FINAL_SPIDER = exports2.DOOR_HITBOX_RADIUS = exports2.DOGMA_ROOM_GRID_INDEX = exports2.DISTANCE_OF_GRID_TILE = exports2.DEFAULT_ITEM_POOL_TYPE = exports2.COLLECTIBLE_INITIAL_WAIT = exports2.CHEST_PICKUP_VARIANTS_SET = exports2.CHEST_PICKUP_VARIANTS = exports2.BOMB_EXPLODE_FRAME = exports2.BLIND_ITEM_PNG_PATH = exports2.AZAZEL_DEFAULT_BRIMSTONE_DISTANCE = exports2.ALL_DISPLAY_FLAGS = void 0;
      exports2.KColorDefault = exports2.ColorDefault = exports2.VectorZero = exports2.VectorOne = exports2.UI_HEART_WIDTH = exports2.TIME_GAME_OPENED = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var enums_1 = require_enums();
      var flag_1 = require_flag();
      var readOnly_1 = require_readOnly();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var ReadonlySet_1 = require_ReadonlySet();
      var constantsFirstLast_1 = require_constantsFirstLast();
      exports2.ALL_DISPLAY_FLAGS = (0, flag_1.addFlag)(isaac_typescript_definitions_1.DisplayFlag.VISIBLE, isaac_typescript_definitions_1.DisplayFlag.SHADOW, isaac_typescript_definitions_1.DisplayFlag.SHOW_ICON);
      exports2.AZAZEL_DEFAULT_BRIMSTONE_DISTANCE = 75.125;
      exports2.BLIND_ITEM_PNG_PATH = "gfx/items/collectibles/questionmark.png";
      exports2.BOMB_EXPLODE_FRAME = 45;
      exports2.CHEST_PICKUP_VARIANTS = [
        isaac_typescript_definitions_1.PickupVariant.CHEST,
        isaac_typescript_definitions_1.PickupVariant.BOMB_CHEST,
        isaac_typescript_definitions_1.PickupVariant.SPIKED_CHEST,
        isaac_typescript_definitions_1.PickupVariant.ETERNAL_CHEST,
        isaac_typescript_definitions_1.PickupVariant.MIMIC_CHEST,
        isaac_typescript_definitions_1.PickupVariant.OLD_CHEST,
        isaac_typescript_definitions_1.PickupVariant.WOODEN_CHEST,
        isaac_typescript_definitions_1.PickupVariant.MEGA_CHEST,
        isaac_typescript_definitions_1.PickupVariant.HAUNTED_CHEST,
        isaac_typescript_definitions_1.PickupVariant.LOCKED_CHEST,
        isaac_typescript_definitions_1.PickupVariant.RED_CHEST,
        isaac_typescript_definitions_1.PickupVariant.MOMS_CHEST
        // 390
      ];
      exports2.CHEST_PICKUP_VARIANTS_SET = new ReadonlySet_1.ReadonlySet(exports2.CHEST_PICKUP_VARIANTS);
      exports2.COLLECTIBLE_INITIAL_WAIT = 20;
      exports2.DEFAULT_ITEM_POOL_TYPE = isaac_typescript_definitions_1.ItemPoolType.TREASURE;
      exports2.DISTANCE_OF_GRID_TILE = 40;
      exports2.DOGMA_ROOM_GRID_INDEX = 109;
      exports2.DOOR_HITBOX_RADIUS = 11;
      exports2.EGGY_STATE_FRAME_OF_FINAL_SPIDER = 45;
      exports2.EMPTY_PNG_PATH = "gfx/none.png";
      exports2.FIRST_GLITCHED_COLLECTIBLE_TYPE = (0, types_1.asCollectibleType)((1 << 32) - 1);
      exports2.FLYING_CHARACTERS = [
        isaac_typescript_definitions_1.PlayerType.AZAZEL,
        isaac_typescript_definitions_1.PlayerType.LOST,
        isaac_typescript_definitions_1.PlayerType.SOUL,
        isaac_typescript_definitions_1.PlayerType.LOST_B,
        isaac_typescript_definitions_1.PlayerType.JACOB_2_B,
        isaac_typescript_definitions_1.PlayerType.SOUL_B
        // 40
      ];
      exports2.GAME_FRAMES_PER_SECOND = 30;
      exports2.GAME_FRAMES_PER_MINUTE = exports2.GAME_FRAMES_PER_SECOND * 60;
      exports2.MAIN_CHARACTERS = [
        isaac_typescript_definitions_1.PlayerType.ISAAC,
        isaac_typescript_definitions_1.PlayerType.MAGDALENE,
        isaac_typescript_definitions_1.PlayerType.CAIN,
        isaac_typescript_definitions_1.PlayerType.JUDAS,
        isaac_typescript_definitions_1.PlayerType.BLUE_BABY,
        isaac_typescript_definitions_1.PlayerType.EVE,
        isaac_typescript_definitions_1.PlayerType.SAMSON,
        isaac_typescript_definitions_1.PlayerType.AZAZEL,
        isaac_typescript_definitions_1.PlayerType.LAZARUS,
        isaac_typescript_definitions_1.PlayerType.EDEN,
        isaac_typescript_definitions_1.PlayerType.LOST,
        isaac_typescript_definitions_1.PlayerType.LILITH,
        isaac_typescript_definitions_1.PlayerType.KEEPER,
        isaac_typescript_definitions_1.PlayerType.APOLLYON,
        isaac_typescript_definitions_1.PlayerType.FORGOTTEN,
        isaac_typescript_definitions_1.PlayerType.BETHANY,
        isaac_typescript_definitions_1.PlayerType.JACOB,
        isaac_typescript_definitions_1.PlayerType.ISAAC_B,
        isaac_typescript_definitions_1.PlayerType.MAGDALENE_B,
        isaac_typescript_definitions_1.PlayerType.CAIN_B,
        isaac_typescript_definitions_1.PlayerType.JUDAS_B,
        isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B,
        isaac_typescript_definitions_1.PlayerType.EVE_B,
        isaac_typescript_definitions_1.PlayerType.SAMSON_B,
        isaac_typescript_definitions_1.PlayerType.AZAZEL_B,
        isaac_typescript_definitions_1.PlayerType.LAZARUS_B,
        isaac_typescript_definitions_1.PlayerType.EDEN_B,
        isaac_typescript_definitions_1.PlayerType.LOST_B,
        isaac_typescript_definitions_1.PlayerType.LILITH_B,
        isaac_typescript_definitions_1.PlayerType.KEEPER_B,
        isaac_typescript_definitions_1.PlayerType.APOLLYON_B,
        isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B,
        isaac_typescript_definitions_1.PlayerType.BETHANY_B,
        isaac_typescript_definitions_1.PlayerType.JACOB_B
        // 37
      ];
      exports2.RENDER_FRAMES_PER_SECOND = 60;
      exports2.RENDER_FRAMES_PER_MINUTE = exports2.RENDER_FRAMES_PER_SECOND * 60;
      exports2.GRID_INDEX_CENTER_OF_1X1_ROOM = 67;
      exports2.LEVEL_GRID_COLUMN_HEIGHT = 13;
      exports2.LEVEL_GRID_ROW_WIDTH = 13;
      exports2.MAPPING_COLLECTIBLES = [
        isaac_typescript_definitions_1.CollectibleType.COMPASS,
        isaac_typescript_definitions_1.CollectibleType.TREASURE_MAP,
        isaac_typescript_definitions_1.CollectibleType.SPELUNKER_HAT,
        isaac_typescript_definitions_1.CollectibleType.CRYSTAL_BALL,
        isaac_typescript_definitions_1.CollectibleType.BLUE_MAP,
        isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SECRETS,
        isaac_typescript_definitions_1.CollectibleType.MIND,
        isaac_typescript_definitions_1.CollectibleType.SOL,
        isaac_typescript_definitions_1.CollectibleType.LUNA,
        isaac_typescript_definitions_1.CollectibleType.CRACKED_ORB
        // 675
      ];
      exports2.MAX_LEVEL_GRID_INDEX = 168;
      exports2.MAX_NUM_FAMILIARS = 64;
      exports2.MAX_NUM_INPUTS = 4;
      exports2.MAX_PLAYER_HEART_CONTAINERS = 18;
      exports2.MAX_PLAYER_SPEED_IN_UNITS = 9.8;
      exports2.MAX_PLAYER_TRINKET_SLOTS = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.TrinketSlot);
      exports2.MIN_PLAYER_SHOT_SPEED_STAT = 0.6;
      exports2.MIN_PLAYER_SPEED_STAT = 0.1;
      exports2.MAX_SPEED_STAT = 2;
      exports2.NEW_FLOOR_STARTING_POSITION_NORMAL_MODE = (0, readOnly_1.newReadonlyVector)(320, 280);
      exports2.NEW_FLOOR_STARTING_POSITION_GREED_MODE = (0, readOnly_1.newReadonlyVector)(320, 280);
      exports2.NEW_RUN_PLAYER_STARTING_POSITION = (0, readOnly_1.newReadonlyVector)(320, 380);
      exports2.MAX_TAINTED_SAMSON_BERSERK_CHARGE = 1e5;
      exports2.NUM_DIMENSIONS = (0, enums_1.getEnumLength)(isaac_typescript_definitions_1.Dimension) - 1;
      exports2.DIMENSIONS = (0, utils_1.eRange)(exports2.NUM_DIMENSIONS);
      exports2.NUM_PILL_COLORS_IN_POOL = constantsFirstLast_1.NUM_NORMAL_PILL_COLORS;
      exports2.ONE_BY_ONE_ROOM_GRID_SIZE = 135;
      exports2.QUALITIES = [0, 1, 2, 3, 4];
      exports2.MAX_QUALITY = 4;
      exports2.SECOND_IN_MILLISECONDS = 1e3;
      exports2.MINUTE_IN_MILLISECONDS = 60 * exports2.SECOND_IN_MILLISECONDS;
      exports2.RESOLUTION_FULL_SCREEN = Vector(480, 270);
      exports2.RESOLUTION_1600_900 = Vector(533, 300);
      exports2.STARTING_ROOM_GRID_INDEX = 84;
      exports2.TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE = 1e4;
      exports2.TELEPORTER_ACTIVATION_DISTANCE = exports2.DISTANCE_OF_GRID_TILE / 2;
      exports2.TIME_GAME_OPENED = Isaac.GetTime();
      exports2.UI_HEART_WIDTH = 12;
      exports2.VectorOne = (0, readOnly_1.newReadonlyVector)(1, 1);
      exports2.VectorZero = (0, readOnly_1.newReadonlyVector)(0, 0);
      exports2.ColorDefault = (0, readOnly_1.newReadonlyColor)(1, 1, 1);
      exports2.KColorDefault = (0, readOnly_1.newReadonlyKColor)(1, 1, 1, 1);
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostBombExploded.js
  var require_PostBombExploded = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostBombExploded.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostBombExploded = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostBombExploded = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 58
            [isaac_typescript_definitions_1.ModCallback.POST_BOMB_UPDATE, this.postBombUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBomb;
        // ModCallback.POST_BOMB_UPDATE (58)
        postBombUpdate = (bomb) => {
          if (bomb.FrameCount === constants_1.BOMB_EXPLODE_FRAME) {
            this.fire(bomb);
          }
        };
      };
      exports2.PostBombExploded = PostBombExploded;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostBombInitFilter.js
  var require_PostBombInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostBombInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostBombInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostBombInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 57
            [isaac_typescript_definitions_1.ModCallback.POST_BOMB_INIT, this.postBombInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBomb;
        // ModCallback.POST_BOMB_INIT (57)
        postBombInit = (bomb) => {
          this.fire(bomb);
        };
      };
      exports2.PostBombInitFilter = PostBombInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostBombInitLate.js
  var require_PostBombInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostBombInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostBombInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostBombInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 58
            [isaac_typescript_definitions_1.ModCallback.POST_BOMB_UPDATE, this.postBombUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBomb;
        // ModCallback.POST_BOMB_UPDATE (58)
        postBombUpdate = (bomb) => {
          const ptrHash = GetPtrHash(bomb);
          if (!v.room.firedSet.has(ptrHash)) {
            v.room.firedSet.add(ptrHash);
            this.fire(bomb);
          }
        };
      };
      exports2.PostBombInitLate = PostBombInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostBombRenderFilter.js
  var require_PostBombRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostBombRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostBombRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostBombRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 59
            [isaac_typescript_definitions_1.ModCallback.POST_BOMB_RENDER, this.postBombUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBomb;
        // ModCallback.POST_BOMB_RENDER (59)
        postBombUpdate = (bomb, renderOffset) => {
          this.fire(bomb, renderOffset);
        };
      };
      exports2.PostBombRenderFilter = PostBombRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostBombUpdateFilter.js
  var require_PostBombUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostBombUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostBombUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostBombUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 58
            [isaac_typescript_definitions_1.ModCallback.POST_BOMB_UPDATE, this.postBombUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBomb;
        // ModCallback.POST_BOMB_UPDATE (58)
        postBombUpdate = (bomb) => {
          this.fire(bomb);
        };
      };
      exports2.PostBombUpdateFilter = PostBombUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostBoneSwing.js
  var require_PostBoneSwing = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostBoneSwing.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostBoneSwing = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      var CustomCallback_1 = require_CustomCallback();
      var BONE_SWING_ANIMATIONS = new ReadonlySet_1.ReadonlySet([
        "Swing",
        "Swing2",
        "Spin"
      ]);
      var v = {
        room: {
          boneClubAnimations: /* @__PURE__ */ new Map()
        }
      };
      var PostBoneSwing = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 52
            [isaac_typescript_definitions_1.ModCallback.POST_KNIFE_RENDER, this.postKnifeRender]
          ];
        }
        // ModCallback.POST_KNIFE_RENDER (52)
        postKnifeRender = (knife) => {
          if (knife.Variant === isaac_typescript_definitions_1.KnifeVariant.BONE_CLUB) {
            this.postKnifeRenderBoneClub(knife);
          }
        };
        // ModCallback.POST_KNIFE_RENDER (52)
        // KnifeVariant.BONE_CLUB (1)
        postKnifeRenderBoneClub(knife) {
          const sprite = knife.GetSprite();
          const animation = sprite.GetAnimation();
          const ptrHash = GetPtrHash(knife);
          const animationOnLastFrame = v.room.boneClubAnimations.get(ptrHash);
          v.room.boneClubAnimations.set(ptrHash, animation);
          if (animationOnLastFrame !== void 0 && animation !== animationOnLastFrame) {
            this.boneClubAnimationChanged(knife, animation);
          }
        }
        boneClubAnimationChanged(knife, animation) {
          if (BONE_SWING_ANIMATIONS.has(animation)) {
            this.fire(knife);
          }
        }
      };
      exports2.PostBoneSwing = PostBoneSwing;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostCollectibleEmpty.js
  var require_PostCollectibleEmpty = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostCollectibleEmpty.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostCollectibleEmpty = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          collectibleTypeMap: /* @__PURE__ */ new Map()
        }
      };
      var PostCollectibleEmpty = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 35
            [
              isaac_typescript_definitions_1.ModCallback.POST_PICKUP_UPDATE,
              this.postPickupUpdateCollectible,
              [isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE]
            ]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_collectible, oldCollectibleType] = fireArgs;
          const [callbackCollectibleType] = optionalArgs;
          return callbackCollectibleType === void 0 || callbackCollectibleType === oldCollectibleType;
        };
        // ModCallback.POST_PICKUP_UPDATE (35)
        // PickupVariant.COLLECTIBLE (100)
        postPickupUpdateCollectible = (pickup) => {
          const collectible = pickup;
          const ptrHash = GetPtrHash(collectible);
          let oldCollectibleType = v.room.collectibleTypeMap.get(ptrHash);
          if (oldCollectibleType === void 0) {
            oldCollectibleType = collectible.SubType;
          }
          v.room.collectibleTypeMap.set(ptrHash, collectible.SubType);
          if (oldCollectibleType !== collectible.SubType) {
            this.collectibleTypeChanged(collectible, oldCollectibleType);
          }
        };
        collectibleTypeChanged(collectible, oldCollectibleType) {
          if (collectible.SubType === isaac_typescript_definitions_1.CollectibleType.NULL) {
            this.fire(collectible, oldCollectibleType);
          }
        }
      };
      exports2.PostCollectibleEmpty = PostCollectibleEmpty;
    }
  });

  // node_modules/isaacscript-common/dist/functions/frames.js
  var require_frames = __commonJS({
    "node_modules/isaacscript-common/dist/functions/frames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.onRoomFrame = exports2.onRenderFrame = exports2.onOrBeforeRoomFrame = exports2.onOrBeforeRenderFrame = exports2.onOrBeforeGameFrame = exports2.onOrAfterRoomFrame = exports2.onOrAfterRenderFrame = exports2.onOrAfterGameFrame = exports2.onGameFrame = exports2.isBeforeRoomFrame = exports2.isBeforeRenderFrame = exports2.isBeforeGameFrame = exports2.isAfterRoomFrame = exports2.isAfterRenderFrame = exports2.isAfterGameFrame = exports2.getElapsedRoomFramesSince = exports2.getElapsedRenderFramesSince = exports2.getElapsedGameFramesSince = void 0;
      var cachedClasses_1 = require_cachedClasses();
      function getElapsedGameFramesSince(gameFrameCount) {
        const thisGameFrameCount = cachedClasses_1.game.GetFrameCount();
        return thisGameFrameCount - gameFrameCount;
      }
      exports2.getElapsedGameFramesSince = getElapsedGameFramesSince;
      function getElapsedRenderFramesSince(renderFrameCount) {
        const thisRenderFrameCount = Isaac.GetFrameCount();
        return thisRenderFrameCount - renderFrameCount;
      }
      exports2.getElapsedRenderFramesSince = getElapsedRenderFramesSince;
      function getElapsedRoomFramesSince(roomFrameCount) {
        const room = cachedClasses_1.game.GetRoom();
        const thisRoomFrameCount = room.GetFrameCount();
        return thisRoomFrameCount - roomFrameCount;
      }
      exports2.getElapsedRoomFramesSince = getElapsedRoomFramesSince;
      function isAfterGameFrame(gameFrameCount) {
        const thisGameFrameCount = cachedClasses_1.game.GetFrameCount();
        return thisGameFrameCount > gameFrameCount;
      }
      exports2.isAfterGameFrame = isAfterGameFrame;
      function isAfterRenderFrame(renderFrameCount) {
        const thisRenderFrameCount = Isaac.GetFrameCount();
        return thisRenderFrameCount > renderFrameCount;
      }
      exports2.isAfterRenderFrame = isAfterRenderFrame;
      function isAfterRoomFrame(roomFrameCount) {
        const room = cachedClasses_1.game.GetRoom();
        const thisGameFrameCount = room.GetFrameCount();
        return thisGameFrameCount > roomFrameCount;
      }
      exports2.isAfterRoomFrame = isAfterRoomFrame;
      function isBeforeGameFrame(gameFrameCount) {
        const thisGameFrameCount = cachedClasses_1.game.GetFrameCount();
        return thisGameFrameCount < gameFrameCount;
      }
      exports2.isBeforeGameFrame = isBeforeGameFrame;
      function isBeforeRenderFrame(renderFrameCount) {
        const thisRenderFrameCount = Isaac.GetFrameCount();
        return thisRenderFrameCount < renderFrameCount;
      }
      exports2.isBeforeRenderFrame = isBeforeRenderFrame;
      function isBeforeRoomFrame(roomFrameCount) {
        const room = cachedClasses_1.game.GetRoom();
        const thisGameFrameCount = room.GetFrameCount();
        return thisGameFrameCount < roomFrameCount;
      }
      exports2.isBeforeRoomFrame = isBeforeRoomFrame;
      function onGameFrame(gameFrameCount) {
        const thisGameFrameCount = cachedClasses_1.game.GetFrameCount();
        return thisGameFrameCount === gameFrameCount;
      }
      exports2.onGameFrame = onGameFrame;
      function onOrAfterGameFrame(gameFrameCount) {
        const thisGameFrameCount = cachedClasses_1.game.GetFrameCount();
        return thisGameFrameCount >= gameFrameCount;
      }
      exports2.onOrAfterGameFrame = onOrAfterGameFrame;
      function onOrAfterRenderFrame(renderFrameCount) {
        const thisRenderFrameCount = Isaac.GetFrameCount();
        return thisRenderFrameCount >= renderFrameCount;
      }
      exports2.onOrAfterRenderFrame = onOrAfterRenderFrame;
      function onOrAfterRoomFrame(roomFrameCount) {
        const room = cachedClasses_1.game.GetRoom();
        const thisGameFrameCount = room.GetFrameCount();
        return thisGameFrameCount >= roomFrameCount;
      }
      exports2.onOrAfterRoomFrame = onOrAfterRoomFrame;
      function onOrBeforeGameFrame(gameFrameCount) {
        const thisGameFrameCount = cachedClasses_1.game.GetFrameCount();
        return thisGameFrameCount <= gameFrameCount;
      }
      exports2.onOrBeforeGameFrame = onOrBeforeGameFrame;
      function onOrBeforeRenderFrame(renderFrameCount) {
        const thisRenderFrameCount = Isaac.GetFrameCount();
        return thisRenderFrameCount <= renderFrameCount;
      }
      exports2.onOrBeforeRenderFrame = onOrBeforeRenderFrame;
      function onOrBeforeRoomFrame(roomFrameCount) {
        const room = cachedClasses_1.game.GetRoom();
        const thisGameFrameCount = room.GetFrameCount();
        return thisGameFrameCount <= roomFrameCount;
      }
      exports2.onOrBeforeRoomFrame = onOrBeforeRoomFrame;
      function onRenderFrame(renderFrameCount) {
        const thisRenderFrameCount = Isaac.GetFrameCount();
        return thisRenderFrameCount === renderFrameCount;
      }
      exports2.onRenderFrame = onRenderFrame;
      function onRoomFrame(roomFrameCount) {
        const room = cachedClasses_1.game.GetRoom();
        const thisGameFrameCount = room.GetFrameCount();
        return thisGameFrameCount === roomFrameCount;
      }
      exports2.onRoomFrame = onRoomFrame;
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerDataStructures.js
  var require_playerDataStructures = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerDataStructures.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setHasPlayer = exports2.setDeletePlayer = exports2.setAddPlayer = exports2.mapSetPlayer = exports2.mapHasPlayer = exports2.mapGetPlayer = exports2.mapDeletePlayer = exports2.defaultMapSetPlayer = exports2.defaultMapGetPlayer = void 0;
      var playerIndex_1 = require_playerIndex();
      function defaultMapGetPlayer(map, player, ...extraArgs) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        return map.getAndSetDefault(playerIndex, ...extraArgs);
      }
      exports2.defaultMapGetPlayer = defaultMapGetPlayer;
      function defaultMapSetPlayer(map, player, value) {
        mapSetPlayer(map, player, value);
      }
      exports2.defaultMapSetPlayer = defaultMapSetPlayer;
      function mapDeletePlayer(map, player) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        return map.delete(playerIndex);
      }
      exports2.mapDeletePlayer = mapDeletePlayer;
      function mapGetPlayer(map, player) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        return map.get(playerIndex);
      }
      exports2.mapGetPlayer = mapGetPlayer;
      function mapHasPlayer(map, player) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        return map.has(playerIndex);
      }
      exports2.mapHasPlayer = mapHasPlayer;
      function mapSetPlayer(map, player, value) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        map.set(playerIndex, value);
      }
      exports2.mapSetPlayer = mapSetPlayer;
      function setAddPlayer(set, player) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        set.add(playerIndex);
      }
      exports2.setAddPlayer = setAddPlayer;
      function setDeletePlayer(set, player) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        return set.delete(playerIndex);
      }
      exports2.setDeletePlayer = setDeletePlayer;
      function setHasPlayer(set, player) {
        const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
        return set.has(playerIndex);
      }
      exports2.setHasPlayer = setHasPlayer;
    }
  });

  // node_modules/isaacscript-common/dist/objects/characterDamageMultipliers.js
  var require_characterDamageMultipliers = __commonJS({
    "node_modules/isaacscript-common/dist/objects/characterDamageMultipliers.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTER_DAMAGE_MULTIPLIERS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHARACTER_DAMAGE_MULTIPLIERS = {
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: 1,
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: 1,
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: 1,
        [isaac_typescript_definitions_1.PlayerType.CAIN]: 1.2,
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: 1.35,
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: 1.05,
        [isaac_typescript_definitions_1.PlayerType.EVE]: 0.75,
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: 1,
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: 1.5,
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: 1,
        [isaac_typescript_definitions_1.PlayerType.EDEN]: 1,
        [isaac_typescript_definitions_1.PlayerType.LOST]: 1,
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: 1.4,
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: 2,
        [isaac_typescript_definitions_1.PlayerType.LILITH]: 1,
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: 1.2,
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: 1,
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: 1.5,
        [isaac_typescript_definitions_1.PlayerType.SOUL]: 1,
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: 1,
        [isaac_typescript_definitions_1.PlayerType.JACOB]: 1,
        [isaac_typescript_definitions_1.PlayerType.ESAU]: 1,
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: 0.75,
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: 1.2,
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: 1.5,
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: 1.3,
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: 1.5,
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: 1.5,
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: 1,
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: 1
        // 40
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/characterNames.js
  var require_characterNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/characterNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTER_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHARACTER_NAMES = {
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: "Possessor",
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: "Isaac",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: "Magdalene",
        [isaac_typescript_definitions_1.PlayerType.CAIN]: "Cain",
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: "Judas",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: "Blue Baby",
        [isaac_typescript_definitions_1.PlayerType.EVE]: "Eve",
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: "Samson",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: "Azazel",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: "Lazarus",
        [isaac_typescript_definitions_1.PlayerType.EDEN]: "Eden",
        [isaac_typescript_definitions_1.PlayerType.LOST]: "The Lost",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: "Lazarus II",
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: "Dark Judas",
        [isaac_typescript_definitions_1.PlayerType.LILITH]: "Lilith",
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: "Keeper",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: "Apollyon",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: "The Forgotten",
        [isaac_typescript_definitions_1.PlayerType.SOUL]: "The Soul",
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: "Bethany",
        [isaac_typescript_definitions_1.PlayerType.JACOB]: "Jacob",
        [isaac_typescript_definitions_1.PlayerType.ESAU]: "Esau",
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: "Tainted Isaac",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: "Tainted Magdalene",
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: "Tainted Cain",
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: "Tainted Judas",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: "Tainted Blue Baby",
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: "Tainted Eve",
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: "Tainted Samson",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: "Tainted Azazel",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: "Tainted Lazarus",
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: "Tainted Eden",
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: "Tainted Lost",
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: "Tainted Lilith",
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: "Tainted Keeper",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: "Tainted Apollyon",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: "Tainted Forgotten",
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: "Tainted Bethany",
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: "Tainted Jacob",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: "Dead Tainted Lazarus",
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: "Dead Tainted Jacob",
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: "Tainted Soul"
        // 40
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/characterSpritePNGFileNames.js
  var require_characterSpritePNGFileNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/characterSpritePNGFileNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTER_SPRITE_PNG_FILE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHARACTER_SPRITE_PNG_FILE_NAMES = {
        // Possessor uses the same sprite as Isaac.
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: "character_001_isaac.png",
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: "character_001_isaac.png",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: "character_002_magdalene.png",
        [isaac_typescript_definitions_1.PlayerType.CAIN]: "character_003_cain.png",
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: "character_004_judas.png",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: "character_006_bluebaby.png",
        [isaac_typescript_definitions_1.PlayerType.EVE]: "character_005_eve.png",
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: "character_007_samson.png",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: "character_008_azazel.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: "character_009_lazarus.png",
        [isaac_typescript_definitions_1.PlayerType.EDEN]: "character_009_eden.png",
        [isaac_typescript_definitions_1.PlayerType.LOST]: "character_012_thelost.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: "character_010_lazarus2.png",
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: "character_013_blackjudas.png",
        [isaac_typescript_definitions_1.PlayerType.LILITH]: "character_014_lilith.png",
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: "character_015_keeper.png",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: "character_016_apollyon.png",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: "character_017_theforgotten.png",
        [isaac_typescript_definitions_1.PlayerType.SOUL]: "character_018_thesoul.png",
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: "character_001x_bethany.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB]: "character_002x_jacob.png",
        [isaac_typescript_definitions_1.PlayerType.ESAU]: "character_003x_esau.png",
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: "character_001b_isaac.png",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: "character_002b_magdalene.png",
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: "character_003b_cain.png",
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: "character_004b_judas.png",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: "character_005b_bluebaby.png",
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: "character_006b_eve.png",
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: "character_007b_samson.png",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: "character_008b_azazel.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: "character_009b_lazarus.png",
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: "character_009_eden.png",
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: "character_012b_thelost.png",
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: "character_014b_lilith.png",
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: "character_015b_keeper.png",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: "character_016b_apollyon.png",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: "character_016b_theforgotten.png",
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: "character_018b_bethany.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: "character_019b_jacob.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: "character_009b_lazarus2.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: "character_019b_jacob2.png",
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: "character_017b_thesoul.png"
        // 40
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/characterStartingCollectibleTypes.js
  var require_characterStartingCollectibleTypes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/characterStartingCollectibleTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTER_STARTING_COLLECTIBLE_TYPES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHARACTER_STARTING_COLLECTIBLE_TYPES = {
        // -1
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: [],
        // 0
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: [isaac_typescript_definitions_1.CollectibleType.D6],
        // 1
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: [isaac_typescript_definitions_1.CollectibleType.YUM_HEART],
        // 2
        [isaac_typescript_definitions_1.PlayerType.CAIN]: [isaac_typescript_definitions_1.CollectibleType.LUCKY_FOOT],
        // 3
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_BELIAL],
        // 4
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: [isaac_typescript_definitions_1.CollectibleType.POOP],
        // 5
        [isaac_typescript_definitions_1.PlayerType.EVE]: [
          isaac_typescript_definitions_1.CollectibleType.DEAD_BIRD,
          isaac_typescript_definitions_1.CollectibleType.WHORE_OF_BABYLON,
          isaac_typescript_definitions_1.CollectibleType.RAZOR_BLADE
          // 126
        ],
        // 6
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: [isaac_typescript_definitions_1.CollectibleType.BLOODY_LUST],
        // 7
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: [],
        // 8
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: [isaac_typescript_definitions_1.CollectibleType.ANEMIC],
        // (Lazarus Rags is not granted; the extra life is innate.)
        // 9
        [isaac_typescript_definitions_1.PlayerType.EDEN]: [],
        // 10
        [isaac_typescript_definitions_1.PlayerType.LOST]: [isaac_typescript_definitions_1.CollectibleType.ETERNAL_D6],
        // (Holy Mantle is not granted; the effect is innate.)
        // 11
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: [isaac_typescript_definitions_1.CollectibleType.ANEMIC],
        // (Even if the run is started as Lazarus 2 using e.g. `restart 11`, Anemic is still granted.)
        // 12
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: [],
        // 13
        [isaac_typescript_definitions_1.PlayerType.LILITH]: [
          isaac_typescript_definitions_1.CollectibleType.BOX_OF_FRIENDS,
          isaac_typescript_definitions_1.CollectibleType.CAMBION_CONCEPTION
          // 412
        ],
        // 14
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: [isaac_typescript_definitions_1.CollectibleType.WOODEN_NICKEL],
        // 15
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: [isaac_typescript_definitions_1.CollectibleType.VOID],
        // 16
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: [],
        // 17
        [isaac_typescript_definitions_1.PlayerType.SOUL]: [],
        // 18
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_VIRTUES],
        // 19
        [isaac_typescript_definitions_1.PlayerType.JACOB]: [],
        // 20
        [isaac_typescript_definitions_1.PlayerType.ESAU]: [],
        // 21
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: [],
        // 22
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: [isaac_typescript_definitions_1.CollectibleType.YUM_HEART],
        // 23
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: [isaac_typescript_definitions_1.CollectibleType.BAG_OF_CRAFTING],
        // 24
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: [isaac_typescript_definitions_1.CollectibleType.DARK_ARTS],
        // 25
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: [isaac_typescript_definitions_1.CollectibleType.HOLD],
        // 26
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: [isaac_typescript_definitions_1.CollectibleType.SUMPTORIUM],
        // 27
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: [],
        // (Berserk is not granted; the rage is innate.)
        // 28
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: [],
        // 29
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: [isaac_typescript_definitions_1.CollectibleType.FLIP],
        // 30
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: [],
        // 31
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: [],
        // 32
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: [],
        // 33
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: [],
        // 34
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: [isaac_typescript_definitions_1.CollectibleType.ABYSS],
        // 35
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: [],
        // 36
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: [isaac_typescript_definitions_1.CollectibleType.LEMEGETON],
        // 37
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: [isaac_typescript_definitions_1.CollectibleType.ANIMA_SOLA],
        // 38
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: [isaac_typescript_definitions_1.CollectibleType.FLIP],
        // (Even if the run is started as Dead Tainted Lazarus using e.g. `restart 38`, Flip is still
        // granted.)
        // 39
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: [isaac_typescript_definitions_1.CollectibleType.ANIMA_SOLA],
        // (Even if the run is started as Tainted Jacob in "Lost" form using e.g. `restart 39`, Anima Sola
        // is still granted.)
        // 40
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: []
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/characterStartingTrinketTypes.js
  var require_characterStartingTrinketTypes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/characterStartingTrinketTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTER_STARTING_TRINKET_TYPE = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHARACTER_STARTING_TRINKET_TYPE = {
        // -1
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: void 0,
        // 0
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: void 0,
        // 1
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: void 0,
        // 2
        [isaac_typescript_definitions_1.PlayerType.CAIN]: isaac_typescript_definitions_1.TrinketType.PAPER_CLIP,
        // 3
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: void 0,
        // 4
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: void 0,
        // 5
        [isaac_typescript_definitions_1.PlayerType.EVE]: void 0,
        // 6
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: isaac_typescript_definitions_1.TrinketType.CHILDS_HEART,
        // 7
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: void 0,
        // 8
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: void 0,
        // 9
        [isaac_typescript_definitions_1.PlayerType.EDEN]: void 0,
        // 10
        [isaac_typescript_definitions_1.PlayerType.LOST]: void 0,
        // 11
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: void 0,
        // 12
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: void 0,
        // 13
        [isaac_typescript_definitions_1.PlayerType.LILITH]: void 0,
        // 14
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: isaac_typescript_definitions_1.TrinketType.STORE_KEY,
        // 15
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: void 0,
        // 16
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: void 0,
        // 17
        [isaac_typescript_definitions_1.PlayerType.SOUL]: void 0,
        // 18
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: void 0,
        // 19
        [isaac_typescript_definitions_1.PlayerType.JACOB]: void 0,
        // 20
        [isaac_typescript_definitions_1.PlayerType.ESAU]: void 0,
        // 21
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: void 0,
        // 22
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: void 0,
        // 23
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: void 0,
        // 24
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: void 0,
        // 25
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: void 0,
        // 26
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: void 0,
        // 27
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: void 0,
        // 28
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: void 0,
        // 29
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: void 0,
        // 30
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: void 0,
        // 31
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: void 0,
        // 32
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: void 0,
        // 33
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: void 0,
        // 34
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: void 0,
        // 35
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: void 0,
        // 36
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: void 0,
        // 37
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: void 0,
        // 38
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: void 0,
        // 39
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: void 0,
        // 40
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: void 0
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/charactersThatStartWithAnActiveItemSet.js
  var require_charactersThatStartWithAnActiveItemSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/charactersThatStartWithAnActiveItemSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerType.ISAAC,
        isaac_typescript_definitions_1.PlayerType.MAGDALENE,
        isaac_typescript_definitions_1.PlayerType.JUDAS,
        isaac_typescript_definitions_1.PlayerType.BLUE_BABY,
        isaac_typescript_definitions_1.PlayerType.EVE,
        isaac_typescript_definitions_1.PlayerType.EDEN,
        isaac_typescript_definitions_1.PlayerType.LOST,
        isaac_typescript_definitions_1.PlayerType.LILITH,
        isaac_typescript_definitions_1.PlayerType.KEEPER,
        isaac_typescript_definitions_1.PlayerType.APOLLYON,
        isaac_typescript_definitions_1.PlayerType.EDEN_B
        // 30
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/charactersWithBlackHeartFromEternalHeartSet.js
  var require_charactersWithBlackHeartFromEternalHeartSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/charactersWithBlackHeartFromEternalHeartSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerType.DARK_JUDAS,
        isaac_typescript_definitions_1.PlayerType.JUDAS_B
        // 24
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/charactersWithFreeDevilDealsSet.js
  var require_charactersWithFreeDevilDealsSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/charactersWithFreeDevilDealsSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTERS_WITH_FREE_DEVIL_DEALS_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.CHARACTERS_WITH_FREE_DEVIL_DEALS_SET = new ReadonlySet_1.ReadonlySet([isaac_typescript_definitions_1.PlayerType.LOST, isaac_typescript_definitions_1.PlayerType.LOST_B, isaac_typescript_definitions_1.PlayerType.JACOB_2_B]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/charactersWithNoRedHeartsSet.js
  var require_charactersWithNoRedHeartsSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/charactersWithNoRedHeartsSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTERS_WITH_NO_RED_HEARTS_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.CHARACTERS_WITH_NO_RED_HEARTS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerType.BLUE_BABY,
        isaac_typescript_definitions_1.PlayerType.LOST,
        isaac_typescript_definitions_1.PlayerType.DARK_JUDAS,
        isaac_typescript_definitions_1.PlayerType.JUDAS_B,
        isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B,
        isaac_typescript_definitions_1.PlayerType.LOST_B,
        isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B,
        isaac_typescript_definitions_1.PlayerType.BETHANY_B
        // 36
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/charactersWithNoSoulHeartsSet.js
  var require_charactersWithNoSoulHeartsSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/charactersWithNoSoulHeartsSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTERS_WITH_NO_SOUL_HEARTS_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.CHARACTERS_WITH_NO_SOUL_HEARTS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerType.LOST,
        isaac_typescript_definitions_1.PlayerType.KEEPER,
        isaac_typescript_definitions_1.PlayerType.BETHANY,
        isaac_typescript_definitions_1.PlayerType.LOST_B,
        isaac_typescript_definitions_1.PlayerType.KEEPER_B
        // 33
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/lostStyleCharactersSet.js
  var require_lostStyleCharactersSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/lostStyleCharactersSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LOST_STYLE_CHARACTERS_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.LOST_STYLE_CHARACTERS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerType.LOST,
        isaac_typescript_definitions_1.PlayerType.SOUL,
        isaac_typescript_definitions_1.PlayerType.LOST_B,
        isaac_typescript_definitions_1.PlayerType.JACOB_2_B,
        isaac_typescript_definitions_1.PlayerType.SOUL_B
        // 40
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/characters.js
  var require_characters = __commonJS({
    "node_modules/isaacscript-common/dist/functions/characters.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isVanillaCharacter = exports2.isModdedCharacter = exports2.isMainCharacter = exports2.isFlyingCharacter = exports2.getCharacterStartingTrinketType = exports2.getCharacterStartingCollectibleTypes = exports2.getCharacterSpritePNGFilePath = exports2.getCharacterName = exports2.getCharacterMaxHeartContainers = exports2.getCharacterDeathAnimationName = exports2.getCharacterDamageMultiplier = exports2.characterStartsWithActiveItem = exports2.characterGetsBlackHeartFromEternalHeart = exports2.characterCanTakeFreeDevilDeals = exports2.characterCanHaveSoulHearts = exports2.characterCanHaveRedHearts = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var characterDamageMultipliers_1 = require_characterDamageMultipliers();
      var characterNames_1 = require_characterNames();
      var characterSpritePNGFileNames_1 = require_characterSpritePNGFileNames();
      var characterStartingCollectibleTypes_1 = require_characterStartingCollectibleTypes();
      var characterStartingTrinketTypes_1 = require_characterStartingTrinketTypes();
      var charactersThatStartWithAnActiveItemSet_1 = require_charactersThatStartWithAnActiveItemSet();
      var charactersWithBlackHeartFromEternalHeartSet_1 = require_charactersWithBlackHeartFromEternalHeartSet();
      var charactersWithFreeDevilDealsSet_1 = require_charactersWithFreeDevilDealsSet();
      var charactersWithNoRedHeartsSet_1 = require_charactersWithNoRedHeartsSet();
      var charactersWithNoSoulHeartsSet_1 = require_charactersWithNoSoulHeartsSet();
      var lostStyleCharactersSet_1 = require_lostStyleCharactersSet();
      var ReadonlySet_1 = require_ReadonlySet();
      var FLYING_CHARACTERS_SET = new ReadonlySet_1.ReadonlySet(constants_1.FLYING_CHARACTERS);
      var MAIN_CHARACTERS_SET = new ReadonlySet_1.ReadonlySet(constants_1.MAIN_CHARACTERS);
      var PNG_PATH_PREFIX = "characters/costumes";
      function characterCanHaveRedHearts(character) {
        return !charactersWithNoRedHeartsSet_1.CHARACTERS_WITH_NO_RED_HEARTS_SET.has(character);
      }
      exports2.characterCanHaveRedHearts = characterCanHaveRedHearts;
      function characterCanHaveSoulHearts(character) {
        return !charactersWithNoSoulHeartsSet_1.CHARACTERS_WITH_NO_SOUL_HEARTS_SET.has(character);
      }
      exports2.characterCanHaveSoulHearts = characterCanHaveSoulHearts;
      function characterCanTakeFreeDevilDeals(character) {
        return charactersWithFreeDevilDealsSet_1.CHARACTERS_WITH_FREE_DEVIL_DEALS_SET.has(character);
      }
      exports2.characterCanTakeFreeDevilDeals = characterCanTakeFreeDevilDeals;
      function characterGetsBlackHeartFromEternalHeart(character) {
        return charactersWithBlackHeartFromEternalHeartSet_1.CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET.has(character);
      }
      exports2.characterGetsBlackHeartFromEternalHeart = characterGetsBlackHeartFromEternalHeart;
      function characterStartsWithActiveItem(character) {
        return charactersThatStartWithAnActiveItemSet_1.CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET.has(character);
      }
      exports2.characterStartsWithActiveItem = characterStartsWithActiveItem;
      function getCharacterDamageMultiplier(character, hasWhoreOfBabylon = false) {
        if (character === isaac_typescript_definitions_1.PlayerType.EVE && hasWhoreOfBabylon) {
          return 1;
        }
        return characterDamageMultipliers_1.CHARACTER_DAMAGE_MULTIPLIERS[character];
      }
      exports2.getCharacterDamageMultiplier = getCharacterDamageMultiplier;
      function getCharacterDeathAnimationName(character) {
        if (lostStyleCharactersSet_1.LOST_STYLE_CHARACTERS_SET.has(character)) {
          return "LostDeath";
        }
        if (character === isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B) {
          return "ForgottenDeath";
        }
        return "Death";
      }
      exports2.getCharacterDeathAnimationName = getCharacterDeathAnimationName;
      function getCharacterMaxHeartContainers(character) {
        if (character === isaac_typescript_definitions_1.PlayerType.KEEPER) {
          return 3;
        }
        if (character === isaac_typescript_definitions_1.PlayerType.FORGOTTEN) {
          return 6;
        }
        if (character === isaac_typescript_definitions_1.PlayerType.SOUL) {
          return 6;
        }
        if (character === isaac_typescript_definitions_1.PlayerType.KEEPER_B) {
          return 2;
        }
        return 12;
      }
      exports2.getCharacterMaxHeartContainers = getCharacterMaxHeartContainers;
      function getCharacterName2(character) {
        if (isModdedCharacter(character)) {
          return "Unknown";
        }
        return characterNames_1.CHARACTER_NAMES[character];
      }
      exports2.getCharacterName = getCharacterName2;
      function getCharacterSpritePNGFilePath(character) {
        const fileName = characterSpritePNGFileNames_1.CHARACTER_SPRITE_PNG_FILE_NAMES[character];
        return `${PNG_PATH_PREFIX}/${fileName}`;
      }
      exports2.getCharacterSpritePNGFilePath = getCharacterSpritePNGFilePath;
      function getCharacterStartingCollectibleTypes(character) {
        return characterStartingCollectibleTypes_1.CHARACTER_STARTING_COLLECTIBLE_TYPES[character];
      }
      exports2.getCharacterStartingCollectibleTypes = getCharacterStartingCollectibleTypes;
      function getCharacterStartingTrinketType(character) {
        return characterStartingTrinketTypes_1.CHARACTER_STARTING_TRINKET_TYPE[character];
      }
      exports2.getCharacterStartingTrinketType = getCharacterStartingTrinketType;
      function isFlyingCharacter(character) {
        return FLYING_CHARACTERS_SET.has(character);
      }
      exports2.isFlyingCharacter = isFlyingCharacter;
      function isMainCharacter(character) {
        return MAIN_CHARACTERS_SET.has(character);
      }
      exports2.isMainCharacter = isMainCharacter;
      function isModdedCharacter(character) {
        return !isVanillaCharacter(character);
      }
      exports2.isModdedCharacter = isModdedCharacter;
      function isVanillaCharacter(character) {
        return character <= constantsFirstLast_1.LAST_VANILLA_CHARACTER;
      }
      exports2.isVanillaCharacter = isVanillaCharacter;
    }
  });

  // node_modules/isaacscript-common/dist/functions/players.js
  var require_players = __commonJS({
    "node_modules/isaacscript-common/dist/functions/players.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setBlindfold = exports2.removeDeadEyeMultiplier = exports2.isVanillaPlayer = exports2.isTaintedLazarus = exports2.isTainted = exports2.isPlayerAbleToAim = exports2.isModdedPlayer = exports2.isLost = exports2.isKeeper = exports2.isJacobOrEsau = exports2.isFirstPlayer = exports2.isEden = exports2.isDamageFromPlayer = exports2.isCharacter = exports2.isBethany = exports2.hasSpectral = exports2.hasPiercing = exports2.hasLostCurse = exports2.hasHoming = exports2.hasForm = exports2.getPlayersWithControllerIndex = exports2.getPlayersOnKeyboard = exports2.getPlayersOfType = exports2.getPlayerNumHitsRemaining = exports2.getPlayerName = exports2.getPlayerFromPtr = exports2.getPlayerFromEntity = exports2.getPlayerCloserThan = exports2.getNewestPlayer = exports2.getFinalPlayer = exports2.getClosestPlayer = exports2.getCharacters = exports2.getAzazelBrimstoneDistance = exports2.dequeueItem = exports2.canPlayerCrushRocks = exports2.anyPlayerIs = exports2.anyPlayerHoldingItem = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ReadonlySet_1 = require_ReadonlySet();
      var characters_1 = require_characters();
      var flag_1 = require_flag();
      var playerIndex_1 = require_playerIndex();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function anyPlayerHoldingItem() {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => player.IsHoldingItem());
      }
      exports2.anyPlayerHoldingItem = anyPlayerHoldingItem;
      function anyPlayerIs(...matchingCharacters) {
        const matchingCharacterSet = new ReadonlySet_1.ReadonlySet(matchingCharacters);
        const characters = getCharacters();
        return characters.some((character) => matchingCharacterSet.has(character));
      }
      exports2.anyPlayerIs = anyPlayerIs;
      function canPlayerCrushRocks(player) {
        const effects = player.GetEffects();
        return player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.LEO) || player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.THUNDER_THIGHS) || effects.HasCollectibleEffect(isaac_typescript_definitions_1.CollectibleType.MEGA_MUSH) || player.HasPlayerForm(isaac_typescript_definitions_1.PlayerForm.STOMPY);
      }
      exports2.canPlayerCrushRocks = canPlayerCrushRocks;
      function dequeueItem(player) {
        if (player.QueuedItem.Item === void 0) {
          return false;
        }
        const queue = player.QueuedItem;
        queue.Item = void 0;
        player.QueuedItem = queue;
        return true;
      }
      exports2.dequeueItem = dequeueItem;
      function getAzazelBrimstoneDistance(playerOrTearHeight) {
        const tearHeight = (0, types_1.isNumber)(playerOrTearHeight) ? playerOrTearHeight : playerOrTearHeight.TearHeight;
        return 32 - 2.5 * tearHeight;
      }
      exports2.getAzazelBrimstoneDistance = getAzazelBrimstoneDistance;
      function getCharacters() {
        const players = (0, playerIndex_1.getPlayers)();
        return players.map((player) => player.GetPlayerType());
      }
      exports2.getCharacters = getCharacters;
      function getClosestPlayer(position) {
        let closestPlayer;
        let closestDistance = Number.POSITIVE_INFINITY;
        for (const player of (0, playerIndex_1.getPlayers)()) {
          const distance = position.Distance(player.Position);
          if (distance < closestDistance) {
            closestPlayer = player;
            closestDistance = distance;
          }
        }
        (0, utils_1.assertDefined)(closestPlayer, "Failed to find the closest player.");
        return closestPlayer;
      }
      exports2.getClosestPlayer = getClosestPlayer;
      function getFinalPlayer() {
        const players = (0, playerIndex_1.getPlayers)();
        const lastPlayer = players.at(-1);
        (0, utils_1.assertDefined)(lastPlayer, "Failed to get the final player since there were 0 players.");
        return lastPlayer;
      }
      exports2.getFinalPlayer = getFinalPlayer;
      function getNewestPlayer() {
        let newestPlayer;
        let lowestFrame = Number.POSITIVE_INFINITY;
        for (const player of (0, playerIndex_1.getPlayers)()) {
          if (player.FrameCount < lowestFrame) {
            newestPlayer = player;
            lowestFrame = player.FrameCount;
          }
        }
        (0, utils_1.assertDefined)(newestPlayer, "Failed to find the newest player.");
        return newestPlayer;
      }
      exports2.getNewestPlayer = getNewestPlayer;
      function getPlayerCloserThan(position, distance) {
        const players = (0, playerIndex_1.getPlayers)();
        return players.find((player) => player.Position.Distance(position) <= distance);
      }
      exports2.getPlayerCloserThan = getPlayerCloserThan;
      function getPlayerFromEntity(entity) {
        if (entity.Parent !== void 0) {
          const player = entity.Parent.ToPlayer();
          if (player !== void 0) {
            return player;
          }
          const familiar = entity.Parent.ToFamiliar();
          if (familiar !== void 0) {
            return familiar.Player;
          }
        }
        if (entity.SpawnerEntity !== void 0) {
          const player = entity.SpawnerEntity.ToPlayer();
          if (player !== void 0) {
            return player;
          }
          const familiar = entity.SpawnerEntity.ToFamiliar();
          if (familiar !== void 0) {
            return familiar.Player;
          }
        }
        return entity.ToPlayer();
      }
      exports2.getPlayerFromEntity = getPlayerFromEntity;
      function getPlayerFromPtr(entityPtr) {
        const entity = entityPtr.Ref;
        if (entity === void 0) {
          return void 0;
        }
        return entity.ToPlayer();
      }
      exports2.getPlayerFromPtr = getPlayerFromPtr;
      function getPlayerName(player) {
        const character = player.GetPlayerType();
        return isModdedPlayer(player) ? player.GetName() : (0, characters_1.getCharacterName)(character);
      }
      exports2.getPlayerName = getPlayerName;
      function getPlayerNumHitsRemaining(player) {
        const hearts = player.GetHearts();
        const soulHearts = player.GetSoulHearts();
        const boneHearts = player.GetBoneHearts();
        const eternalHearts = player.GetEternalHearts();
        const rottenHearts = player.GetRottenHearts();
        return hearts + soulHearts + boneHearts + eternalHearts - rottenHearts;
      }
      exports2.getPlayerNumHitsRemaining = getPlayerNumHitsRemaining;
      function getPlayersOfType(...characters) {
        const charactersSet = new ReadonlySet_1.ReadonlySet(characters);
        const players = (0, playerIndex_1.getPlayers)();
        return players.filter((player) => {
          const character = player.GetPlayerType();
          return charactersSet.has(character);
        });
      }
      exports2.getPlayersOfType = getPlayersOfType;
      function getPlayersOnKeyboard() {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.filter((player) => player.ControllerIndex === isaac_typescript_definitions_1.ControllerIndex.KEYBOARD);
      }
      exports2.getPlayersOnKeyboard = getPlayersOnKeyboard;
      function getPlayersWithControllerIndex(controllerIndex) {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.filter((player) => player.ControllerIndex === controllerIndex);
      }
      exports2.getPlayersWithControllerIndex = getPlayersWithControllerIndex;
      function hasForm(player, ...playerForms) {
        return playerForms.some((playerForm) => player.HasPlayerForm(playerForm));
      }
      exports2.hasForm = hasForm;
      function hasHoming(player) {
        return (0, flag_1.hasFlag)(player.TearFlags, isaac_typescript_definitions_1.TearFlag.HOMING);
      }
      exports2.hasHoming = hasHoming;
      function hasLostCurse(player) {
        const effects = player.GetEffects();
        return effects.HasNullEffect(isaac_typescript_definitions_1.NullItemID.LOST_CURSE);
      }
      exports2.hasLostCurse = hasLostCurse;
      function hasPiercing(player) {
        return (0, flag_1.hasFlag)(player.TearFlags, isaac_typescript_definitions_1.TearFlag.PIERCING);
      }
      exports2.hasPiercing = hasPiercing;
      function hasSpectral(player) {
        return (0, flag_1.hasFlag)(player.TearFlags, isaac_typescript_definitions_1.TearFlag.SPECTRAL);
      }
      exports2.hasSpectral = hasSpectral;
      function isBethany(player) {
        const character = player.GetPlayerType();
        return character === isaac_typescript_definitions_1.PlayerType.BETHANY || character === isaac_typescript_definitions_1.PlayerType.BETHANY_B;
      }
      exports2.isBethany = isBethany;
      function isCharacter(player, ...characters) {
        const characterSet = new ReadonlySet_1.ReadonlySet(characters);
        const character = player.GetPlayerType();
        return characterSet.has(character);
      }
      exports2.isCharacter = isCharacter;
      function isDamageFromPlayer(damageSource) {
        const player = damageSource.ToPlayer();
        if (player !== void 0) {
          return true;
        }
        const indirectPlayer = getPlayerFromEntity(damageSource);
        return indirectPlayer !== void 0;
      }
      exports2.isDamageFromPlayer = isDamageFromPlayer;
      function isEden(player) {
        const character = player.GetPlayerType();
        return character === isaac_typescript_definitions_1.PlayerType.EDEN || character === isaac_typescript_definitions_1.PlayerType.EDEN_B;
      }
      exports2.isEden = isEden;
      function isFirstPlayer(player) {
        return (0, playerIndex_1.getPlayerIndexVanilla)(player) === 0;
      }
      exports2.isFirstPlayer = isFirstPlayer;
      function isJacobOrEsau(player) {
        const character = player.GetPlayerType();
        return character === isaac_typescript_definitions_1.PlayerType.JACOB || character === isaac_typescript_definitions_1.PlayerType.ESAU;
      }
      exports2.isJacobOrEsau = isJacobOrEsau;
      function isKeeper(player) {
        const character = player.GetPlayerType();
        return character === isaac_typescript_definitions_1.PlayerType.KEEPER || character === isaac_typescript_definitions_1.PlayerType.KEEPER_B;
      }
      exports2.isKeeper = isKeeper;
      function isLost(player) {
        const character = player.GetPlayerType();
        return character === isaac_typescript_definitions_1.PlayerType.LOST || character === isaac_typescript_definitions_1.PlayerType.LOST_B;
      }
      exports2.isLost = isLost;
      function isModdedPlayer(player) {
        return !isVanillaPlayer(player);
      }
      exports2.isModdedPlayer = isModdedPlayer;
      function isPlayerAbleToAim(player) {
        return player.IsExtraAnimationFinished();
      }
      exports2.isPlayerAbleToAim = isPlayerAbleToAim;
      function isTainted(player) {
        const character = player.GetPlayerType();
        return isVanillaPlayer(player) ? character >= isaac_typescript_definitions_1.PlayerType.ISAAC_B : isTaintedModded(player);
      }
      exports2.isTainted = isTainted;
      function isTaintedLazarus(player) {
        const character = player.GetPlayerType();
        return character === isaac_typescript_definitions_1.PlayerType.LAZARUS_B || character === isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B;
      }
      exports2.isTaintedLazarus = isTaintedLazarus;
      function isVanillaPlayer(player) {
        const character = player.GetPlayerType();
        return (0, characters_1.isVanillaCharacter)(character);
      }
      exports2.isVanillaPlayer = isVanillaPlayer;
      function removeDeadEyeMultiplier(player) {
        (0, utils_1.repeat)(100, () => {
          player.ClearDeadEyeCharge();
        });
      }
      exports2.removeDeadEyeMultiplier = removeDeadEyeMultiplier;
      function setBlindfold(player, enabled, modifyCostume = true) {
        const character = player.GetPlayerType();
        const challenge = Isaac.GetChallenge();
        if (enabled) {
          cachedClasses_1.game.Challenge = isaac_typescript_definitions_1.Challenge.SOLAR_SYSTEM;
          player.ChangePlayerType(character);
          cachedClasses_1.game.Challenge = challenge;
          if (!modifyCostume) {
            player.TryRemoveNullCostume(isaac_typescript_definitions_1.NullItemID.BLINDFOLD);
          }
        } else {
          cachedClasses_1.game.Challenge = isaac_typescript_definitions_1.Challenge.NULL;
          player.ChangePlayerType(character);
          cachedClasses_1.game.Challenge = challenge;
          if (modifyCostume) {
            player.TryRemoveNullCostume(isaac_typescript_definitions_1.NullItemID.BLINDFOLD);
          }
        }
      }
      exports2.setBlindfold = setBlindfold;
      function isTaintedModded(player) {
        const character = player.GetPlayerType();
        const name = player.GetName();
        const taintedCharacter = Isaac.GetPlayerTypeByName(name, true);
        return character === taintedCharacter;
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostCursedTeleport.js
  var require_PostCursedTeleport = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostCursedTeleport.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostCursedTeleport = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var flag_1 = require_flag();
      var frames_1 = require_frames();
      var playerDataStructures_1 = require_playerDataStructures();
      var players_1 = require_players();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersDamageFrameMap: /* @__PURE__ */ new Map()
        },
        level: {
          numSacrifices: 0
        }
      };
      var PostCursedTeleport = class extends CustomCallback_1.CustomCallback {
        v = v;
        shouldFire = shouldFire_1.shouldFirePlayer;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER, this.entityTakeDmgPlayer],
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED,
              this.postPlayerRenderReorderedPlayer,
              [isaac_typescript_definitions_1.PlayerVariant.PLAYER]
              // Co-op babies cannot perform Cursed Eye teleports.
            ]
          ];
        }
        // ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER
        entityTakeDmgPlayer = (player, _amount, damageFlags, _source, _countdownFrames) => {
          this.incrementNumSacrifices(damageFlags);
          this.setDamageFrame(player, damageFlags);
          return void 0;
        };
        incrementNumSacrifices(damageFlags) {
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const isSpikeDamage = (0, flag_1.hasFlag)(damageFlags, isaac_typescript_definitions_1.DamageFlag.SPIKES);
          if (roomType === isaac_typescript_definitions_1.RoomType.SACRIFICE && isSpikeDamage) {
            v.level.numSacrifices++;
          }
        }
        setDamageFrame(player, damageFlags) {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const trackingArray = (0, playerDataStructures_1.mapGetPlayer)(v.run.playersDamageFrameMap, player);
          if (trackingArray !== void 0) {
            const [lastDamageFrame, callbackFiredOnThisFrame] = trackingArray;
            if (lastDamageFrame === gameFrameCount && callbackFiredOnThisFrame) {
              return;
            }
          }
          if (this.isPotentialNaturalTeleportFromSacrificeRoom(damageFlags)) {
            return;
          }
          const newTrackingArray = [gameFrameCount, false];
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersDamageFrameMap, player, newTrackingArray);
        }
        isPotentialNaturalTeleportFromSacrificeRoom(damageFlags) {
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const isSpikeDamage = (0, flag_1.hasFlag)(damageFlags, isaac_typescript_definitions_1.DamageFlag.SPIKES);
          return roomType === isaac_typescript_definitions_1.RoomType.SACRIFICE && isSpikeDamage && (v.level.numSacrifices === 6 || v.level.numSacrifices >= 12);
        }
        // ModCallbackCustom.POST_PLAYER_RENDER_REORDERED
        // PlayerVariant.PLAYER (0)
        postPlayerRenderReorderedPlayer = (player, _renderOffset) => {
          const trackingArray = (0, playerDataStructures_1.mapGetPlayer)(v.run.playersDamageFrameMap, player);
          if (trackingArray === void 0) {
            return;
          }
          const [lastDamageFrame, callbackActivatedOnThisFrame] = trackingArray;
          if (!this.playerIsTeleportingFromCursedTeleport(player, lastDamageFrame)) {
            return;
          }
          if (callbackActivatedOnThisFrame) {
            return;
          }
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const newTrackingArray = [gameFrameCount, true];
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersDamageFrameMap, player, newTrackingArray);
          this.fire(player);
        };
        playerIsTeleportingFromCursedTeleport(player, lastDamageFrame) {
          if (!(0, frames_1.onGameFrame)(lastDamageFrame)) {
            return false;
          }
          const sprite = player.GetSprite();
          if (!sprite.IsPlaying("TeleportUp") || sprite.GetFrame() !== 1) {
            return false;
          }
          if (player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.CURSED_EYE)) {
            return true;
          }
          const numHitsRemaining = (0, players_1.getPlayerNumHitsRemaining)(player);
          if (player.HasTrinket(isaac_typescript_definitions_1.TrinketType.CURSED_SKULL) && numHitsRemaining === 1) {
            return true;
          }
          return false;
        }
      };
      exports2.PostCursedTeleport = PostCursedTeleport;
    }
  });

  // node_modules/isaacscript-common/dist/enums/ISCFeature.js
  var require_ISCFeature = __commonJS({
    "node_modules/isaacscript-common/dist/enums/ISCFeature.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ISCFeature = void 0;
      var ISCFeature;
      (function(ISCFeature2) {
        ISCFeature2[ISCFeature2["CUSTOM_REVIVE"] = 0] = "CUSTOM_REVIVE";
        ISCFeature2[ISCFeature2["ESAU_JR_DETECTION"] = 1] = "ESAU_JR_DETECTION";
        ISCFeature2[ISCFeature2["FLIP_DETECTION"] = 2] = "FLIP_DETECTION";
        ISCFeature2[ISCFeature2["GRID_ENTITY_COLLISION_DETECTION"] = 3] = "GRID_ENTITY_COLLISION_DETECTION";
        ISCFeature2[ISCFeature2["GRID_ENTITY_RENDER_DETECTION"] = 4] = "GRID_ENTITY_RENDER_DETECTION";
        ISCFeature2[ISCFeature2["GRID_ENTITY_UPDATE_DETECTION"] = 5] = "GRID_ENTITY_UPDATE_DETECTION";
        ISCFeature2[ISCFeature2["GAME_REORDERED_CALLBACKS"] = 6] = "GAME_REORDERED_CALLBACKS";
        ISCFeature2[ISCFeature2["ITEM_PICKUP_DETECTION"] = 7] = "ITEM_PICKUP_DETECTION";
        ISCFeature2[ISCFeature2["PICKUP_CHANGE_DETECTION"] = 8] = "PICKUP_CHANGE_DETECTION";
        ISCFeature2[ISCFeature2["PLAYER_COLLECTIBLE_DETECTION"] = 9] = "PLAYER_COLLECTIBLE_DETECTION";
        ISCFeature2[ISCFeature2["PLAYER_REORDERED_CALLBACKS"] = 10] = "PLAYER_REORDERED_CALLBACKS";
        ISCFeature2[ISCFeature2["SLOT_DESTROYED_DETECTION"] = 11] = "SLOT_DESTROYED_DETECTION";
        ISCFeature2[ISCFeature2["SLOT_RENDER_DETECTION"] = 12] = "SLOT_RENDER_DETECTION";
        ISCFeature2[ISCFeature2["SLOT_UPDATE_DETECTION"] = 13] = "SLOT_UPDATE_DETECTION";
        ISCFeature2[ISCFeature2["CHARACTER_HEALTH_CONVERSION"] = 14] = "CHARACTER_HEALTH_CONVERSION";
        ISCFeature2[ISCFeature2["CHARACTER_STATS"] = 15] = "CHARACTER_STATS";
        ISCFeature2[ISCFeature2["COLLECTIBLE_ITEM_POOL_TYPE"] = 16] = "COLLECTIBLE_ITEM_POOL_TYPE";
        ISCFeature2[ISCFeature2["CUSTOM_GRID_ENTITIES"] = 17] = "CUSTOM_GRID_ENTITIES";
        ISCFeature2[ISCFeature2["CUSTOM_ITEM_POOLS"] = 18] = "CUSTOM_ITEM_POOLS";
        ISCFeature2[ISCFeature2["CUSTOM_HOTKEYS"] = 19] = "CUSTOM_HOTKEYS";
        ISCFeature2[ISCFeature2["CUSTOM_PICKUPS"] = 20] = "CUSTOM_PICKUPS";
        ISCFeature2[ISCFeature2["CUSTOM_STAGES"] = 21] = "CUSTOM_STAGES";
        ISCFeature2[ISCFeature2["CUSTOM_TRAPDOORS"] = 22] = "CUSTOM_TRAPDOORS";
        ISCFeature2[ISCFeature2["DEBUG_DISPLAY"] = 23] = "DEBUG_DISPLAY";
        ISCFeature2[ISCFeature2["DEPLOY_JSON_ROOM"] = 24] = "DEPLOY_JSON_ROOM";
        ISCFeature2[ISCFeature2["DISABLE_ALL_SOUND"] = 25] = "DISABLE_ALL_SOUND";
        ISCFeature2[ISCFeature2["DISABLE_INPUTS"] = 26] = "DISABLE_INPUTS";
        ISCFeature2[ISCFeature2["EDEN_STARTING_STATS_HEALTH"] = 27] = "EDEN_STARTING_STATS_HEALTH";
        ISCFeature2[ISCFeature2["FADE_IN_REMOVER"] = 28] = "FADE_IN_REMOVER";
        ISCFeature2[ISCFeature2["FAST_RESET"] = 29] = "FAST_RESET";
        ISCFeature2[ISCFeature2["FLYING_DETECTION"] = 30] = "FLYING_DETECTION";
        ISCFeature2[ISCFeature2["FORGOTTEN_SWITCH"] = 31] = "FORGOTTEN_SWITCH";
        ISCFeature2[ISCFeature2["EXTRA_CONSOLE_COMMANDS"] = 32] = "EXTRA_CONSOLE_COMMANDS";
        ISCFeature2[ISCFeature2["ITEM_POOL_DETECTION"] = 33] = "ITEM_POOL_DETECTION";
        ISCFeature2[ISCFeature2["MODDED_ELEMENT_DETECTION"] = 34] = "MODDED_ELEMENT_DETECTION";
        ISCFeature2[ISCFeature2["MODDED_ELEMENT_SETS"] = 35] = "MODDED_ELEMENT_SETS";
        ISCFeature2[ISCFeature2["NO_SIREN_STEAL"] = 36] = "NO_SIREN_STEAL";
        ISCFeature2[ISCFeature2["PAUSE"] = 37] = "PAUSE";
        ISCFeature2[ISCFeature2["PERSISTENT_ENTITIES"] = 38] = "PERSISTENT_ENTITIES";
        ISCFeature2[ISCFeature2["PICKUP_INDEX_CREATION"] = 39] = "PICKUP_INDEX_CREATION";
        ISCFeature2[ISCFeature2["PLAYER_COLLECTIBLE_TRACKING"] = 40] = "PLAYER_COLLECTIBLE_TRACKING";
        ISCFeature2[ISCFeature2["PONY_DETECTION"] = 41] = "PONY_DETECTION";
        ISCFeature2[ISCFeature2["PRESS_INPUT"] = 42] = "PRESS_INPUT";
        ISCFeature2[ISCFeature2["PREVENT_CHILD_ENTITIES"] = 43] = "PREVENT_CHILD_ENTITIES";
        ISCFeature2[ISCFeature2["PREVENT_GRID_ENTITY_RESPAWN"] = 44] = "PREVENT_GRID_ENTITY_RESPAWN";
        ISCFeature2[ISCFeature2["RERUN_DETECTION"] = 45] = "RERUN_DETECTION";
        ISCFeature2[ISCFeature2["ROOM_CLEAR_FRAME"] = 46] = "ROOM_CLEAR_FRAME";
        ISCFeature2[ISCFeature2["ROOM_HISTORY"] = 47] = "ROOM_HISTORY";
        ISCFeature2[ISCFeature2["RUN_IN_N_FRAMES"] = 48] = "RUN_IN_N_FRAMES";
        ISCFeature2[ISCFeature2["RUN_NEXT_ROOM"] = 49] = "RUN_NEXT_ROOM";
        ISCFeature2[ISCFeature2["RUN_NEXT_RUN"] = 50] = "RUN_NEXT_RUN";
        ISCFeature2[ISCFeature2["SAVE_DATA_MANAGER"] = 51] = "SAVE_DATA_MANAGER";
        ISCFeature2[ISCFeature2["SPAWN_ALT_ROCK_REWARDS"] = 52] = "SPAWN_ALT_ROCK_REWARDS";
        ISCFeature2[ISCFeature2["STAGE_HISTORY"] = 53] = "STAGE_HISTORY";
        ISCFeature2[ISCFeature2["START_AMBUSH"] = 54] = "START_AMBUSH";
        ISCFeature2[ISCFeature2["TAINTED_LAZARUS_PLAYERS"] = 55] = "TAINTED_LAZARUS_PLAYERS";
        ISCFeature2[ISCFeature2["UNLOCK_ACHIEVEMENTS_DETECTION"] = 56] = "UNLOCK_ACHIEVEMENTS_DETECTION";
      })(ISCFeature || (exports2.ISCFeature = ISCFeature = {}));
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostCustomRevive.js
  var require_PostCustomRevive = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostCustomRevive.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostCustomRevive = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostCustomRevive = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.CUSTOM_REVIVE];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_player, revivalType] = fireArgs;
          const [callbackRevivalType] = optionalArgs;
          return callbackRevivalType === void 0 || revivalType === callbackRevivalType;
        };
      };
      exports2.PostCustomRevive = PostCustomRevive;
    }
  });

  // node_modules/isaacscript-common/dist/objects/directionNames.js
  var require_directionNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/directionNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DIRECTION_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DIRECTION_NAMES = {
        [isaac_typescript_definitions_1.Direction.NO_DIRECTION]: void 0,
        [isaac_typescript_definitions_1.Direction.LEFT]: "left",
        [isaac_typescript_definitions_1.Direction.UP]: "up",
        [isaac_typescript_definitions_1.Direction.RIGHT]: "right",
        [isaac_typescript_definitions_1.Direction.DOWN]: "down"
        // 3
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/directionToDegrees.js
  var require_directionToDegrees = __commonJS({
    "node_modules/isaacscript-common/dist/objects/directionToDegrees.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DIRECTION_TO_DEGREES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DIRECTION_TO_DEGREES = {
        [isaac_typescript_definitions_1.Direction.NO_DIRECTION]: 0,
        [isaac_typescript_definitions_1.Direction.LEFT]: 180,
        [isaac_typescript_definitions_1.Direction.UP]: 270,
        [isaac_typescript_definitions_1.Direction.RIGHT]: 0,
        [isaac_typescript_definitions_1.Direction.DOWN]: 90
        // 3
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/directionToMoveAction.js
  var require_directionToMoveAction = __commonJS({
    "node_modules/isaacscript-common/dist/objects/directionToMoveAction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DIRECTION_TO_MOVE_ACTION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DIRECTION_TO_MOVE_ACTION = {
        [isaac_typescript_definitions_1.Direction.NO_DIRECTION]: void 0,
        [isaac_typescript_definitions_1.Direction.LEFT]: isaac_typescript_definitions_1.ButtonAction.LEFT,
        [isaac_typescript_definitions_1.Direction.UP]: isaac_typescript_definitions_1.ButtonAction.UP,
        [isaac_typescript_definitions_1.Direction.RIGHT]: isaac_typescript_definitions_1.ButtonAction.RIGHT,
        [isaac_typescript_definitions_1.Direction.DOWN]: isaac_typescript_definitions_1.ButtonAction.DOWN
        // 3
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/directionToShootAction.js
  var require_directionToShootAction = __commonJS({
    "node_modules/isaacscript-common/dist/objects/directionToShootAction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DIRECTION_TO_SHOOT_ACTION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DIRECTION_TO_SHOOT_ACTION = {
        [isaac_typescript_definitions_1.Direction.NO_DIRECTION]: void 0,
        [isaac_typescript_definitions_1.Direction.LEFT]: isaac_typescript_definitions_1.ButtonAction.SHOOT_LEFT,
        [isaac_typescript_definitions_1.Direction.UP]: isaac_typescript_definitions_1.ButtonAction.SHOOT_UP,
        [isaac_typescript_definitions_1.Direction.RIGHT]: isaac_typescript_definitions_1.ButtonAction.SHOOT_RIGHT,
        [isaac_typescript_definitions_1.Direction.DOWN]: isaac_typescript_definitions_1.ButtonAction.SHOOT_DOWN
        // 3
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/directionToVector.js
  var require_directionToVector = __commonJS({
    "node_modules/isaacscript-common/dist/objects/directionToVector.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DIRECTION_TO_VECTOR = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var readOnly_1 = require_readOnly();
      exports2.DIRECTION_TO_VECTOR = {
        [isaac_typescript_definitions_1.Direction.NO_DIRECTION]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.Direction.LEFT]: (0, readOnly_1.newReadonlyVector)(-1, 0),
        [isaac_typescript_definitions_1.Direction.UP]: (0, readOnly_1.newReadonlyVector)(0, -1),
        [isaac_typescript_definitions_1.Direction.RIGHT]: (0, readOnly_1.newReadonlyVector)(1, 0),
        [isaac_typescript_definitions_1.Direction.DOWN]: (0, readOnly_1.newReadonlyVector)(0, 1)
        // 3
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/direction.js
  var require_direction = __commonJS({
    "node_modules/isaacscript-common/dist/functions/direction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getDirectionName = exports2.directionToVector = exports2.directionToShootAction = exports2.directionToMoveAction = exports2.directionToDegrees = exports2.angleToDirection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var directionNames_1 = require_directionNames();
      var directionToDegrees_1 = require_directionToDegrees();
      var directionToMoveAction_1 = require_directionToMoveAction();
      var directionToShootAction_1 = require_directionToShootAction();
      var directionToVector_1 = require_directionToVector();
      function angleToDirection(angleDegrees) {
        let positiveDegrees = angleDegrees;
        while (positiveDegrees < 0) {
          positiveDegrees += 360;
        }
        const normalizedDegrees = positiveDegrees % 360;
        if (normalizedDegrees < 45) {
          return isaac_typescript_definitions_1.Direction.RIGHT;
        }
        if (normalizedDegrees < 135) {
          return isaac_typescript_definitions_1.Direction.DOWN;
        }
        if (normalizedDegrees < 225) {
          return isaac_typescript_definitions_1.Direction.LEFT;
        }
        if (normalizedDegrees < 315) {
          return isaac_typescript_definitions_1.Direction.UP;
        }
        return isaac_typescript_definitions_1.Direction.RIGHT;
      }
      exports2.angleToDirection = angleToDirection;
      function directionToDegrees(direction) {
        return directionToDegrees_1.DIRECTION_TO_DEGREES[direction];
      }
      exports2.directionToDegrees = directionToDegrees;
      function directionToMoveAction(direction) {
        return directionToMoveAction_1.DIRECTION_TO_MOVE_ACTION[direction];
      }
      exports2.directionToMoveAction = directionToMoveAction;
      function directionToShootAction(direction) {
        return directionToShootAction_1.DIRECTION_TO_SHOOT_ACTION[direction];
      }
      exports2.directionToShootAction = directionToShootAction;
      function directionToVector(direction) {
        return directionToVector_1.DIRECTION_TO_VECTOR[direction];
      }
      exports2.directionToVector = directionToVector;
      function getDirectionName(direction) {
        return directionNames_1.DIRECTION_NAMES[direction];
      }
      exports2.getDirectionName = getDirectionName;
    }
  });

  // node_modules/isaacscript-common/dist/functions/math.js
  var require_math = __commonJS({
    "node_modules/isaacscript-common/dist/functions/math.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.tanh = exports2.splitNumber = exports2.sign = exports2.round = exports2.lerpAngleDegrees = exports2.lerp = exports2.isOdd = exports2.isEven = exports2.isCircleIntersectingRectangle = exports2.inRectangle = exports2.getCircleDiscretizedPoints = exports2.getAngleDifference = exports2.clamp = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var direction_1 = require_direction();
      function clamp(num, min, max) {
        return Math.max(min, Math.min(num, max));
      }
      exports2.clamp = clamp;
      function getAngleDifference(angle1, angle2) {
        const subtractedAngle = angle1 - angle2;
        return (subtractedAngle + 180) % 360 - 180;
      }
      exports2.getAngleDifference = getAngleDifference;
      function getCircleDiscretizedPoints(centerPos, radius, numPoints, xMultiplier = 1, yMultiplier = 1, initialDirection = isaac_typescript_definitions_1.Direction.UP) {
        const vector = (0, direction_1.directionToVector)(initialDirection);
        const initialPosition = vector.mul(radius);
        const positions = [];
        for (let i = 0; i < numPoints; i++) {
          const rotatedPosition = initialPosition.Rotated(i * 360 / numPoints);
          rotatedPosition.X *= xMultiplier;
          rotatedPosition.Y *= yMultiplier;
          const positionFromCenter = centerPos.add(rotatedPosition);
          positions.push(positionFromCenter);
        }
        return positions;
      }
      exports2.getCircleDiscretizedPoints = getCircleDiscretizedPoints;
      function inRectangle(position, topLeft, bottomRight) {
        return position.X >= topLeft.X && position.X <= bottomRight.X && position.Y >= topLeft.Y && position.Y <= bottomRight.Y;
      }
      exports2.inRectangle = inRectangle;
      function isCircleIntersectingRectangle(circleCenter, circleRadius, rectangleTopLeft, rectangleBottomRight) {
        const nearestX = Math.max(rectangleTopLeft.X, Math.min(circleCenter.X, rectangleBottomRight.X));
        const nearestY = Math.max(rectangleTopLeft.Y, Math.min(circleCenter.Y, rectangleBottomRight.Y));
        const nearestPointToCircleOnRectangle = Vector(nearestX, nearestY);
        const distanceToCenterOfCircle = nearestPointToCircleOnRectangle.Distance(circleCenter);
        return distanceToCenterOfCircle <= circleRadius;
      }
      exports2.isCircleIntersectingRectangle = isCircleIntersectingRectangle;
      function isEven(num) {
        return (num & 1) === 0;
      }
      exports2.isEven = isEven;
      function isOdd(num) {
        return (num & 1) === 1;
      }
      exports2.isOdd = isOdd;
      function lerp(a2, b2, pos) {
        return a2 + (b2 - a2) * pos;
      }
      exports2.lerp = lerp;
      function lerpAngleDegrees(aStart, aEnd, percent) {
        return aStart + getAngleDifference(aStart, aEnd) * percent;
      }
      exports2.lerpAngleDegrees = lerpAngleDegrees;
      function round(num, numDecimalPlaces = 0) {
        const roundedString = string.format(`%.${numDecimalPlaces}f`, num);
        const roundedNum = tonumber(roundedString);
        return roundedNum ?? 0;
      }
      exports2.round = round;
      function sign(n) {
        if (n > 0) {
          return 1;
        }
        if (n < 0) {
          return -1;
        }
        return 0;
      }
      exports2.sign = sign;
      function splitNumber(num, size, startAtZero = false) {
        if (num <= 0) {
          error(`The number to split needs to be a positive number and is instead: ${num}`);
        }
        if (size <= 0) {
          error(`The size to split needs to be a positive number and is instead: ${num}`);
        }
        const chunks = [];
        let start = startAtZero ? 0 : 1;
        while (start <= num) {
          const end = Math.min(start + size - 1, num);
          chunks.push([start, end]);
          start += size;
        }
        return chunks;
      }
      exports2.splitNumber = splitNumber;
      function tanh(x) {
        return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
      }
      exports2.tanh = tanh;
    }
  });

  // node_modules/isaacscript-common/dist/functions/effects.js
  var require_effects = __commonJS({
    "node_modules/isaacscript-common/dist/functions/effects.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isCloseEnoughToTriggerDiceFloor = exports2.DICE_FLOOR_TRIGGER_SQUARE_SIZE = void 0;
      var math_1 = require_math();
      exports2.DICE_FLOOR_TRIGGER_SQUARE_SIZE = 75;
      function isCloseEnoughToTriggerDiceFloor(player, diceFloor) {
        const topLeft = diceFloor.Position.add(Vector(-exports2.DICE_FLOOR_TRIGGER_SQUARE_SIZE, -exports2.DICE_FLOOR_TRIGGER_SQUARE_SIZE));
        const bottomRight = diceFloor.Position.add(Vector(exports2.DICE_FLOOR_TRIGGER_SQUARE_SIZE, exports2.DICE_FLOOR_TRIGGER_SQUARE_SIZE));
        return (0, math_1.inRectangle)(player.Position, topLeft, bottomRight);
      }
      exports2.isCloseEnoughToTriggerDiceFloor = isCloseEnoughToTriggerDiceFloor;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostDiceRoomActivated.js
  var require_PostDiceRoomActivated = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostDiceRoomActivated.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostDiceRoomActivated = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var effects_1 = require_effects();
      var players_1 = require_players();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          diceRoomActivated: false
        }
      };
      var PostDiceRoomActivated = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 55
            [
              isaac_typescript_definitions_1.ModCallback.POST_EFFECT_UPDATE,
              this.postEffectUpdateDiceFloor,
              [isaac_typescript_definitions_1.EffectVariant.DICE_FLOOR]
            ]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_player, diceFloorSubType] = fireArgs;
          const [callbackDiceFloorSubType] = optionalArgs;
          return callbackDiceFloorSubType === void 0 || diceFloorSubType === callbackDiceFloorSubType;
        };
        // ModCallback.POST_EFFECT_UPDATE (55)
        // EffectVariant.DICE_FLOOR (76)
        postEffectUpdateDiceFloor = (effect) => {
          if (v.room.diceRoomActivated) {
            return;
          }
          if (effect.FrameCount === 0) {
            return;
          }
          const closestPlayer = (0, players_1.getClosestPlayer)(effect.Position);
          if ((0, effects_1.isCloseEnoughToTriggerDiceFloor)(closestPlayer, effect)) {
            v.room.diceRoomActivated = true;
            this.fire(closestPlayer, effect.SubType);
          }
        };
      };
      exports2.PostDiceRoomActivated = PostDiceRoomActivated;
    }
  });

  // node_modules/isaacscript-common/dist/objects/doorSlotFlagToDoorSlot.js
  var require_doorSlotFlagToDoorSlot = __commonJS({
    "node_modules/isaacscript-common/dist/objects/doorSlotFlagToDoorSlot.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DOOR_SLOT_FLAG_TO_DOOR_SLOT = exports2.DEFAULT_DOOR_SLOT = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_DOOR_SLOT = isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT;
      exports2.DOOR_SLOT_FLAG_TO_DOOR_SLOT = {
        [isaac_typescript_definitions_1.DoorSlotFlag.LEFT_0]: isaac_typescript_definitions_1.DoorSlot.LEFT_0,
        [isaac_typescript_definitions_1.DoorSlotFlag.UP_0]: isaac_typescript_definitions_1.DoorSlot.UP_0,
        [isaac_typescript_definitions_1.DoorSlotFlag.RIGHT_0]: isaac_typescript_definitions_1.DoorSlot.RIGHT_0,
        [isaac_typescript_definitions_1.DoorSlotFlag.DOWN_0]: isaac_typescript_definitions_1.DoorSlot.DOWN_0,
        [isaac_typescript_definitions_1.DoorSlotFlag.LEFT_1]: isaac_typescript_definitions_1.DoorSlot.LEFT_1,
        [isaac_typescript_definitions_1.DoorSlotFlag.UP_1]: isaac_typescript_definitions_1.DoorSlot.UP_1,
        [isaac_typescript_definitions_1.DoorSlotFlag.RIGHT_1]: isaac_typescript_definitions_1.DoorSlot.RIGHT_1,
        [isaac_typescript_definitions_1.DoorSlotFlag.DOWN_1]: isaac_typescript_definitions_1.DoorSlot.DOWN_1
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/doorSlotToDirection.js
  var require_doorSlotToDirection = __commonJS({
    "node_modules/isaacscript-common/dist/objects/doorSlotToDirection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DOOR_SLOT_TO_DIRECTION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DOOR_SLOT_TO_DIRECTION = {
        [isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT]: isaac_typescript_definitions_1.Direction.NO_DIRECTION,
        [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: isaac_typescript_definitions_1.Direction.LEFT,
        [isaac_typescript_definitions_1.DoorSlot.UP_0]: isaac_typescript_definitions_1.Direction.UP,
        [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: isaac_typescript_definitions_1.Direction.RIGHT,
        [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: isaac_typescript_definitions_1.Direction.DOWN,
        [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: isaac_typescript_definitions_1.Direction.LEFT,
        [isaac_typescript_definitions_1.DoorSlot.UP_1]: isaac_typescript_definitions_1.Direction.UP,
        [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: isaac_typescript_definitions_1.Direction.RIGHT,
        [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: isaac_typescript_definitions_1.Direction.DOWN
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/doorSlotToDoorSlotFlag.js
  var require_doorSlotToDoorSlotFlag = __commonJS({
    "node_modules/isaacscript-common/dist/objects/doorSlotToDoorSlotFlag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DOOR_SLOT_TO_DOOR_SLOT_FLAG = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DOOR_SLOT_TO_DOOR_SLOT_FLAG = {
        [isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT]: isaac_typescript_definitions_1.DoorSlotFlagZero,
        [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: isaac_typescript_definitions_1.DoorSlotFlag.LEFT_0,
        [isaac_typescript_definitions_1.DoorSlot.UP_0]: isaac_typescript_definitions_1.DoorSlotFlag.UP_0,
        [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: isaac_typescript_definitions_1.DoorSlotFlag.RIGHT_0,
        [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: isaac_typescript_definitions_1.DoorSlotFlag.DOWN_0,
        [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: isaac_typescript_definitions_1.DoorSlotFlag.LEFT_1,
        [isaac_typescript_definitions_1.DoorSlot.UP_1]: isaac_typescript_definitions_1.DoorSlotFlag.UP_1,
        [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: isaac_typescript_definitions_1.DoorSlotFlag.RIGHT_1,
        [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: isaac_typescript_definitions_1.DoorSlotFlag.DOWN_1
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/oppositeDoorSlots.js
  var require_oppositeDoorSlots = __commonJS({
    "node_modules/isaacscript-common/dist/objects/oppositeDoorSlots.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.OPPOSITE_DOOR_SLOTS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.OPPOSITE_DOOR_SLOTS = {
        [isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT]: void 0,
        [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: isaac_typescript_definitions_1.DoorSlot.RIGHT_0,
        [isaac_typescript_definitions_1.DoorSlot.UP_0]: isaac_typescript_definitions_1.DoorSlot.DOWN_0,
        [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: isaac_typescript_definitions_1.DoorSlot.LEFT_0,
        [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: isaac_typescript_definitions_1.DoorSlot.UP_0,
        [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: isaac_typescript_definitions_1.DoorSlot.RIGHT_1,
        [isaac_typescript_definitions_1.DoorSlot.UP_1]: isaac_typescript_definitions_1.DoorSlot.DOWN_1,
        [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: isaac_typescript_definitions_1.DoorSlot.LEFT_1,
        [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: isaac_typescript_definitions_1.DoorSlot.UP_1
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeToDoorSlotCoordinates.js
  var require_roomShapeToDoorSlotCoordinates = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeToDoorSlotCoordinates.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_DOOR_SLOT_COORDINATES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.ROOM_SHAPE_TO_DOOR_SLOT_COORDINATES = {
        // 1
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [13, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 7]
          // 3
        },
        // 2
        [isaac_typescript_definitions_1.RoomShape.IH]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [13, 3]
          // 2
        },
        // 3
        [isaac_typescript_definitions_1.RoomShape.IV]: {
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 7]
          // 3
        },
        // 4
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [13, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 14],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: [-1, 10],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: [13, 10]
          // 6
        },
        // 5
        [isaac_typescript_definitions_1.RoomShape.IIV]: {
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 14]
          // 3
        },
        // 6
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [26, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 7],
          [isaac_typescript_definitions_1.DoorSlot.UP_1]: [19, -1],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: [19, 7]
          // 7
        },
        // 7
        [isaac_typescript_definitions_1.RoomShape.IIH]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [26, 3]
          // 2
        },
        // 8
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [26, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 14],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: [-1, 10],
          [isaac_typescript_definitions_1.DoorSlot.UP_1]: [19, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: [26, 10],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: [19, 14]
          // 7
        },
        // 9
        [isaac_typescript_definitions_1.RoomShape.LTL]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [12, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, 6],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [26, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 14],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: [-1, 10],
          [isaac_typescript_definitions_1.DoorSlot.UP_1]: [19, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: [26, 10],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: [19, 14]
          // 7
        },
        // 10
        [isaac_typescript_definitions_1.RoomShape.LTR]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [13, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 14],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: [-1, 10],
          [isaac_typescript_definitions_1.DoorSlot.UP_1]: [19, 6],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: [26, 10],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: [19, 14]
          // 7
        },
        // 11
        [isaac_typescript_definitions_1.RoomShape.LBL]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [26, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 7],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: [12, 10],
          [isaac_typescript_definitions_1.DoorSlot.UP_1]: [19, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: [26, 10],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: [19, 14]
          // 7
        },
        // 12
        [isaac_typescript_definitions_1.RoomShape.LBR]: {
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0]: [-1, 3],
          [isaac_typescript_definitions_1.DoorSlot.UP_0]: [6, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0]: [26, 3],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0]: [6, 14],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1]: [-1, 10],
          [isaac_typescript_definitions_1.DoorSlot.UP_1]: [19, -1],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1]: [13, 10],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1]: [19, 7]
          // 7
        }
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeToDoorSlots.js
  var require_roomShapeToDoorSlots = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeToDoorSlots.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_DOOR_SLOTS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      var ALL_DOOR_SLOTS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.DoorSlot.LEFT_0,
        isaac_typescript_definitions_1.DoorSlot.UP_0,
        isaac_typescript_definitions_1.DoorSlot.RIGHT_0,
        isaac_typescript_definitions_1.DoorSlot.DOWN_0,
        isaac_typescript_definitions_1.DoorSlot.LEFT_1,
        isaac_typescript_definitions_1.DoorSlot.UP_1,
        isaac_typescript_definitions_1.DoorSlot.RIGHT_1,
        isaac_typescript_definitions_1.DoorSlot.DOWN_1
        // 7
      ]);
      exports2.ROOM_SHAPE_TO_DOOR_SLOTS = {
        // 1
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.LEFT_0,
          isaac_typescript_definitions_1.DoorSlot.UP_0,
          isaac_typescript_definitions_1.DoorSlot.RIGHT_0,
          isaac_typescript_definitions_1.DoorSlot.DOWN_0
          // 3
        ]),
        // 2
        [isaac_typescript_definitions_1.RoomShape.IH]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.LEFT_0,
          isaac_typescript_definitions_1.DoorSlot.RIGHT_0
          // 2
        ]),
        // 3
        [isaac_typescript_definitions_1.RoomShape.IV]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.UP_0,
          isaac_typescript_definitions_1.DoorSlot.DOWN_0
          // 3
        ]),
        // 4
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.LEFT_0,
          isaac_typescript_definitions_1.DoorSlot.UP_0,
          isaac_typescript_definitions_1.DoorSlot.RIGHT_0,
          isaac_typescript_definitions_1.DoorSlot.DOWN_0,
          isaac_typescript_definitions_1.DoorSlot.LEFT_1,
          isaac_typescript_definitions_1.DoorSlot.RIGHT_1
          // 6
        ]),
        // 5
        [isaac_typescript_definitions_1.RoomShape.IIV]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.UP_0,
          isaac_typescript_definitions_1.DoorSlot.DOWN_0
          // 3
        ]),
        // 6
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.LEFT_0,
          isaac_typescript_definitions_1.DoorSlot.UP_0,
          isaac_typescript_definitions_1.DoorSlot.RIGHT_0,
          isaac_typescript_definitions_1.DoorSlot.DOWN_0,
          isaac_typescript_definitions_1.DoorSlot.UP_1,
          isaac_typescript_definitions_1.DoorSlot.DOWN_1
          // 7
        ]),
        // 7
        [isaac_typescript_definitions_1.RoomShape.IIH]: new ReadonlySet_1.ReadonlySet([
          isaac_typescript_definitions_1.DoorSlot.LEFT_0,
          isaac_typescript_definitions_1.DoorSlot.RIGHT_0
          // 2
        ]),
        // 8
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: ALL_DOOR_SLOTS_SET,
        // 9
        [isaac_typescript_definitions_1.RoomShape.LTL]: ALL_DOOR_SLOTS_SET,
        // 10
        [isaac_typescript_definitions_1.RoomShape.LTR]: ALL_DOOR_SLOTS_SET,
        // 11
        [isaac_typescript_definitions_1.RoomShape.LBL]: ALL_DOOR_SLOTS_SET,
        // 12
        [isaac_typescript_definitions_1.RoomShape.LBR]: ALL_DOOR_SLOTS_SET
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/bitwise.js
  var require_bitwise = __commonJS({
    "node_modules/isaacscript-common/dist/functions/bitwise.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setToBitFlags = exports2.getNumBitsOfN = exports2.getKBitOfN = exports2.countSetBits = exports2.convertDecimalToBinary = exports2.convertBinaryToDecimal = exports2.arrayToBitFlags = void 0;
      var flag_1 = require_flag();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function arrayToBitFlags(array) {
        let flags = 0;
        for (const flag of array) {
          flags = (0, flag_1.addFlag)(flags, flag);
        }
        return flags;
      }
      exports2.arrayToBitFlags = arrayToBitFlags;
      function convertBinaryToDecimal(bits) {
        const bitsString = bits.join("");
        return Number.parseInt(bitsString, 2);
      }
      exports2.convertBinaryToDecimal = convertBinaryToDecimal;
      function convertDecimalToBinary(num, minLength) {
        const bits = [];
        const bitsString = num.toString(2);
        for (const bitString of bitsString) {
          const bit = (0, types_1.parseIntSafe)(bitString);
          (0, utils_1.assertDefined)(bit, `Failed to convert the following number to binary: ${num}`);
          bits.push(bit);
        }
        if (minLength !== void 0) {
          while (bits.length < minLength) {
            bits.unshift(0);
          }
        }
        return bits;
      }
      exports2.convertDecimalToBinary = convertDecimalToBinary;
      function countSetBits(num) {
        let count = 0;
        while (num > 0) {
          num &= num - 1;
          count++;
        }
        return count;
      }
      exports2.countSetBits = countSetBits;
      function getKBitOfN(k, n) {
        return n >>> k & 1;
      }
      exports2.getKBitOfN = getKBitOfN;
      function getNumBitsOfN(n) {
        let numBits = 0;
        while (n > 0) {
          numBits++;
          n >>>= 1;
        }
        return numBits;
      }
      exports2.getNumBitsOfN = getNumBitsOfN;
      function setToBitFlags(set) {
        let flags = 0;
        for (const flag of set) {
          flags = (0, flag_1.addFlag)(flags, flag);
        }
        return flags;
      }
      exports2.setToBitFlags = setToBitFlags;
    }
  });

  // node_modules/isaacscript-common/dist/functions/doors.js
  var require_doors = __commonJS({
    "node_modules/isaacscript-common/dist/functions/doors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.removeDoors = exports2.removeDoor = exports2.removeAllDoors = exports2.openDoorFast = exports2.openAllDoors = exports2.lockDoor = exports2.isVoidDoor = exports2.isSecretRoomDoor = exports2.isRepentanceDoor = exports2.isMegaSatanDoor = exports2.isHiddenSecretRoomDoor = exports2.isDoorToMomsHeart = exports2.isDoorToMines = exports2.isDoorToMausoleumAscent = exports2.isDoorToMausoleum = exports2.isDoorToDownpour = exports2.isDoorSlotInRoomShape = exports2.isDevilRoomDoor = exports2.isBossRushDoor = exports2.isBlueWombDoor = exports2.isAngelRoomDoor = exports2.hasUnusedDoorSlot = exports2.hasDoorType = exports2.getVoidDoor = exports2.getUnusedDoorSlots = exports2.getRoomShapeDoorSlotCoordinates = exports2.getRoomShapeDoorSlot = exports2.getRepentanceDoor = exports2.getOppositeDoorSlot = exports2.getMegaSatanDoor = exports2.getDoorsToRoomIndex = exports2.getDoors = exports2.getDoorSlotsForRoomShape = exports2.getDoorSlotEnterPositionOffset = exports2.getDoorSlotEnterPosition = exports2.getDoorEnterPosition = exports2.getDevilRoomOrAngelRoomDoor = exports2.getDevilRoomDoor = exports2.getBossRushDoor = exports2.getBlueWombDoor = exports2.getAngelRoomDoor = exports2.doorSlotsToDoorSlotFlags = exports2.doorSlotToDoorSlotFlag = exports2.doorSlotToDirection = exports2.doorSlotFlagsToDoorSlots = exports2.doorSlotFlagToDoorSlot = exports2.closeDoorFast = exports2.closeAllDoors = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var doorSlotFlagToDoorSlot_1 = require_doorSlotFlagToDoorSlot();
      var doorSlotToDirection_1 = require_doorSlotToDirection();
      var doorSlotToDoorSlotFlag_1 = require_doorSlotToDoorSlotFlag();
      var oppositeDoorSlots_1 = require_oppositeDoorSlots();
      var roomShapeToDoorSlotCoordinates_1 = require_roomShapeToDoorSlotCoordinates();
      var roomShapeToDoorSlots_1 = require_roomShapeToDoorSlots();
      var ReadonlySet_1 = require_ReadonlySet();
      var bitwise_1 = require_bitwise();
      var direction_1 = require_direction();
      var enums_1 = require_enums();
      var flag_1 = require_flag();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      function closeAllDoors() {
        for (const door of getDoors()) {
          door.Close(true);
        }
      }
      exports2.closeAllDoors = closeAllDoors;
      function closeDoorFast(door) {
        door.State = isaac_typescript_definitions_1.DoorState.CLOSED;
        const sprite = door.GetSprite();
        sprite.Play("Closed", true);
      }
      exports2.closeDoorFast = closeDoorFast;
      function doorSlotFlagToDoorSlot(doorSlotFlag) {
        const doorSlot = doorSlotFlagToDoorSlot_1.DOOR_SLOT_FLAG_TO_DOOR_SLOT[doorSlotFlag];
        return doorSlot ?? doorSlotFlagToDoorSlot_1.DEFAULT_DOOR_SLOT;
      }
      exports2.doorSlotFlagToDoorSlot = doorSlotFlagToDoorSlot;
      function doorSlotFlagsToDoorSlots(doorSlotFlags) {
        const doorSlots = [];
        for (const doorSlotFlag of cachedEnumValues_1.DOOR_SLOT_FLAG_VALUES) {
          if ((0, flag_1.hasFlag)(doorSlotFlags, doorSlotFlag)) {
            const doorSlot = doorSlotFlagToDoorSlot(doorSlotFlag);
            doorSlots.push(doorSlot);
          }
        }
        return doorSlots;
      }
      exports2.doorSlotFlagsToDoorSlots = doorSlotFlagsToDoorSlots;
      function doorSlotToDirection(doorSlot) {
        return doorSlotToDirection_1.DOOR_SLOT_TO_DIRECTION[doorSlot];
      }
      exports2.doorSlotToDirection = doorSlotToDirection;
      function doorSlotToDoorSlotFlag(doorSlot) {
        return doorSlotToDoorSlotFlag_1.DOOR_SLOT_TO_DOOR_SLOT_FLAG[doorSlot];
      }
      exports2.doorSlotToDoorSlotFlag = doorSlotToDoorSlotFlag;
      function doorSlotsToDoorSlotFlags(doorSlots) {
        const doorSlotsMutable = doorSlots;
        const doorSlotArray = (0, tstlClass_1.isTSTLSet)(doorSlotsMutable) ? [...doorSlotsMutable.values()] : doorSlotsMutable;
        const doorSlotFlagArray = doorSlotArray.map((doorSlot) => doorSlotToDoorSlotFlag(doorSlot));
        return (0, bitwise_1.arrayToBitFlags)(doorSlotFlagArray);
      }
      exports2.doorSlotsToDoorSlotFlags = doorSlotsToDoorSlotFlags;
      function getAngelRoomDoor() {
        const angelRoomDoors = getDoors(isaac_typescript_definitions_1.RoomType.ANGEL);
        return angelRoomDoors.length === 0 ? void 0 : angelRoomDoors[0];
      }
      exports2.getAngelRoomDoor = getAngelRoomDoor;
      function getBlueWombDoor() {
        const doors = getDoors();
        return doors.find((door) => isBlueWombDoor(door));
      }
      exports2.getBlueWombDoor = getBlueWombDoor;
      function getBossRushDoor() {
        const doors = getDoors();
        return doors.find((door) => isBossRushDoor(door));
      }
      exports2.getBossRushDoor = getBossRushDoor;
      function getDevilRoomDoor() {
        const devilRoomDoors = getDoors(isaac_typescript_definitions_1.RoomType.DEVIL);
        return devilRoomDoors.length === 0 ? void 0 : devilRoomDoors[0];
      }
      exports2.getDevilRoomDoor = getDevilRoomDoor;
      function getDevilRoomOrAngelRoomDoor() {
        const devilRoomOrAngelRoomDoors = getDoors(isaac_typescript_definitions_1.RoomType.DEVIL, isaac_typescript_definitions_1.RoomType.ANGEL);
        return devilRoomOrAngelRoomDoors.length === 0 ? void 0 : devilRoomOrAngelRoomDoors[0];
      }
      exports2.getDevilRoomOrAngelRoomDoor = getDevilRoomOrAngelRoomDoor;
      function getDoorEnterPosition(door) {
        const offset = getDoorSlotEnterPositionOffset(door.Slot);
        return door.Position.add(offset);
      }
      exports2.getDoorEnterPosition = getDoorEnterPosition;
      function getDoorSlotEnterPosition(doorSlot) {
        const room = cachedClasses_1.game.GetRoom();
        const position = room.GetDoorSlotPosition(doorSlot);
        const offset = getDoorSlotEnterPositionOffset(doorSlot);
        return position.add(offset);
      }
      exports2.getDoorSlotEnterPosition = getDoorSlotEnterPosition;
      function getDoorSlotEnterPositionOffset(doorSlot) {
        const direction = doorSlotToDirection(doorSlot);
        const vector = (0, direction_1.directionToVector)(direction);
        const oppositeVector = vector.mul(-1);
        return oppositeVector.mul(constants_1.DISTANCE_OF_GRID_TILE);
      }
      exports2.getDoorSlotEnterPositionOffset = getDoorSlotEnterPositionOffset;
      function getDoorSlotsForRoomShape(roomShape) {
        return roomShapeToDoorSlots_1.ROOM_SHAPE_TO_DOOR_SLOTS[roomShape];
      }
      exports2.getDoorSlotsForRoomShape = getDoorSlotsForRoomShape;
      function getDoors(...roomTypes) {
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        const roomTypesSet = new ReadonlySet_1.ReadonlySet(roomTypes);
        const possibleDoorSlots = getDoorSlotsForRoomShape(roomShape);
        const doors = [];
        for (const doorSlot of possibleDoorSlots) {
          const door = room.GetDoor(doorSlot);
          if (door === void 0) {
            continue;
          }
          const gridEntityType = door.GetType();
          if (gridEntityType !== isaac_typescript_definitions_1.GridEntityType.DOOR) {
            continue;
          }
          if (roomTypesSet.size === 0 || roomTypesSet.has(door.TargetRoomType)) {
            doors.push(door);
          }
        }
        return doors;
      }
      exports2.getDoors = getDoors;
      function getDoorsToRoomIndex(...roomGridIndex) {
        const roomGridIndexesSet = new ReadonlySet_1.ReadonlySet(roomGridIndex);
        const doors = getDoors();
        return doors.filter((door) => roomGridIndexesSet.has(door.TargetRoomIndex));
      }
      exports2.getDoorsToRoomIndex = getDoorsToRoomIndex;
      function getMegaSatanDoor() {
        const doors = getDoors();
        return doors.find((door) => isMegaSatanDoor(door));
      }
      exports2.getMegaSatanDoor = getMegaSatanDoor;
      function getOppositeDoorSlot(doorSlot) {
        return oppositeDoorSlots_1.OPPOSITE_DOOR_SLOTS[doorSlot];
      }
      exports2.getOppositeDoorSlot = getOppositeDoorSlot;
      function getRepentanceDoor() {
        const doors = getDoors();
        return doors.find((door) => isRepentanceDoor(door));
      }
      exports2.getRepentanceDoor = getRepentanceDoor;
      function getRoomShapeDoorSlot(roomShape, x, y) {
        const doorSlotCoordinates = roomShapeToDoorSlotCoordinates_1.ROOM_SHAPE_TO_DOOR_SLOT_COORDINATES[roomShape];
        for (const [doorSlotString, coordinates] of Object.entries(doorSlotCoordinates)) {
          const doorSlot = (0, types_1.parseIntSafe)(doorSlotString);
          if (doorSlot === void 0 || !(0, enums_1.isEnumValue)(doorSlot, isaac_typescript_definitions_1.DoorSlot)) {
            continue;
          }
          const [doorX, doorY] = coordinates;
          if (x === doorX && y === doorY) {
            return doorSlot;
          }
        }
        return void 0;
      }
      exports2.getRoomShapeDoorSlot = getRoomShapeDoorSlot;
      function getRoomShapeDoorSlotCoordinates(roomShape, doorSlot) {
        const doorSlotCoordinates = roomShapeToDoorSlotCoordinates_1.ROOM_SHAPE_TO_DOOR_SLOT_COORDINATES[roomShape];
        return doorSlotCoordinates[doorSlot];
      }
      exports2.getRoomShapeDoorSlotCoordinates = getRoomShapeDoorSlotCoordinates;
      function getUnusedDoorSlots() {
        const room = cachedClasses_1.game.GetRoom();
        return cachedEnumValues_1.DOOR_SLOT_VALUES.filter((doorSlot) => (
          // We need to filter out the -1 value to prevent crashes.
          doorSlot !== isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT && room.IsDoorSlotAllowed(doorSlot) && room.GetDoor(doorSlot) === void 0
        ));
      }
      exports2.getUnusedDoorSlots = getUnusedDoorSlots;
      function getVoidDoor() {
        const doors = getDoors();
        return doors.find((door) => isVoidDoor(door));
      }
      exports2.getVoidDoor = getVoidDoor;
      function hasDoorType(...roomTypes) {
        const doors = getDoors();
        const doorsOfThisRoomType = doors.filter((door) => roomTypes.some((roomType) => door.IsRoomType(roomType)));
        return doorsOfThisRoomType.length > 0;
      }
      exports2.hasDoorType = hasDoorType;
      function hasUnusedDoorSlot() {
        const unusedDoorSlots = getUnusedDoorSlots();
        return unusedDoorSlots.length > 0;
      }
      exports2.hasUnusedDoorSlot = hasUnusedDoorSlot;
      function isAngelRoomDoor(door) {
        return door.TargetRoomType === isaac_typescript_definitions_1.RoomType.ANGEL;
      }
      exports2.isAngelRoomDoor = isAngelRoomDoor;
      function isBlueWombDoor(door) {
        return door.TargetRoomIndex === isaac_typescript_definitions_1.GridRoom.BLUE_WOMB;
      }
      exports2.isBlueWombDoor = isBlueWombDoor;
      function isBossRushDoor(door) {
        return door.TargetRoomIndex === isaac_typescript_definitions_1.GridRoom.BOSS_RUSH;
      }
      exports2.isBossRushDoor = isBossRushDoor;
      function isDevilRoomDoor(door) {
        return door.TargetRoomType === isaac_typescript_definitions_1.RoomType.DEVIL;
      }
      exports2.isDevilRoomDoor = isDevilRoomDoor;
      function isDoorSlotInRoomShape(doorSlot, roomShape) {
        const doorSlots = getDoorSlotsForRoomShape(roomShape);
        return doorSlots.has(doorSlot);
      }
      exports2.isDoorSlotInRoomShape = isDoorSlotInRoomShape;
      function isDoorToDownpour(door) {
        if (!isRepentanceDoor(door)) {
          return false;
        }
        const sprite = door.GetSprite();
        const fileName = sprite.GetFilename();
        return fileName.toLowerCase() === "gfx/grid/door_downpour.anm2";
      }
      exports2.isDoorToDownpour = isDoorToDownpour;
      function isDoorToMausoleum(door) {
        if (!isRepentanceDoor(door)) {
          return false;
        }
        const sprite = door.GetSprite();
        const fileName = sprite.GetFilename();
        return fileName.toLowerCase() === "gfx/grid/door_mausoleum.anm2";
      }
      exports2.isDoorToMausoleum = isDoorToMausoleum;
      function isDoorToMausoleumAscent(door) {
        if (!isRepentanceDoor(door)) {
          return false;
        }
        const sprite = door.GetSprite();
        const fileName = sprite.GetFilename();
        return fileName.toLowerCase() === "gfx/grid/door_mausoleum_alt.anm2";
      }
      exports2.isDoorToMausoleumAscent = isDoorToMausoleumAscent;
      function isDoorToMines(door) {
        if (!isRepentanceDoor(door)) {
          return false;
        }
        const sprite = door.GetSprite();
        const fileName = sprite.GetFilename();
        return fileName.toLowerCase() === "gfx/grid/door_mines.anm2";
      }
      exports2.isDoorToMines = isDoorToMines;
      function isDoorToMomsHeart(door) {
        if (!isRepentanceDoor(door)) {
          return false;
        }
        const sprite = door.GetSprite();
        const fileName = sprite.GetFilename();
        return fileName.toLowerCase() === "gfx/grid/door_momsheart.anm2";
      }
      exports2.isDoorToMomsHeart = isDoorToMomsHeart;
      function isHiddenSecretRoomDoor(door) {
        const sprite = door.GetSprite();
        const animation = sprite.GetAnimation();
        return isSecretRoomDoor(door) && animation === "Hidden";
      }
      exports2.isHiddenSecretRoomDoor = isHiddenSecretRoomDoor;
      function isMegaSatanDoor(door) {
        return door.TargetRoomIndex === isaac_typescript_definitions_1.GridRoom.MEGA_SATAN;
      }
      exports2.isMegaSatanDoor = isMegaSatanDoor;
      function isRepentanceDoor(door) {
        return door.TargetRoomIndex === isaac_typescript_definitions_1.GridRoom.SECRET_EXIT;
      }
      exports2.isRepentanceDoor = isRepentanceDoor;
      function isSecretRoomDoor(door) {
        const sprite = door.GetSprite();
        const fileName = sprite.GetFilename();
        return fileName.toLowerCase() === "gfx/grid/door_08_holeinwall.anm2";
      }
      exports2.isSecretRoomDoor = isSecretRoomDoor;
      function isVoidDoor(door) {
        return door.TargetRoomIndex === isaac_typescript_definitions_1.GridRoom.VOID;
      }
      exports2.isVoidDoor = isVoidDoor;
      function lockDoor(door) {
        const level = cachedClasses_1.game.GetLevel();
        const roomDescriptor = level.GetRoomByIdx(door.TargetRoomIndex);
        roomDescriptor.VisitedCount = 0;
        door.SetVariant(isaac_typescript_definitions_1.DoorVariant.LOCKED);
        door.SetLocked(true);
        door.Close(true);
      }
      exports2.lockDoor = lockDoor;
      function openAllDoors() {
        for (const door of getDoors()) {
          door.Open();
        }
      }
      exports2.openAllDoors = openAllDoors;
      function openDoorFast(door) {
        door.State = isaac_typescript_definitions_1.DoorState.OPEN;
        const sprite = door.GetSprite();
        sprite.Play("Opened", true);
      }
      exports2.openDoorFast = openDoorFast;
      function removeAllDoors(...roomTypes) {
        const doors = getDoors(...roomTypes);
        removeDoors(...doors);
        return doors.length;
      }
      exports2.removeAllDoors = removeAllDoors;
      function removeDoor(door) {
        const room = cachedClasses_1.game.GetRoom();
        room.RemoveDoor(door.Slot);
      }
      exports2.removeDoor = removeDoor;
      function removeDoors(...doors) {
        for (const door of doors) {
          removeDoor(door);
        }
      }
      exports2.removeDoors = removeDoors;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostDoorRender.js
  var require_PostDoorRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostDoorRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostDoorRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var doors_1 = require_doors();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostDoorRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireDoor;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const door of (0, doors_1.getDoors)()) {
            this.fire(door);
          }
        };
      };
      exports2.PostDoorRender = PostDoorRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostDoorUpdate.js
  var require_PostDoorUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostDoorUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostDoorUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var doors_1 = require_doors();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostDoorUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireDoor;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const door of (0, doors_1.getDoors)()) {
            this.fire(door);
          }
        };
      };
      exports2.PostDoorUpdate = PostDoorUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEffectInitFilter.js
  var require_PostEffectInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEffectInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEffectInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostEffectInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 54
            [isaac_typescript_definitions_1.ModCallback.POST_EFFECT_INIT, this.postEffectInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEffect;
        // ModCallback.POST_EFFECT_INIT (54)
        postEffectInit = (effect) => {
          this.fire(effect);
        };
      };
      exports2.PostEffectInitFilter = PostEffectInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEffectInitLate.js
  var require_PostEffectInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEffectInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEffectInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostEffectInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 55
            [isaac_typescript_definitions_1.ModCallback.POST_EFFECT_UPDATE, this.postEffectUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEffect;
        // ModCallback.POST_EFFECT_UPDATE (55)
        postEffectUpdate = (effect) => {
          const index = GetPtrHash(effect);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            this.fire(effect);
          }
        };
      };
      exports2.PostEffectInitLate = PostEffectInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEffectRenderFilter.js
  var require_PostEffectRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEffectRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEffectRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostEffectRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 56
            [isaac_typescript_definitions_1.ModCallback.POST_EFFECT_RENDER, this.postEffectRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEffect;
        // ModCallback.POST_EFFECT_RENDER (56)
        postEffectRender = (effect, renderOffset) => {
          this.fire(effect, renderOffset);
        };
      };
      exports2.PostEffectRenderFilter = PostEffectRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEffectStateChanged.js
  var require_PostEffectStateChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEffectStateChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEffectStateChanged = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          stateMap: new DefaultMap_1.DefaultMap((state) => state)
        }
      };
      var PostEffectStateChanged = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 55
            [isaac_typescript_definitions_1.ModCallback.POST_EFFECT_UPDATE, this.postEffectUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEffect;
        // ModCallback.POST_EFFECT_UPDATE (55)
        postEffectUpdate = (effect) => {
          const ptrHash = GetPtrHash(effect);
          const previousState = v.run.stateMap.getAndSetDefault(ptrHash, effect.State);
          const currentState = effect.State;
          v.run.stateMap.set(ptrHash, currentState);
          if (previousState !== currentState) {
            this.fire(effect, previousState, currentState);
          }
        };
      };
      exports2.PostEffectStateChanged = PostEffectStateChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEffectUpdateFilter.js
  var require_PostEffectUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEffectUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEffectUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostEffectUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 55
            [isaac_typescript_definitions_1.ModCallback.POST_EFFECT_UPDATE, this.postEffectUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEffect;
        // ModCallback.POST_EFFECT_UPDATE (55)
        postEffectUpdate = (effect) => {
          this.fire(effect);
        };
      };
      exports2.PostEffectUpdateFilter = PostEffectUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEntityKillFilter.js
  var require_PostEntityKillFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEntityKillFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEntityKillFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostEntityKillFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 68
            [isaac_typescript_definitions_1.ModCallback.POST_ENTITY_KILL, this.postEntityKill]
          ];
        }
        shouldFire = shouldFire_1.shouldFireEntity;
        // ModCallback.POST_ENTITY_KILL (68)
        postEntityKill = (entity) => {
          this.fire(entity);
        };
      };
      exports2.PostEntityKillFilter = PostEntityKillFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostEsauJr.js
  var require_PostEsauJr = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostEsauJr.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostEsauJr = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostEsauJr = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ESAU_JR_DETECTION];
        }
      };
      exports2.PostEsauJr = PostEsauJr;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarInitFilter.js
  var require_PostFamiliarInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFamiliarInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostFamiliarInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 7
            [isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_INIT, this.postFamiliarInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireFamiliar;
        // ModCallback.POST_FAMILIAR_INIT (7)
        postFamiliarInit = (familiar) => {
          this.fire(familiar);
        };
      };
      exports2.PostFamiliarInitFilter = PostFamiliarInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarInitLate.js
  var require_PostFamiliarInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFamiliarInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostFamiliarInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 6
            [isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_UPDATE, this.postFamiliarUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireFamiliar;
        // ModCallback.POST_FAMILIAR_UPDATE (6)
        postFamiliarUpdate = (familiar) => {
          const index = GetPtrHash(familiar);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            this.fire(familiar);
          }
        };
      };
      exports2.PostFamiliarInitLate = PostFamiliarInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarRenderFilter.js
  var require_PostFamiliarRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFamiliarRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostFamiliarRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 25
            [isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_RENDER, this.postFamiliarRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireFamiliar;
        // ModCallback.POST_FAMILIAR_UPDATE (6)
        postFamiliarRender = (familiar, renderOffset) => {
          this.fire(familiar, renderOffset);
        };
      };
      exports2.PostFamiliarRenderFilter = PostFamiliarRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarStateChanged.js
  var require_PostFamiliarStateChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarStateChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFamiliarStateChanged = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          stateMap: new DefaultMap_1.DefaultMap((state) => state)
        }
      };
      var PostFamiliarStateChanged = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 6
            [isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_UPDATE, this.postFamiliarUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireFamiliar;
        // ModCallback.POST_FAMILIAR_UPDATE (6)
        postFamiliarUpdate = (familiar) => {
          const ptrHash = GetPtrHash(familiar);
          const previousState = v.run.stateMap.getAndSetDefault(ptrHash, familiar.State);
          const currentState = familiar.State;
          v.run.stateMap.set(ptrHash, currentState);
          if (previousState !== currentState) {
            this.fire(familiar, previousState, currentState);
          }
        };
      };
      exports2.PostFamiliarStateChanged = PostFamiliarStateChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarUpdateFilter.js
  var require_PostFamiliarUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFamiliarUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFamiliarUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostFamiliarUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 6
            [isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_UPDATE, this.postFamiliarUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireFamiliar;
        // ModCallback.POST_FAMILIAR_UPDATE (6)
        postFamiliarUpdate = (familiar) => {
          this.fire(familiar);
        };
      };
      exports2.PostFamiliarUpdateFilter = PostFamiliarUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFirstEsauJr.js
  var require_PostFirstEsauJr = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFirstEsauJr.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFirstEsauJr = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostFirstEsauJr = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ESAU_JR_DETECTION];
        }
      };
      exports2.PostFirstEsauJr = PostFirstEsauJr;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFirstFlip.js
  var require_PostFirstFlip = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFirstFlip.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFirstFlip = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostFirstFlip = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.FLIP_DETECTION];
        }
      };
      exports2.PostFirstFlip = PostFirstFlip;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostFlip.js
  var require_PostFlip = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostFlip.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostFlip = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostFlip = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.FLIP_DETECTION];
        }
      };
      exports2.PostFlip = PostFlip;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGameEndFilter.js
  var require_PostGameEndFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGameEndFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGameEndFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGameEndFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 16
            [isaac_typescript_definitions_1.ModCallback.POST_GAME_END, this.postGameEnd]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBoolean;
        // ModCallback.POST_GAME_END (16)
        postGameEnd = (isGameOver) => {
          this.fire(isGameOver);
        };
      };
      exports2.PostGameEndFilter = PostGameEndFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGameStartedReordered.js
  var require_PostGameStartedReordered = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGameStartedReordered.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGameStartedReordered = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGameStartedReordered = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GAME_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFireBoolean;
      };
      exports2.PostGameStartedReordered = PostGameStartedReordered;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGameStartedReorderedLast.js
  var require_PostGameStartedReorderedLast = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGameStartedReorderedLast.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGameStartedReorderedLast = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGameStartedReorderedLast = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GAME_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFireBoolean;
      };
      exports2.PostGameStartedReorderedLast = PostGameStartedReorderedLast;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGreedModeWave.js
  var require_PostGreedModeWave = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGreedModeWave.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGreedModeWave = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          currentGreedWave: 0
        }
      };
      var PostGreedModeWave = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          if (!cachedClasses_1.game.IsGreedMode()) {
            return;
          }
          const level = cachedClasses_1.game.GetLevel();
          const newWave = level.GreedModeWave;
          const oldWave = v.run.currentGreedWave;
          v.run.currentGreedWave = newWave;
          if (newWave > oldWave) {
            this.fire(oldWave, newWave);
          }
        };
      };
      exports2.PostGreedModeWave = PostGreedModeWave;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityBroken.js
  var require_PostGridEntityBroken = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityBroken.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityBroken = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityBroken = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntity;
      };
      exports2.PostGridEntityBroken = PostGridEntityBroken;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCollision.js
  var require_PostGridEntityCollision = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCollision.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCollision = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCollision = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_COLLISION_DETECTION];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [gridEntity, entity] = fireArgs;
          const [callbackGridEntityType, callbackGridEntityVariant, callbackEntityType, callbackEntityVariant, callbackEntitySubType] = optionalArgs;
          const gridEntityType = gridEntity.GetType();
          const gridEntityVariant = gridEntity.GetVariant();
          return (callbackGridEntityType === void 0 || callbackGridEntityType === gridEntityType) && (callbackGridEntityVariant === void 0 || callbackGridEntityVariant === gridEntityVariant) && (callbackEntityType === void 0 || callbackEntityType === entity.Type) && (callbackEntityVariant === void 0 || callbackEntityVariant === entity.Variant) && (callbackEntitySubType === void 0 || callbackEntitySubType === entity.SubType);
        };
      };
      exports2.PostGridEntityCollision = PostGridEntityCollision;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomBroken.js
  var require_PostGridEntityCustomBroken = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomBroken.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomBroken = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomBroken = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntityCustom;
      };
      exports2.PostGridEntityCustomBroken = PostGridEntityCustomBroken;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomCollision.js
  var require_PostGridEntityCustomCollision = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomCollision.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomCollision = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomCollision = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_COLLISION_DETECTION];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_gridEntity, gridEntityTypeCustom, entity] = fireArgs;
          const [callbackGridEntityTypeCustom, callbackEntityType, callbackEntityVariant, callbackEntitySubType] = optionalArgs;
          return (callbackGridEntityTypeCustom === void 0 || callbackGridEntityTypeCustom === gridEntityTypeCustom) && (callbackEntityType === void 0 || callbackEntityType === entity.Type) && (callbackEntityVariant === void 0 || callbackEntityVariant === entity.Variant) && (callbackEntitySubType === void 0 || callbackEntitySubType === entity.SubType);
        };
      };
      exports2.PostGridEntityCustomCollision = PostGridEntityCustomCollision;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomInit.js
  var require_PostGridEntityCustomInit = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomInit.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomInit = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomInit = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntityCustom;
      };
      exports2.PostGridEntityCustomInit = PostGridEntityCustomInit;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomRemove.js
  var require_PostGridEntityCustomRemove = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomRemove.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomRemove = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomRemove = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_gridIndex, gridEntityTypeCustom] = fireArgs;
          const [callbackGridEntityTypeCustom] = optionalArgs;
          return callbackGridEntityTypeCustom === void 0 || callbackGridEntityTypeCustom === gridEntityTypeCustom;
        };
      };
      exports2.PostGridEntityCustomRemove = PostGridEntityCustomRemove;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomRender.js
  var require_PostGridEntityCustomRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomRender = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_RENDER_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntityCustom;
      };
      exports2.PostGridEntityCustomRender = PostGridEntityCustomRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomStateChanged.js
  var require_PostGridEntityCustomStateChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomStateChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomStateChanged = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomStateChanged = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntityCustom;
      };
      exports2.PostGridEntityCustomStateChanged = PostGridEntityCustomStateChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomUpdate.js
  var require_PostGridEntityCustomUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityCustomUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityCustomUpdate = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityCustomUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntityCustom;
      };
      exports2.PostGridEntityCustomUpdate = PostGridEntityCustomUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityInit.js
  var require_PostGridEntityInit = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityInit.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityInit = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityInit = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntity;
      };
      exports2.PostGridEntityInit = PostGridEntityInit;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityRemove.js
  var require_PostGridEntityRemove = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityRemove.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityRemove = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityRemove = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_gridIndex, gridEntityType, variant] = fireArgs;
          const [callbackGridEntityType, callbackVariant] = optionalArgs;
          return (callbackGridEntityType === void 0 || callbackGridEntityType === gridEntityType) && (callbackVariant === void 0 || callbackVariant === variant);
        };
      };
      exports2.PostGridEntityRemove = PostGridEntityRemove;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityRender.js
  var require_PostGridEntityRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityRender = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_RENDER_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntity;
      };
      exports2.PostGridEntityRender = PostGridEntityRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityStateChanged.js
  var require_PostGridEntityStateChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityStateChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityStateChanged = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityStateChanged = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntity;
      };
      exports2.PostGridEntityStateChanged = PostGridEntityStateChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityUpdate.js
  var require_PostGridEntityUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostGridEntityUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityUpdate = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostGridEntityUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireGridEntity;
      };
      exports2.PostGridEntityUpdate = PostGridEntityUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostHolyMantleRemoved.js
  var require_PostHolyMantleRemoved = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostHolyMantleRemoved.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostHolyMantleRemoved = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var frames_1 = require_frames();
      var playerDataStructures_1 = require_playerDataStructures();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersHolyMantleMap: new DefaultMap_1.DefaultMap(0)
        }
      };
      var PostHolyMantleRemoved = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const effects = player.GetEffects();
          const newNumHolyMantles = effects.GetCollectibleEffectNum(isaac_typescript_definitions_1.CollectibleType.HOLY_MANTLE);
          const oldNumHolyMantles = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersHolyMantleMap, player);
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersHolyMantleMap, player, newNumHolyMantles);
          if (newNumHolyMantles < oldNumHolyMantles && (0, frames_1.isAfterRoomFrame)(0)) {
            this.fire(player, oldNumHolyMantles, newNumHolyMantles);
          }
        };
      };
      exports2.PostHolyMantleRemoved = PostHolyMantleRemoved;
    }
  });

  // node_modules/isaacscript-common/dist/core/constantsVanilla.js
  var require_constantsVanilla = __commonJS({
    "node_modules/isaacscript-common/dist/core/constantsVanilla.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.VANILLA_PILL_EFFECTS_SET = exports2.VANILLA_PILL_EFFECTS = exports2.VANILLA_PILL_EFFECT_RANGE = exports2.VANILLA_CARD_TYPES_SET = exports2.VANILLA_CARD_TYPES = exports2.VANILLA_CARD_TYPE_RANGE = exports2.VANILLA_TRINKET_TYPES_SET = exports2.VANILLA_TRINKET_TYPES = exports2.VANILLA_TRINKET_TYPE_RANGE = exports2.VANILLA_COLLECTIBLE_TYPES_SET = exports2.VANILLA_COLLECTIBLE_TYPES = exports2.VANILLA_COLLECTIBLE_TYPE_RANGE = void 0;
      var types_1 = require_types();
      var utils_1 = require_utils();
      var ReadonlySet_1 = require_ReadonlySet();
      var cachedClasses_1 = require_cachedClasses();
      var constantsFirstLast_1 = require_constantsFirstLast();
      exports2.VANILLA_COLLECTIBLE_TYPE_RANGE = (0, utils_1.iRange)(constantsFirstLast_1.FIRST_COLLECTIBLE_TYPE, constantsFirstLast_1.LAST_VANILLA_COLLECTIBLE_TYPE);
      exports2.VANILLA_COLLECTIBLE_TYPES = exports2.VANILLA_COLLECTIBLE_TYPE_RANGE.filter((potentialCollectibleType) => {
        const collectibleType = (0, types_1.asCollectibleType)(potentialCollectibleType);
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        return itemConfigItem !== void 0;
      });
      exports2.VANILLA_COLLECTIBLE_TYPES_SET = new ReadonlySet_1.ReadonlySet(exports2.VANILLA_COLLECTIBLE_TYPES);
      exports2.VANILLA_TRINKET_TYPE_RANGE = (0, utils_1.iRange)(constantsFirstLast_1.FIRST_TRINKET_TYPE, constantsFirstLast_1.LAST_VANILLA_TRINKET_TYPE);
      exports2.VANILLA_TRINKET_TYPES = exports2.VANILLA_TRINKET_TYPE_RANGE.filter((potentialTrinketType) => {
        const trinketType = (0, types_1.asTrinketType)(potentialTrinketType);
        const itemConfigTrinket = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        return itemConfigTrinket !== void 0;
      });
      exports2.VANILLA_TRINKET_TYPES_SET = new ReadonlySet_1.ReadonlySet(exports2.VANILLA_TRINKET_TYPES);
      exports2.VANILLA_CARD_TYPE_RANGE = (0, utils_1.iRange)(constantsFirstLast_1.FIRST_CARD_TYPE, constantsFirstLast_1.LAST_VANILLA_CARD_TYPE);
      exports2.VANILLA_CARD_TYPES = exports2.VANILLA_CARD_TYPE_RANGE.filter((potentialCardType) => {
        const cardType = (0, types_1.asCardType)(potentialCardType);
        const itemConfigCard = cachedClasses_1.itemConfig.GetCard(cardType);
        return itemConfigCard !== void 0;
      });
      exports2.VANILLA_CARD_TYPES_SET = new ReadonlySet_1.ReadonlySet(exports2.VANILLA_CARD_TYPES);
      exports2.VANILLA_PILL_EFFECT_RANGE = (0, utils_1.iRange)(constantsFirstLast_1.FIRST_PILL_EFFECT, constantsFirstLast_1.LAST_VANILLA_PILL_EFFECT);
      exports2.VANILLA_PILL_EFFECTS = exports2.VANILLA_PILL_EFFECT_RANGE.filter((potentialPillEffect) => {
        const pillEffect = (0, types_1.asPillEffect)(potentialPillEffect);
        const itemConfigPillEffect = cachedClasses_1.itemConfig.GetPillEffect(pillEffect);
        return itemConfigPillEffect !== void 0;
      });
      exports2.VANILLA_PILL_EFFECTS_SET = new ReadonlySet_1.ReadonlySet(exports2.VANILLA_PILL_EFFECTS);
    }
  });

  // node_modules/isaacscript-common/dist/objects/collectibleDescriptions.js
  var require_collectibleDescriptions = __commonJS({
    "node_modules/isaacscript-common/dist/objects/collectibleDescriptions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.COLLECTIBLE_DESCRIPTIONS = exports2.DEFAULT_COLLECTIBLE_DESCRIPTION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_COLLECTIBLE_DESCRIPTION = "Unknown";
      exports2.COLLECTIBLE_DESCRIPTIONS = {
        [isaac_typescript_definitions_1.CollectibleType.NULL]: exports2.DEFAULT_COLLECTIBLE_DESCRIPTION,
        [isaac_typescript_definitions_1.CollectibleType.SAD_ONION]: "Tears up",
        [isaac_typescript_definitions_1.CollectibleType.INNER_EYE]: "Triple shot",
        [isaac_typescript_definitions_1.CollectibleType.SPOON_BENDER]: "Homing shots",
        [isaac_typescript_definitions_1.CollectibleType.CRICKETS_HEAD]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.MY_REFLECTION]: "Boomerang tears",
        [isaac_typescript_definitions_1.CollectibleType.NUMBER_ONE]: "Tears up + range down",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_OF_THE_MARTYR]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.BROTHER_BOBBY]: "Friends 'till the end",
        [isaac_typescript_definitions_1.CollectibleType.SKATOLE]: "Fly love",
        [isaac_typescript_definitions_1.CollectibleType.HALO_OF_FLIES]: "Projectile protection",
        [isaac_typescript_definitions_1.CollectibleType.ONE_UP]: "Extra life",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_MUSHROOM]: "All stats up!",
        [isaac_typescript_definitions_1.CollectibleType.VIRUS]: "Poison touch + speed up",
        [isaac_typescript_definitions_1.CollectibleType.ROID_RAGE]: "Speed and range up",
        [isaac_typescript_definitions_1.CollectibleType.HEART]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.RAW_LIVER]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.SKELETON_KEY]: "99 keys",
        [isaac_typescript_definitions_1.CollectibleType.DOLLAR]: "$$$",
        [isaac_typescript_definitions_1.CollectibleType.BOOM]: "10 bombs",
        [isaac_typescript_definitions_1.CollectibleType.TRANSCENDENCE]: "We all float down here...",
        [isaac_typescript_definitions_1.CollectibleType.COMPASS]: "The end is near",
        [isaac_typescript_definitions_1.CollectibleType.LUNCH]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.DINNER]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.DESSERT]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.BREAKFAST]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.ROTTEN_MEAT]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.WOODEN_SPOON]: "Speed up",
        [isaac_typescript_definitions_1.CollectibleType.BELT]: "Speed up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_UNDERWEAR]: "Range up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_HEELS]: "Range up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_LIPSTICK]: "Range up",
        [isaac_typescript_definitions_1.CollectibleType.WIRE_COAT_HANGER]: "Tears up",
        [isaac_typescript_definitions_1.CollectibleType.BIBLE]: "Temporary flight",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_BELIAL]: "Temporary DMG up",
        [isaac_typescript_definitions_1.CollectibleType.NECRONOMICON]: "Mass room damage",
        [isaac_typescript_definitions_1.CollectibleType.POOP]: "Plop!",
        [isaac_typescript_definitions_1.CollectibleType.MR_BOOM]: "Reusable bomb buddy",
        [isaac_typescript_definitions_1.CollectibleType.TAMMYS_HEAD]: "Reusable tear burst",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BRA]: "Mass paralysis",
        [isaac_typescript_definitions_1.CollectibleType.KAMIKAZE]: "Become the bomb!",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PAD]: "Mass fear",
        [isaac_typescript_definitions_1.CollectibleType.BOBS_ROTTEN_HEAD]: "Reusable ranged bomb",
        // There is no `CollectibleType` with a value of 43.
        [isaac_typescript_definitions_1.CollectibleType.TELEPORT]: "Teleport!",
        [isaac_typescript_definitions_1.CollectibleType.YUM_HEART]: "Reusable regeneration",
        [isaac_typescript_definitions_1.CollectibleType.LUCKY_FOOT]: "Luck up",
        [isaac_typescript_definitions_1.CollectibleType.DOCTORS_REMOTE]: "Reusable air strike",
        [isaac_typescript_definitions_1.CollectibleType.CUPIDS_ARROW]: "Piercing shots",
        [isaac_typescript_definitions_1.CollectibleType.SHOOP_DA_WHOOP]: "BLLLARRRRGGG!",
        [isaac_typescript_definitions_1.CollectibleType.STEVEN]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.PENTAGRAM]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.DR_FETUS]: "???",
        [isaac_typescript_definitions_1.CollectibleType.MAGNETO]: "Item snatcher",
        [isaac_typescript_definitions_1.CollectibleType.TREASURE_MAP]: "Full visible map",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_EYE]: "Eye in the back of your head",
        [isaac_typescript_definitions_1.CollectibleType.LEMON_MISHAP]: "Oops...",
        [isaac_typescript_definitions_1.CollectibleType.DISTANT_ADMIRATION]: "Attack fly",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SHADOWS]: "Temporary invincibility",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_BELIAL_BIRTHRIGHT]: "Temporary DMG up",
        [isaac_typescript_definitions_1.CollectibleType.LADDER]: "Building bridges",
        // There is no `CollectibleType` with a value of 61.
        [isaac_typescript_definitions_1.CollectibleType.CHARM_OF_THE_VAMPIRE]: "Kills heal",
        [isaac_typescript_definitions_1.CollectibleType.BATTERY]: "Stores energy",
        [isaac_typescript_definitions_1.CollectibleType.STEAM_SALE]: "50% off",
        [isaac_typescript_definitions_1.CollectibleType.ANARCHIST_COOKBOOK]: "Summon bombs",
        [isaac_typescript_definitions_1.CollectibleType.HOURGLASS]: "Temporary enemy slowdown",
        [isaac_typescript_definitions_1.CollectibleType.SISTER_MAGGY]: "Friends 'till the end",
        [isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY]: "Laser tears",
        [isaac_typescript_definitions_1.CollectibleType.CHOCOLATE_MILK]: "Charge shots",
        [isaac_typescript_definitions_1.CollectibleType.GROWTH_HORMONES]: "Speed + DMG up",
        [isaac_typescript_definitions_1.CollectibleType.MINI_MUSH]: "Speed + range up",
        [isaac_typescript_definitions_1.CollectibleType.ROSARY]: "Tears + faith up",
        [isaac_typescript_definitions_1.CollectibleType.CUBE_OF_MEAT]: "Gotta meat 'em all",
        [isaac_typescript_definitions_1.CollectibleType.QUARTER]: "+25 coins",
        [isaac_typescript_definitions_1.CollectibleType.PHD]: "Better pills",
        [isaac_typescript_definitions_1.CollectibleType.XRAY_VISION]: "I've seen everything",
        [isaac_typescript_definitions_1.CollectibleType.MY_LITTLE_UNICORN]: "Temporary badass",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_REVELATIONS]: "Reusable soul protection",
        [isaac_typescript_definitions_1.CollectibleType.MARK]: "DMG + speed up",
        [isaac_typescript_definitions_1.CollectibleType.PACT]: "DMG + tears up",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_CAT]: "9 lives",
        [isaac_typescript_definitions_1.CollectibleType.LORD_OF_THE_PIT]: "Demon wings",
        [isaac_typescript_definitions_1.CollectibleType.NAIL]: "Temporary demon form",
        [isaac_typescript_definitions_1.CollectibleType.WE_NEED_TO_GO_DEEPER]: "Reusable level skip",
        [isaac_typescript_definitions_1.CollectibleType.DECK_OF_CARDS]: "Reusable card generator ",
        [isaac_typescript_definitions_1.CollectibleType.MONSTROS_TOOTH]: "Summon Monstro",
        [isaac_typescript_definitions_1.CollectibleType.LOKIS_HORNS]: "Cross tears",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_CHUBBY]: "Attack buddy",
        [isaac_typescript_definitions_1.CollectibleType.SPIDER_BITE]: "Slow effect",
        [isaac_typescript_definitions_1.CollectibleType.SMALL_ROCK]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.SPELUNKER_HAT]: "See-through doors",
        [isaac_typescript_definitions_1.CollectibleType.SUPER_BANDAGE]: "+2 hearts",
        [isaac_typescript_definitions_1.CollectibleType.GAMEKID]: "Temporary Man-Pac",
        [isaac_typescript_definitions_1.CollectibleType.SACK_OF_PENNIES]: "Gives money",
        [isaac_typescript_definitions_1.CollectibleType.ROBO_BABY]: "Friends 'till the bbbbzzzt",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_CHAD]: "Gives kisses",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SIN]: "Reusable item generator",
        [isaac_typescript_definitions_1.CollectibleType.RELIC]: "Soul generator",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_GISH]: "Sticky friend",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_STEVEN]: "Psychic friend",
        [isaac_typescript_definitions_1.CollectibleType.HALO]: "All stats up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BOTTLE_OF_PILLS]: "Reusable pill generator",
        [isaac_typescript_definitions_1.CollectibleType.COMMON_COLD]: "Poison damage",
        [isaac_typescript_definitions_1.CollectibleType.PARASITE]: "Split shot",
        [isaac_typescript_definitions_1.CollectibleType.D6]: "Reroll your destiny",
        [isaac_typescript_definitions_1.CollectibleType.MR_MEGA]: "Bigger boom",
        [isaac_typescript_definitions_1.CollectibleType.PINKING_SHEARS]: "Cut and run",
        [isaac_typescript_definitions_1.CollectibleType.WAFER]: "Damage resistance",
        [isaac_typescript_definitions_1.CollectibleType.MONEY_EQUALS_POWER]: "$$$ = DMG",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_CONTACTS]: "Freeze effect",
        [isaac_typescript_definitions_1.CollectibleType.BEAN]: "Toot on command",
        [isaac_typescript_definitions_1.CollectibleType.GUARDIAN_ANGEL]: "Extra protection",
        [isaac_typescript_definitions_1.CollectibleType.DEMON_BABY]: "Auto-turret friend",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_KNIFE]: "Stab stab stab",
        [isaac_typescript_definitions_1.CollectibleType.OUIJA_BOARD]: "Spectral tears",
        [isaac_typescript_definitions_1.CollectibleType.NINE_VOLT]: "Quicker charge",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_BIRD]: "Protective buddy",
        [isaac_typescript_definitions_1.CollectibleType.BRIMSTONE]: "Blood laser barrage",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_BAG]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.ODD_MUSHROOM_THIN]: "Tears + speed up, DMG down",
        [isaac_typescript_definitions_1.CollectibleType.ODD_MUSHROOM_LARGE]: "HP + DMG up, speed down",
        [isaac_typescript_definitions_1.CollectibleType.WHORE_OF_BABYLON]: "Curse up",
        [isaac_typescript_definitions_1.CollectibleType.MONSTER_MANUAL]: "Temporary buddy generator",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_SEA_SCROLLS]: "It's a mystery",
        [isaac_typescript_definitions_1.CollectibleType.BOBBY_BOMB]: "Homing bombs",
        [isaac_typescript_definitions_1.CollectibleType.RAZOR_BLADE]: "Feel my pain",
        [isaac_typescript_definitions_1.CollectibleType.FORGET_ME_NOW]: "I don't remember...",
        [isaac_typescript_definitions_1.CollectibleType.FOREVER_ALONE]: "Attack fly",
        [isaac_typescript_definitions_1.CollectibleType.BUCKET_OF_LARD]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.PONY]: "Flight + dash attack",
        [isaac_typescript_definitions_1.CollectibleType.BOMB_BAG]: "Gives bombs",
        [isaac_typescript_definitions_1.CollectibleType.LUMP_OF_COAL]: "My Xmas present",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_PAW]: "Soul converter",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_TAIL]: "Cursed?",
        [isaac_typescript_definitions_1.CollectibleType.IV_BAG]: "Portable blood bank",
        [isaac_typescript_definitions_1.CollectibleType.BEST_FRIEND]: "Friends 'till the end",
        [isaac_typescript_definitions_1.CollectibleType.REMOTE_DETONATOR]: "Remote bomb detonation",
        [isaac_typescript_definitions_1.CollectibleType.STIGMATA]: "DMG + HP up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PURSE]: "More trinket room",
        [isaac_typescript_definitions_1.CollectibleType.BOBS_CURSE]: "+5 poison bombs",
        [isaac_typescript_definitions_1.CollectibleType.PAGEANT_BOY]: "Ultimate grand supreme",
        [isaac_typescript_definitions_1.CollectibleType.SCAPULAR]: "Pray for a miracle",
        [isaac_typescript_definitions_1.CollectibleType.SPEED_BALL]: "Speed + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.BUM_FRIEND]: "He's greedy",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_HEAD]: "Reusable fly hive",
        [isaac_typescript_definitions_1.CollectibleType.PRAYER_CARD]: "Reusable eternity ",
        [isaac_typescript_definitions_1.CollectibleType.NOTCHED_AXE]: "Rocks don't stand a chance",
        [isaac_typescript_definitions_1.CollectibleType.INFESTATION]: "Fly revenge",
        [isaac_typescript_definitions_1.CollectibleType.IPECAC]: "Explosive shots",
        [isaac_typescript_definitions_1.CollectibleType.TOUGH_LOVE]: "Tooth shot",
        [isaac_typescript_definitions_1.CollectibleType.MULLIGAN]: "They grow inside",
        [isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY_2]: "Extra laser",
        [isaac_typescript_definitions_1.CollectibleType.MUTANT_SPIDER]: "Quad shot",
        [isaac_typescript_definitions_1.CollectibleType.CHEMICAL_PEEL]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.PEEPER]: "Plop!",
        [isaac_typescript_definitions_1.CollectibleType.HABIT]: "Item martyr",
        [isaac_typescript_definitions_1.CollectibleType.BLOODY_LUST]: "RAGE!",
        [isaac_typescript_definitions_1.CollectibleType.CRYSTAL_BALL]: "I see my future",
        [isaac_typescript_definitions_1.CollectibleType.SPIRIT_OF_THE_NIGHT]: "Scary",
        [isaac_typescript_definitions_1.CollectibleType.CRACK_THE_SKY]: "Holy white death",
        [isaac_typescript_definitions_1.CollectibleType.ANKH]: "Eternal life?",
        [isaac_typescript_definitions_1.CollectibleType.CELTIC_CROSS]: "Blessing of protection",
        [isaac_typescript_definitions_1.CollectibleType.GHOST_BABY]: "Spectral buddy",
        [isaac_typescript_definitions_1.CollectibleType.CANDLE]: "Reusable flames",
        [isaac_typescript_definitions_1.CollectibleType.CAT_O_NINE_TAILS]: "Shot speed + damage up",
        [isaac_typescript_definitions_1.CollectibleType.D20]: "Reroll the basics",
        [isaac_typescript_definitions_1.CollectibleType.HARLEQUIN_BABY]: "Double shot buddy",
        [isaac_typescript_definitions_1.CollectibleType.EPIC_FETUS]: "On-demand air strike",
        [isaac_typescript_definitions_1.CollectibleType.POLYPHEMUS]: "Mega tears",
        [isaac_typescript_definitions_1.CollectibleType.DADDY_LONGLEGS]: "Daddy's love",
        [isaac_typescript_definitions_1.CollectibleType.SPIDER_BUTT]: "Mass enemy slowdown + damage",
        [isaac_typescript_definitions_1.CollectibleType.SACRIFICIAL_DAGGER]: "My fate protects me",
        [isaac_typescript_definitions_1.CollectibleType.MITRE]: "Blessing of purity",
        [isaac_typescript_definitions_1.CollectibleType.RAINBOW_BABY]: "Random buddy",
        [isaac_typescript_definitions_1.CollectibleType.DADS_KEY]: "Opens all doors...",
        [isaac_typescript_definitions_1.CollectibleType.STEM_CELLS]: "HP + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.PORTABLE_SLOT]: "Gamble 24/7",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_WATER]: "Splash!",
        [isaac_typescript_definitions_1.CollectibleType.FATE]: "Flight eternal",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_BEAN]: "Toot on touch",
        [isaac_typescript_definitions_1.CollectibleType.WHITE_PONY]: "Flight + holy death",
        [isaac_typescript_definitions_1.CollectibleType.SACRED_HEART]: "Homing shots + DMG up",
        [isaac_typescript_definitions_1.CollectibleType.TOOTH_PICKS]: "Tears + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_GRAIL]: "Flight + HP up",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_DOVE]: "Flight + spectral tears",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_RIGHTS]: "Mass enemy damage at a cost",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_HAIRBALL]: "Swing it",
        [isaac_typescript_definitions_1.CollectibleType.ABEL]: "Mirrored buddy",
        [isaac_typescript_definitions_1.CollectibleType.SMB_SUPER_FAN]: "All stats up",
        [isaac_typescript_definitions_1.CollectibleType.PYRO]: "99 bombs",
        [isaac_typescript_definitions_1.CollectibleType.THREE_DOLLAR_BILL]: "Rainbow tears",
        [isaac_typescript_definitions_1.CollectibleType.TELEPATHY_BOOK]: "Temporary psychic shot",
        [isaac_typescript_definitions_1.CollectibleType.MEAT]: "DMG + HP up",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_8_BALL]: "Shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_COIN_PURSE]: "What's all this...?",
        [isaac_typescript_definitions_1.CollectibleType.SQUEEZY]: "Tears up",
        [isaac_typescript_definitions_1.CollectibleType.JESUS_JUICE]: "Damage + range up",
        [isaac_typescript_definitions_1.CollectibleType.BOX]: "Stuff",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_KEY]: "Better chest loot +2 keys",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_EYESHADOW]: "Charm tears",
        [isaac_typescript_definitions_1.CollectibleType.IRON_BAR]: "DMG up + concussive tears",
        [isaac_typescript_definitions_1.CollectibleType.MIDAS_TOUCH]: "Golden touch",
        [isaac_typescript_definitions_1.CollectibleType.HUMBLEING_BUNDLE]: "1+1 free 4Evar",
        [isaac_typescript_definitions_1.CollectibleType.FANNY_PACK]: "Filled with goodies",
        [isaac_typescript_definitions_1.CollectibleType.SHARP_PLUG]: "Infinite charge... at a cost",
        [isaac_typescript_definitions_1.CollectibleType.GUILLOTINE]: "DMG + tears up. An out-of-body experience!",
        [isaac_typescript_definitions_1.CollectibleType.BALL_OF_BANDAGES]: "Gotta lick 'em all!",
        [isaac_typescript_definitions_1.CollectibleType.CHAMPION_BELT]: "DMG + challenge up",
        [isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS]: "Toxic blast +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.GNAWED_LEAF]: "Unbreakable",
        [isaac_typescript_definitions_1.CollectibleType.SPIDERBABY]: "Spider revenge",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_COLLAR]: "Eternal life?",
        [isaac_typescript_definitions_1.CollectibleType.LOST_CONTACT]: "Shielded tears",
        [isaac_typescript_definitions_1.CollectibleType.ANEMIC]: "Toxic blood",
        [isaac_typescript_definitions_1.CollectibleType.GOAT_HEAD]: "He accepts your offering",
        [isaac_typescript_definitions_1.CollectibleType.CEREMONIAL_ROBES]: "DMG + evil up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_WIG]: "You feel itchy...",
        [isaac_typescript_definitions_1.CollectibleType.PLACENTA]: "Regeneration + HP up",
        [isaac_typescript_definitions_1.CollectibleType.OLD_BANDAGE]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.SAD_BOMBS]: "Tear blasts +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.RUBBER_CEMENT]: "Bouncing tears",
        [isaac_typescript_definitions_1.CollectibleType.ANTI_GRAVITY]: "Anti-gravity tears + tears up",
        [isaac_typescript_definitions_1.CollectibleType.PYROMANIAC]: "It hurts so good +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.CRICKETS_BODY]: "Bursting shots + tears up",
        [isaac_typescript_definitions_1.CollectibleType.GIMPY]: "Sweet suffering",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_LOTUS]: "HP up x3",
        [isaac_typescript_definitions_1.CollectibleType.PIGGY_BANK]: "My life savings",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PERFUME]: "Fear shot + tears up",
        [isaac_typescript_definitions_1.CollectibleType.MONSTROS_LUNG]: "Charged burst attack",
        [isaac_typescript_definitions_1.CollectibleType.ABADDON]: "Evil + DMG up + fear shot",
        [isaac_typescript_definitions_1.CollectibleType.BALL_OF_TAR]: "Sticky feet...",
        [isaac_typescript_definitions_1.CollectibleType.STOP_WATCH]: "Let's slow this down a bit...",
        [isaac_typescript_definitions_1.CollectibleType.TINY_PLANET]: "Orbiting tears + range up",
        [isaac_typescript_definitions_1.CollectibleType.INFESTATION_2]: "Infestation shot",
        // There is no `CollectibleType` with a value of 235.
        [isaac_typescript_definitions_1.CollectibleType.E_COLI]: "Turdy touch",
        [isaac_typescript_definitions_1.CollectibleType.DEATHS_TOUCH]: "Piercing shots + DMG up",
        [isaac_typescript_definitions_1.CollectibleType.KEY_PIECE_1]: "???",
        [isaac_typescript_definitions_1.CollectibleType.KEY_PIECE_2]: "???",
        [isaac_typescript_definitions_1.CollectibleType.EXPERIMENTAL_TREATMENT]: "Some stats up, some stats down",
        [isaac_typescript_definitions_1.CollectibleType.CONTRACT_FROM_BELOW]: "Wealth... but at what cost?",
        [isaac_typescript_definitions_1.CollectibleType.INFAMY]: "Blocks damage... sometimes",
        [isaac_typescript_definitions_1.CollectibleType.TRINITY_SHIELD]: "You feel guarded",
        [isaac_typescript_definitions_1.CollectibleType.TECH_5]: "It's still being tested...",
        [isaac_typescript_definitions_1.CollectibleType.TWENTY_TWENTY]: "Double shot",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_MAP]: "Secrets",
        [isaac_typescript_definitions_1.CollectibleType.BFFS]: "Your friends rule",
        [isaac_typescript_definitions_1.CollectibleType.HIVE_MIND]: "Giant spiders and flies",
        [isaac_typescript_definitions_1.CollectibleType.THERES_OPTIONS]: "More options",
        [isaac_typescript_definitions_1.CollectibleType.BOGO_BOMBS]: "1+1 BOOM!",
        [isaac_typescript_definitions_1.CollectibleType.STARTER_DECK]: "Extra card room",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_BAGGY]: "Extra pill room",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_SCAB]: "HP + luck up",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_CLOT]: "DMG + range up",
        [isaac_typescript_definitions_1.CollectibleType.SCREW]: "Tears + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.HOT_BOMBS]: "Burning blast +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.FIRE_MIND]: "Flaming tears",
        [isaac_typescript_definitions_1.CollectibleType.MISSING_NO]: "Syntax error",
        [isaac_typescript_definitions_1.CollectibleType.DARK_MATTER]: "DMG up + fear shot",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_CANDLE]: "Curse immunity + evil up",
        [isaac_typescript_definitions_1.CollectibleType.PROPTOSIS]: "Short range mega tears",
        [isaac_typescript_definitions_1.CollectibleType.MISSING_PAGE_2]: "Evil up. Your enemies will pay!",
        [isaac_typescript_definitions_1.CollectibleType.CLEAR_RUNE]: "Rune mimic",
        [isaac_typescript_definitions_1.CollectibleType.SMART_FLY]: "Revenge fly",
        [isaac_typescript_definitions_1.CollectibleType.DRY_BABY]: "Immortal friend",
        [isaac_typescript_definitions_1.CollectibleType.JUICY_SACK]: "Sticky babies",
        [isaac_typescript_definitions_1.CollectibleType.ROBO_BABY_2]: "We worked out all the kinks",
        [isaac_typescript_definitions_1.CollectibleType.ROTTEN_BABY]: "Infested friend",
        [isaac_typescript_definitions_1.CollectibleType.HEADLESS_BABY]: "Bloody friend",
        [isaac_typescript_definitions_1.CollectibleType.LEECH]: "Blood sucker",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERY_SACK]: "?",
        [isaac_typescript_definitions_1.CollectibleType.BBF]: "Big Beautiful Fly",
        [isaac_typescript_definitions_1.CollectibleType.BOBS_BRAIN]: "Explosive thoughts",
        [isaac_typescript_definitions_1.CollectibleType.BEST_BUD]: "Sworn protector",
        [isaac_typescript_definitions_1.CollectibleType.LIL_BRIMSTONE]: "Evil friend",
        [isaac_typescript_definitions_1.CollectibleType.ISAACS_HEART]: "Protect it",
        [isaac_typescript_definitions_1.CollectibleType.LIL_HAUNT]: "Fear him",
        [isaac_typescript_definitions_1.CollectibleType.DARK_BUM]: "He wants to take your life",
        [isaac_typescript_definitions_1.CollectibleType.BIG_FAN]: "Fat protector",
        [isaac_typescript_definitions_1.CollectibleType.SISSY_LONGLEGS]: "She loves you",
        [isaac_typescript_definitions_1.CollectibleType.PUNCHING_BAG]: "Scape goat",
        [isaac_typescript_definitions_1.CollectibleType.HOW_TO_JUMP]: "It's time you learned how",
        [isaac_typescript_definitions_1.CollectibleType.D100]: "REEROLLLLL!",
        [isaac_typescript_definitions_1.CollectibleType.D4]: "Reroll into something else",
        [isaac_typescript_definitions_1.CollectibleType.D10]: "Reroll enemies",
        [isaac_typescript_definitions_1.CollectibleType.BLANK_CARD]: "Card mimic",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SECRETS]: "Tome of knowledge",
        [isaac_typescript_definitions_1.CollectibleType.BOX_OF_SPIDERS]: "It's a box of spiders",
        [isaac_typescript_definitions_1.CollectibleType.RED_CANDLE]: "Flame on",
        [isaac_typescript_definitions_1.CollectibleType.JAR]: "Save your life",
        [isaac_typescript_definitions_1.CollectibleType.FLUSH]: "...",
        [isaac_typescript_definitions_1.CollectibleType.SATANIC_BIBLE]: "Reusable evil... but at what cost?",
        [isaac_typescript_definitions_1.CollectibleType.HEAD_OF_KRAMPUS]: "Krampus rage",
        [isaac_typescript_definitions_1.CollectibleType.BUTTER_BEAN]: "Reusable knock-back",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_FINGERS]: "Pay to win",
        [isaac_typescript_definitions_1.CollectibleType.CONVERTER]: "Convert your soul",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_BOX]: "? ?",
        [isaac_typescript_definitions_1.CollectibleType.UNICORN_STUMP]: "You feel stumped",
        [isaac_typescript_definitions_1.CollectibleType.TAURUS]: "Speed down + rage is building",
        [isaac_typescript_definitions_1.CollectibleType.ARIES]: "Ramming speed",
        [isaac_typescript_definitions_1.CollectibleType.CANCER]: "HP up + you feel protected",
        [isaac_typescript_definitions_1.CollectibleType.LEO]: "Stompy",
        [isaac_typescript_definitions_1.CollectibleType.VIRGO]: "You feel refreshed and protected",
        [isaac_typescript_definitions_1.CollectibleType.LIBRA]: "You feel balanced",
        [isaac_typescript_definitions_1.CollectibleType.SCORPIO]: "Poison tears",
        [isaac_typescript_definitions_1.CollectibleType.SAGITTARIUS]: "Piercing shots + speed up",
        [isaac_typescript_definitions_1.CollectibleType.CAPRICORN]: "All stats up",
        [isaac_typescript_definitions_1.CollectibleType.AQUARIUS]: "Trail of tears",
        [isaac_typescript_definitions_1.CollectibleType.PISCES]: "Tears up + knock-back shot",
        [isaac_typescript_definitions_1.CollectibleType.EVES_MASCARA]: "DMG up, tears + shot speed down",
        [isaac_typescript_definitions_1.CollectibleType.JUDAS_SHADOW]: "Sweet revenge",
        [isaac_typescript_definitions_1.CollectibleType.MAGGYS_BOW]: "HP up + you feel healthy",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_MANTLE]: "Holy shield",
        [isaac_typescript_definitions_1.CollectibleType.THUNDER_THIGHS]: "HP up + speed down + you feel stompy",
        [isaac_typescript_definitions_1.CollectibleType.STRANGE_ATTRACTOR]: "Magnetic tears",
        [isaac_typescript_definitions_1.CollectibleType.CURSED_EYE]: "Cursed charge shot",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERIOUS_LIQUID]: "Toxic splash damage",
        [isaac_typescript_definitions_1.CollectibleType.GEMINI]: "Conjoined friend",
        [isaac_typescript_definitions_1.CollectibleType.CAINS_OTHER_EYE]: "Near-sighted friend",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_BABYS_ONLY_FRIEND]: "Controlled friend",
        [isaac_typescript_definitions_1.CollectibleType.SAMSONS_CHAINS]: "The ol' ball and chain",
        [isaac_typescript_definitions_1.CollectibleType.MONGO_BABY]: "Mongo friend",
        [isaac_typescript_definitions_1.CollectibleType.ISAACS_TEARS]: "Collected tears",
        [isaac_typescript_definitions_1.CollectibleType.UNDEFINED]: "Undefined",
        [isaac_typescript_definitions_1.CollectibleType.SCISSORS]: "Lose your head",
        [isaac_typescript_definitions_1.CollectibleType.BREATH_OF_LIFE]: "Invincibility at a cost",
        [isaac_typescript_definitions_1.CollectibleType.POLAROID]: "Fate chosen",
        [isaac_typescript_definitions_1.CollectibleType.NEGATIVE]: "Fate chosen",
        [isaac_typescript_definitions_1.CollectibleType.LUDOVICO_TECHNIQUE]: "Controlled tears",
        [isaac_typescript_definitions_1.CollectibleType.SOY_MILK]: "DMG down + tears way up",
        [isaac_typescript_definitions_1.CollectibleType.GODHEAD]: "God tears",
        [isaac_typescript_definitions_1.CollectibleType.LAZARUS_RAGS]: "Eternal life?",
        [isaac_typescript_definitions_1.CollectibleType.MIND]: "I know all",
        [isaac_typescript_definitions_1.CollectibleType.BODY]: "I feel all",
        [isaac_typescript_definitions_1.CollectibleType.SOUL]: "I am all",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_ONION]: "Toxic aura tears",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_WATCH]: "I think it's broken",
        [isaac_typescript_definitions_1.CollectibleType.BOOMERANG]: "It will never leave you",
        [isaac_typescript_definitions_1.CollectibleType.SAFETY_PIN]: "Evil + range + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.CAFFEINE_PILL]: "Speed up + size down",
        [isaac_typescript_definitions_1.CollectibleType.TORN_PHOTO]: "Tears + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_CAP]: "HP + tears up + shot speed down",
        [isaac_typescript_definitions_1.CollectibleType.LATCH_KEY]: "Luck up",
        [isaac_typescript_definitions_1.CollectibleType.MATCH_BOOK]: "Evil up",
        [isaac_typescript_definitions_1.CollectibleType.SYNTHOIL]: "DMG + range up",
        [isaac_typescript_definitions_1.CollectibleType.SNACK]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.DIPLOPIA]: "Double item vision",
        [isaac_typescript_definitions_1.CollectibleType.PLACEBO]: "Pill mimic",
        [isaac_typescript_definitions_1.CollectibleType.WOODEN_NICKEL]: "Flip a coin",
        [isaac_typescript_definitions_1.CollectibleType.TOXIC_SHOCK]: "Mass poison",
        [isaac_typescript_definitions_1.CollectibleType.MEGA_BEAN]: "Giga fart!",
        [isaac_typescript_definitions_1.CollectibleType.GLASS_CANNON]: "Be gentle...",
        [isaac_typescript_definitions_1.CollectibleType.BOMBER_BOY]: "Cross blast + 5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.CRACK_JACKS]: "HP up. Don't swallow the prize!",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PEARLS]: "Range + luck up",
        [isaac_typescript_definitions_1.CollectibleType.CAR_BATTERY]: "Active power up",
        [isaac_typescript_definitions_1.CollectibleType.BOX_OF_FRIENDS]: "Double your friends",
        [isaac_typescript_definitions_1.CollectibleType.WIZ]: "Double wiz shot!",
        [isaac_typescript_definitions_1.CollectibleType.EIGHT_INCH_NAILS]: "Stick it to 'em!",
        [isaac_typescript_definitions_1.CollectibleType.INCUBUS]: "Dark friend",
        [isaac_typescript_definitions_1.CollectibleType.FATES_REWARD]: "Your fate beside you",
        [isaac_typescript_definitions_1.CollectibleType.LIL_CHEST]: "What's in the box?",
        [isaac_typescript_definitions_1.CollectibleType.SWORN_PROTECTOR]: "Protective friend",
        [isaac_typescript_definitions_1.CollectibleType.FRIEND_ZONE]: "Friendly fly",
        [isaac_typescript_definitions_1.CollectibleType.LOST_FLY]: "Lost protector",
        [isaac_typescript_definitions_1.CollectibleType.SCATTER_BOMBS]: "We put bombs in your bombs!",
        [isaac_typescript_definitions_1.CollectibleType.STICKY_BOMBS]: "Egg sack bombs!",
        [isaac_typescript_definitions_1.CollectibleType.EPIPHORA]: "Intensifying tears",
        [isaac_typescript_definitions_1.CollectibleType.CONTINUUM]: "Transcendent tears",
        [isaac_typescript_definitions_1.CollectibleType.MR_DOLLY]: "Range + tears up",
        [isaac_typescript_definitions_1.CollectibleType.CURSE_OF_THE_TOWER]: "Embrace chaos",
        [isaac_typescript_definitions_1.CollectibleType.CHARGED_BABY]: "Bbbzzzzzt! ",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_EYE]: "Accuracy brings power",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_LIGHT]: "Holy death shot",
        [isaac_typescript_definitions_1.CollectibleType.HOST_HAT]: "Blast resistance",
        [isaac_typescript_definitions_1.CollectibleType.RESTOCK]: "Never ending stores!",
        [isaac_typescript_definitions_1.CollectibleType.BURSTING_SACK]: "Spider love",
        [isaac_typescript_definitions_1.CollectibleType.NUMBER_TWO]: "Uh oh...",
        [isaac_typescript_definitions_1.CollectibleType.PUPULA_DUPLEX]: "Wide shot",
        [isaac_typescript_definitions_1.CollectibleType.PAY_TO_PLAY]: "Money talks",
        [isaac_typescript_definitions_1.CollectibleType.EDENS_BLESSING]: "Tears up + your future shines brighter",
        [isaac_typescript_definitions_1.CollectibleType.FRIEND_BALL]: "Gotta fetch 'em all!",
        [isaac_typescript_definitions_1.CollectibleType.TEAR_DETONATOR]: "Remote tear detonation",
        [isaac_typescript_definitions_1.CollectibleType.LIL_GURDY]: "A gurd of your own!",
        [isaac_typescript_definitions_1.CollectibleType.BUMBO]: "Bumbo want coin!",
        [isaac_typescript_definitions_1.CollectibleType.D12]: "Rerolls rocks",
        [isaac_typescript_definitions_1.CollectibleType.CENSER]: "Peace be with you",
        [isaac_typescript_definitions_1.CollectibleType.KEY_BUM]: "He wants your keys!",
        [isaac_typescript_definitions_1.CollectibleType.RUNE_BAG]: "Rune generator",
        [isaac_typescript_definitions_1.CollectibleType.SERAPHIM]: "Sworn friend",
        [isaac_typescript_definitions_1.CollectibleType.BETRAYAL]: "Turn your enemy",
        [isaac_typescript_definitions_1.CollectibleType.ZODIAC]: "The heavens will change you",
        [isaac_typescript_definitions_1.CollectibleType.SERPENTS_KISS]: "The kiss of death",
        [isaac_typescript_definitions_1.CollectibleType.MARKED]: "Directed tears",
        [isaac_typescript_definitions_1.CollectibleType.TECH_X]: "Laser ring tears",
        [isaac_typescript_definitions_1.CollectibleType.VENTRICLE_RAZOR]: "Short cutter",
        [isaac_typescript_definitions_1.CollectibleType.TRACTOR_BEAM]: "Controlled tears",
        [isaac_typescript_definitions_1.CollectibleType.GODS_FLESH]: "Shrink shot!",
        [isaac_typescript_definitions_1.CollectibleType.MAW_OF_THE_VOID]: "Consume thy enemy!",
        [isaac_typescript_definitions_1.CollectibleType.SPEAR_OF_DESTINY]: "Your destiny",
        [isaac_typescript_definitions_1.CollectibleType.EXPLOSIVO]: "Sticky bomb shot",
        [isaac_typescript_definitions_1.CollectibleType.CHAOS]: "!!!",
        [isaac_typescript_definitions_1.CollectibleType.SPIDER_MOD]: "Mod buddy",
        [isaac_typescript_definitions_1.CollectibleType.FARTING_BABY]: "He farts",
        [isaac_typescript_definitions_1.CollectibleType.GB_BUG]: "Double tap glitch",
        [isaac_typescript_definitions_1.CollectibleType.D8]: "Reroll stats",
        [isaac_typescript_definitions_1.CollectibleType.PURITY]: "Aura stat boost",
        [isaac_typescript_definitions_1.CollectibleType.ATHAME]: "Call to the void",
        [isaac_typescript_definitions_1.CollectibleType.EMPTY_VESSEL]: "I reward an empty vessel",
        [isaac_typescript_definitions_1.CollectibleType.EVIL_EYE]: "Eye shot",
        [isaac_typescript_definitions_1.CollectibleType.LUSTY_BLOOD]: "Their blood brings rage!",
        [isaac_typescript_definitions_1.CollectibleType.CAMBION_CONCEPTION]: "Feed them hate",
        [isaac_typescript_definitions_1.CollectibleType.IMMACULATE_CONCEPTION]: "Feed them love",
        [isaac_typescript_definitions_1.CollectibleType.MORE_OPTIONS]: "There's options",
        [isaac_typescript_definitions_1.CollectibleType.CROWN_OF_LIGHT]: "The untainted gain power",
        [isaac_typescript_definitions_1.CollectibleType.DEEP_POCKETS]: "More money!",
        [isaac_typescript_definitions_1.CollectibleType.SUCCUBUS]: "Damage booster",
        [isaac_typescript_definitions_1.CollectibleType.FRUIT_CAKE]: "Rainbow effects!",
        [isaac_typescript_definitions_1.CollectibleType.TELEPORT_2]: "I-Teleport!",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_POWDER]: "Spin the black circle!",
        [isaac_typescript_definitions_1.CollectibleType.KIDNEY_BEAN]: "Love toots",
        [isaac_typescript_definitions_1.CollectibleType.GLOWING_HOUR_GLASS]: "Turn back time",
        [isaac_typescript_definitions_1.CollectibleType.CIRCLE_OF_PROTECTION]: "Protect me from myself",
        [isaac_typescript_definitions_1.CollectibleType.SACK_HEAD]: "More sacks!",
        [isaac_typescript_definitions_1.CollectibleType.NIGHT_LIGHT]: "Scared of the dark?",
        [isaac_typescript_definitions_1.CollectibleType.OBSESSED_FAN]: "Follows my every move...",
        [isaac_typescript_definitions_1.CollectibleType.MINE_CRAFTER]: "Booom!",
        [isaac_typescript_definitions_1.CollectibleType.PJS]: "You feel cozy",
        [isaac_typescript_definitions_1.CollectibleType.HEAD_OF_THE_KEEPER]: "Penny tears",
        [isaac_typescript_definitions_1.CollectibleType.PAPA_FLY]: "Turret follower",
        [isaac_typescript_definitions_1.CollectibleType.MULTIDIMENSIONAL_BABY]: "ydduB Buddy",
        [isaac_typescript_definitions_1.CollectibleType.GLITTER_BOMBS]: "Prize bombs",
        [isaac_typescript_definitions_1.CollectibleType.MY_SHADOW]: "Me! And my shaaaadow!",
        [isaac_typescript_definitions_1.CollectibleType.JAR_OF_FLIES]: "Bug catcher",
        [isaac_typescript_definitions_1.CollectibleType.LIL_LOKI]: "4-way buddy!",
        [isaac_typescript_definitions_1.CollectibleType.MILK]: "Don't cry over it...",
        [isaac_typescript_definitions_1.CollectibleType.D7]: "Roll again",
        [isaac_typescript_definitions_1.CollectibleType.BINKY]: "Tears up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BOX]: "What's inside?",
        [isaac_typescript_definitions_1.CollectibleType.KIDNEY_STONE]: "Matt's kidney stone",
        [isaac_typescript_definitions_1.CollectibleType.MEGA_BLAST]: "Laser breath",
        [isaac_typescript_definitions_1.CollectibleType.DARK_PRINCES_CROWN]: "Loss is power",
        [isaac_typescript_definitions_1.CollectibleType.APPLE]: "Trick or treat?",
        [isaac_typescript_definitions_1.CollectibleType.LEAD_PENCIL]: "He's a bleeder!",
        [isaac_typescript_definitions_1.CollectibleType.DOG_TOOTH]: "Bark at the moon!",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_TOOTH]: "Toxic breath",
        [isaac_typescript_definitions_1.CollectibleType.LINGER_BEAN]: "Crying makes me toot",
        [isaac_typescript_definitions_1.CollectibleType.SHARD_OF_GLASS]: "Blood and guts!",
        [isaac_typescript_definitions_1.CollectibleType.METAL_PLATE]: "It itches...",
        [isaac_typescript_definitions_1.CollectibleType.EYE_OF_GREED]: "Gold tears!",
        [isaac_typescript_definitions_1.CollectibleType.TAROT_CLOTH]: "I see the future",
        [isaac_typescript_definitions_1.CollectibleType.VARICOSE_VEINS]: "I'm leaking...",
        [isaac_typescript_definitions_1.CollectibleType.COMPOUND_FRACTURE]: "Bone tears!",
        [isaac_typescript_definitions_1.CollectibleType.POLYDACTYLY]: "Hold me!",
        [isaac_typescript_definitions_1.CollectibleType.DADS_LOST_COIN]: "I remember this...",
        [isaac_typescript_definitions_1.CollectibleType.MIDNIGHT_SNACK]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.CONE_HEAD]: "Hard headed!",
        [isaac_typescript_definitions_1.CollectibleType.BELLY_BUTTON]: "What's in there?",
        [isaac_typescript_definitions_1.CollectibleType.SINUS_INFECTION]: "Booger tears!",
        [isaac_typescript_definitions_1.CollectibleType.GLAUCOMA]: "Blind tears!",
        [isaac_typescript_definitions_1.CollectibleType.PARASITOID]: "Egg tears!",
        [isaac_typescript_definitions_1.CollectibleType.EYE_OF_BELIAL]: "Possessed tears!",
        [isaac_typescript_definitions_1.CollectibleType.SULFURIC_ACID]: "Acid tears!",
        [isaac_typescript_definitions_1.CollectibleType.GLYPH_OF_BALANCE]: "A gift from above",
        [isaac_typescript_definitions_1.CollectibleType.ANALOG_STICK]: "360 tears!",
        [isaac_typescript_definitions_1.CollectibleType.CONTAGION]: "Outbreak!",
        [isaac_typescript_definitions_1.CollectibleType.FINGER]: "Watch where you point that!",
        [isaac_typescript_definitions_1.CollectibleType.SHADE]: "It follows",
        [isaac_typescript_definitions_1.CollectibleType.DEPRESSION]: ":(",
        [isaac_typescript_definitions_1.CollectibleType.HUSHY]: "Lil hush!",
        [isaac_typescript_definitions_1.CollectibleType.LIL_MONSTRO]: "Ain't he cute?",
        [isaac_typescript_definitions_1.CollectibleType.KING_BABY]: "Hail to the king baby",
        [isaac_typescript_definitions_1.CollectibleType.BIG_CHUBBY]: "Chub chub",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_GLASS_CANNON]: "You broke it!",
        [isaac_typescript_definitions_1.CollectibleType.PLAN_C]: "My last resort",
        [isaac_typescript_definitions_1.CollectibleType.D1]: "What will it be?",
        [isaac_typescript_definitions_1.CollectibleType.VOID]: "Consume",
        [isaac_typescript_definitions_1.CollectibleType.PAUSE]: "Stop!",
        [isaac_typescript_definitions_1.CollectibleType.SMELTER]: "Trinket melter!",
        [isaac_typescript_definitions_1.CollectibleType.COMPOST]: "Gain more friends!",
        [isaac_typescript_definitions_1.CollectibleType.DATAMINER]: "109",
        [isaac_typescript_definitions_1.CollectibleType.CLICKER]: "Change",
        [isaac_typescript_definitions_1.CollectibleType.MAMA_MEGA]: "BOOOOOOOOOM!",
        [isaac_typescript_definitions_1.CollectibleType.WAIT_WHAT]: "I can't believe it's not butter bean!",
        [isaac_typescript_definitions_1.CollectibleType.CROOKED_PENNY]: "50/50",
        [isaac_typescript_definitions_1.CollectibleType.DULL_RAZOR]: "I feel numb...",
        [isaac_typescript_definitions_1.CollectibleType.POTATO_PEELER]: "A pound of flesh...",
        [isaac_typescript_definitions_1.CollectibleType.METRONOME]: "Waggles a finger",
        [isaac_typescript_definitions_1.CollectibleType.D_INFINITY]: "Reroll forever",
        [isaac_typescript_definitions_1.CollectibleType.EDENS_SOUL]: "...",
        [isaac_typescript_definitions_1.CollectibleType.ACID_BABY]: "Pills pills pills!",
        [isaac_typescript_definitions_1.CollectibleType.YO_LISTEN]: "Yo listen!",
        [isaac_typescript_definitions_1.CollectibleType.ADRENALINE]: "Panic = power",
        [isaac_typescript_definitions_1.CollectibleType.JACOBS_LADDER]: "Electric tears",
        [isaac_typescript_definitions_1.CollectibleType.GHOST_PEPPER]: "Flame tears",
        [isaac_typescript_definitions_1.CollectibleType.EUTHANASIA]: "Needle shot",
        [isaac_typescript_definitions_1.CollectibleType.CAMO_UNDIES]: "Camo kid",
        [isaac_typescript_definitions_1.CollectibleType.DUALITY]: "You feel very balanced",
        [isaac_typescript_definitions_1.CollectibleType.EUCHARIST]: "Peace be with you",
        [isaac_typescript_definitions_1.CollectibleType.SACK_OF_SACKS]: "Gives sacks",
        [isaac_typescript_definitions_1.CollectibleType.GREEDS_GULLET]: "Money = health!",
        [isaac_typescript_definitions_1.CollectibleType.LARGE_ZIT]: "Creep shots",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_HORN]: "Big brother is watching",
        [isaac_typescript_definitions_1.CollectibleType.BROWN_NUGGET]: "Friendly fly",
        [isaac_typescript_definitions_1.CollectibleType.POKE_GO]: "Gotta catch em...",
        [isaac_typescript_definitions_1.CollectibleType.BACKSTABBER]: "Watch your back!",
        [isaac_typescript_definitions_1.CollectibleType.SHARP_STRAW]: "More blood!",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_RAZOR]: "It's sharp!",
        [isaac_typescript_definitions_1.CollectibleType.BLOODSHOT_EYE]: "Bloody friend",
        [isaac_typescript_definitions_1.CollectibleType.DELIRIOUS]: "Unleash the power!",
        [isaac_typescript_definitions_1.CollectibleType.ANGRY_FLY]: "He's violent",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_HOLE]: "Nothing can escape",
        [isaac_typescript_definitions_1.CollectibleType.BOZO]: "Party time!",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_MODEM]: "Lag!",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERY_GIFT]: "Wrapped up nice for you!",
        [isaac_typescript_definitions_1.CollectibleType.SPRINKLER]: "Sprinkles.",
        [isaac_typescript_definitions_1.CollectibleType.FAST_BOMBS]: "Rapid bomb drops",
        [isaac_typescript_definitions_1.CollectibleType.BUDDY_IN_A_BOX]: "What could it be?!",
        [isaac_typescript_definitions_1.CollectibleType.LIL_DELIRIUM]: "Delirious friend",
        [isaac_typescript_definitions_1.CollectibleType.JUMPER_CABLES]: "Bloody recharge",
        [isaac_typescript_definitions_1.CollectibleType.COUPON]: "Allow 6 weeks for delivery",
        [isaac_typescript_definitions_1.CollectibleType.TELEKINESIS]: "Power of the mind",
        [isaac_typescript_definitions_1.CollectibleType.MOVING_BOX]: "Pack and unpack",
        [isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY_ZERO]: "Static tears",
        [isaac_typescript_definitions_1.CollectibleType.LEPROSY]: "You're tearing me apart!",
        [isaac_typescript_definitions_1.CollectibleType.SEVEN_SEALS]: "Lil harbingers!",
        [isaac_typescript_definitions_1.CollectibleType.MR_ME]: "Caaan do!",
        [isaac_typescript_definitions_1.CollectibleType.ANGELIC_PRISM]: "Eclipsed by the moon",
        [isaac_typescript_definitions_1.CollectibleType.POP]: "Eyeball tears",
        [isaac_typescript_definitions_1.CollectibleType.DEATHS_LIST]: "Just hope you're not next...",
        [isaac_typescript_definitions_1.CollectibleType.HAEMOLACRIA]: "I'm seeing red...",
        [isaac_typescript_definitions_1.CollectibleType.LACHRYPHAGY]: "Feed them!",
        [isaac_typescript_definitions_1.CollectibleType.TRISAGION]: "Smite thy enemy",
        [isaac_typescript_definitions_1.CollectibleType.SCHOOLBAG]: "Extra active item room",
        [isaac_typescript_definitions_1.CollectibleType.BLANKET]: "You feel safe",
        [isaac_typescript_definitions_1.CollectibleType.SACRIFICIAL_ALTAR]: "He demands a sacrifice",
        [isaac_typescript_definitions_1.CollectibleType.LIL_SPEWER]: "Puking buddy",
        [isaac_typescript_definitions_1.CollectibleType.MARBLES]: "Choking hazard",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERY_EGG]: "Sacrificial insemination",
        [isaac_typescript_definitions_1.CollectibleType.FLAT_STONE]: "Skipping tears",
        [isaac_typescript_definitions_1.CollectibleType.MARROW]: "HP up?",
        [isaac_typescript_definitions_1.CollectibleType.SLIPPED_RIB]: "Projectile shield",
        [isaac_typescript_definitions_1.CollectibleType.HALLOWED_GROUND]: "Portable sanctuary",
        [isaac_typescript_definitions_1.CollectibleType.POINTY_RIB]: "Stabbing time",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_THE_DEAD]: "Rise from the grave",
        [isaac_typescript_definitions_1.CollectibleType.DADS_RING]: "Father's blessing",
        [isaac_typescript_definitions_1.CollectibleType.DIVORCE_PAPERS]: "Tears up + you feel empty",
        [isaac_typescript_definitions_1.CollectibleType.JAW_BONE]: "Fetch!",
        [isaac_typescript_definitions_1.CollectibleType.BRITTLE_BONES]: "Everything hurts",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_SHOVEL_1]: "It feels cursed",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_SHOVEL_2]: "It feels cursed",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_SHOVEL]: "Lost but not forgotten",
        [isaac_typescript_definitions_1.CollectibleType.MUCORMYCOSIS]: "Spore shot",
        [isaac_typescript_definitions_1.CollectibleType.TWO_SPOOKY]: "4me",
        [isaac_typescript_definitions_1.CollectibleType.GOLDEN_RAZOR]: "Pain from gain",
        [isaac_typescript_definitions_1.CollectibleType.SULFUR]: "Temporary demon form",
        [isaac_typescript_definitions_1.CollectibleType.FORTUNE_COOKIE]: "Reusable fortunes",
        [isaac_typescript_definitions_1.CollectibleType.EYE_SORE]: "More eyes",
        [isaac_typescript_definitions_1.CollectibleType.ONE_HUNDRED_TWENTY_VOLT]: "Zap!",
        [isaac_typescript_definitions_1.CollectibleType.IT_HURTS]: "No it doesn't...",
        [isaac_typescript_definitions_1.CollectibleType.ALMOND_MILK]: "DMG down + tears up + you feel nutty",
        [isaac_typescript_definitions_1.CollectibleType.ROCK_BOTTOM]: "It's only up from there",
        [isaac_typescript_definitions_1.CollectibleType.NANCY_BOMBS]: "Random blast +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.BAR_OF_SOAP]: "Tears + shot speed up",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_PUPPY]: "What a cute little thing!",
        [isaac_typescript_definitions_1.CollectibleType.DREAM_CATCHER]: "Sweet dreams",
        [isaac_typescript_definitions_1.CollectibleType.PASCHAL_CANDLE]: "Keep the flame burning",
        [isaac_typescript_definitions_1.CollectibleType.DIVINE_INTERVENTION]: "Double tap shield",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_OATH]: "Bleed me dry",
        [isaac_typescript_definitions_1.CollectibleType.PLAYDOUGH_COOKIE]: "Tasty rainbow",
        [isaac_typescript_definitions_1.CollectibleType.ORPHAN_SOCKS]: "Speed up + your feet feel stronger",
        [isaac_typescript_definitions_1.CollectibleType.EYE_OF_THE_OCCULT]: "DMG up + range up + controlled tears",
        [isaac_typescript_definitions_1.CollectibleType.IMMACULATE_HEART]: "Halo of tears",
        [isaac_typescript_definitions_1.CollectibleType.MONSTRANCE]: "Purifying light",
        [isaac_typescript_definitions_1.CollectibleType.INTRUDER]: "Invasive friend",
        [isaac_typescript_definitions_1.CollectibleType.DIRTY_MIND]: "Filthy friends",
        [isaac_typescript_definitions_1.CollectibleType.DAMOCLES]: "A king's fortune... but at what cost?",
        [isaac_typescript_definitions_1.CollectibleType.FREE_LEMONADE]: "Party time!",
        [isaac_typescript_definitions_1.CollectibleType.SPIRIT_SWORD]: "Divine blade",
        [isaac_typescript_definitions_1.CollectibleType.RED_KEY]: "Explore the other side",
        [isaac_typescript_definitions_1.CollectibleType.PSY_FLY]: "Flamboyant protector",
        [isaac_typescript_definitions_1.CollectibleType.WAVY_CAP]: "Tears up. A mind changing experience!",
        [isaac_typescript_definitions_1.CollectibleType.ROCKET_IN_A_JAR]: "Rocket propulsion +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_VIRTUES]: "Spiritual companionship",
        [isaac_typescript_definitions_1.CollectibleType.ALABASTER_BOX]: "A sacred offering",
        [isaac_typescript_definitions_1.CollectibleType.STAIRWAY]: "May you get what you came for",
        // There is no `CollectibleType` with a value of 587.
        [isaac_typescript_definitions_1.CollectibleType.SOL]: "Radiant victory",
        [isaac_typescript_definitions_1.CollectibleType.LUNA]: "The moon's blessing shines upon you",
        [isaac_typescript_definitions_1.CollectibleType.MERCURIUS]: "Speed up + you feel elusive",
        [isaac_typescript_definitions_1.CollectibleType.VENUS]: "HP up + you feel pretty",
        [isaac_typescript_definitions_1.CollectibleType.TERRA]: "Born to rock",
        [isaac_typescript_definitions_1.CollectibleType.MARS]: "Double tap dash",
        [isaac_typescript_definitions_1.CollectibleType.JUPITER]: "You're a gas giant!",
        [isaac_typescript_definitions_1.CollectibleType.SATURNUS]: "Ring of tears",
        [isaac_typescript_definitions_1.CollectibleType.URANUS]: "Ice tears",
        [isaac_typescript_definitions_1.CollectibleType.NEPTUNUS]: "Open the floodgates",
        [isaac_typescript_definitions_1.CollectibleType.PLUTO]: "Size down",
        [isaac_typescript_definitions_1.CollectibleType.VOODOO_HEAD]: "Extra curse rooms",
        [isaac_typescript_definitions_1.CollectibleType.EYE_DROPS]: "Tears up",
        [isaac_typescript_definitions_1.CollectibleType.ACT_OF_CONTRITION]: "Tears up, you feel forgiven",
        [isaac_typescript_definitions_1.CollectibleType.MEMBER_CARD]: "Exclusive access!",
        [isaac_typescript_definitions_1.CollectibleType.BATTERY_PACK]: "Instant energy!",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BRACELET]: "Mother's strength",
        [isaac_typescript_definitions_1.CollectibleType.SCOOPER]: "Plop!",
        [isaac_typescript_definitions_1.CollectibleType.OCULAR_RIFT]: "Stare into the abyss",
        [isaac_typescript_definitions_1.CollectibleType.BOILED_BABY]: "Messy friend",
        [isaac_typescript_definitions_1.CollectibleType.FREEZER_BABY]: "Iced iced baby",
        [isaac_typescript_definitions_1.CollectibleType.ETERNAL_D6]: "???",
        [isaac_typescript_definitions_1.CollectibleType.BIRD_CAGE]: "Fat buddy",
        [isaac_typescript_definitions_1.CollectibleType.LARYNX]: "Hear my pain",
        [isaac_typescript_definitions_1.CollectibleType.LOST_SOUL]: "Protect him",
        // There is no `CollectibleType` with a value of 613.
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_BOMBS]: "Bloody blast + HP up",
        [isaac_typescript_definitions_1.CollectibleType.LIL_DUMPY]: "Puffy buddy",
        [isaac_typescript_definitions_1.CollectibleType.BIRDS_EYE]: "It burns",
        [isaac_typescript_definitions_1.CollectibleType.LODESTONE]: "Magnetizing tears",
        [isaac_typescript_definitions_1.CollectibleType.ROTTEN_TOMATO]: "Delicious!",
        [isaac_typescript_definitions_1.CollectibleType.BIRTHRIGHT]: "???",
        // There is no `CollectibleType` with a value of 620.
        [isaac_typescript_definitions_1.CollectibleType.RED_STEW]: "Full HP + temporary DMG up",
        [isaac_typescript_definitions_1.CollectibleType.GENESIS]: "In the beginning",
        [isaac_typescript_definitions_1.CollectibleType.SHARP_KEY]: "Open your enemies",
        [isaac_typescript_definitions_1.CollectibleType.BOOSTER_PACK]: "Collect them all!",
        [isaac_typescript_definitions_1.CollectibleType.MEGA_MUSH]: "I'm a big boy now!",
        [isaac_typescript_definitions_1.CollectibleType.KNIFE_PIECE_1]: "???",
        [isaac_typescript_definitions_1.CollectibleType.KNIFE_PIECE_2]: "???",
        [isaac_typescript_definitions_1.CollectibleType.DEATH_CERTIFICATE]: "Where am I?",
        [isaac_typescript_definitions_1.CollectibleType.BOT_FLY]: "Defense drone",
        // There is no `CollectibleType` with a value of 630.
        [isaac_typescript_definitions_1.CollectibleType.MEAT_CLEAVER]: "Slice but no dice",
        [isaac_typescript_definitions_1.CollectibleType.EVIL_CHARM]: "Luck up + you feel protected",
        [isaac_typescript_definitions_1.CollectibleType.DOGMA]: "Ascended",
        [isaac_typescript_definitions_1.CollectibleType.PURGATORY]: "Help from beyond",
        [isaac_typescript_definitions_1.CollectibleType.STITCHES]: "Bait and switch",
        [isaac_typescript_definitions_1.CollectibleType.R_KEY]: "Time to start over",
        [isaac_typescript_definitions_1.CollectibleType.KNOCKOUT_DROPS]: "They pack a punch!",
        [isaac_typescript_definitions_1.CollectibleType.ERASER]: "Erase thy enemy",
        [isaac_typescript_definitions_1.CollectibleType.YUCK_HEART]: "Gross!",
        [isaac_typescript_definitions_1.CollectibleType.URN_OF_SOULS]: "Unleash their sorrow",
        [isaac_typescript_definitions_1.CollectibleType.AKELDAMA]: "Spill your guts",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_SKIN]: "All your desires fulfilled",
        [isaac_typescript_definitions_1.CollectibleType.REVELATION]: "Awaken your faith",
        [isaac_typescript_definitions_1.CollectibleType.CONSOLATION_PRIZE]: "+1 to lowest stat",
        [isaac_typescript_definitions_1.CollectibleType.TINYTOMA]: "Itching for revenge",
        [isaac_typescript_definitions_1.CollectibleType.BRIMSTONE_BOMBS]: "Demon blast +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.FOUR_FIVE_VOLT]: "Beat the juice out of them!",
        // There is no `CollectibleType` with a value of 648.
        [isaac_typescript_definitions_1.CollectibleType.FRUITY_PLUM]: "Bouncy friend",
        [isaac_typescript_definitions_1.CollectibleType.PLUM_FLUTE]: "Play time!",
        [isaac_typescript_definitions_1.CollectibleType.STAR_OF_BETHLEHEM]: "Follow the light",
        [isaac_typescript_definitions_1.CollectibleType.CUBE_BABY]: "Kick it!",
        [isaac_typescript_definitions_1.CollectibleType.VADE_RETRO]: "Begone!",
        [isaac_typescript_definitions_1.CollectibleType.FALSE_PHD]: "Worse pills + evil up",
        [isaac_typescript_definitions_1.CollectibleType.SPIN_TO_WIN]: "Let it rip!",
        [isaac_typescript_definitions_1.CollectibleType.DAMOCLES_PASSIVE]: "A king's fortune... but at what cost?",
        [isaac_typescript_definitions_1.CollectibleType.VASCULITIS]: "Clogged enemies",
        [isaac_typescript_definitions_1.CollectibleType.GIANT_CELL]: "Micro friends",
        [isaac_typescript_definitions_1.CollectibleType.TROPICAMIDE]: "Tear size + range up",
        [isaac_typescript_definitions_1.CollectibleType.CARD_READING]: "A link to your future",
        [isaac_typescript_definitions_1.CollectibleType.QUINTS]: "They lurk inside",
        // There is no `CollectibleType` with a value of 662.
        [isaac_typescript_definitions_1.CollectibleType.TOOTH_AND_NAIL]: "You feel prickly",
        [isaac_typescript_definitions_1.CollectibleType.BINGE_EATER]: "All you can eat",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_EYE]: "An eye for secrets",
        // There is no `CollectibleType` with a value of 666.
        [isaac_typescript_definitions_1.CollectibleType.STRAWMAN]: "A helping hand",
        [isaac_typescript_definitions_1.CollectibleType.DADS_NOTE]: "...",
        [isaac_typescript_definitions_1.CollectibleType.SAUSAGE]: "All stats up",
        [isaac_typescript_definitions_1.CollectibleType.OPTIONS]: "There might be options",
        [isaac_typescript_definitions_1.CollectibleType.CANDY_HEART]: "Power of love",
        [isaac_typescript_definitions_1.CollectibleType.POUND_OF_FLESH]: "Blood money",
        [isaac_typescript_definitions_1.CollectibleType.REDEMPTION]: "Deliver me from evil",
        [isaac_typescript_definitions_1.CollectibleType.SPIRIT_SHACKLES]: "Unfinished business",
        [isaac_typescript_definitions_1.CollectibleType.CRACKED_ORB]: "Shards of knowledge",
        [isaac_typescript_definitions_1.CollectibleType.EMPTY_HEART]: "It multiplies",
        [isaac_typescript_definitions_1.CollectibleType.ASTRAL_PROJECTION]: "The true out-of-body experience!",
        [isaac_typescript_definitions_1.CollectibleType.C_SECTION]: "Fetus shots",
        [isaac_typescript_definitions_1.CollectibleType.LIL_ABADDON]: "Abyssal friend",
        [isaac_typescript_definitions_1.CollectibleType.MONTEZUMAS_REVENGE]: "Oh no...",
        [isaac_typescript_definitions_1.CollectibleType.LIL_PORTAL]: "It hungers",
        [isaac_typescript_definitions_1.CollectibleType.WORM_FRIEND]: "Clingy buddy",
        [isaac_typescript_definitions_1.CollectibleType.BONE_SPURS]: "Break your enemies",
        [isaac_typescript_definitions_1.CollectibleType.HUNGRY_SOUL]: "Out for blood",
        [isaac_typescript_definitions_1.CollectibleType.JAR_OF_WISPS]: "Your faith grows",
        [isaac_typescript_definitions_1.CollectibleType.SOUL_LOCKET]: "Power of faith",
        [isaac_typescript_definitions_1.CollectibleType.FRIEND_FINDER]: "Best friends forever!",
        [isaac_typescript_definitions_1.CollectibleType.INNER_CHILD]: "Let him free",
        [isaac_typescript_definitions_1.CollectibleType.GLITCHED_CROWN]: "?????",
        [isaac_typescript_definitions_1.CollectibleType.JELLY_BELLY]: "Bounce away!",
        [isaac_typescript_definitions_1.CollectibleType.SACRED_ORB]: "Destined for greatness",
        [isaac_typescript_definitions_1.CollectibleType.SANGUINE_BOND]: "He awaits your offering",
        [isaac_typescript_definitions_1.CollectibleType.SWARM]: "Infest",
        [isaac_typescript_definitions_1.CollectibleType.HEARTBREAK]: "Eternal sorrow",
        [isaac_typescript_definitions_1.CollectibleType.BLOODY_GUST]: "May your rage bring haste",
        [isaac_typescript_definitions_1.CollectibleType.SALVATION]: "Divine protection",
        [isaac_typescript_definitions_1.CollectibleType.VANISHING_TWIN]: "He wants revenge",
        [isaac_typescript_definitions_1.CollectibleType.TWISTED_PAIR]: "Double trouble!",
        [isaac_typescript_definitions_1.CollectibleType.AZAZELS_RAGE]: "Ancient power",
        [isaac_typescript_definitions_1.CollectibleType.ECHO_CHAMBER]: "I can see see the future future future",
        [isaac_typescript_definitions_1.CollectibleType.ISAACS_TOMB]: "Buried memories",
        [isaac_typescript_definitions_1.CollectibleType.VENGEFUL_SPIRIT]: "Hot blooded",
        [isaac_typescript_definitions_1.CollectibleType.ESAU_JR]: "Lost brother",
        [isaac_typescript_definitions_1.CollectibleType.BERSERK]: "Rip and tear",
        [isaac_typescript_definitions_1.CollectibleType.DARK_ARTS]: "One with the shadows",
        [isaac_typescript_definitions_1.CollectibleType.ABYSS]: "Come forth from the depths",
        [isaac_typescript_definitions_1.CollectibleType.SUPPER]: "HP up",
        [isaac_typescript_definitions_1.CollectibleType.STAPLER]: "DMG up",
        [isaac_typescript_definitions_1.CollectibleType.SUPLEX]: "Angel breaker",
        [isaac_typescript_definitions_1.CollectibleType.BAG_OF_CRAFTING]: "Make your destiny",
        [isaac_typescript_definitions_1.CollectibleType.FLIP]: "Life and death",
        [isaac_typescript_definitions_1.CollectibleType.LEMEGETON]: "Item summoner",
        [isaac_typescript_definitions_1.CollectibleType.SUMPTORIUM]: "Return",
        [isaac_typescript_definitions_1.CollectibleType.RECALL]: "Come back",
        [isaac_typescript_definitions_1.CollectibleType.HOLD]: "Saved for later",
        [isaac_typescript_definitions_1.CollectibleType.KEEPERS_SACK]: "Spending power",
        [isaac_typescript_definitions_1.CollectibleType.KEEPERS_KIN]: "Under a rock",
        // There is no `CollectibleType` with a value of 718.
        [isaac_typescript_definitions_1.CollectibleType.KEEPERS_BOX]: "Portable shop",
        [isaac_typescript_definitions_1.CollectibleType.EVERYTHING_JAR]: "Anything is possible",
        [isaac_typescript_definitions_1.CollectibleType.TMTRAINER]: "Isaac and his mother lived alone in a small house on a hill",
        [isaac_typescript_definitions_1.CollectibleType.ANIMA_SOLA]: "Repent",
        [isaac_typescript_definitions_1.CollectibleType.SPINDOWN_DICE]: "-1",
        [isaac_typescript_definitions_1.CollectibleType.HYPERCOAGULATION]: "Thick blooded",
        [isaac_typescript_definitions_1.CollectibleType.IBS]: "Your stomach rumbles",
        [isaac_typescript_definitions_1.CollectibleType.HEMOPTYSIS]: "Double tap sneeze",
        [isaac_typescript_definitions_1.CollectibleType.GHOST_BOMBS]: "Spooky blast +5 bombs",
        [isaac_typescript_definitions_1.CollectibleType.GELLO]: "Demonic gestation",
        [isaac_typescript_definitions_1.CollectibleType.DECAP_ATTACK]: "Chuck away!",
        [isaac_typescript_definitions_1.CollectibleType.GLASS_EYE]: "DMG + luck up",
        [isaac_typescript_definitions_1.CollectibleType.STYE]: "DMG + range up",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_RING]: "DMG up"
        // 732
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/collectibleNames.js
  var require_collectibleNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/collectibleNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.COLLECTIBLE_NAMES = exports2.DEFAULT_COLLECTIBLE_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_COLLECTIBLE_NAME = "Unknown";
      exports2.COLLECTIBLE_NAMES = {
        [isaac_typescript_definitions_1.CollectibleType.NULL]: exports2.DEFAULT_COLLECTIBLE_NAME,
        [isaac_typescript_definitions_1.CollectibleType.SAD_ONION]: "The Sad Onion",
        [isaac_typescript_definitions_1.CollectibleType.INNER_EYE]: "The Inner Eye",
        [isaac_typescript_definitions_1.CollectibleType.SPOON_BENDER]: "Spoon Bender",
        [isaac_typescript_definitions_1.CollectibleType.CRICKETS_HEAD]: "Cricket's Head",
        [isaac_typescript_definitions_1.CollectibleType.MY_REFLECTION]: "My Reflection",
        [isaac_typescript_definitions_1.CollectibleType.NUMBER_ONE]: "Number One",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_OF_THE_MARTYR]: "Blood of the Martyr",
        [isaac_typescript_definitions_1.CollectibleType.BROTHER_BOBBY]: "Brother Bobby",
        [isaac_typescript_definitions_1.CollectibleType.SKATOLE]: "Skatole",
        [isaac_typescript_definitions_1.CollectibleType.HALO_OF_FLIES]: "Halo of Flies",
        [isaac_typescript_definitions_1.CollectibleType.ONE_UP]: "1up!",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_MUSHROOM]: "Magic Mushroom",
        [isaac_typescript_definitions_1.CollectibleType.VIRUS]: "The Virus",
        [isaac_typescript_definitions_1.CollectibleType.ROID_RAGE]: "Roid Rage",
        [isaac_typescript_definitions_1.CollectibleType.HEART]: "<3",
        [isaac_typescript_definitions_1.CollectibleType.RAW_LIVER]: "Raw Liver",
        [isaac_typescript_definitions_1.CollectibleType.SKELETON_KEY]: "Skeleton Key",
        [isaac_typescript_definitions_1.CollectibleType.DOLLAR]: "A Dollar",
        [isaac_typescript_definitions_1.CollectibleType.BOOM]: "Boom!",
        [isaac_typescript_definitions_1.CollectibleType.TRANSCENDENCE]: "Transcendence",
        [isaac_typescript_definitions_1.CollectibleType.COMPASS]: "The Compass",
        [isaac_typescript_definitions_1.CollectibleType.LUNCH]: "Lunch",
        [isaac_typescript_definitions_1.CollectibleType.DINNER]: "Dinner",
        [isaac_typescript_definitions_1.CollectibleType.DESSERT]: "Dessert",
        [isaac_typescript_definitions_1.CollectibleType.BREAKFAST]: "Breakfast",
        [isaac_typescript_definitions_1.CollectibleType.ROTTEN_MEAT]: "Rotten Meat",
        [isaac_typescript_definitions_1.CollectibleType.WOODEN_SPOON]: "Wooden Spoon",
        [isaac_typescript_definitions_1.CollectibleType.BELT]: "The Belt",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_UNDERWEAR]: "Mom's Underwear",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_HEELS]: "Mom's Heels",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_LIPSTICK]: "Mom's Lipstick",
        [isaac_typescript_definitions_1.CollectibleType.WIRE_COAT_HANGER]: "Wire Coat Hanger",
        [isaac_typescript_definitions_1.CollectibleType.BIBLE]: "The Bible",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_BELIAL]: "The Book of Belial",
        [isaac_typescript_definitions_1.CollectibleType.NECRONOMICON]: "The Necronomicon",
        [isaac_typescript_definitions_1.CollectibleType.POOP]: "The Poop",
        [isaac_typescript_definitions_1.CollectibleType.MR_BOOM]: "Mr. Boom",
        [isaac_typescript_definitions_1.CollectibleType.TAMMYS_HEAD]: "Tammy's Head",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BRA]: "Mom's Bra",
        [isaac_typescript_definitions_1.CollectibleType.KAMIKAZE]: "Kamikaze!",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PAD]: "Mom's Pad",
        [isaac_typescript_definitions_1.CollectibleType.BOBS_ROTTEN_HEAD]: "Bob's Rotten Head",
        // There is no `CollectibleType` with a value of 43.
        [isaac_typescript_definitions_1.CollectibleType.TELEPORT]: "Teleport!",
        [isaac_typescript_definitions_1.CollectibleType.YUM_HEART]: "Yum Heart",
        [isaac_typescript_definitions_1.CollectibleType.LUCKY_FOOT]: "Lucky Foot",
        [isaac_typescript_definitions_1.CollectibleType.DOCTORS_REMOTE]: "Doctor's Remote",
        [isaac_typescript_definitions_1.CollectibleType.CUPIDS_ARROW]: "Cupid's Arrow",
        [isaac_typescript_definitions_1.CollectibleType.SHOOP_DA_WHOOP]: "Shoop da Whoop!",
        [isaac_typescript_definitions_1.CollectibleType.STEVEN]: "Steven",
        [isaac_typescript_definitions_1.CollectibleType.PENTAGRAM]: "Pentagram",
        [isaac_typescript_definitions_1.CollectibleType.DR_FETUS]: "Dr. Fetus",
        [isaac_typescript_definitions_1.CollectibleType.MAGNETO]: "Magneto",
        [isaac_typescript_definitions_1.CollectibleType.TREASURE_MAP]: "Treasure Map",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_EYE]: "Mom's Eye",
        [isaac_typescript_definitions_1.CollectibleType.LEMON_MISHAP]: "Lemon Mishap",
        [isaac_typescript_definitions_1.CollectibleType.DISTANT_ADMIRATION]: "Distant Admiration",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SHADOWS]: "Book of Shadows",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_BELIAL_BIRTHRIGHT]: "The Book of Belial",
        [isaac_typescript_definitions_1.CollectibleType.LADDER]: "The Ladder",
        // There is no `CollectibleType` with a value of 61.
        [isaac_typescript_definitions_1.CollectibleType.CHARM_OF_THE_VAMPIRE]: "Charm of the Vampire",
        [isaac_typescript_definitions_1.CollectibleType.BATTERY]: "The Battery",
        [isaac_typescript_definitions_1.CollectibleType.STEAM_SALE]: "Steam Sale",
        [isaac_typescript_definitions_1.CollectibleType.ANARCHIST_COOKBOOK]: "Anarchist Cookbook",
        [isaac_typescript_definitions_1.CollectibleType.HOURGLASS]: "The Hourglass",
        [isaac_typescript_definitions_1.CollectibleType.SISTER_MAGGY]: "Sister Maggy",
        [isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY]: "Technology",
        [isaac_typescript_definitions_1.CollectibleType.CHOCOLATE_MILK]: "Chocolate Milk",
        [isaac_typescript_definitions_1.CollectibleType.GROWTH_HORMONES]: "Growth Hormones",
        [isaac_typescript_definitions_1.CollectibleType.MINI_MUSH]: "Mini Mush",
        [isaac_typescript_definitions_1.CollectibleType.ROSARY]: "Rosary",
        [isaac_typescript_definitions_1.CollectibleType.CUBE_OF_MEAT]: "Cube of Meat",
        [isaac_typescript_definitions_1.CollectibleType.QUARTER]: "A Quarter",
        [isaac_typescript_definitions_1.CollectibleType.PHD]: "PHD",
        [isaac_typescript_definitions_1.CollectibleType.XRAY_VISION]: "X-Ray Vision",
        [isaac_typescript_definitions_1.CollectibleType.MY_LITTLE_UNICORN]: "My Little Unicorn",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_REVELATIONS]: "Book of Revelations",
        [isaac_typescript_definitions_1.CollectibleType.MARK]: "The Mark",
        [isaac_typescript_definitions_1.CollectibleType.PACT]: "The Pact",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_CAT]: "Dead Cat",
        [isaac_typescript_definitions_1.CollectibleType.LORD_OF_THE_PIT]: "Lord of the Pit",
        [isaac_typescript_definitions_1.CollectibleType.NAIL]: "The Nail",
        [isaac_typescript_definitions_1.CollectibleType.WE_NEED_TO_GO_DEEPER]: "We Need To Go Deeper!",
        [isaac_typescript_definitions_1.CollectibleType.DECK_OF_CARDS]: "Deck of Cards",
        [isaac_typescript_definitions_1.CollectibleType.MONSTROS_TOOTH]: "Monstro's Tooth",
        [isaac_typescript_definitions_1.CollectibleType.LOKIS_HORNS]: "Loki's Horns",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_CHUBBY]: "Little Chubby",
        [isaac_typescript_definitions_1.CollectibleType.SPIDER_BITE]: "Spider Bite",
        [isaac_typescript_definitions_1.CollectibleType.SMALL_ROCK]: "The Small Rock",
        [isaac_typescript_definitions_1.CollectibleType.SPELUNKER_HAT]: "Spelunker Hat",
        [isaac_typescript_definitions_1.CollectibleType.SUPER_BANDAGE]: "Super Bandage",
        [isaac_typescript_definitions_1.CollectibleType.GAMEKID]: "The Gamekid",
        [isaac_typescript_definitions_1.CollectibleType.SACK_OF_PENNIES]: "Sack of Pennies",
        [isaac_typescript_definitions_1.CollectibleType.ROBO_BABY]: "Robo-Baby",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_CHAD]: "Little C.H.A.D.",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SIN]: "The Book of Sin",
        [isaac_typescript_definitions_1.CollectibleType.RELIC]: "The Relic",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_GISH]: "Little Gish",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_STEVEN]: "Little Steven",
        [isaac_typescript_definitions_1.CollectibleType.HALO]: "The Halo",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BOTTLE_OF_PILLS]: "Mom's Bottle of Pills",
        [isaac_typescript_definitions_1.CollectibleType.COMMON_COLD]: "The Common Cold",
        [isaac_typescript_definitions_1.CollectibleType.PARASITE]: "The Parasite",
        [isaac_typescript_definitions_1.CollectibleType.D6]: "The D6",
        [isaac_typescript_definitions_1.CollectibleType.MR_MEGA]: "Mr. Mega",
        [isaac_typescript_definitions_1.CollectibleType.PINKING_SHEARS]: "The Pinking Shears",
        [isaac_typescript_definitions_1.CollectibleType.WAFER]: "The Wafer",
        [isaac_typescript_definitions_1.CollectibleType.MONEY_EQUALS_POWER]: "Money = Power",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_CONTACTS]: "Mom's Contacts",
        [isaac_typescript_definitions_1.CollectibleType.BEAN]: "The Bean",
        [isaac_typescript_definitions_1.CollectibleType.GUARDIAN_ANGEL]: "Guardian Angel",
        [isaac_typescript_definitions_1.CollectibleType.DEMON_BABY]: "Demon Baby",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_KNIFE]: "Mom's Knife",
        [isaac_typescript_definitions_1.CollectibleType.OUIJA_BOARD]: "Ouija Board",
        [isaac_typescript_definitions_1.CollectibleType.NINE_VOLT]: "9 Volt",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_BIRD]: "Dead Bird",
        [isaac_typescript_definitions_1.CollectibleType.BRIMSTONE]: "Brimstone",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_BAG]: "Blood Bag",
        [isaac_typescript_definitions_1.CollectibleType.ODD_MUSHROOM_THIN]: "Odd Mushroom",
        [isaac_typescript_definitions_1.CollectibleType.ODD_MUSHROOM_LARGE]: "Odd Mushroom",
        [isaac_typescript_definitions_1.CollectibleType.WHORE_OF_BABYLON]: "Whore of Babylon",
        [isaac_typescript_definitions_1.CollectibleType.MONSTER_MANUAL]: "Monster Manual",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_SEA_SCROLLS]: "Dead Sea Scrolls",
        [isaac_typescript_definitions_1.CollectibleType.BOBBY_BOMB]: "Bobby-Bomb",
        [isaac_typescript_definitions_1.CollectibleType.RAZOR_BLADE]: "Razor Blade",
        [isaac_typescript_definitions_1.CollectibleType.FORGET_ME_NOW]: "Forget Me Now",
        [isaac_typescript_definitions_1.CollectibleType.FOREVER_ALONE]: "Forever Alone",
        [isaac_typescript_definitions_1.CollectibleType.BUCKET_OF_LARD]: "Bucket of Lard",
        [isaac_typescript_definitions_1.CollectibleType.PONY]: "A Pony",
        [isaac_typescript_definitions_1.CollectibleType.BOMB_BAG]: "Bomb Bag",
        [isaac_typescript_definitions_1.CollectibleType.LUMP_OF_COAL]: "A Lump of Coal",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_PAW]: "Guppy's Paw",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_TAIL]: "Guppy's Tail",
        [isaac_typescript_definitions_1.CollectibleType.IV_BAG]: "IV Bag",
        [isaac_typescript_definitions_1.CollectibleType.BEST_FRIEND]: "Best Friend",
        [isaac_typescript_definitions_1.CollectibleType.REMOTE_DETONATOR]: "Remote Detonator",
        [isaac_typescript_definitions_1.CollectibleType.STIGMATA]: "Stigmata",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PURSE]: "Mom's Purse",
        [isaac_typescript_definitions_1.CollectibleType.BOBS_CURSE]: "Bob's Curse",
        [isaac_typescript_definitions_1.CollectibleType.PAGEANT_BOY]: "Pageant Boy",
        [isaac_typescript_definitions_1.CollectibleType.SCAPULAR]: "Scapular",
        [isaac_typescript_definitions_1.CollectibleType.SPEED_BALL]: "Speed Ball",
        [isaac_typescript_definitions_1.CollectibleType.BUM_FRIEND]: "Bum Friend",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_HEAD]: "Guppy's Head",
        [isaac_typescript_definitions_1.CollectibleType.PRAYER_CARD]: "Prayer Card",
        [isaac_typescript_definitions_1.CollectibleType.NOTCHED_AXE]: "Notched Axe",
        [isaac_typescript_definitions_1.CollectibleType.INFESTATION]: "Infestation",
        [isaac_typescript_definitions_1.CollectibleType.IPECAC]: "Ipecac",
        [isaac_typescript_definitions_1.CollectibleType.TOUGH_LOVE]: "Tough Love",
        [isaac_typescript_definitions_1.CollectibleType.MULLIGAN]: "The Mulligan",
        [isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY_2]: "Technology 2",
        [isaac_typescript_definitions_1.CollectibleType.MUTANT_SPIDER]: "Mutant Spider",
        [isaac_typescript_definitions_1.CollectibleType.CHEMICAL_PEEL]: "Chemical Peel",
        [isaac_typescript_definitions_1.CollectibleType.PEEPER]: "The Peeper",
        [isaac_typescript_definitions_1.CollectibleType.HABIT]: "Habit",
        [isaac_typescript_definitions_1.CollectibleType.BLOODY_LUST]: "Bloody Lust",
        [isaac_typescript_definitions_1.CollectibleType.CRYSTAL_BALL]: "Crystal Ball",
        [isaac_typescript_definitions_1.CollectibleType.SPIRIT_OF_THE_NIGHT]: "Spirit of the Night",
        [isaac_typescript_definitions_1.CollectibleType.CRACK_THE_SKY]: "Crack the Sky",
        [isaac_typescript_definitions_1.CollectibleType.ANKH]: "Ankh",
        [isaac_typescript_definitions_1.CollectibleType.CELTIC_CROSS]: "Celtic Cross",
        [isaac_typescript_definitions_1.CollectibleType.GHOST_BABY]: "Ghost Baby",
        [isaac_typescript_definitions_1.CollectibleType.CANDLE]: "The Candle",
        [isaac_typescript_definitions_1.CollectibleType.CAT_O_NINE_TAILS]: "Cat-o-nine-tails",
        [isaac_typescript_definitions_1.CollectibleType.D20]: "D20",
        [isaac_typescript_definitions_1.CollectibleType.HARLEQUIN_BABY]: "Harlequin Baby",
        [isaac_typescript_definitions_1.CollectibleType.EPIC_FETUS]: "Epic Fetus",
        [isaac_typescript_definitions_1.CollectibleType.POLYPHEMUS]: "Polyphemus",
        [isaac_typescript_definitions_1.CollectibleType.DADDY_LONGLEGS]: "Daddy Longlegs",
        [isaac_typescript_definitions_1.CollectibleType.SPIDER_BUTT]: "Spider Butt",
        [isaac_typescript_definitions_1.CollectibleType.SACRIFICIAL_DAGGER]: "Sacrificial Dagger",
        [isaac_typescript_definitions_1.CollectibleType.MITRE]: "Mitre",
        [isaac_typescript_definitions_1.CollectibleType.RAINBOW_BABY]: "Rainbow Baby",
        [isaac_typescript_definitions_1.CollectibleType.DADS_KEY]: "Dad's Key",
        [isaac_typescript_definitions_1.CollectibleType.STEM_CELLS]: "Stem Cells",
        [isaac_typescript_definitions_1.CollectibleType.PORTABLE_SLOT]: "Portable Slot",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_WATER]: "Holy Water",
        [isaac_typescript_definitions_1.CollectibleType.FATE]: "Fate",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_BEAN]: "The Black Bean",
        [isaac_typescript_definitions_1.CollectibleType.WHITE_PONY]: "White Pony",
        [isaac_typescript_definitions_1.CollectibleType.SACRED_HEART]: "Sacred Heart",
        [isaac_typescript_definitions_1.CollectibleType.TOOTH_PICKS]: "Tooth Picks",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_GRAIL]: "Holy Grail",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_DOVE]: "Dead Dove",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_RIGHTS]: "Blood Rights",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_HAIRBALL]: "Guppy's Hairball",
        [isaac_typescript_definitions_1.CollectibleType.ABEL]: "Abel",
        [isaac_typescript_definitions_1.CollectibleType.SMB_SUPER_FAN]: "SMB Super Fan",
        [isaac_typescript_definitions_1.CollectibleType.PYRO]: "Pyro",
        [isaac_typescript_definitions_1.CollectibleType.THREE_DOLLAR_BILL]: "3 Dollar Bill",
        [isaac_typescript_definitions_1.CollectibleType.TELEPATHY_BOOK]: "Telepathy For Dummies",
        [isaac_typescript_definitions_1.CollectibleType.MEAT]: "MEAT!",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_8_BALL]: "Magic 8 Ball",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_COIN_PURSE]: "Mom's Coin Purse",
        [isaac_typescript_definitions_1.CollectibleType.SQUEEZY]: "Squeezy",
        [isaac_typescript_definitions_1.CollectibleType.JESUS_JUICE]: "Jesus Juice",
        [isaac_typescript_definitions_1.CollectibleType.BOX]: "Box",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_KEY]: "Mom's Key",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_EYESHADOW]: "Mom's Eyeshadow",
        [isaac_typescript_definitions_1.CollectibleType.IRON_BAR]: "Iron Bar",
        [isaac_typescript_definitions_1.CollectibleType.MIDAS_TOUCH]: "Midas' Touch",
        [isaac_typescript_definitions_1.CollectibleType.HUMBLEING_BUNDLE]: "Humbleing Bundle",
        [isaac_typescript_definitions_1.CollectibleType.FANNY_PACK]: "Fanny Pack",
        [isaac_typescript_definitions_1.CollectibleType.SHARP_PLUG]: "Sharp Plug",
        [isaac_typescript_definitions_1.CollectibleType.GUILLOTINE]: "Guillotine",
        [isaac_typescript_definitions_1.CollectibleType.BALL_OF_BANDAGES]: "Ball of Bandages",
        [isaac_typescript_definitions_1.CollectibleType.CHAMPION_BELT]: "Champion Belt",
        [isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS]: "Butt Bombs",
        [isaac_typescript_definitions_1.CollectibleType.GNAWED_LEAF]: "Gnawed Leaf",
        [isaac_typescript_definitions_1.CollectibleType.SPIDERBABY]: "Spiderbaby",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_COLLAR]: "Guppy's Collar",
        [isaac_typescript_definitions_1.CollectibleType.LOST_CONTACT]: "Lost Contact",
        [isaac_typescript_definitions_1.CollectibleType.ANEMIC]: "Anemic",
        [isaac_typescript_definitions_1.CollectibleType.GOAT_HEAD]: "Goat Head",
        [isaac_typescript_definitions_1.CollectibleType.CEREMONIAL_ROBES]: "Ceremonial Robes",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_WIG]: "Mom's Wig",
        [isaac_typescript_definitions_1.CollectibleType.PLACENTA]: "Placenta",
        [isaac_typescript_definitions_1.CollectibleType.OLD_BANDAGE]: "Old Bandage",
        [isaac_typescript_definitions_1.CollectibleType.SAD_BOMBS]: "Sad Bombs",
        [isaac_typescript_definitions_1.CollectibleType.RUBBER_CEMENT]: "Rubber Cement",
        [isaac_typescript_definitions_1.CollectibleType.ANTI_GRAVITY]: "Anti-Gravity",
        [isaac_typescript_definitions_1.CollectibleType.PYROMANIAC]: "Pyromaniac",
        [isaac_typescript_definitions_1.CollectibleType.CRICKETS_BODY]: "Cricket's Body",
        [isaac_typescript_definitions_1.CollectibleType.GIMPY]: "Gimpy",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_LOTUS]: "Black Lotus",
        [isaac_typescript_definitions_1.CollectibleType.PIGGY_BANK]: "Piggy Bank",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PERFUME]: "Mom's Perfume",
        [isaac_typescript_definitions_1.CollectibleType.MONSTROS_LUNG]: "Monstro's Lung",
        [isaac_typescript_definitions_1.CollectibleType.ABADDON]: "Abaddon",
        [isaac_typescript_definitions_1.CollectibleType.BALL_OF_TAR]: "Ball of Tar",
        [isaac_typescript_definitions_1.CollectibleType.STOP_WATCH]: "Stop Watch",
        [isaac_typescript_definitions_1.CollectibleType.TINY_PLANET]: "Tiny Planet",
        [isaac_typescript_definitions_1.CollectibleType.INFESTATION_2]: "Infestation 2",
        // There is no `CollectibleType` with a value of 235.
        [isaac_typescript_definitions_1.CollectibleType.E_COLI]: "E. Coli",
        [isaac_typescript_definitions_1.CollectibleType.DEATHS_TOUCH]: "Death's Touch",
        [isaac_typescript_definitions_1.CollectibleType.KEY_PIECE_1]: "Key Piece 1",
        [isaac_typescript_definitions_1.CollectibleType.KEY_PIECE_2]: "Key Piece 2",
        [isaac_typescript_definitions_1.CollectibleType.EXPERIMENTAL_TREATMENT]: "Experimental Treatment",
        [isaac_typescript_definitions_1.CollectibleType.CONTRACT_FROM_BELOW]: "Contract from Below",
        [isaac_typescript_definitions_1.CollectibleType.INFAMY]: "Infamy",
        [isaac_typescript_definitions_1.CollectibleType.TRINITY_SHIELD]: "Trinity Shield",
        [isaac_typescript_definitions_1.CollectibleType.TECH_5]: "Tech.5",
        [isaac_typescript_definitions_1.CollectibleType.TWENTY_TWENTY]: "20/20",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_MAP]: "Blue Map",
        [isaac_typescript_definitions_1.CollectibleType.BFFS]: "BFFS!",
        [isaac_typescript_definitions_1.CollectibleType.HIVE_MIND]: "Hive Mind",
        [isaac_typescript_definitions_1.CollectibleType.THERES_OPTIONS]: "There's Options",
        [isaac_typescript_definitions_1.CollectibleType.BOGO_BOMBS]: "BOGO Bombs",
        [isaac_typescript_definitions_1.CollectibleType.STARTER_DECK]: "Starter Deck",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_BAGGY]: "Little Baggy",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_SCAB]: "Magic Scab",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_CLOT]: "Blood Clot",
        [isaac_typescript_definitions_1.CollectibleType.SCREW]: "Screw",
        [isaac_typescript_definitions_1.CollectibleType.HOT_BOMBS]: "Hot Bombs",
        [isaac_typescript_definitions_1.CollectibleType.FIRE_MIND]: "Fire Mind",
        [isaac_typescript_definitions_1.CollectibleType.MISSING_NO]: "Missing No.",
        [isaac_typescript_definitions_1.CollectibleType.DARK_MATTER]: "Dark Matter",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_CANDLE]: "Black Candle",
        [isaac_typescript_definitions_1.CollectibleType.PROPTOSIS]: "Proptosis",
        [isaac_typescript_definitions_1.CollectibleType.MISSING_PAGE_2]: "Missing Page 2",
        [isaac_typescript_definitions_1.CollectibleType.CLEAR_RUNE]: "Clear Rune",
        [isaac_typescript_definitions_1.CollectibleType.SMART_FLY]: "Smart Fly",
        [isaac_typescript_definitions_1.CollectibleType.DRY_BABY]: "Dry Baby",
        [isaac_typescript_definitions_1.CollectibleType.JUICY_SACK]: "Juicy Sack",
        [isaac_typescript_definitions_1.CollectibleType.ROBO_BABY_2]: "Robo-Baby 2.0",
        [isaac_typescript_definitions_1.CollectibleType.ROTTEN_BABY]: "Rotten Baby",
        [isaac_typescript_definitions_1.CollectibleType.HEADLESS_BABY]: "Headless Baby",
        [isaac_typescript_definitions_1.CollectibleType.LEECH]: "Leech",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERY_SACK]: "Mystery Sack",
        [isaac_typescript_definitions_1.CollectibleType.BBF]: "BBF",
        [isaac_typescript_definitions_1.CollectibleType.BOBS_BRAIN]: "Bob's Brain",
        [isaac_typescript_definitions_1.CollectibleType.BEST_BUD]: "Best Bud",
        [isaac_typescript_definitions_1.CollectibleType.LIL_BRIMSTONE]: "Lil Brimstone",
        [isaac_typescript_definitions_1.CollectibleType.ISAACS_HEART]: "Isaac's Heart",
        [isaac_typescript_definitions_1.CollectibleType.LIL_HAUNT]: "Lil Haunt",
        [isaac_typescript_definitions_1.CollectibleType.DARK_BUM]: "Dark Bum",
        [isaac_typescript_definitions_1.CollectibleType.BIG_FAN]: "Big Fan",
        [isaac_typescript_definitions_1.CollectibleType.SISSY_LONGLEGS]: "Sissy Longlegs",
        [isaac_typescript_definitions_1.CollectibleType.PUNCHING_BAG]: "Punching Bag",
        [isaac_typescript_definitions_1.CollectibleType.HOW_TO_JUMP]: "How to Jump",
        [isaac_typescript_definitions_1.CollectibleType.D100]: "D100",
        [isaac_typescript_definitions_1.CollectibleType.D4]: "D4",
        [isaac_typescript_definitions_1.CollectibleType.D10]: "D10",
        [isaac_typescript_definitions_1.CollectibleType.BLANK_CARD]: "Blank Card",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_SECRETS]: "Book of Secrets",
        [isaac_typescript_definitions_1.CollectibleType.BOX_OF_SPIDERS]: "Box of Spiders",
        [isaac_typescript_definitions_1.CollectibleType.RED_CANDLE]: "Red Candle",
        [isaac_typescript_definitions_1.CollectibleType.JAR]: "The Jar",
        [isaac_typescript_definitions_1.CollectibleType.FLUSH]: "Flush!",
        [isaac_typescript_definitions_1.CollectibleType.SATANIC_BIBLE]: "Satanic Bible",
        [isaac_typescript_definitions_1.CollectibleType.HEAD_OF_KRAMPUS]: "Head of Krampus",
        [isaac_typescript_definitions_1.CollectibleType.BUTTER_BEAN]: "Butter Bean",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_FINGERS]: "Magic Fingers",
        [isaac_typescript_definitions_1.CollectibleType.CONVERTER]: "Converter",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_BOX]: "Pandora's Box",
        [isaac_typescript_definitions_1.CollectibleType.UNICORN_STUMP]: "Unicorn Stump",
        [isaac_typescript_definitions_1.CollectibleType.TAURUS]: "Taurus",
        [isaac_typescript_definitions_1.CollectibleType.ARIES]: "Aries",
        [isaac_typescript_definitions_1.CollectibleType.CANCER]: "Cancer",
        [isaac_typescript_definitions_1.CollectibleType.LEO]: "Leo",
        [isaac_typescript_definitions_1.CollectibleType.VIRGO]: "Virgo",
        [isaac_typescript_definitions_1.CollectibleType.LIBRA]: "Libra",
        [isaac_typescript_definitions_1.CollectibleType.SCORPIO]: "Scorpio",
        [isaac_typescript_definitions_1.CollectibleType.SAGITTARIUS]: "Sagittarius",
        [isaac_typescript_definitions_1.CollectibleType.CAPRICORN]: "Capricorn",
        [isaac_typescript_definitions_1.CollectibleType.AQUARIUS]: "Aquarius",
        [isaac_typescript_definitions_1.CollectibleType.PISCES]: "Pisces",
        [isaac_typescript_definitions_1.CollectibleType.EVES_MASCARA]: "Eve's Mascara",
        [isaac_typescript_definitions_1.CollectibleType.JUDAS_SHADOW]: "Judas' Shadow",
        [isaac_typescript_definitions_1.CollectibleType.MAGGYS_BOW]: "Maggy's Bow",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_MANTLE]: "Holy Mantle",
        [isaac_typescript_definitions_1.CollectibleType.THUNDER_THIGHS]: "Thunder Thighs",
        [isaac_typescript_definitions_1.CollectibleType.STRANGE_ATTRACTOR]: "Strange Attractor",
        [isaac_typescript_definitions_1.CollectibleType.CURSED_EYE]: "Cursed Eye",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERIOUS_LIQUID]: "Mysterious Liquid",
        [isaac_typescript_definitions_1.CollectibleType.GEMINI]: "Gemini",
        [isaac_typescript_definitions_1.CollectibleType.CAINS_OTHER_EYE]: "Cain's Other Eye",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_BABYS_ONLY_FRIEND]: "???'s Only Friend",
        [isaac_typescript_definitions_1.CollectibleType.SAMSONS_CHAINS]: "Samson's Chains",
        [isaac_typescript_definitions_1.CollectibleType.MONGO_BABY]: "Mongo Baby",
        [isaac_typescript_definitions_1.CollectibleType.ISAACS_TEARS]: "Isaac's Tears",
        [isaac_typescript_definitions_1.CollectibleType.UNDEFINED]: "Undefined",
        [isaac_typescript_definitions_1.CollectibleType.SCISSORS]: "Scissors",
        [isaac_typescript_definitions_1.CollectibleType.BREATH_OF_LIFE]: "Breath of Life",
        [isaac_typescript_definitions_1.CollectibleType.POLAROID]: "The Polaroid",
        [isaac_typescript_definitions_1.CollectibleType.NEGATIVE]: "The Negative",
        [isaac_typescript_definitions_1.CollectibleType.LUDOVICO_TECHNIQUE]: "The Ludovico Technique",
        [isaac_typescript_definitions_1.CollectibleType.SOY_MILK]: "Soy Milk",
        [isaac_typescript_definitions_1.CollectibleType.GODHEAD]: "Godhead",
        [isaac_typescript_definitions_1.CollectibleType.LAZARUS_RAGS]: "Lazarus' Rags",
        [isaac_typescript_definitions_1.CollectibleType.MIND]: "The Mind",
        [isaac_typescript_definitions_1.CollectibleType.BODY]: "The Body",
        [isaac_typescript_definitions_1.CollectibleType.SOUL]: "The Soul",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_ONION]: "Dead Onion",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_WATCH]: "Broken Watch",
        [isaac_typescript_definitions_1.CollectibleType.BOOMERANG]: "The Boomerang",
        [isaac_typescript_definitions_1.CollectibleType.SAFETY_PIN]: "Safety Pin",
        [isaac_typescript_definitions_1.CollectibleType.CAFFEINE_PILL]: "Caffeine Pill",
        [isaac_typescript_definitions_1.CollectibleType.TORN_PHOTO]: "Torn Photo",
        [isaac_typescript_definitions_1.CollectibleType.BLUE_CAP]: "Blue Cap",
        [isaac_typescript_definitions_1.CollectibleType.LATCH_KEY]: "Latch Key",
        [isaac_typescript_definitions_1.CollectibleType.MATCH_BOOK]: "Match Book",
        [isaac_typescript_definitions_1.CollectibleType.SYNTHOIL]: "Synthoil",
        [isaac_typescript_definitions_1.CollectibleType.SNACK]: "A Snack",
        [isaac_typescript_definitions_1.CollectibleType.DIPLOPIA]: "Diplopia",
        [isaac_typescript_definitions_1.CollectibleType.PLACEBO]: "Placebo",
        [isaac_typescript_definitions_1.CollectibleType.WOODEN_NICKEL]: "Wooden Nickel",
        [isaac_typescript_definitions_1.CollectibleType.TOXIC_SHOCK]: "Toxic Shock",
        [isaac_typescript_definitions_1.CollectibleType.MEGA_BEAN]: "Mega Bean",
        [isaac_typescript_definitions_1.CollectibleType.GLASS_CANNON]: "Glass Cannon",
        [isaac_typescript_definitions_1.CollectibleType.BOMBER_BOY]: "Bomber Boy",
        [isaac_typescript_definitions_1.CollectibleType.CRACK_JACKS]: "Crack Jacks",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_PEARLS]: "Mom's Pearls",
        [isaac_typescript_definitions_1.CollectibleType.CAR_BATTERY]: "Car Battery",
        [isaac_typescript_definitions_1.CollectibleType.BOX_OF_FRIENDS]: "Box of Friends",
        [isaac_typescript_definitions_1.CollectibleType.WIZ]: "The Wiz",
        [isaac_typescript_definitions_1.CollectibleType.EIGHT_INCH_NAILS]: "8 Inch Nails",
        [isaac_typescript_definitions_1.CollectibleType.INCUBUS]: "Incubus",
        [isaac_typescript_definitions_1.CollectibleType.FATES_REWARD]: "Fate's Reward",
        [isaac_typescript_definitions_1.CollectibleType.LIL_CHEST]: "Lil Chest",
        [isaac_typescript_definitions_1.CollectibleType.SWORN_PROTECTOR]: "Sworn Protector",
        [isaac_typescript_definitions_1.CollectibleType.FRIEND_ZONE]: "Friend Zone",
        [isaac_typescript_definitions_1.CollectibleType.LOST_FLY]: "Lost Fly",
        [isaac_typescript_definitions_1.CollectibleType.SCATTER_BOMBS]: "Scatter Bombs",
        [isaac_typescript_definitions_1.CollectibleType.STICKY_BOMBS]: "Sticky Bombs",
        [isaac_typescript_definitions_1.CollectibleType.EPIPHORA]: "Epiphora",
        [isaac_typescript_definitions_1.CollectibleType.CONTINUUM]: "Continuum",
        [isaac_typescript_definitions_1.CollectibleType.MR_DOLLY]: "Mr. Dolly",
        [isaac_typescript_definitions_1.CollectibleType.CURSE_OF_THE_TOWER]: "Curse of the Tower",
        [isaac_typescript_definitions_1.CollectibleType.CHARGED_BABY]: "Charged Baby",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_EYE]: "Dead Eye",
        [isaac_typescript_definitions_1.CollectibleType.HOLY_LIGHT]: "Holy Light",
        [isaac_typescript_definitions_1.CollectibleType.HOST_HAT]: "Host Hat",
        [isaac_typescript_definitions_1.CollectibleType.RESTOCK]: "Restock",
        [isaac_typescript_definitions_1.CollectibleType.BURSTING_SACK]: "Bursting Sack",
        [isaac_typescript_definitions_1.CollectibleType.NUMBER_TWO]: "Number Two",
        [isaac_typescript_definitions_1.CollectibleType.PUPULA_DUPLEX]: "Pupula Duplex",
        [isaac_typescript_definitions_1.CollectibleType.PAY_TO_PLAY]: "Pay To Play",
        [isaac_typescript_definitions_1.CollectibleType.EDENS_BLESSING]: "Eden's Blessing",
        [isaac_typescript_definitions_1.CollectibleType.FRIEND_BALL]: "Friendly Ball",
        [isaac_typescript_definitions_1.CollectibleType.TEAR_DETONATOR]: "Tear Detonator",
        [isaac_typescript_definitions_1.CollectibleType.LIL_GURDY]: "Lil Gurdy",
        [isaac_typescript_definitions_1.CollectibleType.BUMBO]: "Bumbo",
        [isaac_typescript_definitions_1.CollectibleType.D12]: "D12",
        [isaac_typescript_definitions_1.CollectibleType.CENSER]: "Censer",
        [isaac_typescript_definitions_1.CollectibleType.KEY_BUM]: "Key Bum",
        [isaac_typescript_definitions_1.CollectibleType.RUNE_BAG]: "Rune Bag",
        [isaac_typescript_definitions_1.CollectibleType.SERAPHIM]: "Seraphim",
        [isaac_typescript_definitions_1.CollectibleType.BETRAYAL]: "Betrayal",
        [isaac_typescript_definitions_1.CollectibleType.ZODIAC]: "Zodiac",
        [isaac_typescript_definitions_1.CollectibleType.SERPENTS_KISS]: "Serpent's Kiss",
        [isaac_typescript_definitions_1.CollectibleType.MARKED]: "Marked",
        [isaac_typescript_definitions_1.CollectibleType.TECH_X]: "Tech X",
        [isaac_typescript_definitions_1.CollectibleType.VENTRICLE_RAZOR]: "Ventricle Razor",
        [isaac_typescript_definitions_1.CollectibleType.TRACTOR_BEAM]: "Tractor Beam",
        [isaac_typescript_definitions_1.CollectibleType.GODS_FLESH]: "God's Flesh",
        [isaac_typescript_definitions_1.CollectibleType.MAW_OF_THE_VOID]: "Maw of the Void",
        [isaac_typescript_definitions_1.CollectibleType.SPEAR_OF_DESTINY]: "Spear of Destiny",
        [isaac_typescript_definitions_1.CollectibleType.EXPLOSIVO]: "Explosivo",
        [isaac_typescript_definitions_1.CollectibleType.CHAOS]: "Chaos",
        [isaac_typescript_definitions_1.CollectibleType.SPIDER_MOD]: "Spider Mod",
        [isaac_typescript_definitions_1.CollectibleType.FARTING_BABY]: "Farting Baby",
        [isaac_typescript_definitions_1.CollectibleType.GB_BUG]: "GB Bug",
        [isaac_typescript_definitions_1.CollectibleType.D8]: "D8",
        [isaac_typescript_definitions_1.CollectibleType.PURITY]: "Purity",
        [isaac_typescript_definitions_1.CollectibleType.ATHAME]: "Athame",
        [isaac_typescript_definitions_1.CollectibleType.EMPTY_VESSEL]: "Empty Vessel",
        [isaac_typescript_definitions_1.CollectibleType.EVIL_EYE]: "Evil Eye",
        [isaac_typescript_definitions_1.CollectibleType.LUSTY_BLOOD]: "Lusty Blood",
        [isaac_typescript_definitions_1.CollectibleType.CAMBION_CONCEPTION]: "Cambion Conception",
        [isaac_typescript_definitions_1.CollectibleType.IMMACULATE_CONCEPTION]: "Immaculate Conception",
        [isaac_typescript_definitions_1.CollectibleType.MORE_OPTIONS]: "More Options",
        [isaac_typescript_definitions_1.CollectibleType.CROWN_OF_LIGHT]: "Crown of Light",
        [isaac_typescript_definitions_1.CollectibleType.DEEP_POCKETS]: "Deep Pockets",
        [isaac_typescript_definitions_1.CollectibleType.SUCCUBUS]: "Succubus",
        [isaac_typescript_definitions_1.CollectibleType.FRUIT_CAKE]: "Fruit Cake",
        [isaac_typescript_definitions_1.CollectibleType.TELEPORT_2]: "Teleport 2.0",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_POWDER]: "Black Powder",
        [isaac_typescript_definitions_1.CollectibleType.KIDNEY_BEAN]: "Kidney Bean",
        [isaac_typescript_definitions_1.CollectibleType.GLOWING_HOUR_GLASS]: "Glowing Hourglass",
        [isaac_typescript_definitions_1.CollectibleType.CIRCLE_OF_PROTECTION]: "Circle of Protection",
        [isaac_typescript_definitions_1.CollectibleType.SACK_HEAD]: "Sack Head",
        [isaac_typescript_definitions_1.CollectibleType.NIGHT_LIGHT]: "Night Light",
        [isaac_typescript_definitions_1.CollectibleType.OBSESSED_FAN]: "Obsessed Fan",
        [isaac_typescript_definitions_1.CollectibleType.MINE_CRAFTER]: "Mine Crafter",
        [isaac_typescript_definitions_1.CollectibleType.PJS]: "PJs",
        [isaac_typescript_definitions_1.CollectibleType.HEAD_OF_THE_KEEPER]: "Head of the Keeper",
        [isaac_typescript_definitions_1.CollectibleType.PAPA_FLY]: "Papa Fly",
        [isaac_typescript_definitions_1.CollectibleType.MULTIDIMENSIONAL_BABY]: "Multidimensional Baby",
        [isaac_typescript_definitions_1.CollectibleType.GLITTER_BOMBS]: "Glitter Bombs",
        [isaac_typescript_definitions_1.CollectibleType.MY_SHADOW]: "My Shadow",
        [isaac_typescript_definitions_1.CollectibleType.JAR_OF_FLIES]: "Jar of Flies",
        [isaac_typescript_definitions_1.CollectibleType.LIL_LOKI]: "Lil Loki",
        [isaac_typescript_definitions_1.CollectibleType.MILK]: "Milk!",
        [isaac_typescript_definitions_1.CollectibleType.D7]: "D7",
        [isaac_typescript_definitions_1.CollectibleType.BINKY]: "Binky",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BOX]: "Mom's Box",
        [isaac_typescript_definitions_1.CollectibleType.KIDNEY_STONE]: "Kidney Stone",
        [isaac_typescript_definitions_1.CollectibleType.MEGA_BLAST]: "Mega Blast",
        [isaac_typescript_definitions_1.CollectibleType.DARK_PRINCES_CROWN]: "Dark Prince's Crown",
        [isaac_typescript_definitions_1.CollectibleType.APPLE]: "Apple!",
        [isaac_typescript_definitions_1.CollectibleType.LEAD_PENCIL]: "Lead Pencil",
        [isaac_typescript_definitions_1.CollectibleType.DOG_TOOTH]: "Dog Tooth",
        [isaac_typescript_definitions_1.CollectibleType.DEAD_TOOTH]: "Dead Tooth",
        [isaac_typescript_definitions_1.CollectibleType.LINGER_BEAN]: "Linger Bean",
        [isaac_typescript_definitions_1.CollectibleType.SHARD_OF_GLASS]: "Shard of Glass",
        [isaac_typescript_definitions_1.CollectibleType.METAL_PLATE]: "Metal Plate",
        [isaac_typescript_definitions_1.CollectibleType.EYE_OF_GREED]: "Eye of Greed",
        [isaac_typescript_definitions_1.CollectibleType.TAROT_CLOTH]: "Tarot Cloth",
        [isaac_typescript_definitions_1.CollectibleType.VARICOSE_VEINS]: "Varicose Veins",
        [isaac_typescript_definitions_1.CollectibleType.COMPOUND_FRACTURE]: "Compound Fracture",
        [isaac_typescript_definitions_1.CollectibleType.POLYDACTYLY]: "Polydactyly",
        [isaac_typescript_definitions_1.CollectibleType.DADS_LOST_COIN]: "Dad's Lost Coin",
        [isaac_typescript_definitions_1.CollectibleType.MIDNIGHT_SNACK]: "Midnight Snack",
        [isaac_typescript_definitions_1.CollectibleType.CONE_HEAD]: "Cone Head",
        [isaac_typescript_definitions_1.CollectibleType.BELLY_BUTTON]: "Belly Button",
        [isaac_typescript_definitions_1.CollectibleType.SINUS_INFECTION]: "Sinus Infection",
        [isaac_typescript_definitions_1.CollectibleType.GLAUCOMA]: "Glaucoma",
        [isaac_typescript_definitions_1.CollectibleType.PARASITOID]: "Parasitoid",
        [isaac_typescript_definitions_1.CollectibleType.EYE_OF_BELIAL]: "Eye of Belial",
        [isaac_typescript_definitions_1.CollectibleType.SULFURIC_ACID]: "Sulfuric Acid",
        [isaac_typescript_definitions_1.CollectibleType.GLYPH_OF_BALANCE]: "Glyph of Balance",
        [isaac_typescript_definitions_1.CollectibleType.ANALOG_STICK]: "Analog Stick",
        [isaac_typescript_definitions_1.CollectibleType.CONTAGION]: "Contagion",
        [isaac_typescript_definitions_1.CollectibleType.FINGER]: "Finger!",
        [isaac_typescript_definitions_1.CollectibleType.SHADE]: "Shade",
        [isaac_typescript_definitions_1.CollectibleType.DEPRESSION]: "Depression",
        [isaac_typescript_definitions_1.CollectibleType.HUSHY]: "Hushy",
        [isaac_typescript_definitions_1.CollectibleType.LIL_MONSTRO]: "Lil Monstro",
        [isaac_typescript_definitions_1.CollectibleType.KING_BABY]: "King Baby",
        [isaac_typescript_definitions_1.CollectibleType.BIG_CHUBBY]: "Big Chubby",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_GLASS_CANNON]: "Broken Glass Cannon",
        [isaac_typescript_definitions_1.CollectibleType.PLAN_C]: "Plan C",
        [isaac_typescript_definitions_1.CollectibleType.D1]: "D1",
        [isaac_typescript_definitions_1.CollectibleType.VOID]: "Void",
        [isaac_typescript_definitions_1.CollectibleType.PAUSE]: "Pause",
        [isaac_typescript_definitions_1.CollectibleType.SMELTER]: "Smelter",
        [isaac_typescript_definitions_1.CollectibleType.COMPOST]: "Compost",
        [isaac_typescript_definitions_1.CollectibleType.DATAMINER]: "Dataminer",
        [isaac_typescript_definitions_1.CollectibleType.CLICKER]: "Clicker",
        [isaac_typescript_definitions_1.CollectibleType.MAMA_MEGA]: "Mama Mega!",
        [isaac_typescript_definitions_1.CollectibleType.WAIT_WHAT]: "Wait What?",
        [isaac_typescript_definitions_1.CollectibleType.CROOKED_PENNY]: "Crooked Penny",
        [isaac_typescript_definitions_1.CollectibleType.DULL_RAZOR]: "Dull Razor",
        [isaac_typescript_definitions_1.CollectibleType.POTATO_PEELER]: "Potato Peeler",
        [isaac_typescript_definitions_1.CollectibleType.METRONOME]: "Metronome",
        [isaac_typescript_definitions_1.CollectibleType.D_INFINITY]: "D infinity",
        [isaac_typescript_definitions_1.CollectibleType.EDENS_SOUL]: "Eden's Soul",
        [isaac_typescript_definitions_1.CollectibleType.ACID_BABY]: "Acid Baby",
        [isaac_typescript_definitions_1.CollectibleType.YO_LISTEN]: "YO LISTEN!",
        [isaac_typescript_definitions_1.CollectibleType.ADRENALINE]: "Adrenaline",
        [isaac_typescript_definitions_1.CollectibleType.JACOBS_LADDER]: "Jacob's Ladder",
        [isaac_typescript_definitions_1.CollectibleType.GHOST_PEPPER]: "Ghost Pepper",
        [isaac_typescript_definitions_1.CollectibleType.EUTHANASIA]: "Euthanasia",
        [isaac_typescript_definitions_1.CollectibleType.CAMO_UNDIES]: "Camo Undies",
        [isaac_typescript_definitions_1.CollectibleType.DUALITY]: "Duality",
        [isaac_typescript_definitions_1.CollectibleType.EUCHARIST]: "Eucharist",
        [isaac_typescript_definitions_1.CollectibleType.SACK_OF_SACKS]: "Sack of Sacks",
        [isaac_typescript_definitions_1.CollectibleType.GREEDS_GULLET]: "Greed's Gullet",
        [isaac_typescript_definitions_1.CollectibleType.LARGE_ZIT]: "Large Zit",
        [isaac_typescript_definitions_1.CollectibleType.LITTLE_HORN]: "Little Horn",
        [isaac_typescript_definitions_1.CollectibleType.BROWN_NUGGET]: "Brown Nugget",
        [isaac_typescript_definitions_1.CollectibleType.POKE_GO]: "Poke Go",
        [isaac_typescript_definitions_1.CollectibleType.BACKSTABBER]: "Backstabber",
        [isaac_typescript_definitions_1.CollectibleType.SHARP_STRAW]: "Sharp Straw",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_RAZOR]: "Mom's Razor",
        [isaac_typescript_definitions_1.CollectibleType.BLOODSHOT_EYE]: "Bloodshot Eye",
        [isaac_typescript_definitions_1.CollectibleType.DELIRIOUS]: "Delirious",
        [isaac_typescript_definitions_1.CollectibleType.ANGRY_FLY]: "Angry Fly",
        [isaac_typescript_definitions_1.CollectibleType.BLACK_HOLE]: "Black Hole",
        [isaac_typescript_definitions_1.CollectibleType.BOZO]: "Bozo",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_MODEM]: "Broken Modem",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERY_GIFT]: "Mystery Gift",
        [isaac_typescript_definitions_1.CollectibleType.SPRINKLER]: "Sprinkler",
        [isaac_typescript_definitions_1.CollectibleType.FAST_BOMBS]: "Fast Bombs",
        [isaac_typescript_definitions_1.CollectibleType.BUDDY_IN_A_BOX]: "Buddy in a Box",
        [isaac_typescript_definitions_1.CollectibleType.LIL_DELIRIUM]: "Lil Delirium",
        [isaac_typescript_definitions_1.CollectibleType.JUMPER_CABLES]: "Jumper Cables",
        [isaac_typescript_definitions_1.CollectibleType.COUPON]: "Coupon",
        [isaac_typescript_definitions_1.CollectibleType.TELEKINESIS]: "Telekinesis",
        [isaac_typescript_definitions_1.CollectibleType.MOVING_BOX]: "Moving Box",
        [isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY_ZERO]: "Technology Zero",
        [isaac_typescript_definitions_1.CollectibleType.LEPROSY]: "Leprosy",
        [isaac_typescript_definitions_1.CollectibleType.SEVEN_SEALS]: "7 Seals",
        [isaac_typescript_definitions_1.CollectibleType.MR_ME]: "Mr. ME!",
        [isaac_typescript_definitions_1.CollectibleType.ANGELIC_PRISM]: "Angelic Prism",
        [isaac_typescript_definitions_1.CollectibleType.POP]: "Pop!",
        [isaac_typescript_definitions_1.CollectibleType.DEATHS_LIST]: "Death's List",
        [isaac_typescript_definitions_1.CollectibleType.HAEMOLACRIA]: "Haemolacria",
        [isaac_typescript_definitions_1.CollectibleType.LACHRYPHAGY]: "Lachryphagy",
        [isaac_typescript_definitions_1.CollectibleType.TRISAGION]: "Trisagion",
        [isaac_typescript_definitions_1.CollectibleType.SCHOOLBAG]: "Schoolbag",
        [isaac_typescript_definitions_1.CollectibleType.BLANKET]: "Blanket",
        [isaac_typescript_definitions_1.CollectibleType.SACRIFICIAL_ALTAR]: "Sacrificial Altar",
        [isaac_typescript_definitions_1.CollectibleType.LIL_SPEWER]: "Lil Spewer",
        [isaac_typescript_definitions_1.CollectibleType.MARBLES]: "Marbles",
        [isaac_typescript_definitions_1.CollectibleType.MYSTERY_EGG]: "Mystery Egg",
        [isaac_typescript_definitions_1.CollectibleType.FLAT_STONE]: "Flat Stone",
        [isaac_typescript_definitions_1.CollectibleType.MARROW]: "Marrow",
        [isaac_typescript_definitions_1.CollectibleType.SLIPPED_RIB]: "Slipped Rib",
        [isaac_typescript_definitions_1.CollectibleType.HALLOWED_GROUND]: "Hallowed Ground",
        [isaac_typescript_definitions_1.CollectibleType.POINTY_RIB]: "Pointy Rib",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_THE_DEAD]: "Book of the Dead",
        [isaac_typescript_definitions_1.CollectibleType.DADS_RING]: "Dad's Ring",
        [isaac_typescript_definitions_1.CollectibleType.DIVORCE_PAPERS]: "Divorce Papers",
        [isaac_typescript_definitions_1.CollectibleType.JAW_BONE]: "Jaw Bone",
        [isaac_typescript_definitions_1.CollectibleType.BRITTLE_BONES]: "Brittle Bones",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_SHOVEL_1]: "Broken Shovel",
        [isaac_typescript_definitions_1.CollectibleType.BROKEN_SHOVEL_2]: "Broken Shovel",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_SHOVEL]: "Mom's Shovel",
        [isaac_typescript_definitions_1.CollectibleType.MUCORMYCOSIS]: "Mucormycosis",
        [isaac_typescript_definitions_1.CollectibleType.TWO_SPOOKY]: "2Spooky",
        [isaac_typescript_definitions_1.CollectibleType.GOLDEN_RAZOR]: "Golden Razor",
        [isaac_typescript_definitions_1.CollectibleType.SULFUR]: "Sulfur",
        [isaac_typescript_definitions_1.CollectibleType.FORTUNE_COOKIE]: "Fortune Cookie",
        [isaac_typescript_definitions_1.CollectibleType.EYE_SORE]: "Eye Sore",
        [isaac_typescript_definitions_1.CollectibleType.ONE_HUNDRED_TWENTY_VOLT]: "120 Volt",
        [isaac_typescript_definitions_1.CollectibleType.IT_HURTS]: "It Hurts",
        [isaac_typescript_definitions_1.CollectibleType.ALMOND_MILK]: "Almond Milk",
        [isaac_typescript_definitions_1.CollectibleType.ROCK_BOTTOM]: "Rock Bottom",
        [isaac_typescript_definitions_1.CollectibleType.NANCY_BOMBS]: "Nancy Bombs",
        [isaac_typescript_definitions_1.CollectibleType.BAR_OF_SOAP]: "A Bar of Soap",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_PUPPY]: "Blood Puppy",
        [isaac_typescript_definitions_1.CollectibleType.DREAM_CATCHER]: "Dream Catcher",
        [isaac_typescript_definitions_1.CollectibleType.PASCHAL_CANDLE]: "Paschal Candle",
        [isaac_typescript_definitions_1.CollectibleType.DIVINE_INTERVENTION]: "Divine Intervention",
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_OATH]: "Blood Oath",
        [isaac_typescript_definitions_1.CollectibleType.PLAYDOUGH_COOKIE]: "Playdough Cookie",
        [isaac_typescript_definitions_1.CollectibleType.ORPHAN_SOCKS]: "Orphan Socks",
        [isaac_typescript_definitions_1.CollectibleType.EYE_OF_THE_OCCULT]: "Eye of the Occult",
        [isaac_typescript_definitions_1.CollectibleType.IMMACULATE_HEART]: "Immaculate Heart",
        [isaac_typescript_definitions_1.CollectibleType.MONSTRANCE]: "Monstrance",
        [isaac_typescript_definitions_1.CollectibleType.INTRUDER]: "The Intruder",
        [isaac_typescript_definitions_1.CollectibleType.DIRTY_MIND]: "Dirty Mind",
        [isaac_typescript_definitions_1.CollectibleType.DAMOCLES]: "Damocles",
        [isaac_typescript_definitions_1.CollectibleType.FREE_LEMONADE]: "Free Lemonade",
        [isaac_typescript_definitions_1.CollectibleType.SPIRIT_SWORD]: "Spirit Sword",
        [isaac_typescript_definitions_1.CollectibleType.RED_KEY]: "Red Key",
        [isaac_typescript_definitions_1.CollectibleType.PSY_FLY]: "Psy Fly",
        [isaac_typescript_definitions_1.CollectibleType.WAVY_CAP]: "Wavy Cap",
        [isaac_typescript_definitions_1.CollectibleType.ROCKET_IN_A_JAR]: "Rocket in a Jar",
        [isaac_typescript_definitions_1.CollectibleType.BOOK_OF_VIRTUES]: "Book of Virtues",
        [isaac_typescript_definitions_1.CollectibleType.ALABASTER_BOX]: "Alabaster Box",
        [isaac_typescript_definitions_1.CollectibleType.STAIRWAY]: "The Stairway",
        // There is no `CollectibleType` with a value of 587.
        [isaac_typescript_definitions_1.CollectibleType.SOL]: "Sol",
        [isaac_typescript_definitions_1.CollectibleType.LUNA]: "Luna",
        [isaac_typescript_definitions_1.CollectibleType.MERCURIUS]: "Mercurius",
        [isaac_typescript_definitions_1.CollectibleType.VENUS]: "Venus",
        [isaac_typescript_definitions_1.CollectibleType.TERRA]: "Terra",
        [isaac_typescript_definitions_1.CollectibleType.MARS]: "Mars",
        [isaac_typescript_definitions_1.CollectibleType.JUPITER]: "Jupiter",
        [isaac_typescript_definitions_1.CollectibleType.SATURNUS]: "Saturnus",
        [isaac_typescript_definitions_1.CollectibleType.URANUS]: "Uranus",
        [isaac_typescript_definitions_1.CollectibleType.NEPTUNUS]: "Neptunus",
        [isaac_typescript_definitions_1.CollectibleType.PLUTO]: "Pluto",
        [isaac_typescript_definitions_1.CollectibleType.VOODOO_HEAD]: "Voodoo Head",
        [isaac_typescript_definitions_1.CollectibleType.EYE_DROPS]: "Eye Drops",
        [isaac_typescript_definitions_1.CollectibleType.ACT_OF_CONTRITION]: "Act of Contrition",
        [isaac_typescript_definitions_1.CollectibleType.MEMBER_CARD]: "Member Card",
        [isaac_typescript_definitions_1.CollectibleType.BATTERY_PACK]: "Battery Pack",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_BRACELET]: "Mom's Bracelet",
        [isaac_typescript_definitions_1.CollectibleType.SCOOPER]: "The Scooper",
        [isaac_typescript_definitions_1.CollectibleType.OCULAR_RIFT]: "Ocular Rift",
        [isaac_typescript_definitions_1.CollectibleType.BOILED_BABY]: "Boiled Baby",
        [isaac_typescript_definitions_1.CollectibleType.FREEZER_BABY]: "Freezer Baby",
        [isaac_typescript_definitions_1.CollectibleType.ETERNAL_D6]: "Eternal D6",
        [isaac_typescript_definitions_1.CollectibleType.BIRD_CAGE]: "Bird Cage",
        [isaac_typescript_definitions_1.CollectibleType.LARYNX]: "Larynx",
        [isaac_typescript_definitions_1.CollectibleType.LOST_SOUL]: "Lost Soul",
        // There is no `CollectibleType` with a value of 613.
        [isaac_typescript_definitions_1.CollectibleType.BLOOD_BOMBS]: "Blood Bombs",
        [isaac_typescript_definitions_1.CollectibleType.LIL_DUMPY]: "Lil Dumpy",
        [isaac_typescript_definitions_1.CollectibleType.BIRDS_EYE]: "Bird's Eye",
        [isaac_typescript_definitions_1.CollectibleType.LODESTONE]: "Lodestone",
        [isaac_typescript_definitions_1.CollectibleType.ROTTEN_TOMATO]: "Rotten Tomato",
        [isaac_typescript_definitions_1.CollectibleType.BIRTHRIGHT]: "Birthright",
        // There is no `CollectibleType` with a value of 620.
        [isaac_typescript_definitions_1.CollectibleType.RED_STEW]: "Red Stew",
        [isaac_typescript_definitions_1.CollectibleType.GENESIS]: "Genesis",
        [isaac_typescript_definitions_1.CollectibleType.SHARP_KEY]: "Sharp Key",
        [isaac_typescript_definitions_1.CollectibleType.BOOSTER_PACK]: "Booster Pack",
        [isaac_typescript_definitions_1.CollectibleType.MEGA_MUSH]: "Mega Mush",
        [isaac_typescript_definitions_1.CollectibleType.KNIFE_PIECE_1]: "Knife Piece 1",
        [isaac_typescript_definitions_1.CollectibleType.KNIFE_PIECE_2]: "Knife Piece 2",
        [isaac_typescript_definitions_1.CollectibleType.DEATH_CERTIFICATE]: "Death Certificate",
        [isaac_typescript_definitions_1.CollectibleType.BOT_FLY]: "Bot Fly",
        // There is no `CollectibleType` with a value of 630.
        [isaac_typescript_definitions_1.CollectibleType.MEAT_CLEAVER]: "Meat Cleaver",
        [isaac_typescript_definitions_1.CollectibleType.EVIL_CHARM]: "Evil Charm",
        [isaac_typescript_definitions_1.CollectibleType.DOGMA]: "Dogma",
        [isaac_typescript_definitions_1.CollectibleType.PURGATORY]: "Purgatory",
        [isaac_typescript_definitions_1.CollectibleType.STITCHES]: "Stitches",
        [isaac_typescript_definitions_1.CollectibleType.R_KEY]: "R Key",
        [isaac_typescript_definitions_1.CollectibleType.KNOCKOUT_DROPS]: "Knockout Drops",
        [isaac_typescript_definitions_1.CollectibleType.ERASER]: "Eraser",
        [isaac_typescript_definitions_1.CollectibleType.YUCK_HEART]: "Yuck Heart",
        [isaac_typescript_definitions_1.CollectibleType.URN_OF_SOULS]: "Urn of Souls",
        [isaac_typescript_definitions_1.CollectibleType.AKELDAMA]: "Akeldama",
        [isaac_typescript_definitions_1.CollectibleType.MAGIC_SKIN]: "Magic Skin",
        [isaac_typescript_definitions_1.CollectibleType.REVELATION]: "Revelation",
        [isaac_typescript_definitions_1.CollectibleType.CONSOLATION_PRIZE]: "Consolation Prize",
        [isaac_typescript_definitions_1.CollectibleType.TINYTOMA]: "Tinytoma",
        [isaac_typescript_definitions_1.CollectibleType.BRIMSTONE_BOMBS]: "Brimstone Bombs",
        [isaac_typescript_definitions_1.CollectibleType.FOUR_FIVE_VOLT]: "4.5 Volt",
        // There is no `CollectibleType` with a value of 648.
        [isaac_typescript_definitions_1.CollectibleType.FRUITY_PLUM]: "Fruity Plum",
        [isaac_typescript_definitions_1.CollectibleType.PLUM_FLUTE]: "Plum Flute",
        [isaac_typescript_definitions_1.CollectibleType.STAR_OF_BETHLEHEM]: "Star of Bethlehem",
        [isaac_typescript_definitions_1.CollectibleType.CUBE_BABY]: "Cube Baby",
        [isaac_typescript_definitions_1.CollectibleType.VADE_RETRO]: "Vade Retro",
        [isaac_typescript_definitions_1.CollectibleType.FALSE_PHD]: "False PHD",
        [isaac_typescript_definitions_1.CollectibleType.SPIN_TO_WIN]: "Spin to Win",
        [isaac_typescript_definitions_1.CollectibleType.DAMOCLES_PASSIVE]: "Damocles (Passive)",
        [isaac_typescript_definitions_1.CollectibleType.VASCULITIS]: "Vasculitis",
        [isaac_typescript_definitions_1.CollectibleType.GIANT_CELL]: "Giant Cell",
        [isaac_typescript_definitions_1.CollectibleType.TROPICAMIDE]: "Tropicamide",
        [isaac_typescript_definitions_1.CollectibleType.CARD_READING]: "Card Reading",
        [isaac_typescript_definitions_1.CollectibleType.QUINTS]: "Quints",
        // There is no `CollectibleType` with a value of 662.
        [isaac_typescript_definitions_1.CollectibleType.TOOTH_AND_NAIL]: "Tooth and Nail",
        [isaac_typescript_definitions_1.CollectibleType.BINGE_EATER]: "Binge Eater",
        [isaac_typescript_definitions_1.CollectibleType.GUPPYS_EYE]: "Guppy's Eye",
        // There is no `CollectibleType` with a value of 666.
        [isaac_typescript_definitions_1.CollectibleType.STRAWMAN]: "Strawman",
        [isaac_typescript_definitions_1.CollectibleType.DADS_NOTE]: "Dad's Note",
        [isaac_typescript_definitions_1.CollectibleType.SAUSAGE]: "Sausage",
        [isaac_typescript_definitions_1.CollectibleType.OPTIONS]: "Options?",
        [isaac_typescript_definitions_1.CollectibleType.CANDY_HEART]: "Candy Heart",
        [isaac_typescript_definitions_1.CollectibleType.POUND_OF_FLESH]: "A Pound of Flesh",
        [isaac_typescript_definitions_1.CollectibleType.REDEMPTION]: "Redemption",
        [isaac_typescript_definitions_1.CollectibleType.SPIRIT_SHACKLES]: "Spirit Shackles",
        [isaac_typescript_definitions_1.CollectibleType.CRACKED_ORB]: "Cracked Orb",
        [isaac_typescript_definitions_1.CollectibleType.EMPTY_HEART]: "Empty Heart",
        [isaac_typescript_definitions_1.CollectibleType.ASTRAL_PROJECTION]: "Astral Projection",
        [isaac_typescript_definitions_1.CollectibleType.C_SECTION]: "C Section",
        [isaac_typescript_definitions_1.CollectibleType.LIL_ABADDON]: "Lil Abaddon",
        [isaac_typescript_definitions_1.CollectibleType.MONTEZUMAS_REVENGE]: "Montezuma's Revenge",
        [isaac_typescript_definitions_1.CollectibleType.LIL_PORTAL]: "Lil Portal",
        [isaac_typescript_definitions_1.CollectibleType.WORM_FRIEND]: "Worm Friend",
        [isaac_typescript_definitions_1.CollectibleType.BONE_SPURS]: "Bone Spurs",
        [isaac_typescript_definitions_1.CollectibleType.HUNGRY_SOUL]: "Hungry Soul",
        [isaac_typescript_definitions_1.CollectibleType.JAR_OF_WISPS]: "Jar of Wisps",
        [isaac_typescript_definitions_1.CollectibleType.SOUL_LOCKET]: "Soul Locket",
        [isaac_typescript_definitions_1.CollectibleType.FRIEND_FINDER]: "Friend Finder",
        [isaac_typescript_definitions_1.CollectibleType.INNER_CHILD]: "Inner Child",
        [isaac_typescript_definitions_1.CollectibleType.GLITCHED_CROWN]: "Glitched Crown",
        [isaac_typescript_definitions_1.CollectibleType.JELLY_BELLY]: "Belly Jelly",
        [isaac_typescript_definitions_1.CollectibleType.SACRED_ORB]: "Sacred Orb",
        [isaac_typescript_definitions_1.CollectibleType.SANGUINE_BOND]: "Sanguine Bond",
        [isaac_typescript_definitions_1.CollectibleType.SWARM]: "The Swarm",
        [isaac_typescript_definitions_1.CollectibleType.HEARTBREAK]: "Heartbreak",
        [isaac_typescript_definitions_1.CollectibleType.BLOODY_GUST]: "Bloody Gust",
        [isaac_typescript_definitions_1.CollectibleType.SALVATION]: "Salvation",
        [isaac_typescript_definitions_1.CollectibleType.VANISHING_TWIN]: "Vanishing Twin",
        [isaac_typescript_definitions_1.CollectibleType.TWISTED_PAIR]: "Twisted Pair",
        [isaac_typescript_definitions_1.CollectibleType.AZAZELS_RAGE]: "Azazel's Rage",
        [isaac_typescript_definitions_1.CollectibleType.ECHO_CHAMBER]: "Echo Chamber",
        [isaac_typescript_definitions_1.CollectibleType.ISAACS_TOMB]: "Isaac's Tomb",
        [isaac_typescript_definitions_1.CollectibleType.VENGEFUL_SPIRIT]: "Vengeful Spirit",
        [isaac_typescript_definitions_1.CollectibleType.ESAU_JR]: "Esau Jr.",
        [isaac_typescript_definitions_1.CollectibleType.BERSERK]: "Berserk!",
        [isaac_typescript_definitions_1.CollectibleType.DARK_ARTS]: "Dark Arts",
        [isaac_typescript_definitions_1.CollectibleType.ABYSS]: "Abyss",
        [isaac_typescript_definitions_1.CollectibleType.SUPPER]: "Supper",
        [isaac_typescript_definitions_1.CollectibleType.STAPLER]: "Stapler",
        [isaac_typescript_definitions_1.CollectibleType.SUPLEX]: "Suplex!",
        [isaac_typescript_definitions_1.CollectibleType.BAG_OF_CRAFTING]: "Bag of Crafting",
        [isaac_typescript_definitions_1.CollectibleType.FLIP]: "Flip",
        [isaac_typescript_definitions_1.CollectibleType.LEMEGETON]: "Lemegeton",
        [isaac_typescript_definitions_1.CollectibleType.SUMPTORIUM]: "Sumptorium",
        [isaac_typescript_definitions_1.CollectibleType.RECALL]: "Recall",
        [isaac_typescript_definitions_1.CollectibleType.HOLD]: "Hold",
        [isaac_typescript_definitions_1.CollectibleType.KEEPERS_SACK]: "Keeper's Sack",
        [isaac_typescript_definitions_1.CollectibleType.KEEPERS_KIN]: "Keeper's Kin",
        // There is no `CollectibleType` with a value of 718.
        [isaac_typescript_definitions_1.CollectibleType.KEEPERS_BOX]: "Keeper's Box",
        [isaac_typescript_definitions_1.CollectibleType.EVERYTHING_JAR]: "Everything Jar",
        [isaac_typescript_definitions_1.CollectibleType.TMTRAINER]: "TMTRAINER",
        [isaac_typescript_definitions_1.CollectibleType.ANIMA_SOLA]: "Anima Sola",
        [isaac_typescript_definitions_1.CollectibleType.SPINDOWN_DICE]: "Spindown Dice",
        [isaac_typescript_definitions_1.CollectibleType.HYPERCOAGULATION]: "Hypercoagulation",
        [isaac_typescript_definitions_1.CollectibleType.IBS]: "IBS",
        [isaac_typescript_definitions_1.CollectibleType.HEMOPTYSIS]: "Hemoptysis",
        [isaac_typescript_definitions_1.CollectibleType.GHOST_BOMBS]: "Ghost Bombs",
        [isaac_typescript_definitions_1.CollectibleType.GELLO]: "Gello",
        [isaac_typescript_definitions_1.CollectibleType.DECAP_ATTACK]: "Decap Attack",
        [isaac_typescript_definitions_1.CollectibleType.GLASS_EYE]: "Glass Eye",
        [isaac_typescript_definitions_1.CollectibleType.STYE]: "Stye",
        [isaac_typescript_definitions_1.CollectibleType.MOMS_RING]: "Mom's Ring"
        // 732
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/singleUseActiveCollectibleTypesSet.js
  var require_singleUseActiveCollectibleTypesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/singleUseActiveCollectibleTypesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.CollectibleType.FORGET_ME_NOW,
        isaac_typescript_definitions_1.CollectibleType.EDENS_SOUL,
        isaac_typescript_definitions_1.CollectibleType.ALABASTER_BOX,
        isaac_typescript_definitions_1.CollectibleType.PLAN_C,
        isaac_typescript_definitions_1.CollectibleType.MAMA_MEGA,
        isaac_typescript_definitions_1.CollectibleType.SACRIFICIAL_ALTAR,
        isaac_typescript_definitions_1.CollectibleType.DEATH_CERTIFICATE,
        isaac_typescript_definitions_1.CollectibleType.R_KEY
        // 636
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/entitiesWithArmorSet.js
  var require_entitiesWithArmorSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/entitiesWithArmorSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ENTITIES_WITH_ARMOR_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.ENTITIES_WITH_ARMOR_SET = new ReadonlySet_1.ReadonlySet([
        `${isaac_typescript_definitions_1.EntityType.POOTER}.${isaac_typescript_definitions_1.PooterVariant.TAINTED_POOTER}`,
        `${isaac_typescript_definitions_1.EntityType.HIVE}.${isaac_typescript_definitions_1.HiveVariant.TAINTED_MULLIGAN}`,
        `${isaac_typescript_definitions_1.EntityType.BOOM_FLY}.${isaac_typescript_definitions_1.BoomFlyVariant.TAINTED_BOOM_FLY}`,
        `${isaac_typescript_definitions_1.EntityType.HOPPER}.${isaac_typescript_definitions_1.HopperVariant.TAINTED_HOPPER}`,
        `${isaac_typescript_definitions_1.EntityType.SPITTY}`,
        `${isaac_typescript_definitions_1.EntityType.SUCKER}.${isaac_typescript_definitions_1.SuckerVariant.TAINTED_SUCKER}`,
        `${isaac_typescript_definitions_1.EntityType.ISAAC}.${isaac_typescript_definitions_1.IsaacVariant.BLUE_BABY_HUSH}`,
        `${isaac_typescript_definitions_1.EntityType.WALL_CREEP}.${isaac_typescript_definitions_1.WallCreepVariant.TAINTED_SOY_CREEP}`,
        `${isaac_typescript_definitions_1.EntityType.ROUND_WORM}.${isaac_typescript_definitions_1.RoundWormVariant.TAINTED_ROUND_WORM}`,
        `${isaac_typescript_definitions_1.EntityType.ROUND_WORM}.${isaac_typescript_definitions_1.RoundWormVariant.TAINTED_TUBE_WORM}`,
        `${isaac_typescript_definitions_1.EntityType.MEGA_SATAN}.${isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN}`,
        `${isaac_typescript_definitions_1.EntityType.MEGA_SATAN}.${isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN_RIGHT_HAND}`,
        `${isaac_typescript_definitions_1.EntityType.MEGA_SATAN}.${isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN_LEFT_HAND}`,
        `${isaac_typescript_definitions_1.EntityType.MEGA_SATAN_2}.${isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN}`,
        `${isaac_typescript_definitions_1.EntityType.MEGA_SATAN_2}.${isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN_RIGHT_HAND}`,
        `${isaac_typescript_definitions_1.EntityType.MEGA_SATAN_2}.${isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN_LEFT_HAND}`,
        `${isaac_typescript_definitions_1.EntityType.ULTRA_GREED}.${isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREED}`,
        `${isaac_typescript_definitions_1.EntityType.ULTRA_GREED}.${isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREEDIER}`,
        `${isaac_typescript_definitions_1.EntityType.HUSH}.0`,
        `${isaac_typescript_definitions_1.EntityType.DELIRIUM}.0`,
        `${isaac_typescript_definitions_1.EntityType.BLOOD_PUPPY}.${isaac_typescript_definitions_1.BloodPuppyVariant.SMALL}`,
        `${isaac_typescript_definitions_1.EntityType.BLOOD_PUPPY}.${isaac_typescript_definitions_1.BloodPuppyVariant.LARGE}`,
        `${isaac_typescript_definitions_1.EntityType.SUB_HORF}.${isaac_typescript_definitions_1.SubHorfVariant.TAINTED_SUB_HORF}`,
        `${isaac_typescript_definitions_1.EntityType.FACELESS}.${isaac_typescript_definitions_1.FacelessVariant.TAINTED_FACELESS}`,
        `${isaac_typescript_definitions_1.EntityType.MOLE}.${isaac_typescript_definitions_1.MoleVariant.TAINTED_MOLE}`,
        `${isaac_typescript_definitions_1.EntityType.GUTTED_FATTY}.${isaac_typescript_definitions_1.GuttyFattyVariant.GUTTED_FATTY}`,
        `${isaac_typescript_definitions_1.EntityType.GAPER_LVL_2}.${isaac_typescript_definitions_1.Gaper2Variant.GAPER}`,
        `${isaac_typescript_definitions_1.EntityType.GAPER_LVL_2}.${isaac_typescript_definitions_1.Gaper2Variant.HORF}`,
        `${isaac_typescript_definitions_1.EntityType.GAPER_LVL_2}.${isaac_typescript_definitions_1.Gaper2Variant.GUSHER}`,
        `${isaac_typescript_definitions_1.EntityType.CHARGER_LVL_2}.${isaac_typescript_definitions_1.Charger2Variant.CHARGER}`,
        `${isaac_typescript_definitions_1.EntityType.CHARGER_LVL_2}.${isaac_typescript_definitions_1.Charger2Variant.ELLEECH}`,
        `${isaac_typescript_definitions_1.EntityType.SHADY}.0`,
        `${isaac_typescript_definitions_1.EntityType.MOTHER}.${isaac_typescript_definitions_1.MotherVariant.MOTHER_1}`,
        `${isaac_typescript_definitions_1.EntityType.MOTHER}.${isaac_typescript_definitions_1.MotherVariant.MOTHER_2}`,
        `${isaac_typescript_definitions_1.EntityType.DOGMA}.${isaac_typescript_definitions_1.DogmaVariant.TV}`,
        `${isaac_typescript_definitions_1.EntityType.DOGMA}.${isaac_typescript_definitions_1.DogmaVariant.ANGEL_PHASE_2}`,
        `${isaac_typescript_definitions_1.EntityType.BEAST}.${isaac_typescript_definitions_1.BeastVariant.BEAST}`,
        `${isaac_typescript_definitions_1.EntityType.BEAST}.${isaac_typescript_definitions_1.BeastVariant.ULTRA_FAMINE}`,
        `${isaac_typescript_definitions_1.EntityType.BEAST}.${isaac_typescript_definitions_1.BeastVariant.ULTRA_PESTILENCE}`,
        `${isaac_typescript_definitions_1.EntityType.BEAST}.${isaac_typescript_definitions_1.BeastVariant.ULTRA_WAR}`,
        `${isaac_typescript_definitions_1.EntityType.BEAST}.${isaac_typescript_definitions_1.BeastVariant.ULTRA_DEATH}`
        // 951.40
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/color.js
  var require_color = __commonJS({
    "node_modules/isaacscript-common/dist/functions/color.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.serializeColor = exports2.isSerializedColor = exports2.isColor = exports2.getRandomColor = exports2.deserializeColor = exports2.copyColor = exports2.colorEquals = void 0;
      var SerializationBrand_1 = require_SerializationBrand();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var random_1 = require_random();
      var rng_1 = require_rng();
      var table_1 = require_table();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var OBJECT_NAME = "Color";
      var KEYS = ["R", "G", "B", "A", "RO", "GO", "BO"];
      function colorEquals(color1, color2) {
        return (0, isaacAPIClass_1.isaacAPIClassEquals)(color1, color2, KEYS);
      }
      exports2.colorEquals = colorEquals;
      function copyColor(color) {
        if (!isColor(color)) {
          error(`Failed to copy a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        return Color(color.R, color.G, color.B, color.A, color.RO, color.GO, color.BO);
      }
      exports2.copyColor = copyColor;
      function deserializeColor(color) {
        if (!(0, types_1.isTable)(color)) {
          error(`Failed to deserialize a ${OBJECT_NAME} object since the provided object was not a Lua table.`);
        }
        const [r, g2, b2, a2, ro, go, bo] = (0, table_1.getNumbersFromTable)(color, OBJECT_NAME, ...KEYS);
        (0, utils_1.assertDefined)(r, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: R`);
        (0, utils_1.assertDefined)(g2, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: G`);
        (0, utils_1.assertDefined)(b2, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: B`);
        return Color(r, g2, b2, a2, ro, go, bo);
      }
      exports2.deserializeColor = deserializeColor;
      function getRandomColor(seedOrRNG, alpha = 1) {
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        const r = (0, random_1.getRandom)(rng);
        const g2 = (0, random_1.getRandom)(rng);
        const b2 = (0, random_1.getRandom)(rng);
        return Color(r, g2, b2, alpha);
      }
      exports2.getRandomColor = getRandomColor;
      function isColor(object) {
        return (0, isaacAPIClass_1.isIsaacAPIClassOfType)(object, OBJECT_NAME);
      }
      exports2.isColor = isColor;
      function isSerializedColor(object) {
        if (!(0, types_1.isTable)(object)) {
          return false;
        }
        return (0, table_1.tableHasKeys)(object, ...KEYS) && object.has(SerializationBrand_1.SerializationBrand.COLOR);
      }
      exports2.isSerializedColor = isSerializedColor;
      function serializeColor(color) {
        if (!isColor(color)) {
          error(`Failed to serialize a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const colorTable = new LuaMap();
        (0, table_1.copyUserdataValuesToTable)(color, KEYS, colorTable);
        colorTable.set(SerializationBrand_1.SerializationBrand.COLOR, "");
        return colorTable;
      }
      exports2.serializeColor = serializeColor;
    }
  });

  // node_modules/isaacscript-common/dist/functions/kColor.js
  var require_kColor = __commonJS({
    "node_modules/isaacscript-common/dist/functions/kColor.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.serializeKColor = exports2.kColorEquals = exports2.isSerializedKColor = exports2.isKColor = exports2.getRandomKColor = exports2.deserializeKColor = exports2.copyKColor = void 0;
      var SerializationBrand_1 = require_SerializationBrand();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var random_1 = require_random();
      var rng_1 = require_rng();
      var table_1 = require_table();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var OBJECT_NAME = "KColor";
      var KEYS = ["Red", "Green", "Blue", "Alpha"];
      function copyKColor(kColor) {
        if (!isKColor(kColor)) {
          error(`Failed to copy a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        return KColor(kColor.Red, kColor.Green, kColor.Blue, kColor.Alpha);
      }
      exports2.copyKColor = copyKColor;
      function deserializeKColor(kColor) {
        if (!(0, types_1.isTable)(kColor)) {
          error(`Failed to deserialize a ${OBJECT_NAME} object since the provided object was not a Lua table.`);
        }
        const [r, g2, b2, a2] = (0, table_1.getNumbersFromTable)(kColor, OBJECT_NAME, ...KEYS);
        (0, utils_1.assertDefined)(r, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: Red`);
        (0, utils_1.assertDefined)(g2, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: Green`);
        (0, utils_1.assertDefined)(b2, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: Blue`);
        (0, utils_1.assertDefined)(a2, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: Alpha`);
        return KColor(r, g2, b2, a2);
      }
      exports2.deserializeKColor = deserializeKColor;
      function getRandomKColor(seedOrRNG, alpha = 1) {
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        const r = (0, random_1.getRandom)(rng);
        const g2 = (0, random_1.getRandom)(rng);
        const b2 = (0, random_1.getRandom)(rng);
        return KColor(r, g2, b2, alpha);
      }
      exports2.getRandomKColor = getRandomKColor;
      function isKColor(object) {
        return (0, isaacAPIClass_1.isIsaacAPIClassOfType)(object, OBJECT_NAME);
      }
      exports2.isKColor = isKColor;
      function isSerializedKColor(object) {
        if (!(0, types_1.isTable)(object)) {
          return false;
        }
        return (0, table_1.tableHasKeys)(object, ...KEYS) && object.has(SerializationBrand_1.SerializationBrand.K_COLOR);
      }
      exports2.isSerializedKColor = isSerializedKColor;
      function kColorEquals(kColor1, kColor2) {
        return (0, isaacAPIClass_1.isaacAPIClassEquals)(kColor1, kColor2, KEYS);
      }
      exports2.kColorEquals = kColorEquals;
      function serializeKColor(kColor) {
        if (!isKColor(kColor)) {
          error(`Failed to serialize a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const kColorTable = new LuaMap();
        (0, table_1.copyUserdataValuesToTable)(kColor, KEYS, kColorTable);
        kColorTable.set(SerializationBrand_1.SerializationBrand.K_COLOR, "");
        return kColorTable;
      }
      exports2.serializeKColor = serializeKColor;
    }
  });

  // node_modules/isaacscript-common/dist/functions/sprites.js
  var require_sprites = __commonJS({
    "node_modules/isaacscript-common/dist/functions/sprites.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.texelEquals = exports2.spriteEquals = exports2.setSpriteOpacity = exports2.newSprite = exports2.getLastFrameOfAnimation = exports2.clearSprite = void 0;
      var constants_1 = require_constants();
      var color_1 = require_color();
      var kColor_1 = require_kColor();
      var utils_1 = require_utils();
      function clearSprite(sprite, ...layerIDs) {
        if (layerIDs.length === 0) {
          const numLayers = sprite.GetLayerCount();
          layerIDs = (0, utils_1.eRange)(numLayers);
        }
        for (const layerID of layerIDs) {
          sprite.ReplaceSpritesheet(layerID, constants_1.EMPTY_PNG_PATH);
        }
        sprite.LoadGraphics();
      }
      exports2.clearSprite = clearSprite;
      function getLastFrameOfAnimation(sprite, animation) {
        const currentAnimation = sprite.GetAnimation();
        const currentFrame = sprite.GetFrame();
        if (animation !== void 0 && animation !== currentAnimation) {
          sprite.SetAnimation(animation);
        }
        sprite.SetLastFrame();
        const finalFrame = sprite.GetFrame();
        if (animation !== void 0 && animation !== currentAnimation) {
          sprite.Play(currentAnimation, true);
        }
        sprite.SetFrame(currentFrame);
        return finalFrame;
      }
      exports2.getLastFrameOfAnimation = getLastFrameOfAnimation;
      function newSprite(anm2Path, pngPath) {
        const sprite = Sprite();
        if (pngPath === void 0) {
          sprite.Load(anm2Path, true);
        } else {
          sprite.Load(anm2Path, false);
          sprite.ReplaceSpritesheet(0, pngPath);
          sprite.LoadGraphics();
        }
        const defaultAnimation = sprite.GetDefaultAnimation();
        sprite.Play(defaultAnimation, true);
        return sprite;
      }
      exports2.newSprite = newSprite;
      function setSpriteOpacity(sprite, alpha) {
        const fadedColor = (0, color_1.copyColor)(sprite.Color);
        fadedColor.A = alpha;
        sprite.Color = fadedColor;
      }
      exports2.setSpriteOpacity = setSpriteOpacity;
      function spriteEquals(sprite1, sprite2, layerID, xStart, xFinish, xIncrement, yStart, yFinish, yIncrement) {
        for (let x = xStart; x <= xFinish; x += xIncrement) {
          for (let y = yStart; y <= yFinish; y += yIncrement) {
            const position = Vector(x, y);
            if (!texelEquals(sprite1, sprite2, position, layerID)) {
              return false;
            }
          }
        }
        return true;
      }
      exports2.spriteEquals = spriteEquals;
      function texelEquals(sprite1, sprite2, position, layerID) {
        const kColor1 = sprite1.GetTexel(position, constants_1.VectorZero, 1, layerID);
        const kColor2 = sprite2.GetTexel(position, constants_1.VectorZero, 1, layerID);
        return (0, kColor_1.kColorEquals)(kColor1, kColor2);
      }
      exports2.texelEquals = texelEquals;
    }
  });

  // node_modules/isaacscript-common/dist/functions/vector.js
  var require_vector = __commonJS({
    "node_modules/isaacscript-common/dist/functions/vector.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.vectorToString = exports2.vectorToDirection = exports2.vectorEquals = exports2.serializeVector = exports2.isVector = exports2.isSerializedVector = exports2.getRandomVector = exports2.getClosestVectorTo = exports2.doesVectorHaveLength = exports2.deserializeVector = exports2.copyVector = void 0;
      var SerializationBrand_1 = require_SerializationBrand();
      var direction_1 = require_direction();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var random_1 = require_random();
      var rng_1 = require_rng();
      var table_1 = require_table();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var OBJECT_NAME = "Vector";
      var KEYS = ["X", "Y"];
      function copyVector(vector) {
        if (!isVector(vector)) {
          error(`Failed to copy a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        return Vector(vector.X, vector.Y);
      }
      exports2.copyVector = copyVector;
      function deserializeVector(vector) {
        if (!(0, types_1.isTable)(vector)) {
          error(`Failed to deserialize a ${OBJECT_NAME} object since the provided object was not a Lua table.`);
        }
        const [x, y] = (0, table_1.getNumbersFromTable)(vector, OBJECT_NAME, ...KEYS);
        (0, utils_1.assertDefined)(x, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: X`);
        (0, utils_1.assertDefined)(y, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: Y`);
        return Vector(x, y);
      }
      exports2.deserializeVector = deserializeVector;
      function doesVectorHaveLength(vector, threshold = 0.01) {
        return vector.Length() >= threshold;
      }
      exports2.doesVectorHaveLength = doesVectorHaveLength;
      function getClosestVectorTo(referenceVector, vectors) {
        let closestVector;
        let closestDistance = Number.POSITIVE_INFINITY;
        for (const vector of vectors) {
          const distance = referenceVector.Distance(vector);
          if (distance < closestDistance) {
            closestVector = vector;
            closestDistance = distance;
          }
        }
        return closestVector;
      }
      exports2.getClosestVectorTo = getClosestVectorTo;
      function getRandomVector(seedOrRNG) {
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        const x = (0, random_1.getRandomFloat)(-1, 1, rng);
        const y = (0, random_1.getRandomFloat)(-1, 1, rng);
        return Vector(x, y);
      }
      exports2.getRandomVector = getRandomVector;
      function isSerializedVector(object) {
        if (!(0, types_1.isTable)(object)) {
          return false;
        }
        return (0, table_1.tableHasKeys)(object, ...KEYS) && object.has(SerializationBrand_1.SerializationBrand.VECTOR);
      }
      exports2.isSerializedVector = isSerializedVector;
      function isVector(object) {
        return (0, isaacAPIClass_1.isIsaacAPIClassOfType)(object, OBJECT_NAME);
      }
      exports2.isVector = isVector;
      function serializeVector(vector) {
        if (!isVector(vector)) {
          error(`Failed to serialize a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const vectorTable = new LuaMap();
        (0, table_1.copyUserdataValuesToTable)(vector, KEYS, vectorTable);
        vectorTable.set(SerializationBrand_1.SerializationBrand.VECTOR, "");
        return vectorTable;
      }
      exports2.serializeVector = serializeVector;
      function vectorEquals(vector1, vector2) {
        return (0, isaacAPIClass_1.isaacAPIClassEquals)(vector1, vector2, KEYS);
      }
      exports2.vectorEquals = vectorEquals;
      function vectorToDirection(vector) {
        const angleDegrees = vector.GetAngleDegrees();
        return (0, direction_1.angleToDirection)(angleDegrees);
      }
      exports2.vectorToDirection = vectorToDirection;
      function vectorToString(vector, round = false) {
        const x = round ? Math.round(vector.X) : vector.X;
        const y = round ? Math.round(vector.Y) : vector.Y;
        return `(${x}, ${y})`;
      }
      exports2.vectorToString = vectorToString;
    }
  });

  // node_modules/isaacscript-common/dist/functions/entities.js
  var require_entities = __commonJS({
    "node_modules/isaacscript-common/dist/functions/entities.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnWithSeed = exports2.spawnEntityID = exports2.spawn = exports2.setEntityRandomColor = exports2.setEntityOpacity = exports2.setEntityDamageFlash = exports2.rerollEnemy = exports2.removeEntities = exports2.removeAllMatchingEntities = exports2.parseEntityTypeVariantString = exports2.parseEntityID = exports2.isEntityMoving = exports2.isActiveEnemy = exports2.hasArmor = exports2.getFilteredNewEntities = exports2.getEntityIDFromConstituents = exports2.getEntityID = exports2.getEntityFromPtrHash = exports2.getEntityFields = exports2.getEntities = exports2.getConstituentsFromEntityID = exports2.getClosestEntityTo = exports2.doesEntityExist = exports2.doesAnyEntityExist = exports2.countEntities = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var entitiesWithArmorSet_1 = require_entitiesWithArmorSet();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var random_1 = require_random();
      var readOnly_1 = require_readOnly();
      var rng_1 = require_rng();
      var sprites_1 = require_sprites();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var vector_1 = require_vector();
      var DAMAGE_FLASH_COLOR = (0, readOnly_1.newReadonlyColor)(0.5, 0.5, 0.5, 1, 200 / 255, 0 / 255, 0 / 255);
      function countEntities(entityType = -1, variant = -1, subType = -1, ignoreFriendly = false) {
        if (entityType === -1) {
          const entities2 = Isaac.GetRoomEntities();
          if (!ignoreFriendly) {
            return entities2.length;
          }
          const nonFriendlyEntities = entities2.filter((entity) => !entity.HasEntityFlags(isaac_typescript_definitions_1.EntityFlag.FRIENDLY));
          return nonFriendlyEntities.length;
        }
        if (!ignoreFriendly) {
          return Isaac.CountEntities(void 0, entityType, variant, subType);
        }
        const entities = Isaac.FindByType(entityType, variant, subType, false, ignoreFriendly);
        return entities.length;
      }
      exports2.countEntities = countEntities;
      function doesAnyEntityExist(entityTypes, ignoreFriendly = false) {
        const entityTypesMutable = entityTypes;
        const entityTypesArray = (0, tstlClass_1.isTSTLSet)(entityTypesMutable) ? [...entityTypesMutable.values()] : entityTypesMutable;
        return entityTypesArray.some((entityType) => doesEntityExist(entityType, -1, -1, ignoreFriendly));
      }
      exports2.doesAnyEntityExist = doesAnyEntityExist;
      function doesEntityExist(entityType = -1, variant = -1, subType = -1, ignoreFriendly = false) {
        const count = countEntities(entityType, variant, subType, ignoreFriendly);
        return count > 0;
      }
      exports2.doesEntityExist = doesEntityExist;
      function getClosestEntityTo(referenceEntity, entities, filterFunc) {
        let closestEntity;
        let closestDistance = Number.POSITIVE_INFINITY;
        for (const entity of entities) {
          const distance = referenceEntity.Position.Distance(entity.Position);
          if (distance < closestDistance && (filterFunc === void 0 || filterFunc(entity))) {
            closestEntity = entity;
            closestDistance = distance;
          }
        }
        return closestEntity;
      }
      exports2.getClosestEntityTo = getClosestEntityTo;
      function getConstituentsFromEntityID(entityID) {
        const parts = entityID.split(".");
        if (parts.length !== 3) {
          error(`Failed to get the constituents from entity ID: ${entityID}`);
        }
        const [entityTypeString, variantString, subTypeString] = parts;
        (0, utils_1.assertDefined)(entityTypeString, `Failed to get the first constituent from an entity ID: ${entityID}`);
        (0, utils_1.assertDefined)(variantString, `Failed to get the second constituent from an entity ID: ${entityID}`);
        (0, utils_1.assertDefined)(subTypeString, `Failed to get the third constituent from an entity ID: ${entityID}`);
        const entityType = (0, types_1.parseIntSafe)(entityTypeString);
        (0, utils_1.assertDefined)(entityType, `Failed to convert the entity type to an integer: ${entityTypeString}`);
        const variant = (0, types_1.parseIntSafe)(variantString);
        (0, utils_1.assertDefined)(variant, `Failed to convert the entity variant to an integer: ${variantString}`);
        const subType = (0, types_1.parseIntSafe)(subTypeString);
        (0, utils_1.assertDefined)(subType, `Failed to convert the entity sub-type to an integer: ${subTypeString}`);
        return [entityType, variant, subType];
      }
      exports2.getConstituentsFromEntityID = getConstituentsFromEntityID;
      function getEntities(entityType = -1, variant = -1, subType = -1, ignoreFriendly = false) {
        if (entityType === -1) {
          return Isaac.GetRoomEntities();
        }
        return Isaac.FindByType(entityType, variant, subType, ignoreFriendly);
      }
      exports2.getEntities = getEntities;
      function getEntityFields(entity) {
        const entityFields = new LuaMap();
        const metatable = getmetatable(entity);
        (0, utils_1.assertDefined)(metatable, "Failed to get the metatable for an entity.");
        setPrimitiveEntityFields(entity, metatable, entityFields);
        const className = (0, isaacAPIClass_1.getIsaacAPIClassName)(entity);
        if (className === "Entity") {
          return entityFields;
        }
        const parentTable = metatable.get("__parent");
        (0, utils_1.assertDefined)(parentTable, 'Failed to get the "__parent" table for an entity.');
        setPrimitiveEntityFields(entity, parentTable, entityFields);
        return entityFields;
      }
      exports2.getEntityFields = getEntityFields;
      function setPrimitiveEntityFields(entity, metatable, entityFields) {
        const propGetTable = metatable.get("__propget");
        (0, utils_1.assertDefined)(propGetTable, 'Failed to get the "__propget" table for an entity.');
        for (const [key] of propGetTable) {
          const indexKey = key;
          const value = entity[indexKey];
          if ((0, types_1.isPrimitive)(value)) {
            entityFields.set(indexKey, value);
          } else if ((0, vector_1.isVector)(value)) {
            entityFields.set(indexKey, (0, vector_1.vectorToString)(value));
          }
        }
      }
      function getEntityFromPtrHash(ptrHash) {
        const entities = getEntities();
        return entities.find((entity) => GetPtrHash(entity) === ptrHash);
      }
      exports2.getEntityFromPtrHash = getEntityFromPtrHash;
      function getEntityID(entity) {
        return `${entity.Type}.${entity.Variant}.${entity.SubType}`;
      }
      exports2.getEntityID = getEntityID;
      function getEntityIDFromConstituents(entityType, variant, subType) {
        return `${entityType}.${variant}.${subType}`;
      }
      exports2.getEntityIDFromConstituents = getEntityIDFromConstituents;
      function getFilteredNewEntities(oldEntities, newEntities) {
        const oldEntitiesSet = /* @__PURE__ */ new Set();
        for (const entity of oldEntities) {
          const ptrHash = GetPtrHash(entity);
          oldEntitiesSet.add(ptrHash);
        }
        return newEntities.filter((entity) => {
          const ptrHash = GetPtrHash(entity);
          return !oldEntitiesSet.has(ptrHash);
        });
      }
      exports2.getFilteredNewEntities = getFilteredNewEntities;
      function hasArmor(entity) {
        const typeVariantString = `${entity.Type}.${entity.Variant}`;
        return entitiesWithArmorSet_1.ENTITIES_WITH_ARMOR_SET.has(typeVariantString);
      }
      exports2.hasArmor = hasArmor;
      function isActiveEnemy(entity) {
        if (entity.HasEntityFlags(isaac_typescript_definitions_1.EntityFlag.FRIENDLY)) {
          return false;
        }
        const room = cachedClasses_1.game.GetRoom();
        const isClear = room.IsClear();
        if (isClear) {
          switch (entity.Type) {
            case isaac_typescript_definitions_1.EntityType.GRIMACE: {
              return false;
            }
            case isaac_typescript_definitions_1.EntityType.ULTRA_DOOR: {
              return false;
            }
            case isaac_typescript_definitions_1.EntityType.ULTRA_GREED: {
              const npc = entity.ToNPC();
              if (npc !== void 0) {
                const ultraGreedVariant = npc.Variant;
                switch (ultraGreedVariant) {
                  case isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREED: {
                    if (npc.State === (0, types_1.asNPCState)(isaac_typescript_definitions_1.UltraGreedState.GOLD_STATUE)) {
                      return false;
                    }
                    break;
                  }
                  case isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREEDIER: {
                    if (npc.State === (0, types_1.asNPCState)(isaac_typescript_definitions_1.UltraGreedierState.POST_EXPLOSION)) {
                      return false;
                    }
                    break;
                  }
                }
              }
              break;
            }
            case isaac_typescript_definitions_1.EntityType.MOTHER: {
              if (entity.Variant === isaac_typescript_definitions_1.MotherVariant.MOTHER_1) {
                const npc = entity.ToNPC();
                if (npc !== void 0 && npc.State === isaac_typescript_definitions_1.NPCState.SPECIAL) {
                  return false;
                }
              }
              break;
            }
            default: {
              break;
            }
          }
        }
        return entity.IsActiveEnemy(false);
      }
      exports2.isActiveEnemy = isActiveEnemy;
      function isEntityMoving(entity, threshold = 0.01) {
        return (0, vector_1.doesVectorHaveLength)(entity.Velocity, threshold);
      }
      exports2.isEntityMoving = isEntityMoving;
      function parseEntityID(entityID) {
        const entityIDArray = entityID.split(".");
        if (entityIDArray.length !== 3) {
          return void 0;
        }
        const [entityTypeString, variantString, subTypeString] = entityIDArray;
        if (entityTypeString === void 0 || variantString === void 0 || subTypeString === void 0) {
          return void 0;
        }
        const entityType = (0, types_1.parseIntSafe)(entityTypeString);
        const variant = (0, types_1.parseIntSafe)(variantString);
        const subType = (0, types_1.parseIntSafe)(subTypeString);
        if (entityType === void 0 || variant === void 0 || subType === void 0) {
          return void 0;
        }
        return [entityType, variant, subType];
      }
      exports2.parseEntityID = parseEntityID;
      function parseEntityTypeVariantString(entityTypeVariantString) {
        const entityTypeVariantArray = entityTypeVariantString.split(".");
        if (entityTypeVariantArray.length !== 2) {
          return void 0;
        }
        const [entityTypeString, variantString] = entityTypeVariantArray;
        if (entityTypeString === void 0 || variantString === void 0) {
          return void 0;
        }
        const entityType = (0, types_1.parseIntSafe)(entityTypeString);
        const variant = (0, types_1.parseIntSafe)(variantString);
        if (entityType === void 0 || variant === void 0) {
          return void 0;
        }
        return [entityType, variant];
      }
      exports2.parseEntityTypeVariantString = parseEntityTypeVariantString;
      function removeAllMatchingEntities(entityType, entityVariant = -1, entitySubType = -1, cap = void 0) {
        const entities = getEntities(entityType, entityVariant, entitySubType);
        return removeEntities(entities, cap);
      }
      exports2.removeAllMatchingEntities = removeAllMatchingEntities;
      function removeEntities(entities, cap) {
        if (entities.length === 0) {
          return [];
        }
        const entitiesRemoved = [];
        for (const entity of entities) {
          entity.Remove();
          entitiesRemoved.push(entity);
          if (cap !== void 0 && entitiesRemoved.length >= cap) {
            break;
          }
        }
        return entitiesRemoved;
      }
      exports2.removeEntities = removeEntities;
      function rerollEnemy(entity) {
        const oldEntities = getEntities();
        const wasRerolled = cachedClasses_1.game.RerollEnemy(entity);
        if (!wasRerolled) {
          return void 0;
        }
        const newEntities = getEntities();
        const filteredNewEntities = getFilteredNewEntities(oldEntities, newEntities);
        if (filteredNewEntities.length === 0) {
          error('Failed to find the new entity generated by the "Game.RerollEnemy" method.');
        }
        return filteredNewEntities[0];
      }
      exports2.rerollEnemy = rerollEnemy;
      function setEntityDamageFlash(entity) {
        entity.SetColor(DAMAGE_FLASH_COLOR, 2, 0);
      }
      exports2.setEntityDamageFlash = setEntityDamageFlash;
      function setEntityOpacity(entity, alpha) {
        const sprite = entity.GetSprite();
        (0, sprites_1.setSpriteOpacity)(sprite, alpha);
      }
      exports2.setEntityOpacity = setEntityOpacity;
      function setEntityRandomColor(entity) {
        const seed = entity.InitSeed === 0 ? (0, rng_1.getRandomSeed)() : entity.InitSeed;
        const rng = (0, rng_1.newRNG)(seed);
        const r = (0, random_1.getRandom)(rng);
        const g2 = (0, random_1.getRandom)(rng);
        const b2 = (0, random_1.getRandom)(rng);
        const color = Color(r, g2, b2);
        entity.SetColor(color, 1e5, 1e5, false, false);
      }
      exports2.setEntityRandomColor = setEntityRandomColor;
      function spawn(entityType, variant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const room = cachedClasses_1.game.GetRoom();
        if (positionOrGridIndex === void 0) {
          const entityID = getEntityIDFromConstituents(entityType, variant, subType);
          error(`Failed to spawn entity ${entityID} since an undefined position was passed to the "spawn" function.`);
        }
        const position = (0, vector_1.isVector)(positionOrGridIndex) ? positionOrGridIndex : room.GetGridPosition(positionOrGridIndex);
        if (seedOrRNG === void 0) {
          return Isaac.Spawn(entityType, variant, subType, position, velocity, spawner);
        }
        const seed = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG.Next() : seedOrRNG;
        return cachedClasses_1.game.Spawn(entityType, variant, position, velocity, spawner, subType, seed);
      }
      exports2.spawn = spawn;
      function spawnEntityID(entityID, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const [entityType, variant, subType] = getConstituentsFromEntityID(entityID);
        return spawn(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnEntityID = spawnEntityID;
      function spawnWithSeed(entityType, variant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawn(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnWithSeed = spawnWithSeed;
    }
  });

  // node_modules/isaacscript-common/dist/functions/pickupVariants.js
  var require_pickupVariants = __commonJS({
    "node_modules/isaacscript-common/dist/functions/pickupVariants.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isTrinket = exports2.isCardPickup = exports2.isCollectible = exports2.isBattery = exports2.isPill = exports2.isSack = exports2.isPoopPickup = exports2.isBombPickup = exports2.isKey = exports2.isCoin = exports2.isHeart = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      function isHeart(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.HEART;
      }
      exports2.isHeart = isHeart;
      function isCoin(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.COIN;
      }
      exports2.isCoin = isCoin;
      function isKey(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.KEY;
      }
      exports2.isKey = isKey;
      function isBombPickup(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.BOMB;
      }
      exports2.isBombPickup = isBombPickup;
      function isPoopPickup(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.POOP;
      }
      exports2.isPoopPickup = isPoopPickup;
      function isSack(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.SACK;
      }
      exports2.isSack = isSack;
      function isPill(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.PILL;
      }
      exports2.isPill = isPill;
      function isBattery(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.LIL_BATTERY;
      }
      exports2.isBattery = isBattery;
      function isCollectible(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE;
      }
      exports2.isCollectible = isCollectible;
      function isCardPickup(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.CARD;
      }
      exports2.isCardPickup = isCardPickup;
      function isTrinket(pickup) {
        return pickup.Type === isaac_typescript_definitions_1.EntityType.PICKUP && pickup.Variant === isaac_typescript_definitions_1.PickupVariant.TRINKET;
      }
      exports2.isTrinket = isTrinket;
    }
  });

  // node_modules/isaacscript-common/dist/functions/collectibles.js
  var require_collectibles = __commonJS({
    "node_modules/isaacscript-common/dist/functions/collectibles.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setCollectiblesRerolledForItemTracker = exports2.setCollectibleSubType = exports2.setCollectibleSprite = exports2.setCollectiblePedestalType = exports2.setCollectibleGlitched = exports2.setCollectibleEmpty = exports2.setCollectibleBlind = exports2.removeCollectiblePickupDelay = exports2.preventCollectibleRotation = exports2.newCollectibleSprite = exports2.isVanillaCollectibleType = exports2.isValidCollectibleType = exports2.isSingleUseCollectible = exports2.isQuality = exports2.isPassiveOrFamiliarCollectible = exports2.isModdedCollectibleType = exports2.isHiddenCollectible = exports2.isGlitchedCollectible = exports2.isFamiliarCollectible = exports2.isBlindCollectible = exports2.isActiveCollectible = exports2.getVanillaCollectibleTypesOfQuality = exports2.getCollectibleTags = exports2.getCollectibleQuality = exports2.getCollectiblePedestalType = exports2.getCollectibleName = exports2.getCollectibleMaxCharges = exports2.getCollectibleItemType = exports2.getCollectibleInitCharge = exports2.getCollectibleGfxFilename = exports2.getCollectibleDevilHeartPrice = exports2.getCollectibleDevilCoinPrice = exports2.getCollectibleDescription = exports2.getCollectibleChargeType = exports2.collectibleSpriteEquals = exports2.collectibleHasCacheFlag = exports2.clearCollectibleSprite = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var constantsVanilla_1 = require_constantsVanilla();
      var collectibleDescriptions_1 = require_collectibleDescriptions();
      var collectibleNames_1 = require_collectibleNames();
      var singleUseActiveCollectibleTypesSet_1 = require_singleUseActiveCollectibleTypesSet();
      var entities_1 = require_entities();
      var flag_1 = require_flag();
      var pickupVariants_1 = require_pickupVariants();
      var sprites_1 = require_sprites();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var COLLECTIBLE_ANM2_PATH = "gfx/005.100_collectible.anm2";
      var DEFAULT_COLLECTIBLE_PRICE = 15;
      var GLITCHED_ITEM_THRESHOLD = 4e9;
      var QUALITY_TO_VANILLA_COLLECTIBLE_TYPES_MAP = (() => {
        const qualityToCollectibleTypesMap = /* @__PURE__ */ new Map();
        for (const quality of constants_1.QUALITIES) {
          const collectibleTypes = [];
          for (const collectibleType of constantsVanilla_1.VANILLA_COLLECTIBLE_TYPES) {
            const collectibleTypeQuality = getCollectibleQuality(collectibleType);
            if (collectibleTypeQuality === quality) {
              collectibleTypes.push(collectibleType);
            }
          }
          qualityToCollectibleTypesMap.set(quality, collectibleTypes);
        }
        return qualityToCollectibleTypesMap;
      })();
      var questionMarkSprite = (() => {
        const sprite = Sprite();
        sprite.Load("gfx/005.100_collectible.anm2", false);
        sprite.ReplaceSpritesheet(1, "gfx/items/collectibles/questionmark.png");
        sprite.LoadGraphics();
        return sprite;
      })();
      function clearCollectibleSprite(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "clearCollectibleSprite" function was given a non-collectible: ${entityID}`);
        }
        setCollectibleSprite(collectible, void 0);
      }
      exports2.clearCollectibleSprite = clearCollectibleSprite;
      function collectibleHasCacheFlag(collectibleOrCollectibleType, cacheFlag) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "collectibleHasCacheFlag");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return false;
        }
        return (0, flag_1.hasFlag)(itemConfigItem.CacheFlags, cacheFlag);
      }
      exports2.collectibleHasCacheFlag = collectibleHasCacheFlag;
      function collectibleSpriteEquals(sprite1, sprite2) {
        const xStart = -1;
        const xFinish = 1;
        const xIncrement = 1;
        const yStart = -40;
        const yFinish = 10;
        const yIncrement = 3;
        return (0, sprites_1.spriteEquals)(sprite1, sprite2, isaac_typescript_definitions_1.CollectibleSpriteLayer.HEAD, xStart, xFinish, xIncrement, yStart, yFinish, yIncrement);
      }
      exports2.collectibleSpriteEquals = collectibleSpriteEquals;
      function getCollectibleChargeType(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleChargeType");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return isaac_typescript_definitions_1.ItemConfigChargeType.NORMAL;
        }
        return itemConfigItem.ChargeType;
      }
      exports2.getCollectibleChargeType = getCollectibleChargeType;
      function getCollectibleDescription(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleDescription");
        const collectibleDescription = collectibleDescriptions_1.COLLECTIBLE_DESCRIPTIONS[collectibleType];
        if (collectibleDescription !== void 0) {
          return collectibleDescription;
        }
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem !== void 0) {
          return itemConfigItem.Description;
        }
        return collectibleDescriptions_1.DEFAULT_COLLECTIBLE_DESCRIPTION;
      }
      exports2.getCollectibleDescription = getCollectibleDescription;
      function getCollectibleDevilCoinPrice(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleDescription");
        if (collectibleType === isaac_typescript_definitions_1.CollectibleType.NULL) {
          return 0;
        }
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return DEFAULT_COLLECTIBLE_PRICE;
        }
        return itemConfigItem.DevilPrice * DEFAULT_COLLECTIBLE_PRICE;
      }
      exports2.getCollectibleDevilCoinPrice = getCollectibleDevilCoinPrice;
      function getCollectibleDevilHeartPrice(collectibleOrCollectibleType, player) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleDevilHeartPrice");
        const maxHearts = player.GetMaxHearts();
        if (collectibleType === isaac_typescript_definitions_1.CollectibleType.NULL) {
          return 0;
        }
        if (maxHearts === 0) {
          return isaac_typescript_definitions_1.PickupPrice.THREE_SOUL_HEARTS;
        }
        const defaultCollectiblePrice = isaac_typescript_definitions_1.PickupPrice.ONE_HEART;
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return defaultCollectiblePrice;
        }
        const twoHeartPrice = maxHearts === 2 ? isaac_typescript_definitions_1.PickupPrice.ONE_HEART_AND_TWO_SOUL_HEARTS : isaac_typescript_definitions_1.PickupPrice.TWO_HEARTS;
        return itemConfigItem.DevilPrice === 2 ? twoHeartPrice : isaac_typescript_definitions_1.PickupPrice.ONE_HEART;
      }
      exports2.getCollectibleDevilHeartPrice = getCollectibleDevilHeartPrice;
      function getCollectibleGfxFilename(collectibleOrCollectibleType) {
        if (collectibleOrCollectibleType === -1) {
          return constants_1.BLIND_ITEM_PNG_PATH;
        }
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleGfxFilename");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return constants_1.BLIND_ITEM_PNG_PATH;
        }
        return itemConfigItem.GfxFileName;
      }
      exports2.getCollectibleGfxFilename = getCollectibleGfxFilename;
      function getCollectibleInitCharge(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleInitCharge");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return 0;
        }
        return itemConfigItem.InitCharge;
      }
      exports2.getCollectibleInitCharge = getCollectibleInitCharge;
      function getCollectibleItemType(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleItemType");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return isaac_typescript_definitions_1.ItemType.NULL;
        }
        return itemConfigItem.Type;
      }
      exports2.getCollectibleItemType = getCollectibleItemType;
      function getCollectibleMaxCharges(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleMaxCharges");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return 0;
        }
        return itemConfigItem.MaxCharges;
      }
      exports2.getCollectibleMaxCharges = getCollectibleMaxCharges;
      function getCollectibleName(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleName");
        const collectibleName = collectibleNames_1.COLLECTIBLE_NAMES[collectibleType];
        if (collectibleName !== void 0) {
          return collectibleName;
        }
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem !== void 0) {
          return itemConfigItem.Name;
        }
        return collectibleNames_1.DEFAULT_COLLECTIBLE_NAME;
      }
      exports2.getCollectibleName = getCollectibleName;
      function getCollectiblePedestalType(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "getCollectiblePedestalType" function was given a non-collectible: ${entityID}`);
        }
        const sprite = collectible.GetSprite();
        return sprite.GetOverlayFrame();
      }
      exports2.getCollectiblePedestalType = getCollectiblePedestalType;
      function getCollectibleQuality(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleQuality");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return 0;
        }
        return itemConfigItem.Quality;
      }
      exports2.getCollectibleQuality = getCollectibleQuality;
      function getCollectibleTags(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "getCollectibleTags");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        return itemConfigItem === void 0 ? isaac_typescript_definitions_1.ItemConfigTagZero : itemConfigItem.Tags;
      }
      exports2.getCollectibleTags = getCollectibleTags;
      function getVanillaCollectibleTypesOfQuality(quality) {
        const collectibleTypes = QUALITY_TO_VANILLA_COLLECTIBLE_TYPES_MAP.get(quality);
        (0, utils_1.assertDefined)(collectibleTypes, `Failed to find the vanilla collectible types corresponding to quality: ${quality}`);
        return collectibleTypes;
      }
      exports2.getVanillaCollectibleTypesOfQuality = getVanillaCollectibleTypesOfQuality;
      function isActiveCollectible(collectibleType) {
        const itemType = getCollectibleItemType(collectibleType);
        return itemType === isaac_typescript_definitions_1.ItemType.ACTIVE;
      }
      exports2.isActiveCollectible = isActiveCollectible;
      function isBlindCollectible(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "isBlindCollectible" function was given a non-collectible: ${entityID}`);
        }
        const room = cachedClasses_1.game.GetRoom();
        const renderMode = room.GetRenderMode();
        if (renderMode === isaac_typescript_definitions_1.RenderMode.WATER_REFLECT) {
          error('The "isBlindCollectible" function will not work properly in a render callback with the render mode equal to "RenderMode.WATER_REFLECT". Make sure that you properly account for this case if you are calling this function in a render callback.');
        }
        const sprite = collectible.GetSprite();
        const animation = sprite.GetAnimation();
        const frame = sprite.GetFrame();
        questionMarkSprite.SetFrame(animation, frame);
        return collectibleSpriteEquals(sprite, questionMarkSprite);
      }
      exports2.isBlindCollectible = isBlindCollectible;
      function isFamiliarCollectible(collectibleType) {
        const itemType = getCollectibleItemType(collectibleType);
        return itemType === isaac_typescript_definitions_1.ItemType.FAMILIAR;
      }
      exports2.isFamiliarCollectible = isFamiliarCollectible;
      function isGlitchedCollectible(collectible) {
        return collectible.Variant === isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE && collectible.SubType > GLITCHED_ITEM_THRESHOLD;
      }
      exports2.isGlitchedCollectible = isGlitchedCollectible;
      function isHiddenCollectible(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "isHiddenCollectible");
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        return itemConfigItem !== void 0 && itemConfigItem.Hidden;
      }
      exports2.isHiddenCollectible = isHiddenCollectible;
      function isModdedCollectibleType(collectibleType) {
        return !isVanillaCollectibleType(collectibleType);
      }
      exports2.isModdedCollectibleType = isModdedCollectibleType;
      function isPassiveOrFamiliarCollectible(collectibleOrCollectibleType) {
        const collectibleType = getCollectibleTypeFromArg(collectibleOrCollectibleType, "isPassiveCollectible");
        const itemType = getCollectibleItemType(collectibleType);
        return itemType === isaac_typescript_definitions_1.ItemType.PASSIVE || itemType === isaac_typescript_definitions_1.ItemType.FAMILIAR;
      }
      exports2.isPassiveOrFamiliarCollectible = isPassiveOrFamiliarCollectible;
      function isQuality(collectibleOrCollectibleType, quality) {
        const actualQuality = getCollectibleQuality(collectibleOrCollectibleType);
        return quality === actualQuality;
      }
      exports2.isQuality = isQuality;
      function isSingleUseCollectible(collectibleType) {
        return singleUseActiveCollectibleTypesSet_1.SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET.has(collectibleType);
      }
      exports2.isSingleUseCollectible = isSingleUseCollectible;
      function isValidCollectibleType(collectibleType) {
        const potentialCollectibleType = (0, types_1.asCollectibleType)(collectibleType);
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(potentialCollectibleType);
        return itemConfigItem !== void 0;
      }
      exports2.isValidCollectibleType = isValidCollectibleType;
      function isVanillaCollectibleType(collectibleType) {
        return collectibleType <= constantsFirstLast_1.LAST_VANILLA_COLLECTIBLE_TYPE;
      }
      exports2.isVanillaCollectibleType = isVanillaCollectibleType;
      function newCollectibleSprite(collectibleType) {
        const sprite = Sprite();
        sprite.Load(COLLECTIBLE_ANM2_PATH, false);
        (0, sprites_1.clearSprite)(sprite);
        const gfxFileName = getCollectibleGfxFilename(collectibleType);
        sprite.ReplaceSpritesheet(isaac_typescript_definitions_1.CollectibleSpriteLayer.HEAD, gfxFileName);
        sprite.LoadGraphics();
        const defaultAnimation = sprite.GetDefaultAnimation();
        sprite.Play(defaultAnimation, true);
        return sprite;
      }
      exports2.newCollectibleSprite = newCollectibleSprite;
      function preventCollectibleRotation(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "preventCollectibleRotation" function was given a non-collectible: ${entityID}`);
        }
        collectible.Morph(collectible.Type, collectible.Variant, collectible.SubType, true, true, true);
      }
      exports2.preventCollectibleRotation = preventCollectibleRotation;
      function removeCollectiblePickupDelay(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "removeCollectiblePickupDelay" function was given a non-collectible: ${entityID}`);
        }
        collectible.Wait = 0;
      }
      exports2.removeCollectiblePickupDelay = removeCollectiblePickupDelay;
      function setCollectibleBlind(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "setCollectibleBlind" function was given a non-collectible: ${entityID}`);
        }
        setCollectibleSprite(collectible, constants_1.BLIND_ITEM_PNG_PATH);
      }
      exports2.setCollectibleBlind = setCollectibleBlind;
      function setCollectibleEmpty(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "setCollectibleEmpty" function was given a non-collectible: ${entityID}`);
        }
        collectible.SubType = isaac_typescript_definitions_1.CollectibleType.NULL;
        clearCollectibleSprite(collectible);
      }
      exports2.setCollectibleEmpty = setCollectibleEmpty;
      function setCollectibleGlitched(collectible) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "setCollectibleGlitched" function was given a non-collectible: ${entityID}`);
        }
        const player = Isaac.GetPlayer();
        const hasTMTRAINER = player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.TMTRAINER);
        if (!hasTMTRAINER) {
          player.AddCollectible(isaac_typescript_definitions_1.CollectibleType.TMTRAINER, 0, false);
        }
        const itemPool = cachedClasses_1.game.GetItemPool();
        const collectibleType = itemPool.GetCollectible(constants_1.DEFAULT_ITEM_POOL_TYPE);
        setCollectibleSubType(collectible, collectibleType);
        if (!hasTMTRAINER) {
          player.RemoveCollectible(isaac_typescript_definitions_1.CollectibleType.TMTRAINER);
        }
      }
      exports2.setCollectibleGlitched = setCollectibleGlitched;
      function setCollectiblePedestalType(collectible, collectiblePedestalType) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "setCollectiblePedestalType" function was given a non-collectible: ${entityID}`);
        }
        const sprite = collectible.GetSprite();
        const overlayAnimation = sprite.GetOverlayAnimation();
        sprite.SetOverlayFrame(overlayAnimation, collectiblePedestalType);
      }
      exports2.setCollectiblePedestalType = setCollectiblePedestalType;
      function setCollectibleSprite(collectible, pngPath) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "setCollectibleSprite" function was given a non-collectible: ${entityID}`);
        }
        const sprite = collectible.GetSprite();
        if (pngPath === void 0) {
          (0, sprites_1.clearSprite)(sprite, isaac_typescript_definitions_1.CollectibleSpriteLayer.HEAD, isaac_typescript_definitions_1.CollectibleSpriteLayer.ITEM_SHADOW);
        } else {
          sprite.ReplaceSpritesheet(isaac_typescript_definitions_1.CollectibleSpriteLayer.HEAD, pngPath);
          sprite.LoadGraphics();
        }
      }
      exports2.setCollectibleSprite = setCollectibleSprite;
      function setCollectibleSubType(collectible, newCollectibleType) {
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "setCollectibleSubType" function was given a non-collectible: ${entityID}`);
        }
        if (newCollectibleType === isaac_typescript_definitions_1.CollectibleType.NULL) {
          setCollectibleEmpty(collectible);
          return;
        }
        collectible.Morph(isaac_typescript_definitions_1.EntityType.PICKUP, isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE, newCollectibleType, true, true, true);
      }
      exports2.setCollectibleSubType = setCollectibleSubType;
      function setCollectiblesRerolledForItemTracker() {
        Isaac.DebugString("Added 3 Collectibles");
      }
      exports2.setCollectiblesRerolledForItemTracker = setCollectiblesRerolledForItemTracker;
      function getCollectibleTypeFromArg(collectibleOrCollectibleType, functionName) {
        if ((0, types_1.isInteger)(collectibleOrCollectibleType)) {
          return collectibleOrCollectibleType;
        }
        const collectible = collectibleOrCollectibleType;
        if (!(0, pickupVariants_1.isCollectible)(collectible)) {
          const entityID = (0, entities_1.getEntityID)(collectible);
          error(`The "${functionName}" function was given a non-collectible: ${entityID}`);
        }
        return collectible.SubType;
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerCollectibles.js
  var require_playerCollectibles = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerCollectibles.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.useActiveItemTemp = exports2.setActiveItem = exports2.removeCollectibleFromAllPlayers = exports2.removeCollectibleCostume = exports2.removeCollectible = exports2.removeAllActiveItems = exports2.isActiveSlotEmpty = exports2.hasOpenActiveItemSlot = exports2.hasCollectibleInActiveSlot = exports2.hasCollectible = exports2.getTotalPlayerCollectibles = exports2.getPlayersWithCollectible = exports2.getPlayerCollectibleCount = exports2.getAdjustedPrice = exports2.getActiveItemSlots = exports2.anyPlayerHasCollectible = exports2.addCollectibleCostume = exports2.addCollectible = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var ReadonlySet_1 = require_ReadonlySet();
      var array_1 = require_array();
      var collectibles_1 = require_collectibles();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      function addCollectible(player, ...collectibleTypes) {
        for (const collectibleType of collectibleTypes) {
          player.AddCollectible(collectibleType);
        }
      }
      exports2.addCollectible = addCollectible;
      function addCollectibleCostume(player, collectibleType) {
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return;
        }
        player.AddCostume(itemConfigItem, false);
      }
      exports2.addCollectibleCostume = addCollectibleCostume;
      function anyPlayerHasCollectible(collectibleType, ignoreModifiers) {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => player.HasCollectible(collectibleType, ignoreModifiers));
      }
      exports2.anyPlayerHasCollectible = anyPlayerHasCollectible;
      function getActiveItemSlots(player, collectibleType) {
        return cachedEnumValues_1.ACTIVE_SLOT_VALUES.filter((activeSlot) => {
          const activeItem = player.GetActiveItem(activeSlot);
          return activeItem === collectibleType;
        });
      }
      exports2.getActiveItemSlots = getActiveItemSlots;
      function getAdjustedPrice(basePrice) {
        const numSteamSales = getTotalPlayerCollectibles(isaac_typescript_definitions_1.CollectibleType.STEAM_SALE);
        return numSteamSales > 0 ? Math.floor(basePrice / (numSteamSales + 1)) : basePrice;
      }
      exports2.getAdjustedPrice = getAdjustedPrice;
      function getPlayerCollectibleCount(player, ...collectibleTypes) {
        let numCollectibles = 0;
        for (const collectibleType of collectibleTypes) {
          numCollectibles += player.GetCollectibleNum(collectibleType, true);
        }
        return numCollectibles;
      }
      exports2.getPlayerCollectibleCount = getPlayerCollectibleCount;
      function getPlayersWithCollectible(...collectibleTypes) {
        const players = (0, playerIndex_1.getPlayers)();
        return players.filter((player) => collectibleTypes.every((collectibleType) => player.HasCollectible(collectibleType)));
      }
      exports2.getPlayersWithCollectible = getPlayersWithCollectible;
      function getTotalPlayerCollectibles(collectibleType) {
        const players = (0, playerIndex_1.getPlayers)();
        const numCollectiblesArray = players.map((player) => (
          // We specify "true" as the second argument to filter out things like Lilith's Incubus.
          player.GetCollectibleNum(collectibleType, true)
        ));
        return (0, array_1.sumArray)(numCollectiblesArray);
      }
      exports2.getTotalPlayerCollectibles = getTotalPlayerCollectibles;
      function hasCollectible(player, ...collectibleTypes) {
        return collectibleTypes.some((collectibleType) => player.HasCollectible(collectibleType));
      }
      exports2.hasCollectible = hasCollectible;
      function hasCollectibleInActiveSlot(player, collectibleType, ...activeSlots) {
        const matchingActiveSlotsSet = new ReadonlySet_1.ReadonlySet(activeSlots);
        const activeItemSlots = getActiveItemSlots(player, collectibleType);
        return activeItemSlots.some((activeSlot) => matchingActiveSlotsSet.has(activeSlot));
      }
      exports2.hasCollectibleInActiveSlot = hasCollectibleInActiveSlot;
      function hasOpenActiveItemSlot(player) {
        if ((0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.SOUL_B)) {
          return false;
        }
        const activeItemPrimary = player.GetActiveItem(isaac_typescript_definitions_1.ActiveSlot.PRIMARY);
        const activeItemSecondary = player.GetActiveItem(isaac_typescript_definitions_1.ActiveSlot.SECONDARY);
        const hasSchoolbag = player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.SCHOOLBAG);
        if (hasSchoolbag) {
          return activeItemPrimary === isaac_typescript_definitions_1.CollectibleType.NULL || activeItemSecondary === isaac_typescript_definitions_1.CollectibleType.NULL;
        }
        return activeItemPrimary === isaac_typescript_definitions_1.CollectibleType.NULL;
      }
      exports2.hasOpenActiveItemSlot = hasOpenActiveItemSlot;
      function isActiveSlotEmpty(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY) {
        const activeCollectibleType = player.GetActiveItem(activeSlot);
        return activeCollectibleType === isaac_typescript_definitions_1.CollectibleType.NULL;
      }
      exports2.isActiveSlotEmpty = isActiveSlotEmpty;
      function removeAllActiveItems(player) {
        for (const activeSlot of cachedEnumValues_1.ACTIVE_SLOT_VALUES) {
          const collectibleType = player.GetActiveItem(activeSlot);
          if (collectibleType === isaac_typescript_definitions_1.CollectibleType.NULL) {
            continue;
          }
          let stillHasCollectible;
          do {
            player.RemoveCollectible(collectibleType);
            stillHasCollectible = player.HasCollectible(collectibleType);
          } while (stillHasCollectible);
        }
      }
      exports2.removeAllActiveItems = removeAllActiveItems;
      function removeCollectible(player, ...collectibleTypes) {
        for (const collectibleType of collectibleTypes) {
          player.RemoveCollectible(collectibleType);
        }
      }
      exports2.removeCollectible = removeCollectible;
      function removeCollectibleCostume(player, collectibleType) {
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return;
        }
        player.RemoveCostume(itemConfigItem);
      }
      exports2.removeCollectibleCostume = removeCollectibleCostume;
      function removeCollectibleFromAllPlayers(...collectibleTypes) {
        for (const player of (0, playerIndex_1.getAllPlayers)()) {
          for (const collectibleType of collectibleTypes) {
            while (player.HasCollectible(collectibleType, true)) {
              player.RemoveCollectible(collectibleType);
            }
          }
        }
      }
      exports2.removeCollectibleFromAllPlayers = removeCollectibleFromAllPlayers;
      function setActiveItem(player, collectibleType, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY, charge, keepInPools = false) {
        const itemPool = cachedClasses_1.game.GetItemPool();
        const primaryCollectibleType = player.GetActiveItem(isaac_typescript_definitions_1.ActiveSlot.PRIMARY);
        const primaryCharge = player.GetActiveCharge(isaac_typescript_definitions_1.ActiveSlot.PRIMARY);
        const secondaryCollectibleType = player.GetActiveItem(isaac_typescript_definitions_1.ActiveSlot.SECONDARY);
        if (charge === void 0) {
          charge = (0, collectibles_1.getCollectibleMaxCharges)(collectibleType);
        }
        if (!keepInPools) {
          itemPool.RemoveCollectible(collectibleType);
        }
        switch (activeSlot) {
          case isaac_typescript_definitions_1.ActiveSlot.PRIMARY: {
            if (primaryCollectibleType !== isaac_typescript_definitions_1.CollectibleType.NULL) {
              player.RemoveCollectible(primaryCollectibleType);
            }
            player.AddCollectible(collectibleType, charge, false);
            break;
          }
          case isaac_typescript_definitions_1.ActiveSlot.SECONDARY: {
            if (primaryCollectibleType !== isaac_typescript_definitions_1.CollectibleType.NULL) {
              player.RemoveCollectible(primaryCollectibleType);
            }
            if (secondaryCollectibleType !== isaac_typescript_definitions_1.CollectibleType.NULL) {
              player.RemoveCollectible(secondaryCollectibleType);
            }
            player.AddCollectible(secondaryCollectibleType, charge, false);
            if (primaryCollectibleType !== isaac_typescript_definitions_1.CollectibleType.NULL) {
              player.AddCollectible(primaryCollectibleType, primaryCharge, false);
            }
            break;
          }
          case isaac_typescript_definitions_1.ActiveSlot.POCKET: {
            player.SetPocketActiveItem(collectibleType, activeSlot, keepInPools);
            player.SetActiveCharge(charge, activeSlot);
            break;
          }
          case isaac_typescript_definitions_1.ActiveSlot.POCKET_SINGLE_USE: {
            player.SetPocketActiveItem(collectibleType, activeSlot, keepInPools);
            break;
          }
        }
      }
      exports2.setActiveItem = setActiveItem;
      function useActiveItemTemp(player, collectibleType) {
        player.UseActiveItem(collectibleType, false, false, true, false, -1);
      }
      exports2.useActiveItemTemp = useActiveItemTemp;
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeVolumes.js
  var require_roomShapeVolumes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeVolumes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_VOLUMES = exports2.NARROW_CONTENTS_HEIGHT = exports2.NARROW_CONTENTS_WIDTH = exports2.ONE_BY_ONE_CONTENTS_HEIGHT = exports2.ONE_BY_ONE_CONTENTS_WIDTH = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.ONE_BY_ONE_CONTENTS_WIDTH = 13;
      exports2.ONE_BY_ONE_CONTENTS_HEIGHT = 7;
      var ONE_BY_ONE_VOLUME = exports2.ONE_BY_ONE_CONTENTS_HEIGHT * exports2.ONE_BY_ONE_CONTENTS_WIDTH;
      exports2.NARROW_CONTENTS_WIDTH = 5;
      exports2.NARROW_CONTENTS_HEIGHT = 3;
      var NARROW_HORIZONTAL_VOLUME = exports2.ONE_BY_ONE_CONTENTS_WIDTH * exports2.NARROW_CONTENTS_HEIGHT;
      var NARROW_VERTICAL_VOLUME = exports2.NARROW_CONTENTS_WIDTH * exports2.ONE_BY_ONE_CONTENTS_HEIGHT;
      var ONE_BY_TWO_VOLUME = ONE_BY_ONE_VOLUME * 2;
      var L_ROOM_VOLUME = ONE_BY_ONE_VOLUME * 3;
      exports2.ROOM_SHAPE_VOLUMES = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: ONE_BY_ONE_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.IH]: NARROW_HORIZONTAL_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.IV]: NARROW_VERTICAL_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: ONE_BY_TWO_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.IIV]: NARROW_VERTICAL_VOLUME * 2,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: ONE_BY_TWO_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.IIH]: NARROW_HORIZONTAL_VOLUME * 2,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: ONE_BY_ONE_VOLUME * 4,
        [isaac_typescript_definitions_1.RoomShape.LTL]: L_ROOM_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.LTR]: L_ROOM_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.LBL]: L_ROOM_VOLUME,
        [isaac_typescript_definitions_1.RoomShape.LBR]: L_ROOM_VOLUME
        // 12
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeBounds.js
  var require_roomShapeBounds = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeBounds.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_BOUNDS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var roomShapeVolumes_1 = require_roomShapeVolumes();
      var TWO_BY_TWO_BOUNDS = [
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH * 2,
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT * 2
      ];
      exports2.ROOM_SHAPE_BOUNDS = {
        // 1
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: [
          roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH,
          roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT
        ],
        // 2
        [isaac_typescript_definitions_1.RoomShape.IH]: [roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH, roomShapeVolumes_1.NARROW_CONTENTS_HEIGHT],
        // 3
        [isaac_typescript_definitions_1.RoomShape.IV]: [roomShapeVolumes_1.NARROW_CONTENTS_WIDTH, roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT],
        // 4
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: [
          roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH,
          roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT * 2
        ],
        // 5
        [isaac_typescript_definitions_1.RoomShape.IIV]: [roomShapeVolumes_1.NARROW_CONTENTS_WIDTH, roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT * 2],
        // 6
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: [
          roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH * 2,
          roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT
        ],
        // 7
        [isaac_typescript_definitions_1.RoomShape.IIH]: [roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH * 2, roomShapeVolumes_1.NARROW_CONTENTS_HEIGHT],
        // 8
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: TWO_BY_TWO_BOUNDS,
        // 9
        [isaac_typescript_definitions_1.RoomShape.LTL]: TWO_BY_TWO_BOUNDS,
        // 10
        [isaac_typescript_definitions_1.RoomShape.LTR]: TWO_BY_TWO_BOUNDS,
        // 11
        [isaac_typescript_definitions_1.RoomShape.LBL]: TWO_BY_TWO_BOUNDS,
        // 12
        [isaac_typescript_definitions_1.RoomShape.LBR]: TWO_BY_TWO_BOUNDS
      };
    }
  });

  // node_modules/isaacscript-common/dist/enums/CornerType.js
  var require_CornerType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/CornerType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CornerType = void 0;
      var CornerType;
      (function(CornerType2) {
        CornerType2[CornerType2["TOP_LEFT"] = 0] = "TOP_LEFT";
        CornerType2[CornerType2["TOP_RIGHT"] = 1] = "TOP_RIGHT";
        CornerType2[CornerType2["BOTTOM_LEFT"] = 2] = "BOTTOM_LEFT";
        CornerType2[CornerType2["BOTTOM_RIGHT"] = 3] = "BOTTOM_RIGHT";
      })(CornerType || (exports2.CornerType = CornerType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeCorners.js
  var require_roomShapeCorners = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeCorners.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_CORNERS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CornerType_1 = require_CornerType();
      var readOnly_1 = require_readOnly();
      exports2.ROOM_SHAPE_CORNERS = {
        // 1
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 14,
            position: (0, readOnly_1.newReadonlyVector)(580, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 120,
            position: (0, readOnly_1.newReadonlyVector)(60, 420)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 134,
            position: (0, readOnly_1.newReadonlyVector)(580, 420)
          }
        ],
        // 2
        [isaac_typescript_definitions_1.RoomShape.IH]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 30,
            position: (0, readOnly_1.newReadonlyVector)(60, 220)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 44,
            position: (0, readOnly_1.newReadonlyVector)(580, 220)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 90,
            position: (0, readOnly_1.newReadonlyVector)(60, 340)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 104,
            position: (0, readOnly_1.newReadonlyVector)(580, 340)
          }
        ],
        // 3
        [isaac_typescript_definitions_1.RoomShape.IV]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 4,
            position: (0, readOnly_1.newReadonlyVector)(220, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 10,
            position: (0, readOnly_1.newReadonlyVector)(420, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 124,
            position: (0, readOnly_1.newReadonlyVector)(220, 420)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 130,
            position: (0, readOnly_1.newReadonlyVector)(420, 420)
          }
        ],
        // 4
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 14,
            position: (0, readOnly_1.newReadonlyVector)(580, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 225,
            position: (0, readOnly_1.newReadonlyVector)(60, 700)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 239,
            position: (0, readOnly_1.newReadonlyVector)(580, 700)
          }
        ],
        // 5
        [isaac_typescript_definitions_1.RoomShape.IIV]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 4,
            position: (0, readOnly_1.newReadonlyVector)(220, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 10,
            position: (0, readOnly_1.newReadonlyVector)(420, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 229,
            position: (0, readOnly_1.newReadonlyVector)(220, 700)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 235,
            position: (0, readOnly_1.newReadonlyVector)(420, 700)
          }
        ],
        // 6
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 27,
            position: (0, readOnly_1.newReadonlyVector)(1100, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 224,
            position: (0, readOnly_1.newReadonlyVector)(60, 420)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 251,
            position: (0, readOnly_1.newReadonlyVector)(1100, 420)
          }
        ],
        // 7
        [isaac_typescript_definitions_1.RoomShape.IIH]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 56,
            position: (0, readOnly_1.newReadonlyVector)(60, 220)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 83,
            position: (0, readOnly_1.newReadonlyVector)(1100, 220)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 168,
            position: (0, readOnly_1.newReadonlyVector)(60, 340)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 195,
            position: (0, readOnly_1.newReadonlyVector)(1100, 340)
          }
        ],
        // 8
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 27,
            position: (0, readOnly_1.newReadonlyVector)(1100, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 420,
            position: (0, readOnly_1.newReadonlyVector)(60, 700)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 447,
            position: (0, readOnly_1.newReadonlyVector)(1100, 700)
          }
        ],
        // 9
        [isaac_typescript_definitions_1.RoomShape.LTL]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 13,
            position: (0, readOnly_1.newReadonlyVector)(580, 140)
            // Center
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 27,
            position: (0, readOnly_1.newReadonlyVector)(1100, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 196,
            position: (0, readOnly_1.newReadonlyVector)(60, 420)
            // Left
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 209,
            position: (0, readOnly_1.newReadonlyVector)(580, 420)
            // Center
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 420,
            position: (0, readOnly_1.newReadonlyVector)(60, 700)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 447,
            position: (0, readOnly_1.newReadonlyVector)(1100, 700)
          }
        ],
        // 10
        [isaac_typescript_definitions_1.RoomShape.LTR]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 14,
            position: (0, readOnly_1.newReadonlyVector)(580, 140)
            // Center
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 210,
            position: (0, readOnly_1.newReadonlyVector)(580, 420)
            // Center
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 223,
            position: (0, readOnly_1.newReadonlyVector)(1100, 420)
            // Right
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 420,
            position: (0, readOnly_1.newReadonlyVector)(60, 700)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 447,
            position: (0, readOnly_1.newReadonlyVector)(1100, 700)
          }
        ],
        // 11
        [isaac_typescript_definitions_1.RoomShape.LBL]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 27,
            position: (0, readOnly_1.newReadonlyVector)(1100, 140)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 224,
            position: (0, readOnly_1.newReadonlyVector)(580, 140)
            // Left
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 237,
            position: (0, readOnly_1.newReadonlyVector)(580, 420)
            // Center
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 433,
            position: (0, readOnly_1.newReadonlyVector)(580, 700)
            // Center
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 447,
            position: (0, readOnly_1.newReadonlyVector)(1100, 700)
          }
        ],
        // 12
        [isaac_typescript_definitions_1.RoomShape.LBR]: [
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 0,
            position: (0, readOnly_1.newReadonlyVector)(60, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_RIGHT,
            gridIndex: 27,
            position: (0, readOnly_1.newReadonlyVector)(1100, 140)
          },
          {
            type: CornerType_1.CornerType.TOP_LEFT,
            gridIndex: 238,
            position: (0, readOnly_1.newReadonlyVector)(580, 420)
            // Center
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 251,
            position: (0, readOnly_1.newReadonlyVector)(1100, 420)
            // Right
          },
          {
            type: CornerType_1.CornerType.BOTTOM_LEFT,
            gridIndex: 420,
            position: (0, readOnly_1.newReadonlyVector)(60, 700)
          },
          {
            type: CornerType_1.CornerType.BOTTOM_RIGHT,
            gridIndex: 434,
            position: (0, readOnly_1.newReadonlyVector)(580, 700)
            // Right
          }
        ]
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeLayoutSizes.js
  var require_roomShapeLayoutSizes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeLayoutSizes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_LAYOUT_SIZES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var roomShapeVolumes_1 = require_roomShapeVolumes();
      var ONE_BY_ONE_LAYOUT_SIZE = [
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH,
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT
      ];
      var TWO_BY_ONE_VERTICAL_LAYOUT_SIZE = [
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH,
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT * 2
      ];
      var TWO_BY_ONE_HORIZONTAL_LAYOUT_SIZE = [
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH * 2,
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT
      ];
      var TWO_BY_TWO_LAYOUT_SIZE = [
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_WIDTH * 2,
        roomShapeVolumes_1.ONE_BY_ONE_CONTENTS_HEIGHT * 2
      ];
      exports2.ROOM_SHAPE_LAYOUT_SIZES = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: ONE_BY_ONE_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.IH]: ONE_BY_ONE_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.IV]: ONE_BY_ONE_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: TWO_BY_ONE_VERTICAL_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.IIV]: TWO_BY_ONE_VERTICAL_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: TWO_BY_ONE_HORIZONTAL_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.IIH]: TWO_BY_ONE_HORIZONTAL_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: TWO_BY_TWO_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.LTL]: TWO_BY_TWO_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.LTR]: TWO_BY_TWO_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.LBL]: TWO_BY_TWO_LAYOUT_SIZE,
        [isaac_typescript_definitions_1.RoomShape.LBR]: TWO_BY_TWO_LAYOUT_SIZE
        // 12
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeToBottomRightPosition.js
  var require_roomShapeToBottomRightPosition = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeToBottomRightPosition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var readOnly_1 = require_readOnly();
      var TWO_BY_TWO_BOTTOM_RIGHT_POSITION = (0, readOnly_1.newReadonlyVector)(25, 13);
      var ONE_BY_TWO_VERTICAL_BOTTOM_RIGHT_POSITION = (0, readOnly_1.newReadonlyVector)(12, 13);
      exports2.ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: (0, readOnly_1.newReadonlyVector)(12, 6),
        [isaac_typescript_definitions_1.RoomShape.IH]: (0, readOnly_1.newReadonlyVector)(12, 4),
        [isaac_typescript_definitions_1.RoomShape.IV]: (0, readOnly_1.newReadonlyVector)(8, 6),
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: ONE_BY_TWO_VERTICAL_BOTTOM_RIGHT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.IIV]: (0, readOnly_1.newReadonlyVector)(8, 13),
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: (0, readOnly_1.newReadonlyVector)(25, 6),
        [isaac_typescript_definitions_1.RoomShape.IIH]: (0, readOnly_1.newReadonlyVector)(25, 4),
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.LTL]: TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.LTR]: TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.LBL]: TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.LBR]: ONE_BY_TWO_VERTICAL_BOTTOM_RIGHT_POSITION
        // 12
      };
    }
  });

  // node_modules/isaacscript-common/dist/types/ReadonlyMap.js
  var require_ReadonlyMap = __commonJS({
    "node_modules/isaacscript-common/dist/types/ReadonlyMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ReadonlyMap = void 0;
      exports2.ReadonlyMap = Map;
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeToDoorSlotsToGridIndexDelta.js
  var require_roomShapeToDoorSlotsToGridIndexDelta = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeToDoorSlotsToGridIndexDelta.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var LEFT = -1;
      var UP = -constants_1.LEVEL_GRID_ROW_WIDTH;
      var RIGHT = 1;
      var DOWN = constants_1.LEVEL_GRID_ROW_WIDTH;
      exports2.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA = {
        // 1
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN]
          // 3
        ]),
        // 2
        [isaac_typescript_definitions_1.RoomShape.IH]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT]
          // 2
        ]),
        // 3
        [isaac_typescript_definitions_1.RoomShape.IV]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN]
          // 3
        ]),
        // 4
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN + DOWN],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1, DOWN + LEFT],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1, DOWN + RIGHT]
          // 6
        ]),
        // 5
        [isaac_typescript_definitions_1.RoomShape.IIV]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN + DOWN]
          // 3
        ]),
        // 6
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN],
          [isaac_typescript_definitions_1.DoorSlot.UP_1, RIGHT + UP],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1, RIGHT + DOWN]
          // 7
        ]),
        // 7
        [isaac_typescript_definitions_1.RoomShape.IIH]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT + RIGHT]
          // 2
        ]),
        // 8
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN + DOWN],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1, DOWN + LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_1, RIGHT + UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1, RIGHT + DOWN + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1, RIGHT + DOWN + DOWN]
          // 7
        ]),
        // 9
        [isaac_typescript_definitions_1.RoomShape.LTL]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, DOWN + LEFT + UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN + LEFT + DOWN],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1, DOWN + LEFT + LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_1, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1, DOWN + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1, DOWN + DOWN]
          // 7
        ]),
        // 10
        [isaac_typescript_definitions_1.RoomShape.LTR]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN + DOWN],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1, DOWN + LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_1, DOWN + RIGHT + UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1, DOWN + RIGHT + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1, DOWN + RIGHT + DOWN]
          // 7
        ]),
        // 11
        [isaac_typescript_definitions_1.RoomShape.LBL]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1, RIGHT + DOWN + LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_1, RIGHT + UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1, RIGHT + DOWN + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1, RIGHT + DOWN + DOWN]
          // 7
        ]),
        // 12
        [isaac_typescript_definitions_1.RoomShape.LBR]: new ReadonlyMap_1.ReadonlyMap([
          [isaac_typescript_definitions_1.DoorSlot.LEFT_0, LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_0, UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_0, RIGHT + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_0, DOWN + DOWN],
          [isaac_typescript_definitions_1.DoorSlot.LEFT_1, DOWN + LEFT],
          [isaac_typescript_definitions_1.DoorSlot.UP_1, RIGHT + UP],
          [isaac_typescript_definitions_1.DoorSlot.RIGHT_1, DOWN + RIGHT],
          [isaac_typescript_definitions_1.DoorSlot.DOWN_1, RIGHT + DOWN]
          // 7
        ])
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeToGridWidth.js
  var require_roomShapeToGridWidth = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeToGridWidth.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_GRID_WIDTH = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ONE_BY_ONE_WIDTH = 15;
      var TWO_BY_ONE_WIDTH = 28;
      exports2.ROOM_SHAPE_TO_GRID_WIDTH = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: ONE_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.IH]: ONE_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.IV]: ONE_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: ONE_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.IIV]: ONE_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: TWO_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.IIH]: TWO_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: TWO_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.LTL]: TWO_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.LTR]: TWO_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.LBL]: TWO_BY_ONE_WIDTH,
        [isaac_typescript_definitions_1.RoomShape.LBR]: TWO_BY_ONE_WIDTH
        // 12
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomShapeToTopLeftPosition.js
  var require_roomShapeToTopLeftPosition = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomShapeToTopLeftPosition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_TOP_LEFT_POSITION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var readOnly_1 = require_readOnly();
      var NARROW_HORIZONTAL_TOP_LEFT_POSITION = (0, readOnly_1.newReadonlyVector)(0, 2);
      var NARROW_VERTICAL_TOP_LEFT_POSITION = (0, readOnly_1.newReadonlyVector)(4, 0);
      exports2.ROOM_SHAPE_TO_TOP_LEFT_POSITION = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.RoomShape.IH]: NARROW_HORIZONTAL_TOP_LEFT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.IV]: NARROW_VERTICAL_TOP_LEFT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.RoomShape.IIV]: NARROW_VERTICAL_TOP_LEFT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.RoomShape.IIH]: NARROW_HORIZONTAL_TOP_LEFT_POSITION,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.RoomShape.LTL]: (0, readOnly_1.newReadonlyVector)(13, 0),
        [isaac_typescript_definitions_1.RoomShape.LTR]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.RoomShape.LBL]: constants_1.VectorZero,
        [isaac_typescript_definitions_1.RoomShape.LBR]: constants_1.VectorZero
        // 12
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/LRoomShapesSet.js
  var require_LRoomShapesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/LRoomShapesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.L_ROOM_SHAPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.L_ROOM_SHAPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.RoomShape.LTL,
        isaac_typescript_definitions_1.RoomShape.LTR,
        isaac_typescript_definitions_1.RoomShape.LBL,
        isaac_typescript_definitions_1.RoomShape.LBR
        // 12
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/bigRoomShapesSet.js
  var require_bigRoomShapesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/bigRoomShapesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BIG_ROOM_SHAPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.BIG_ROOM_SHAPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.RoomShape.SHAPE_1x2,
        isaac_typescript_definitions_1.RoomShape.SHAPE_2x1,
        isaac_typescript_definitions_1.RoomShape.SHAPE_2x2,
        isaac_typescript_definitions_1.RoomShape.LTL,
        isaac_typescript_definitions_1.RoomShape.LTR,
        isaac_typescript_definitions_1.RoomShape.LBL,
        isaac_typescript_definitions_1.RoomShape.LBR
        // 12
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/narrowRoomShapesSet.js
  var require_narrowRoomShapesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/narrowRoomShapesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NARROW_ROOM_SHAPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.NARROW_ROOM_SHAPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.RoomShape.IH,
        isaac_typescript_definitions_1.RoomShape.IV,
        isaac_typescript_definitions_1.RoomShape.IIV,
        isaac_typescript_definitions_1.RoomShape.IIH
        // 7
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/roomShape.js
  var require_roomShape = __commonJS({
    "node_modules/isaacscript-common/dist/functions/roomShape.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isRoomShapeDoubleCharge = exports2.isNarrowRoom = exports2.isLRoomShape = exports2.isBigRoomShape = exports2.is2x1RoomShape = exports2.getRoomShapeWidth = exports2.getRoomShapeVolume = exports2.getRoomShapeTopLeftPosition = exports2.getRoomShapeLayoutSize = exports2.getRoomShapeCorners = exports2.getRoomShapeCharges = exports2.getRoomShapeBounds = exports2.getRoomShapeBottomRightPosition = exports2.getGridIndexDelta = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var roomShapeBounds_1 = require_roomShapeBounds();
      var roomShapeCorners_1 = require_roomShapeCorners();
      var roomShapeLayoutSizes_1 = require_roomShapeLayoutSizes();
      var roomShapeToBottomRightPosition_1 = require_roomShapeToBottomRightPosition();
      var roomShapeToDoorSlotsToGridIndexDelta_1 = require_roomShapeToDoorSlotsToGridIndexDelta();
      var roomShapeToGridWidth_1 = require_roomShapeToGridWidth();
      var roomShapeToTopLeftPosition_1 = require_roomShapeToTopLeftPosition();
      var roomShapeVolumes_1 = require_roomShapeVolumes();
      var LRoomShapesSet_1 = require_LRoomShapesSet();
      var bigRoomShapesSet_1 = require_bigRoomShapesSet();
      var narrowRoomShapesSet_1 = require_narrowRoomShapesSet();
      function getGridIndexDelta(roomShape, doorSlot) {
        const doorSlotToGridIndexMap = roomShapeToDoorSlotsToGridIndexDelta_1.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA[roomShape];
        return doorSlotToGridIndexMap.get(doorSlot);
      }
      exports2.getGridIndexDelta = getGridIndexDelta;
      function getRoomShapeBottomRightPosition(roomShape) {
        return roomShapeToBottomRightPosition_1.ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION[roomShape];
      }
      exports2.getRoomShapeBottomRightPosition = getRoomShapeBottomRightPosition;
      function getRoomShapeBounds(roomShape) {
        return roomShapeBounds_1.ROOM_SHAPE_BOUNDS[roomShape];
      }
      exports2.getRoomShapeBounds = getRoomShapeBounds;
      function getRoomShapeCharges(roomShape) {
        return isRoomShapeDoubleCharge(roomShape) ? 2 : 1;
      }
      exports2.getRoomShapeCharges = getRoomShapeCharges;
      function getRoomShapeCorners(roomShape) {
        return roomShapeCorners_1.ROOM_SHAPE_CORNERS[roomShape];
      }
      exports2.getRoomShapeCorners = getRoomShapeCorners;
      function getRoomShapeLayoutSize(roomShape) {
        return roomShapeLayoutSizes_1.ROOM_SHAPE_LAYOUT_SIZES[roomShape];
      }
      exports2.getRoomShapeLayoutSize = getRoomShapeLayoutSize;
      function getRoomShapeTopLeftPosition(roomShape) {
        return roomShapeToTopLeftPosition_1.ROOM_SHAPE_TO_TOP_LEFT_POSITION[roomShape];
      }
      exports2.getRoomShapeTopLeftPosition = getRoomShapeTopLeftPosition;
      function getRoomShapeVolume(roomShape) {
        return roomShapeVolumes_1.ROOM_SHAPE_VOLUMES[roomShape];
      }
      exports2.getRoomShapeVolume = getRoomShapeVolume;
      function getRoomShapeWidth(roomShape) {
        return roomShapeToGridWidth_1.ROOM_SHAPE_TO_GRID_WIDTH[roomShape];
      }
      exports2.getRoomShapeWidth = getRoomShapeWidth;
      function is2x1RoomShape(roomShape) {
        return roomShape === isaac_typescript_definitions_1.RoomShape.SHAPE_1x2 || roomShape === isaac_typescript_definitions_1.RoomShape.SHAPE_2x1;
      }
      exports2.is2x1RoomShape = is2x1RoomShape;
      function isBigRoomShape(roomShape) {
        return bigRoomShapesSet_1.BIG_ROOM_SHAPES_SET.has(roomShape);
      }
      exports2.isBigRoomShape = isBigRoomShape;
      function isLRoomShape(roomShape) {
        return LRoomShapesSet_1.L_ROOM_SHAPES_SET.has(roomShape);
      }
      exports2.isLRoomShape = isLRoomShape;
      function isNarrowRoom(roomShape) {
        return narrowRoomShapesSet_1.NARROW_ROOM_SHAPES_SET.has(roomShape);
      }
      exports2.isNarrowRoom = isNarrowRoom;
      function isRoomShapeDoubleCharge(roomShape) {
        return roomShape >= isaac_typescript_definitions_1.RoomShape.SHAPE_2x2;
      }
      exports2.isRoomShapeDoubleCharge = isRoomShapeDoubleCharge;
    }
  });

  // node_modules/isaacscript-common/dist/functions/charge.js
  var require_charge = __commonJS({
    "node_modules/isaacscript-common/dist/functions/charge.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.playChargeSoundEffect = exports2.isActiveSlotDoubleCharged = exports2.getUsableActiveItemSlots = exports2.getTotalCharge = exports2.getChargesAwayFromMax = exports2.addRoomClearCharges = exports2.addRoomClearChargeToSlot = exports2.addRoomClearCharge = exports2.addCharge = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var collectibles_1 = require_collectibles();
      var playerCollectibles_1 = require_playerCollectibles();
      var playerIndex_1 = require_playerIndex();
      var roomShape_1 = require_roomShape();
      function addCharge(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY, numCharges = 1, playSoundEffect = true) {
        const hud = cachedClasses_1.game.GetHUD();
        const chargesAwayFromMax = getChargesAwayFromMax(player, activeSlot);
        const chargesToAdd = numCharges > chargesAwayFromMax ? chargesAwayFromMax : numCharges;
        const modifiedChargesToAdd = getChargesToAddWithAAAModifier(player, activeSlot, chargesToAdd);
        const totalCharge = getTotalCharge(player, activeSlot);
        const newCharge = totalCharge + modifiedChargesToAdd;
        if (newCharge === totalCharge) {
          return 0;
        }
        player.SetActiveCharge(newCharge, activeSlot);
        hud.FlashChargeBar(player, activeSlot);
        if (playSoundEffect) {
          playChargeSoundEffect(player, activeSlot);
        }
        return modifiedChargesToAdd;
      }
      exports2.addCharge = addCharge;
      function addRoomClearCharge(player, bigRoomDoubleCharge = true, playSoundEffect = true) {
        for (const activeSlot of [
          isaac_typescript_definitions_1.ActiveSlot.PRIMARY,
          isaac_typescript_definitions_1.ActiveSlot.SECONDARY,
          isaac_typescript_definitions_1.ActiveSlot.POCKET
        ]) {
          addRoomClearChargeToSlot(player, activeSlot, bigRoomDoubleCharge, playSoundEffect);
        }
      }
      exports2.addRoomClearCharge = addRoomClearCharge;
      function addRoomClearChargeToSlot(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY, bigRoomDoubleCharge = true, playSoundEffect = true) {
        const activeItem = player.GetActiveItem(activeSlot);
        if (activeItem === isaac_typescript_definitions_1.CollectibleType.NULL) {
          return;
        }
        const chargeType = (0, collectibles_1.getCollectibleChargeType)(activeItem);
        if (chargeType === isaac_typescript_definitions_1.ItemConfigChargeType.SPECIAL) {
          return;
        }
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        let numCharges = bigRoomDoubleCharge ? (0, roomShape_1.getRoomShapeCharges)(roomShape) : 1;
        if (chargeType === isaac_typescript_definitions_1.ItemConfigChargeType.TIMED) {
          numCharges = (0, collectibles_1.getCollectibleMaxCharges)(activeItem);
        }
        addCharge(player, activeSlot, numCharges, playSoundEffect);
      }
      exports2.addRoomClearChargeToSlot = addRoomClearChargeToSlot;
      function getChargesToAddWithAAAModifier(player, activeSlot, chargesToAdd) {
        const hasAAABattery = player.HasTrinket(isaac_typescript_definitions_1.TrinketType.AAA_BATTERY);
        if (!hasAAABattery) {
          return chargesToAdd;
        }
        const chargesAwayFromMax = getChargesAwayFromMax(player, activeSlot);
        const AAABatteryShouldApply = chargesToAdd === chargesAwayFromMax - 1;
        return AAABatteryShouldApply ? chargesToAdd + 1 : chargesToAdd;
      }
      function addRoomClearCharges(bigRoomDoubleCharge = true) {
        for (const player of (0, playerIndex_1.getPlayers)()) {
          addRoomClearCharge(player, bigRoomDoubleCharge);
        }
      }
      exports2.addRoomClearCharges = addRoomClearCharges;
      function getChargesAwayFromMax(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY) {
        const totalCharge = getTotalCharge(player, activeSlot);
        const activeItem = player.GetActiveItem(activeSlot);
        const hasBattery = player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.BATTERY);
        const maxCharges = (0, collectibles_1.getCollectibleMaxCharges)(activeItem);
        const effectiveMaxCharges = hasBattery ? maxCharges * 2 : maxCharges;
        return effectiveMaxCharges - totalCharge;
      }
      exports2.getChargesAwayFromMax = getChargesAwayFromMax;
      function getTotalCharge(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY) {
        const activeCharge = player.GetActiveCharge(activeSlot);
        const batteryCharge = player.GetBatteryCharge(activeSlot);
        return activeCharge + batteryCharge;
      }
      exports2.getTotalCharge = getTotalCharge;
      function getUsableActiveItemSlots(player, collectibleType) {
        const maxCharges = (0, collectibles_1.getCollectibleMaxCharges)(collectibleType);
        const activeSlots = (0, playerCollectibles_1.getActiveItemSlots)(player, collectibleType);
        return activeSlots.filter((activeSlot) => {
          const totalCharge = getTotalCharge(player, activeSlot);
          return totalCharge >= maxCharges;
        });
      }
      exports2.getUsableActiveItemSlots = getUsableActiveItemSlots;
      function isActiveSlotDoubleCharged(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY) {
        const collectibleType = player.GetActiveItem(activeSlot);
        const batteryCharge = player.GetBatteryCharge(activeSlot);
        const maxCharges = (0, collectibles_1.getCollectibleMaxCharges)(collectibleType);
        return batteryCharge >= maxCharges;
      }
      exports2.isActiveSlotDoubleCharged = isActiveSlotDoubleCharged;
      function playChargeSoundEffect(player, activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY) {
        for (const soundEffect of [
          isaac_typescript_definitions_1.SoundEffect.BATTERY_CHARGE,
          isaac_typescript_definitions_1.SoundEffect.BEEP
          // 171
        ]) {
          cachedClasses_1.sfxManager.Stop(soundEffect);
        }
        const chargeSoundEffect = shouldPlayFullRechargeSound(player, activeSlot) ? isaac_typescript_definitions_1.SoundEffect.BATTERY_CHARGE : isaac_typescript_definitions_1.SoundEffect.BEEP;
        cachedClasses_1.sfxManager.Play(chargeSoundEffect);
      }
      exports2.playChargeSoundEffect = playChargeSoundEffect;
      function shouldPlayFullRechargeSound(player, activeSlot) {
        const activeItem = player.GetActiveItem(activeSlot);
        const activeCharge = player.GetActiveCharge(activeSlot);
        const batteryCharge = player.GetBatteryCharge(activeSlot);
        const hasBattery = player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.BATTERY);
        const maxCharges = (0, collectibles_1.getCollectibleMaxCharges)(activeItem);
        if (!hasBattery) {
          return activeCharge === maxCharges;
        }
        return batteryCharge === maxCharges || activeCharge === maxCharges && batteryCharge === 0;
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostItemDischarge.js
  var require_PostItemDischarge = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostItemDischarge.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostItemDischarge = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var charge_1 = require_charge();
      var playerDataStructures_1 = require_playerDataStructures();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersActiveItemMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map()),
          playersActiveChargeMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        },
        room: {
          playersBulbLastCollisionFrame: /* @__PURE__ */ new Map()
        }
      };
      var PostItemDischarge = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 30
            [
              isaac_typescript_definitions_1.ModCallback.PRE_NPC_COLLISION,
              this.preNPCCollisionSucker,
              [isaac_typescript_definitions_1.EntityType.SUCKER]
            ]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_player, collectibleType] = fireArgs;
          const [callbackCollectibleType] = optionalArgs;
          return callbackCollectibleType === void 0 || callbackCollectibleType === collectibleType;
        };
        // ModCallback.PRE_NPC_COLLISION (30)
        // EntityType.SUCKER (61)
        preNPCCollisionSucker = (npc, collider) => {
          if (npc.Variant === isaac_typescript_definitions_1.SuckerVariant.BULB) {
            return this.preNPCCollisionBulb(npc, collider);
          }
          return void 0;
        };
        // ModCallback.PRE_NPC_COLLISION (30)
        // EntityType.SUCKER (61)
        preNPCCollisionBulb(_npc, collider) {
          this.checkPlayerCollidedWithBulb(collider);
          return void 0;
        }
        /**
         * The algorithm for detecting a discharge is checking if the current charge is less than the
         * charge on the previous frame. Thus, when a Bulb zaps a player and drains their charge, this
         * will be a false position, so Bulbs have to be handled.
         *
         * When Bulbs zap a player, they go to `NPCState.STATE_JUMP` for a frame. However, this only
         * happens on the frame after the player is discharged, which is too late to be of any use.
         *
         * Instead, we track the frames that Bulbs collide with players and assume that a collision means
         * a zap has occurred.
         */
        checkPlayerCollidedWithBulb(collider) {
          const player = collider.ToPlayer();
          if (player === void 0) {
            return;
          }
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          (0, playerDataStructures_1.mapSetPlayer)(v.room.playersBulbLastCollisionFrame, player, gameFrameCount);
        }
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const activeItemMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersActiveItemMap, player);
          const chargeMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersActiveChargeMap, player);
          for (const activeSlot of cachedEnumValues_1.ACTIVE_SLOT_VALUES) {
            const currentActiveItem = player.GetActiveItem();
            let previousActiveItem = activeItemMap.get(activeSlot);
            if (previousActiveItem === void 0) {
              previousActiveItem = currentActiveItem;
            }
            activeItemMap.set(activeSlot, currentActiveItem);
            if (currentActiveItem !== previousActiveItem) {
              continue;
            }
            const currentCharge = (0, charge_1.getTotalCharge)(player, activeSlot);
            let previousCharge = chargeMap.get(activeSlot);
            if (previousCharge === void 0) {
              previousCharge = currentCharge;
            }
            chargeMap.set(activeSlot, currentCharge);
            if (this.playerRecentlyCollidedWithBulb(player)) {
              continue;
            }
            if (currentCharge < previousCharge) {
              const collectibleType = player.GetActiveItem(activeSlot);
              this.fire(player, collectibleType, activeSlot);
            }
          }
        };
        /**
         * If the player collided with a Bulb on either this frame or the last frame, then assume a zap
         * has occurred. (We do not want to fire the discharge callback if this is the case.)
         */
        playerRecentlyCollidedWithBulb(player) {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const bulbLastCollisionFrame = (0, playerDataStructures_1.mapGetPlayer)(v.room.playersBulbLastCollisionFrame, player);
          const collidedOnThisFrame = gameFrameCount === bulbLastCollisionFrame;
          const collidedOnLastFrame = gameFrameCount - 1 === bulbLastCollisionFrame;
          return collidedOnThisFrame || collidedOnLastFrame;
        }
      };
      exports2.PostItemDischarge = PostItemDischarge;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostItemPickup.js
  var require_PostItemPickup = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostItemPickup.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostItemPickup = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostItemPickup = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ITEM_PICKUP_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireItemPickup;
      };
      exports2.PostItemPickup = PostItemPickup;
    }
  });

  // node_modules/isaacscript-common/dist/maps/keyboardToStringMap.js
  var require_keyboardToStringMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/keyboardToStringMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.KEYBOARD_TO_STRING_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.KEYBOARD_TO_STRING_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.Keyboard.SPACE, [" ", " "]],
        [isaac_typescript_definitions_1.Keyboard.APOSTROPHE, ["'", '"']],
        [isaac_typescript_definitions_1.Keyboard.COMMA, [",", "<"]],
        [isaac_typescript_definitions_1.Keyboard.MINUS, ["-", "_"]],
        [isaac_typescript_definitions_1.Keyboard.PERIOD, [".", ">"]],
        [isaac_typescript_definitions_1.Keyboard.SLASH, ["/", "?"]],
        [isaac_typescript_definitions_1.Keyboard.ZERO, ["0", ")"]],
        [isaac_typescript_definitions_1.Keyboard.ONE, ["1", "!"]],
        [isaac_typescript_definitions_1.Keyboard.TWO, ["2", "@"]],
        [isaac_typescript_definitions_1.Keyboard.THREE, ["3", "#"]],
        [isaac_typescript_definitions_1.Keyboard.FOUR, ["4", "$"]],
        [isaac_typescript_definitions_1.Keyboard.FIVE, ["5", "%"]],
        [isaac_typescript_definitions_1.Keyboard.SIX, ["6", "^"]],
        [isaac_typescript_definitions_1.Keyboard.SEVEN, ["7", "&"]],
        [isaac_typescript_definitions_1.Keyboard.EIGHT, ["8", "*"]],
        [isaac_typescript_definitions_1.Keyboard.NINE, ["9", "("]],
        [isaac_typescript_definitions_1.Keyboard.SEMICOLON, [";", ":"]],
        [isaac_typescript_definitions_1.Keyboard.EQUAL, ["=", "+"]],
        [isaac_typescript_definitions_1.Keyboard.A, ["a", "A"]],
        [isaac_typescript_definitions_1.Keyboard.B, ["b", "B"]],
        [isaac_typescript_definitions_1.Keyboard.C, ["c", "C"]],
        [isaac_typescript_definitions_1.Keyboard.D, ["d", "D"]],
        [isaac_typescript_definitions_1.Keyboard.E, ["e", "E"]],
        [isaac_typescript_definitions_1.Keyboard.F, ["f", "F"]],
        [isaac_typescript_definitions_1.Keyboard.G, ["g", "G"]],
        [isaac_typescript_definitions_1.Keyboard.H, ["h", "H"]],
        [isaac_typescript_definitions_1.Keyboard.I, ["i", "I"]],
        [isaac_typescript_definitions_1.Keyboard.J, ["j", "J"]],
        [isaac_typescript_definitions_1.Keyboard.K, ["k", "K"]],
        [isaac_typescript_definitions_1.Keyboard.L, ["l", "L"]],
        [isaac_typescript_definitions_1.Keyboard.M, ["m", "M"]],
        [isaac_typescript_definitions_1.Keyboard.N, ["n", "N"]],
        [isaac_typescript_definitions_1.Keyboard.O, ["o", "O"]],
        [isaac_typescript_definitions_1.Keyboard.P, ["p", "P"]],
        [isaac_typescript_definitions_1.Keyboard.Q, ["q", "Q"]],
        [isaac_typescript_definitions_1.Keyboard.R, ["r", "R"]],
        [isaac_typescript_definitions_1.Keyboard.S, ["s", "S"]],
        [isaac_typescript_definitions_1.Keyboard.T, ["t", "T"]],
        [isaac_typescript_definitions_1.Keyboard.U, ["u", "U"]],
        [isaac_typescript_definitions_1.Keyboard.V, ["v", "V"]],
        [isaac_typescript_definitions_1.Keyboard.W, ["w", "W"]],
        [isaac_typescript_definitions_1.Keyboard.X, ["x", "X"]],
        [isaac_typescript_definitions_1.Keyboard.Y, ["y", "Y"]],
        [isaac_typescript_definitions_1.Keyboard.Z, ["z", "Z"]],
        [isaac_typescript_definitions_1.Keyboard.KP_0, ["0", "0"]],
        [isaac_typescript_definitions_1.Keyboard.KP_1, ["1", "1"]],
        [isaac_typescript_definitions_1.Keyboard.KP_2, ["2", "2"]],
        [isaac_typescript_definitions_1.Keyboard.KP_3, ["3", "3"]],
        [isaac_typescript_definitions_1.Keyboard.KP_4, ["4", "4"]],
        [isaac_typescript_definitions_1.Keyboard.KP_5, ["5", "5"]],
        [isaac_typescript_definitions_1.Keyboard.KP_6, ["6", "6"]],
        [isaac_typescript_definitions_1.Keyboard.KP_7, ["7", "7"]],
        [isaac_typescript_definitions_1.Keyboard.KP_8, ["8", "8"]],
        [isaac_typescript_definitions_1.Keyboard.KP_9, ["9", "9"]],
        [isaac_typescript_definitions_1.Keyboard.KP_DECIMAL, [".", "."]],
        [isaac_typescript_definitions_1.Keyboard.KP_DIVIDE, ["/", "/"]],
        [isaac_typescript_definitions_1.Keyboard.KP_MULTIPLY, ["*", "*"]],
        [isaac_typescript_definitions_1.Keyboard.KP_SUBTRACT, ["-", "-"]],
        [isaac_typescript_definitions_1.Keyboard.KP_ADD, ["+", "+"]],
        [isaac_typescript_definitions_1.Keyboard.LEFT_BRACKET, ["[", "{"]],
        [isaac_typescript_definitions_1.Keyboard.BACKSLASH, ["\\", "|"]],
        [isaac_typescript_definitions_1.Keyboard.RIGHT_BRACKET, ["]", "}"]],
        [isaac_typescript_definitions_1.Keyboard.GRAVE_ACCENT, ["`", "~"]]
        // 96
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/input.js
  var require_input = __commonJS({
    "node_modules/isaacscript-common/dist/functions/input.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.keyboardToString = exports2.isShootActionTriggeredOnAnyInput = exports2.isShootActionTriggered = exports2.isShootActionPressedOnAnyInput = exports2.isShootActionPressed = exports2.isShootAction = exports2.isMoveActionTriggeredOnAnyInput = exports2.isMoveActionTriggered = exports2.isMoveActionPressedOnAnyInput = exports2.isMoveActionPressed = exports2.isMoveAction = exports2.isModifierKeyPressed = exports2.isKeyboardPressed = exports2.isActionTriggeredOnAnyInput = exports2.isActionTriggered = exports2.isActionPressedOnAnyInput = exports2.isActionPressed = exports2.getShootButtonActions = exports2.getMoveButtonActions = exports2.controllerToString = exports2.SHOOTING_BUTTON_ACTIONS_SET = exports2.SHOOTING_BUTTON_ACTIONS = exports2.MOVEMENT_BUTTON_ACTIONS_SET = exports2.MOVEMENT_BUTTON_ACTIONS = exports2.MODIFIER_KEYS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var keyboardToStringMap_1 = require_keyboardToStringMap();
      var ReadonlySet_1 = require_ReadonlySet();
      var string_1 = require_string();
      exports2.MODIFIER_KEYS = [
        isaac_typescript_definitions_1.Keyboard.LEFT_SHIFT,
        isaac_typescript_definitions_1.Keyboard.LEFT_CONTROL,
        isaac_typescript_definitions_1.Keyboard.LEFT_ALT,
        isaac_typescript_definitions_1.Keyboard.LEFT_SUPER,
        isaac_typescript_definitions_1.Keyboard.RIGHT_SHIFT,
        isaac_typescript_definitions_1.Keyboard.RIGHT_CONTROL,
        isaac_typescript_definitions_1.Keyboard.RIGHT_ALT,
        isaac_typescript_definitions_1.Keyboard.RIGHT_SUPER
        // 347
      ];
      exports2.MOVEMENT_BUTTON_ACTIONS = [
        isaac_typescript_definitions_1.ButtonAction.LEFT,
        isaac_typescript_definitions_1.ButtonAction.RIGHT,
        isaac_typescript_definitions_1.ButtonAction.UP,
        isaac_typescript_definitions_1.ButtonAction.DOWN
        // 3
      ];
      exports2.MOVEMENT_BUTTON_ACTIONS_SET = new ReadonlySet_1.ReadonlySet(exports2.MOVEMENT_BUTTON_ACTIONS);
      exports2.SHOOTING_BUTTON_ACTIONS = [
        isaac_typescript_definitions_1.ButtonAction.SHOOT_LEFT,
        isaac_typescript_definitions_1.ButtonAction.SHOOT_RIGHT,
        isaac_typescript_definitions_1.ButtonAction.SHOOT_UP,
        isaac_typescript_definitions_1.ButtonAction.SHOOT_DOWN
        // 7
      ];
      exports2.SHOOTING_BUTTON_ACTIONS_SET = new ReadonlySet_1.ReadonlySet(exports2.SHOOTING_BUTTON_ACTIONS);
      function controllerToString(controller) {
        const key = isaac_typescript_definitions_1.Controller[controller];
        if (key === void 0) {
          return void 0;
        }
        return (0, string_1.trimPrefix)(key, "BUTTON_");
      }
      exports2.controllerToString = controllerToString;
      function getMoveButtonActions(controllerIndex) {
        return exports2.MOVEMENT_BUTTON_ACTIONS.filter((buttonAction) => Input.IsActionPressed(buttonAction, controllerIndex));
      }
      exports2.getMoveButtonActions = getMoveButtonActions;
      function getShootButtonActions(controllerIndex) {
        return exports2.SHOOTING_BUTTON_ACTIONS.filter((buttonAction) => Input.IsActionPressed(buttonAction, controllerIndex));
      }
      exports2.getShootButtonActions = getShootButtonActions;
      function isActionPressed(controllerIndex, ...buttonActions) {
        return buttonActions.some((buttonAction) => Input.IsActionPressed(buttonAction, controllerIndex));
      }
      exports2.isActionPressed = isActionPressed;
      function isActionPressedOnAnyInput(...buttonActions) {
        return cachedEnumValues_1.CONTROLLER_INDEX_VALUES.some((controllerIndex) => isActionPressed(controllerIndex, ...buttonActions));
      }
      exports2.isActionPressedOnAnyInput = isActionPressedOnAnyInput;
      function isActionTriggered(controllerIndex, ...buttonActions) {
        return buttonActions.some((buttonAction) => Input.IsActionTriggered(buttonAction, controllerIndex));
      }
      exports2.isActionTriggered = isActionTriggered;
      function isActionTriggeredOnAnyInput(...buttonActions) {
        return cachedEnumValues_1.CONTROLLER_INDEX_VALUES.some((controllerIndex) => isActionTriggered(controllerIndex, ...buttonActions));
      }
      exports2.isActionTriggeredOnAnyInput = isActionTriggeredOnAnyInput;
      function isKeyboardPressed(...keys) {
        return keys.some((key) => Input.IsButtonPressed(key, isaac_typescript_definitions_1.ControllerIndex.KEYBOARD));
      }
      exports2.isKeyboardPressed = isKeyboardPressed;
      function isModifierKeyPressed() {
        return isKeyboardPressed(...exports2.MODIFIER_KEYS);
      }
      exports2.isModifierKeyPressed = isModifierKeyPressed;
      function isMoveAction(buttonAction) {
        return exports2.MOVEMENT_BUTTON_ACTIONS_SET.has(buttonAction);
      }
      exports2.isMoveAction = isMoveAction;
      function isMoveActionPressed(controllerIndex) {
        return isActionPressed(controllerIndex, ...exports2.MOVEMENT_BUTTON_ACTIONS);
      }
      exports2.isMoveActionPressed = isMoveActionPressed;
      function isMoveActionPressedOnAnyInput() {
        return exports2.MOVEMENT_BUTTON_ACTIONS.some((moveAction) => isActionPressedOnAnyInput(moveAction));
      }
      exports2.isMoveActionPressedOnAnyInput = isMoveActionPressedOnAnyInput;
      function isMoveActionTriggered(controllerIndex) {
        return isActionTriggered(controllerIndex, ...exports2.MOVEMENT_BUTTON_ACTIONS);
      }
      exports2.isMoveActionTriggered = isMoveActionTriggered;
      function isMoveActionTriggeredOnAnyInput() {
        return exports2.MOVEMENT_BUTTON_ACTIONS.some((moveAction) => isActionTriggeredOnAnyInput(moveAction));
      }
      exports2.isMoveActionTriggeredOnAnyInput = isMoveActionTriggeredOnAnyInput;
      function isShootAction(buttonAction) {
        return exports2.SHOOTING_BUTTON_ACTIONS_SET.has(buttonAction);
      }
      exports2.isShootAction = isShootAction;
      function isShootActionPressed(controllerIndex) {
        return isActionPressed(controllerIndex, ...exports2.SHOOTING_BUTTON_ACTIONS);
      }
      exports2.isShootActionPressed = isShootActionPressed;
      function isShootActionPressedOnAnyInput() {
        return exports2.SHOOTING_BUTTON_ACTIONS.some((shootAction) => isActionPressedOnAnyInput(shootAction));
      }
      exports2.isShootActionPressedOnAnyInput = isShootActionPressedOnAnyInput;
      function isShootActionTriggered(controllerIndex) {
        return isActionTriggered(controllerIndex, ...exports2.SHOOTING_BUTTON_ACTIONS);
      }
      exports2.isShootActionTriggered = isShootActionTriggered;
      function isShootActionTriggeredOnAnyInput() {
        return exports2.SHOOTING_BUTTON_ACTIONS.some((shootAction) => isActionTriggeredOnAnyInput(shootAction));
      }
      exports2.isShootActionTriggeredOnAnyInput = isShootActionTriggeredOnAnyInput;
      function keyboardToString(keyboard, uppercase) {
        const tuple = keyboardToStringMap_1.KEYBOARD_TO_STRING_MAP.get(keyboard);
        if (tuple === void 0) {
          return void 0;
        }
        const [lowercaseCharacter, uppercaseCharacter] = tuple;
        return uppercase ? uppercaseCharacter : lowercaseCharacter;
      }
      exports2.keyboardToString = keyboardToString;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostKeyboardChanged.js
  var require_PostKeyboardChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostKeyboardChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostKeyboardChanged = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var input_1 = require_input();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          pressedKeys: /* @__PURE__ */ new Set()
        }
      };
      var PostKeyboardChanged = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [keyboard, pressed] = fireArgs;
          const [callbackKeyboard, callbackPressed] = optionalArgs;
          return (callbackKeyboard === void 0 || callbackKeyboard === keyboard) && (callbackPressed === void 0 || callbackPressed === pressed);
        };
        postRender = () => {
          for (const keyboard of v.run.pressedKeys) {
            if (!(0, input_1.isKeyboardPressed)(keyboard)) {
              v.run.pressedKeys.delete(keyboard);
              this.fire(keyboard, false);
            }
          }
          for (const keyboard of cachedEnumValues_1.KEYBOARD_VALUES) {
            if (v.run.pressedKeys.has(keyboard)) {
              continue;
            }
            if ((0, input_1.isKeyboardPressed)(keyboard)) {
              v.run.pressedKeys.add(keyboard);
              this.fire(keyboard, true);
            }
          }
        };
      };
      exports2.PostKeyboardChanged = PostKeyboardChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeInitFilter.js
  var require_PostKnifeInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostKnifeInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostKnifeInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 50
            [isaac_typescript_definitions_1.ModCallback.POST_KNIFE_INIT, this.postKnifeInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireKnife;
        // ModCallback.POST_KNIFE_INIT (50)
        postKnifeInit = (knife) => {
          this.fire(knife);
        };
      };
      exports2.PostKnifeInitFilter = PostKnifeInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeInitLate.js
  var require_PostKnifeInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostKnifeInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostKnifeInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 51
            [isaac_typescript_definitions_1.ModCallback.POST_KNIFE_UPDATE, this.postKnifeUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireKnife;
        // ModCallback.POST_KNIFE_UPDATE (51)
        postKnifeUpdate = (knife) => {
          const ptrHash = GetPtrHash(knife);
          if (!v.room.firedSet.has(ptrHash)) {
            v.room.firedSet.add(ptrHash);
            this.fire(knife);
          }
        };
      };
      exports2.PostKnifeInitLate = PostKnifeInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeRenderFilter.js
  var require_PostKnifeRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostKnifeRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostKnifeRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 52
            [isaac_typescript_definitions_1.ModCallback.POST_KNIFE_RENDER, this.postKnifeRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireKnife;
        // ModCallback.POST_KNIFE_RENDER (52)
        postKnifeRender = (knife, renderOffset) => {
          this.fire(knife, renderOffset);
        };
      };
      exports2.PostKnifeRenderFilter = PostKnifeRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeUpdateFilter.js
  var require_PostKnifeUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostKnifeUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostKnifeUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostKnifeUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 51
            [isaac_typescript_definitions_1.ModCallback.POST_KNIFE_UPDATE, this.postKnifeUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireKnife;
        // ModCallback.POST_KNIFE_UPDATE (51)
        postKnifeUpdate = (knife) => {
          this.fire(knife);
        };
      };
      exports2.PostKnifeUpdateFilter = PostKnifeUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostLaserInitFilter.js
  var require_PostLaserInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostLaserInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostLaserInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostLaserInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 47
            [isaac_typescript_definitions_1.ModCallback.POST_LASER_INIT, this.postLaserInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireLaser;
        // ModCallback.POST_LASER_INIT (47)
        postLaserInit = (laser) => {
          this.fire(laser);
        };
      };
      exports2.PostLaserInitFilter = PostLaserInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostLaserInitLate.js
  var require_PostLaserInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostLaserInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostLaserInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostLaserInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 48
            [isaac_typescript_definitions_1.ModCallback.POST_LASER_UPDATE, this.postLaserUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireLaser;
        // ModCallback.POST_LASER_UPDATE (48)
        postLaserUpdate = (laser) => {
          const index = GetPtrHash(laser);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            this.fire(laser);
          }
        };
      };
      exports2.PostLaserInitLate = PostLaserInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostLaserRenderFilter.js
  var require_PostLaserRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostLaserRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostLaserRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostLaserRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 49
            [isaac_typescript_definitions_1.ModCallback.POST_LASER_RENDER, this.postLaserRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireLaser;
        // ModCallback.POST_LASER_RENDER (49)
        postLaserRender = (laser, renderOffset) => {
          this.fire(laser, renderOffset);
        };
      };
      exports2.PostLaserRenderFilter = PostLaserRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostLaserUpdateFilter.js
  var require_PostLaserUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostLaserUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostLaserUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostLaserUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 48
            [isaac_typescript_definitions_1.ModCallback.POST_LASER_UPDATE, this.postLaserUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireLaser;
        // ModCallback.POST_LASER_UPDATE (48)
        postLaserUpdate = (laser) => {
          this.fire(laser);
        };
      };
      exports2.PostLaserUpdateFilter = PostLaserUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNPCDeathFilter.js
  var require_PostNPCDeathFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNPCDeathFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNPCDeathFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNPCDeathFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 29
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_DEATH, this.postNPCDeath]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.POST_NPC_DEATH (29)
        postNPCDeath = (npc) => {
          this.fire(npc);
        };
      };
      exports2.PostNPCDeathFilter = PostNPCDeathFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNPCInitFilter.js
  var require_PostNPCInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNPCInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNPCInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNPCInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 27
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_INIT, this.postNPCInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.POST_NPC_INIT (27)
        postNPCInit = (npc) => {
          this.fire(npc);
        };
      };
      exports2.PostNPCInitFilter = PostNPCInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNPCInitLate.js
  var require_PostNPCInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNPCInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNPCInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostNPCInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 0
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_UPDATE, this.postNPCUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.POST_NPC_UPDATE (0)
        postNPCUpdate = (npc) => {
          const index = GetPtrHash(npc);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            this.fire(npc);
          }
        };
      };
      exports2.PostNPCInitLate = PostNPCInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNPCRenderFilter.js
  var require_PostNPCRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNPCRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNPCRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNPCRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 28
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_RENDER, this.postNPCRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.POST_NPC_RENDER (28)
        postNPCRender = (npc, renderOffset) => {
          this.fire(npc, renderOffset);
        };
      };
      exports2.PostNPCRenderFilter = PostNPCRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNPCStateChanged.js
  var require_PostNPCStateChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNPCStateChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNPCStateChanged = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          stateMap: new DefaultMap_1.DefaultMap((state) => state)
        }
      };
      var PostNPCStateChanged = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 0
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_UPDATE, this.postNPCUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.POST_NPC_UPDATE (0)
        postNPCUpdate = (npc) => {
          const ptrHash = GetPtrHash(npc);
          const previousState = v.run.stateMap.getAndSetDefault(ptrHash, npc.State);
          const currentState = npc.State;
          v.run.stateMap.set(ptrHash, currentState);
          if (previousState !== currentState) {
            this.fire(npc, previousState, currentState);
          }
        };
      };
      exports2.PostNPCStateChanged = PostNPCStateChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNPCUpdateFilter.js
  var require_PostNPCUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNPCUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNPCUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNPCUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 0
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_UPDATE, this.postNPCUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.POST_NPC_INIT (0)
        postNPCUpdate = (npc) => {
          this.fire(npc);
        };
      };
      exports2.PostNPCUpdateFilter = PostNPCUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNewLevelReordered.js
  var require_PostNewLevelReordered = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNewLevelReordered.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNewLevelReordered = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNewLevelReordered = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GAME_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFireLevel;
      };
      exports2.PostNewLevelReordered = PostNewLevelReordered;
    }
  });

  // node_modules/isaacscript-common/dist/maps/gridEntityTypeToBrokenStateMap.js
  var require_gridEntityTypeToBrokenStateMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/gridEntityTypeToBrokenStateMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP = new ReadonlyMap_1.ReadonlyMap([
        // 2
        [isaac_typescript_definitions_1.GridEntityType.ROCK, isaac_typescript_definitions_1.RockState.BROKEN],
        // 4
        [isaac_typescript_definitions_1.GridEntityType.ROCK_TINTED, isaac_typescript_definitions_1.RockState.BROKEN],
        // 5
        [isaac_typescript_definitions_1.GridEntityType.ROCK_BOMB, isaac_typescript_definitions_1.RockState.BROKEN],
        // 6
        [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT, isaac_typescript_definitions_1.RockState.BROKEN],
        // 10
        [isaac_typescript_definitions_1.GridEntityType.SPIDER_WEB, isaac_typescript_definitions_1.SpiderWebState.BROKEN],
        // 11
        [isaac_typescript_definitions_1.GridEntityType.LOCK, isaac_typescript_definitions_1.LockState.UNLOCKED],
        // 12
        [isaac_typescript_definitions_1.GridEntityType.TNT, isaac_typescript_definitions_1.TNTState.EXPLODED],
        // 14
        [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopState.COMPLETELY_DESTROYED],
        // 22
        [isaac_typescript_definitions_1.GridEntityType.ROCK_SUPER_SPECIAL, isaac_typescript_definitions_1.RockState.BROKEN],
        // 25
        [isaac_typescript_definitions_1.GridEntityType.ROCK_SPIKED, isaac_typescript_definitions_1.RockState.BROKEN],
        // 26
        [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT_2, isaac_typescript_definitions_1.RockState.BROKEN],
        // 27
        [isaac_typescript_definitions_1.GridEntityType.ROCK_GOLD, isaac_typescript_definitions_1.RockState.BROKEN]
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/gridEntityXMLMap.js
  var require_gridEntityXMLMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/gridEntityXMLMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GRID_ENTITY_XML_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.GRID_ENTITY_XML_MAP = new ReadonlyMap_1.ReadonlyMap([
        // 0
        [isaac_typescript_definitions_1.GridEntityXMLType.DECORATION, [isaac_typescript_definitions_1.GridEntityType.DECORATION, 0]],
        // 1000
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK, [isaac_typescript_definitions_1.GridEntityType.ROCK, isaac_typescript_definitions_1.RockVariant.NORMAL]],
        // 1001
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK_BOMB, [isaac_typescript_definitions_1.GridEntityType.ROCK_BOMB, 0]],
        // 1002
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK_ALT, [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT, 0]],
        // 1003
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK_TINTED, [isaac_typescript_definitions_1.GridEntityType.ROCK_TINTED, 0]],
        // 1008
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK_ALT_2, [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT_2, 0]],
        // 1009
        [
          isaac_typescript_definitions_1.GridEntityXMLType.ROCK_EVENT,
          [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT_2, isaac_typescript_definitions_1.RockVariant.EVENT]
        ],
        // 1010
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK_SPIKED, [isaac_typescript_definitions_1.GridEntityType.ROCK_SPIKED, 0]],
        // 1011
        [isaac_typescript_definitions_1.GridEntityXMLType.ROCK_GOLD, [isaac_typescript_definitions_1.GridEntityType.ROCK_GOLD, 0]],
        // 1300
        [isaac_typescript_definitions_1.GridEntityXMLType.TNT, [isaac_typescript_definitions_1.GridEntityType.TNT, 0]],
        // GridEntityXMLType.FIREPLACE (1400) and GridEntityXMLType.RED_FIREPLACE (1410) are intentionally
        // not mapped; the game converts these to EntityType.FIREPLACE (33). Manually spawning the grid
        // version of the fireplace will result in a bugged entity.
        // 1490
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_RED,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.RED]
        ],
        // 1494
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_RAINBOW,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.RAINBOW]
        ],
        // 1495
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_CORNY,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.CORNY]
        ],
        // 1496
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_GOLDEN,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.GOLDEN]
        ],
        // 1497
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_BLACK,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.BLACK]
        ],
        // 1498
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_WHITE,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.WHITE]
        ],
        // GridEntityXMLType.POOP_GIGA (1499) is intentionally not mapped; the game converts this to four
        // different grid entities that are all next to each other:
        // - PoopVariant.GIGA_TOP_LEFT (7)
        // - PoopVariant.GIGA_TOP_RIGHT (8)
        // - PoopVariant.GIGA_BOTTOM_LEFT (9)
        // - PoopVariant.GIGA_BOTTOM_RIGHT (10)
        // 1500
        [isaac_typescript_definitions_1.GridEntityXMLType.POOP, [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.NORMAL]],
        // 1501
        [
          isaac_typescript_definitions_1.GridEntityXMLType.POOP_CHARMING,
          [isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.CHARMING]
        ],
        // 1900
        [isaac_typescript_definitions_1.GridEntityXMLType.BLOCK, [isaac_typescript_definitions_1.GridEntityType.BLOCK, 0]],
        // 1901
        [isaac_typescript_definitions_1.GridEntityXMLType.PILLAR, [isaac_typescript_definitions_1.GridEntityType.PILLAR, 0]],
        // 1930
        [isaac_typescript_definitions_1.GridEntityXMLType.SPIKES, [isaac_typescript_definitions_1.GridEntityType.SPIKES, 0]],
        // 1931
        [isaac_typescript_definitions_1.GridEntityXMLType.SPIKES_ON_OFF, [isaac_typescript_definitions_1.GridEntityType.SPIKES_ON_OFF, 0]],
        // 1940
        [isaac_typescript_definitions_1.GridEntityXMLType.SPIDER_WEB, [isaac_typescript_definitions_1.GridEntityType.SPIDER_WEB, 0]],
        // 1999
        [isaac_typescript_definitions_1.GridEntityXMLType.WALL, [isaac_typescript_definitions_1.GridEntityType.WALL, 0]],
        // 3000
        [isaac_typescript_definitions_1.GridEntityXMLType.PIT, [isaac_typescript_definitions_1.GridEntityType.PIT, isaac_typescript_definitions_1.PitVariant.NORMAL]],
        // 3001
        [
          isaac_typescript_definitions_1.GridEntityXMLType.FISSURE_SPAWNER,
          [isaac_typescript_definitions_1.GridEntityType.PIT, isaac_typescript_definitions_1.PitVariant.FISSURE_SPAWNER]
        ],
        // 3009 - `GridEntityXMLType.PIT_EVENT` spawns as a normal pit with VarData equal to 1. VarData
        // must be manually handled by any code that uses this mapping.)
        [isaac_typescript_definitions_1.GridEntityXMLType.PIT_EVENT, [isaac_typescript_definitions_1.GridEntityType.PIT, isaac_typescript_definitions_1.PitVariant.NORMAL]],
        // 4000
        [isaac_typescript_definitions_1.GridEntityXMLType.LOCK, [isaac_typescript_definitions_1.GridEntityType.LOCK, 0]],
        // 4500
        [
          isaac_typescript_definitions_1.GridEntityXMLType.PRESSURE_PLATE,
          [isaac_typescript_definitions_1.GridEntityType.PRESSURE_PLATE, isaac_typescript_definitions_1.PressurePlateVariant.PRESSURE_PLATE]
        ],
        // 5000
        [
          isaac_typescript_definitions_1.GridEntityXMLType.STATUE_DEVIL,
          [isaac_typescript_definitions_1.GridEntityType.STATUE, isaac_typescript_definitions_1.StatueVariant.DEVIL]
        ],
        // 5001
        [
          isaac_typescript_definitions_1.GridEntityXMLType.STATUE_ANGEL,
          [isaac_typescript_definitions_1.GridEntityType.STATUE, isaac_typescript_definitions_1.StatueVariant.ANGEL]
        ],
        // 6100
        [isaac_typescript_definitions_1.GridEntityXMLType.TELEPORTER, [isaac_typescript_definitions_1.GridEntityType.TELEPORTER, 0]],
        // 9000
        [
          isaac_typescript_definitions_1.GridEntityXMLType.TRAPDOOR,
          [isaac_typescript_definitions_1.GridEntityType.TRAPDOOR, isaac_typescript_definitions_1.TrapdoorVariant.NORMAL]
        ],
        // 9100
        [
          isaac_typescript_definitions_1.GridEntityXMLType.CRAWL_SPACE,
          [isaac_typescript_definitions_1.GridEntityType.CRAWL_SPACE, isaac_typescript_definitions_1.CrawlSpaceVariant.NORMAL]
        ],
        // 10000
        [isaac_typescript_definitions_1.GridEntityXMLType.GRAVITY, [isaac_typescript_definitions_1.GridEntityType.GRAVITY, 0]]
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/roomShapeToTopLeftWallGridIndexMap.js
  var require_roomShapeToTopLeftWallGridIndexMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/roomShapeToTopLeftWallGridIndexMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP = exports2.DEFAULT_TOP_LEFT_WALL_GRID_INDEX = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.DEFAULT_TOP_LEFT_WALL_GRID_INDEX = 0;
      exports2.ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.RoomShape.IH, 30],
        [isaac_typescript_definitions_1.RoomShape.IV, 4],
        [isaac_typescript_definitions_1.RoomShape.IIV, 4],
        [isaac_typescript_definitions_1.RoomShape.IIH, 56],
        [isaac_typescript_definitions_1.RoomShape.LTL, 13]
        // 9
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/objects/gridEntityTypeToANM2Name.js
  var require_gridEntityTypeToANM2Name = __commonJS({
    "node_modules/isaacscript-common/dist/objects/gridEntityTypeToANM2Name.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GRID_ENTITY_TYPE_TO_ANM2_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.GRID_ENTITY_TYPE_TO_ANM2_NAME = {
        [isaac_typescript_definitions_1.GridEntityType.NULL]: void 0,
        // There are more decoration ANM2 files; see the `getGridEntityANM2Path` function.
        [isaac_typescript_definitions_1.GridEntityType.DECORATION]: "Props_01_Basement.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.BLOCK]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK_TINTED]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK_BOMB]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.PIT]: "grid_pit.anm2",
        [isaac_typescript_definitions_1.GridEntityType.SPIKES]: "grid_spikes.anm2",
        [isaac_typescript_definitions_1.GridEntityType.SPIKES_ON_OFF]: "grid_spikes.anm2",
        [isaac_typescript_definitions_1.GridEntityType.SPIDER_WEB]: "grid_web.anm2",
        [isaac_typescript_definitions_1.GridEntityType.LOCK]: "grid_locks.anm2",
        [isaac_typescript_definitions_1.GridEntityType.TNT]: "grid_tnt.anm2",
        [isaac_typescript_definitions_1.GridEntityType.FIREPLACE]: "grid_fireplace.anm2",
        [isaac_typescript_definitions_1.GridEntityType.POOP]: "grid_poop.anm2",
        [isaac_typescript_definitions_1.GridEntityType.WALL]: void 0,
        [isaac_typescript_definitions_1.GridEntityType.DOOR]: void 0,
        [isaac_typescript_definitions_1.GridEntityType.TRAPDOOR]: "Door_11_TrapDoor.anm2",
        [isaac_typescript_definitions_1.GridEntityType.CRAWL_SPACE]: "door_20_secrettrapdoor.anm2",
        [isaac_typescript_definitions_1.GridEntityType.GRAVITY]: void 0,
        [isaac_typescript_definitions_1.GridEntityType.PRESSURE_PLATE]: "grid_pressureplate.anm2",
        [isaac_typescript_definitions_1.GridEntityType.STATUE]: void 0,
        [isaac_typescript_definitions_1.GridEntityType.ROCK_SUPER_SPECIAL]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.TELEPORTER]: "grid_teleporter.anm2",
        [isaac_typescript_definitions_1.GridEntityType.PILLAR]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK_SPIKED]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT_2]: "grid_rock.anm2",
        [isaac_typescript_definitions_1.GridEntityType.ROCK_GOLD]: "grid_rock.anm2"
        // 27
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/poopGridEntityXMLTypesSet.js
  var require_poopGridEntityXMLTypesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/poopGridEntityXMLTypesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.POOP_GRID_ENTITY_XML_TYPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.POOP_GRID_ENTITY_XML_TYPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_RED,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_RAINBOW,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_CORNY,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_GOLDEN,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_BLACK,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_WHITE,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_GIGA,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP,
        isaac_typescript_definitions_1.GridEntityXMLType.POOP_CHARMING
        // 1501
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/entitiesSpecific.js
  var require_entitiesSpecific = __commonJS({
    "node_modules/isaacscript-common/dist/functions/entitiesSpecific.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnTearWithSeed = exports2.spawnTear = exports2.spawnSlotWithSeed = exports2.spawnSlot = exports2.spawnProjectileWithSeed = exports2.spawnProjectile = exports2.spawnPickupWithSeed = exports2.spawnPickup = exports2.spawnNPCWithSeed = exports2.spawnNPC = exports2.spawnLaserWithSeed = exports2.spawnLaser = exports2.spawnKnifeWithSeed = exports2.spawnKnife = exports2.spawnFamiliarWithSeed = exports2.spawnFamiliar = exports2.spawnEffectWithSeed = exports2.spawnEffect = exports2.spawnBombWithSeed = exports2.spawnBomb = exports2.removeAllTears = exports2.removeAllSlots = exports2.removeAllProjectiles = exports2.removeAllPickups = exports2.removeAllNPCs = exports2.removeAllLasers = exports2.removeAllKnives = exports2.removeAllFamiliars = exports2.removeAllEffects = exports2.removeAllBombs = exports2.getTears = exports2.getSlots = exports2.getProjectiles = exports2.getPickups = exports2.getNPCs = exports2.getLasers = exports2.getKnives = exports2.getFamiliars = exports2.getEffects = exports2.getBombs = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var entities_1 = require_entities();
      var utils_1 = require_utils();
      function getBombs(bombVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.BOMB, bombVariant, subType);
        const bombs = [];
        for (const entity of entities) {
          const bomb = entity.ToBomb();
          if (bomb !== void 0) {
            bombs.push(bomb);
          }
        }
        return bombs;
      }
      exports2.getBombs = getBombs;
      function getEffects(effectVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.EFFECT, effectVariant, subType);
        const effects = [];
        for (const entity of entities) {
          const effect = entity.ToEffect();
          if (effect !== void 0) {
            effects.push(effect);
          }
        }
        return effects;
      }
      exports2.getEffects = getEffects;
      function getFamiliars(familiarVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.FAMILIAR, familiarVariant, subType);
        const familiars = [];
        for (const entity of entities) {
          const familiar = entity.ToFamiliar();
          if (familiar !== void 0) {
            familiars.push(familiar);
          }
        }
        return familiars;
      }
      exports2.getFamiliars = getFamiliars;
      function getKnives(knifeVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.KNIFE, knifeVariant, subType);
        const knives = [];
        for (const entity of entities) {
          const knife = entity.ToKnife();
          if (knife !== void 0) {
            knives.push(knife);
          }
        }
        return knives;
      }
      exports2.getKnives = getKnives;
      function getLasers(laserVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.LASER, laserVariant, subType);
        const lasers = [];
        for (const entity of entities) {
          const laser = entity.ToLaser();
          if (laser !== void 0) {
            lasers.push(laser);
          }
        }
        return lasers;
      }
      exports2.getLasers = getLasers;
      function getNPCs(entityType = -1, variant = -1, subType = -1, ignoreFriendly = false) {
        const entities = (0, entities_1.getEntities)(entityType, variant, subType, ignoreFriendly);
        const npcs = [];
        for (const entity of entities) {
          const npc = entity.ToNPC();
          if (npc !== void 0) {
            npcs.push(npc);
          }
        }
        return npcs;
      }
      exports2.getNPCs = getNPCs;
      function getPickups(pickupVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.PICKUP, pickupVariant, subType);
        const pickups = [];
        for (const entity of entities) {
          const pickup = entity.ToPickup();
          if (pickup !== void 0) {
            pickups.push(pickup);
          }
        }
        return pickups;
      }
      exports2.getPickups = getPickups;
      function getProjectiles(projectileVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.PROJECTILE, projectileVariant, subType);
        const projectiles = [];
        for (const entity of entities) {
          const projectile = entity.ToProjectile();
          if (projectile !== void 0) {
            projectiles.push(projectile);
          }
        }
        return projectiles;
      }
      exports2.getProjectiles = getProjectiles;
      function getSlots(slotVariant = -1, subType = -1) {
        const slots = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.SLOT, slotVariant, subType);
        return slots;
      }
      exports2.getSlots = getSlots;
      function getTears(tearVariant = -1, subType = -1) {
        const entities = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.TEAR, tearVariant, subType);
        const tears = [];
        for (const entity of entities) {
          const tear = entity.ToTear();
          if (tear !== void 0) {
            tears.push(tear);
          }
        }
        return tears;
      }
      exports2.getTears = getTears;
      function removeAllBombs(bombVariant = -1, subType = -1, cap) {
        const bombs = getBombs(bombVariant, subType);
        return (0, entities_1.removeEntities)(bombs, cap);
      }
      exports2.removeAllBombs = removeAllBombs;
      function removeAllEffects(effectVariant = -1, subType = -1, cap) {
        const effects = getEffects(effectVariant, subType);
        return (0, entities_1.removeEntities)(effects, cap);
      }
      exports2.removeAllEffects = removeAllEffects;
      function removeAllFamiliars(familiarVariant = -1, subType = -1, cap) {
        const familiars = getFamiliars(familiarVariant, subType);
        return (0, entities_1.removeEntities)(familiars, cap);
      }
      exports2.removeAllFamiliars = removeAllFamiliars;
      function removeAllKnives(knifeVariant = -1, subType = -1, cap) {
        const knives = getKnives(knifeVariant, subType);
        return (0, entities_1.removeEntities)(knives, cap);
      }
      exports2.removeAllKnives = removeAllKnives;
      function removeAllLasers(laserVariant = -1, subType = -1, cap) {
        const lasers = getLasers(laserVariant, subType);
        return (0, entities_1.removeEntities)(lasers, cap);
      }
      exports2.removeAllLasers = removeAllLasers;
      function removeAllNPCs(entityType = -1, variant = -1, subType = -1, cap) {
        const npcs = getNPCs(entityType, variant, subType);
        return (0, entities_1.removeEntities)(npcs, cap);
      }
      exports2.removeAllNPCs = removeAllNPCs;
      function removeAllPickups(pickupVariant = -1, subType = -1, cap) {
        const pickups = getPickups(pickupVariant, subType);
        return (0, entities_1.removeEntities)(pickups, cap);
      }
      exports2.removeAllPickups = removeAllPickups;
      function removeAllProjectiles(projectileVariant = -1, subType = -1, cap) {
        const projectiles = getProjectiles(projectileVariant, subType);
        return (0, entities_1.removeEntities)(projectiles, cap);
      }
      exports2.removeAllProjectiles = removeAllProjectiles;
      function removeAllSlots(slotVariant = -1, subType = -1, cap) {
        const slots = getSlots(slotVariant, subType);
        return (0, entities_1.removeEntities)(slots, cap);
      }
      exports2.removeAllSlots = removeAllSlots;
      function removeAllTears(tearVariant = -1, subType = -1, cap) {
        const tears = getTears(tearVariant, subType);
        return (0, entities_1.removeEntities)(tears, cap);
      }
      exports2.removeAllTears = removeAllTears;
      function spawnBomb(bombVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.BOMB, bombVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const bomb = entity.ToBomb();
        (0, utils_1.assertDefined)(bomb, "Failed to spawn a bomb.");
        return bomb;
      }
      exports2.spawnBomb = spawnBomb;
      function spawnBombWithSeed(bombVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnBomb(bombVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnBombWithSeed = spawnBombWithSeed;
      function spawnEffect(effectVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.EFFECT, effectVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const effect = entity.ToEffect();
        (0, utils_1.assertDefined)(effect, "Failed to spawn an effect.");
        return effect;
      }
      exports2.spawnEffect = spawnEffect;
      function spawnEffectWithSeed(effectVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnEffect(effectVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnEffectWithSeed = spawnEffectWithSeed;
      function spawnFamiliar(familiarVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.FAMILIAR, familiarVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const familiar = entity.ToFamiliar();
        (0, utils_1.assertDefined)(familiar, "Failed to spawn a familiar.");
        return familiar;
      }
      exports2.spawnFamiliar = spawnFamiliar;
      function spawnFamiliarWithSeed(familiarVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnFamiliar(familiarVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnFamiliarWithSeed = spawnFamiliarWithSeed;
      function spawnKnife(knifeVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.KNIFE, knifeVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const knife = entity.ToKnife();
        (0, utils_1.assertDefined)(knife, "Failed to spawn a knife.");
        return knife;
      }
      exports2.spawnKnife = spawnKnife;
      function spawnKnifeWithSeed(knifeVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnKnife(knifeVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnKnifeWithSeed = spawnKnifeWithSeed;
      function spawnLaser(laserVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.LASER, laserVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const laser = entity.ToLaser();
        (0, utils_1.assertDefined)(laser, "Failed to spawn a laser.");
        return laser;
      }
      exports2.spawnLaser = spawnLaser;
      function spawnLaserWithSeed(laserVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnLaser(laserVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnLaserWithSeed = spawnLaserWithSeed;
      function spawnNPC(entityType, variant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const npc = entity.ToNPC();
        (0, utils_1.assertDefined)(npc, "Failed to spawn an NPC.");
        return npc;
      }
      exports2.spawnNPC = spawnNPC;
      function spawnNPCWithSeed(entityType, variant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnNPC(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnNPCWithSeed = spawnNPCWithSeed;
      function spawnPickup(pickupVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.PICKUP, pickupVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const pickup = entity.ToPickup();
        (0, utils_1.assertDefined)(pickup, "Failed to spawn a pickup.");
        return pickup;
      }
      exports2.spawnPickup = spawnPickup;
      function spawnPickupWithSeed(pickupVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnPickup(pickupVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnPickupWithSeed = spawnPickupWithSeed;
      function spawnProjectile(projectileVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.PROJECTILE, projectileVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const projectile = entity.ToProjectile();
        (0, utils_1.assertDefined)(projectile, "Failed to spawn a projectile.");
        return projectile;
      }
      exports2.spawnProjectile = spawnProjectile;
      function spawnProjectileWithSeed(projectileVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnProjectile(projectileVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnProjectileWithSeed = spawnProjectileWithSeed;
      function spawnSlot(slotVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.SLOT, slotVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnSlot = spawnSlot;
      function spawnSlotWithSeed(slotVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnSlot(slotVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnSlotWithSeed = spawnSlotWithSeed;
      function spawnTear(tearVariant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        const entity = (0, entities_1.spawn)(isaac_typescript_definitions_1.EntityType.TEAR, tearVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
        const tear = entity.ToTear();
        (0, utils_1.assertDefined)(tear, "Failed to spawn a tear.");
        return tear;
      }
      exports2.spawnTear = spawnTear;
      function spawnTearWithSeed(tearVariant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnTear(tearVariant, subType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnTearWithSeed = spawnTearWithSeed;
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomTypeNames.js
  var require_roomTypeNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomTypeNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_TYPE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.ROOM_TYPE_NAMES = {
        [isaac_typescript_definitions_1.RoomType.DEFAULT]: "Default Room",
        [isaac_typescript_definitions_1.RoomType.SHOP]: "Shop",
        [isaac_typescript_definitions_1.RoomType.ERROR]: "I AM ERROR Room",
        [isaac_typescript_definitions_1.RoomType.TREASURE]: "Treasure Room",
        [isaac_typescript_definitions_1.RoomType.BOSS]: "Boss Room",
        [isaac_typescript_definitions_1.RoomType.MINI_BOSS]: "Miniboss Room",
        [isaac_typescript_definitions_1.RoomType.SECRET]: "Secret Room",
        [isaac_typescript_definitions_1.RoomType.SUPER_SECRET]: "Super Secret Room",
        [isaac_typescript_definitions_1.RoomType.ARCADE]: "Arcade",
        [isaac_typescript_definitions_1.RoomType.CURSE]: "Curse Room",
        [isaac_typescript_definitions_1.RoomType.CHALLENGE]: "Challenge Room",
        [isaac_typescript_definitions_1.RoomType.LIBRARY]: "Library",
        [isaac_typescript_definitions_1.RoomType.SACRIFICE]: "Sacrifice Room",
        [isaac_typescript_definitions_1.RoomType.DEVIL]: "Devil Room",
        [isaac_typescript_definitions_1.RoomType.ANGEL]: "Angel Room",
        [isaac_typescript_definitions_1.RoomType.DUNGEON]: "Crawl Space",
        [isaac_typescript_definitions_1.RoomType.BOSS_RUSH]: "Boss Rush",
        [isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM]: "Clean Bedroom",
        [isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM]: "Dirty Bedroom",
        [isaac_typescript_definitions_1.RoomType.VAULT]: "Vault",
        [isaac_typescript_definitions_1.RoomType.DICE]: "Dice Room",
        [isaac_typescript_definitions_1.RoomType.BLACK_MARKET]: "Black Market",
        [isaac_typescript_definitions_1.RoomType.GREED_EXIT]: "Greed Exit Room",
        [isaac_typescript_definitions_1.RoomType.PLANETARIUM]: "Planetarium",
        [isaac_typescript_definitions_1.RoomType.TELEPORTER]: "Teleporter Room",
        [isaac_typescript_definitions_1.RoomType.TELEPORTER_EXIT]: "Teleporter Exit Room",
        [isaac_typescript_definitions_1.RoomType.SECRET_EXIT]: "Secret Exit",
        [isaac_typescript_definitions_1.RoomType.BLUE]: "Blue Room",
        [isaac_typescript_definitions_1.RoomType.ULTRA_SECRET]: "Ultra Secret Room"
        // 29
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/mineShaftRoomSubTypesSet.js
  var require_mineShaftRoomSubTypesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/mineShaftRoomSubTypesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.MINE_SHAFT_ROOM_SUB_TYPE_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.MINE_SHAFT_ROOM_SUB_TYPE_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.MinesRoomSubType.MINESHAFT_ENTRANCE,
        isaac_typescript_definitions_1.MinesRoomSubType.MINESHAFT_LOBBY,
        isaac_typescript_definitions_1.MinesRoomSubType.MINESHAFT_KNIFE_PIECE,
        isaac_typescript_definitions_1.MinesRoomSubType.MINESHAFT_ROOM_PRE_CHASE,
        isaac_typescript_definitions_1.MinesRoomSubType.MINESHAFT_ROOM_POST_CHASE
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/roomData.js
  var require_roomData = __commonJS({
    "node_modules/isaacscript-common/dist/functions/roomData.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setRoomData = exports2.getRoomVisitedCount = exports2.getRoomVariant = exports2.getRoomType = exports2.getRoomSubType = exports2.getRoomStageID = exports2.getRoomShape = exports2.getRoomName = exports2.getRoomListIndex = exports2.getRoomGridIndex = exports2.getRoomDescriptorReadOnly = exports2.getRoomDescriptor = exports2.getRoomData = exports2.getRoomAllowedDoors = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var doors_1 = require_doors();
      var flag_1 = require_flag();
      function getRoomAllowedDoors(roomGridIndex) {
        const allowedDoors = /* @__PURE__ */ new Set();
        const roomData = getRoomData(roomGridIndex);
        if (roomData === void 0) {
          return allowedDoors;
        }
        for (const doorSlotFlag of cachedEnumValues_1.DOOR_SLOT_FLAG_VALUES) {
          if ((0, flag_1.hasFlag)(roomData.Doors, doorSlotFlag)) {
            const doorSlot = (0, doors_1.doorSlotFlagToDoorSlot)(doorSlotFlag);
            allowedDoors.add(doorSlot);
          }
        }
        return allowedDoors;
      }
      exports2.getRoomAllowedDoors = getRoomAllowedDoors;
      function getRoomData(roomGridIndex) {
        const roomDescriptor = getRoomDescriptor(roomGridIndex);
        return roomDescriptor.Data;
      }
      exports2.getRoomData = getRoomData;
      function getRoomDescriptor(roomGridIndex) {
        const level = cachedClasses_1.game.GetLevel();
        if (roomGridIndex === void 0) {
          roomGridIndex = getRoomGridIndex();
        }
        return level.GetRoomByIdx(roomGridIndex);
      }
      exports2.getRoomDescriptor = getRoomDescriptor;
      function getRoomDescriptorReadOnly() {
        const level = cachedClasses_1.game.GetLevel();
        return level.GetCurrentRoomDesc();
      }
      exports2.getRoomDescriptorReadOnly = getRoomDescriptorReadOnly;
      function getRoomGridIndex() {
        const level = cachedClasses_1.game.GetLevel();
        const currentRoomIndex = level.GetCurrentRoomIndex();
        if (currentRoomIndex < 0) {
          return currentRoomIndex;
        }
        const roomDescriptor = getRoomDescriptorReadOnly();
        return roomDescriptor.SafeGridIndex;
      }
      exports2.getRoomGridIndex = getRoomGridIndex;
      function getRoomListIndex(roomGridIndex) {
        const roomDescriptor = getRoomDescriptor(roomGridIndex);
        return roomDescriptor.ListIndex;
      }
      exports2.getRoomListIndex = getRoomListIndex;
      function getRoomName(roomGridIndex) {
        const roomData = getRoomData(roomGridIndex);
        return roomData === void 0 ? void 0 : roomData.Name;
      }
      exports2.getRoomName = getRoomName;
      function getRoomShape(roomGridIndex) {
        const roomData = getRoomData(roomGridIndex);
        return roomData === void 0 ? void 0 : roomData.Shape;
      }
      exports2.getRoomShape = getRoomShape;
      function getRoomStageID(roomGridIndex) {
        const roomData = getRoomData(roomGridIndex);
        return roomData === void 0 ? void 0 : roomData.StageID;
      }
      exports2.getRoomStageID = getRoomStageID;
      function getRoomSubType(roomGridIndex) {
        const roomData = getRoomData(roomGridIndex);
        return roomData === void 0 ? void 0 : roomData.Subtype;
      }
      exports2.getRoomSubType = getRoomSubType;
      function getRoomType(roomGridIndex) {
        const roomData = getRoomData(roomGridIndex);
        return roomData === void 0 ? void 0 : roomData.Type;
      }
      exports2.getRoomType = getRoomType;
      function getRoomVariant(roomGridIndex) {
        const roomData = getRoomData(roomGridIndex);
        return roomData === void 0 ? -1 : roomData.Variant;
      }
      exports2.getRoomVariant = getRoomVariant;
      function getRoomVisitedCount(roomGridIndex) {
        const roomDescriptor = getRoomDescriptor(roomGridIndex);
        return roomDescriptor.VisitedCount;
      }
      exports2.getRoomVisitedCount = getRoomVisitedCount;
      function setRoomData(roomGridIndex, roomData) {
        const roomDescriptor = getRoomDescriptor(roomGridIndex);
        roomDescriptor.Data = roomData;
      }
      exports2.setRoomData = setRoomData;
    }
  });

  // node_modules/isaacscript-common/dist/functions/dimensions.js
  var require_dimensions = __commonJS({
    "node_modules/isaacscript-common/dist/functions/dimensions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.inDimension = exports2.getDimension = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var roomData_1 = require_roomData();
      function getDimension() {
        const level = cachedClasses_1.game.GetLevel();
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        const roomDescription = level.GetRoomByIdx(roomGridIndex, isaac_typescript_definitions_1.Dimension.CURRENT);
        const currentRoomHash = GetPtrHash(roomDescription);
        for (const dimension of constants_1.DIMENSIONS) {
          const dimensionRoomDescription = level.GetRoomByIdx(roomGridIndex, dimension);
          const dimensionRoomHash = GetPtrHash(dimensionRoomDescription);
          if (dimensionRoomHash === currentRoomHash) {
            return dimension;
          }
        }
        error("Failed to get the current dimension.");
      }
      exports2.getDimension = getDimension;
      function inDimension(dimension) {
        return dimension === getDimension();
      }
      exports2.inDimension = inDimension;
    }
  });

  // node_modules/isaacscript-common/dist/functions/positionVelocity.js
  var require_positionVelocity = __commonJS({
    "node_modules/isaacscript-common/dist/functions/positionVelocity.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setEntityVelocities = exports2.setEntityPositions = exports2.getEntityVelocities = exports2.getEntityPositions = exports2.findFreePosition = exports2.anyPlayerCloserThan = exports2.anyEntityCloserThan = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      var MAX_FIND_FREE_POSITION_ATTEMPTS = 100;
      function anyEntityCloserThan(entities, position, distance) {
        return entities.some((entity) => position.Distance(entity.Position) <= distance);
      }
      exports2.anyEntityCloserThan = anyEntityCloserThan;
      function anyPlayerCloserThan(position, distance) {
        const players = (0, playerIndex_1.getPlayers)();
        return players.some((player) => player.Position.Distance(position) <= distance);
      }
      exports2.anyPlayerCloserThan = anyPlayerCloserThan;
      function findFreePosition(startingPosition, avoidActiveEntities = false, minimumDistance) {
        const room = cachedClasses_1.game.GetRoom();
        const heavenDoors = (0, entitiesSpecific_1.getEffects)(isaac_typescript_definitions_1.EffectVariant.HEAVEN_LIGHT_DOOR, isaac_typescript_definitions_1.HeavenLightDoorSubType.HEAVEN_DOOR);
        for (let initialStep = 0; initialStep < MAX_FIND_FREE_POSITION_ATTEMPTS; initialStep++) {
          const position = room.FindFreePickupSpawnPosition(startingPosition, initialStep, avoidActiveEntities);
          const closePlayer = (0, players_1.getPlayerCloserThan)(position, constants_1.DISTANCE_OF_GRID_TILE);
          if (closePlayer !== void 0) {
            continue;
          }
          const isCloseHeavenDoor = anyEntityCloserThan(heavenDoors, position, constants_1.DISTANCE_OF_GRID_TILE);
          if (isCloseHeavenDoor) {
            continue;
          }
          if (minimumDistance !== void 0) {
            const distance = startingPosition.Distance(position);
            if (distance < minimumDistance) {
              continue;
            }
          }
          return position;
        }
        return room.FindFreePickupSpawnPosition(startingPosition);
      }
      exports2.findFreePosition = findFreePosition;
      function getEntityPositions(entities) {
        if (entities === void 0) {
          entities = (0, entities_1.getEntities)();
        }
        const entityPositions = /* @__PURE__ */ new Map();
        for (const entity of entities) {
          const ptrHash = GetPtrHash(entity);
          entityPositions.set(ptrHash, entity.Position);
        }
        return entityPositions;
      }
      exports2.getEntityPositions = getEntityPositions;
      function getEntityVelocities(entities) {
        if (entities === void 0) {
          entities = (0, entities_1.getEntities)();
        }
        const entityVelocities = /* @__PURE__ */ new Map();
        for (const entity of entities) {
          const ptrHash = GetPtrHash(entity);
          entityVelocities.set(ptrHash, entity.Velocity);
        }
        return entityVelocities;
      }
      exports2.getEntityVelocities = getEntityVelocities;
      function setEntityPositions(entityPositions, entities) {
        if (entities === void 0) {
          entities = (0, entities_1.getEntities)();
        }
        for (const entity of entities) {
          const ptrHash = GetPtrHash(entity);
          const entityPosition = entityPositions.get(ptrHash);
          if (entityPosition !== void 0) {
            entity.Position = entityPosition;
          }
        }
      }
      exports2.setEntityPositions = setEntityPositions;
      function setEntityVelocities(entityVelocities, entities) {
        if (entities === void 0) {
          entities = (0, entities_1.getEntities)();
        }
        for (const entity of entities) {
          const ptrHash = GetPtrHash(entity);
          const entityVelocity = entityVelocities.get(ptrHash);
          if (entityVelocity !== void 0) {
            entity.Velocity = entityVelocity;
          }
        }
      }
      exports2.setEntityVelocities = setEntityVelocities;
    }
  });

  // node_modules/isaacscript-common/dist/functions/roomTransition.js
  var require_roomTransition = __commonJS({
    "node_modules/isaacscript-common/dist/functions/roomTransition.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.teleport = exports2.reloadRoom = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var roomData_1 = require_roomData();
      var utils_1 = require_utils();
      function reloadRoom() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        teleport(roomGridIndex, isaac_typescript_definitions_1.Direction.NO_DIRECTION, isaac_typescript_definitions_1.RoomTransitionAnim.FADE);
      }
      exports2.reloadRoom = reloadRoom;
      function teleport(roomGridIndex, direction = isaac_typescript_definitions_1.Direction.NO_DIRECTION, roomTransitionAnim = isaac_typescript_definitions_1.RoomTransitionAnim.TELEPORT) {
        const level = cachedClasses_1.game.GetLevel();
        const roomData = (0, roomData_1.getRoomData)(roomGridIndex);
        (0, utils_1.assertDefined)(roomData, `Failed to change the room to grid index ${roomGridIndex} because that room does not exist.`);
        level.LeaveDoor = isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT;
        cachedClasses_1.game.StartRoomTransition(roomGridIndex, direction, roomTransitionAnim);
      }
      exports2.teleport = teleport;
    }
  });

  // node_modules/isaacscript-common/dist/objects/roomTypeSpecialGotoPrefixes.js
  var require_roomTypeSpecialGotoPrefixes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/roomTypeSpecialGotoPrefixes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_TYPE_SPECIAL_GOTO_PREFIXES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.ROOM_TYPE_SPECIAL_GOTO_PREFIXES = {
        [isaac_typescript_definitions_1.RoomType.DEFAULT]: "default",
        [isaac_typescript_definitions_1.RoomType.SHOP]: "shop",
        [isaac_typescript_definitions_1.RoomType.ERROR]: "error",
        [isaac_typescript_definitions_1.RoomType.TREASURE]: "treasure",
        [isaac_typescript_definitions_1.RoomType.BOSS]: "boss",
        [isaac_typescript_definitions_1.RoomType.MINI_BOSS]: "miniboss",
        [isaac_typescript_definitions_1.RoomType.SECRET]: "secret",
        [isaac_typescript_definitions_1.RoomType.SUPER_SECRET]: "supersecret",
        [isaac_typescript_definitions_1.RoomType.ARCADE]: "arcade",
        [isaac_typescript_definitions_1.RoomType.CURSE]: "curse",
        [isaac_typescript_definitions_1.RoomType.CHALLENGE]: "challenge",
        [isaac_typescript_definitions_1.RoomType.LIBRARY]: "library",
        [isaac_typescript_definitions_1.RoomType.SACRIFICE]: "sacrifice",
        [isaac_typescript_definitions_1.RoomType.DEVIL]: "devil",
        [isaac_typescript_definitions_1.RoomType.ANGEL]: "angel",
        [isaac_typescript_definitions_1.RoomType.DUNGEON]: "itemdungeon",
        [isaac_typescript_definitions_1.RoomType.BOSS_RUSH]: "bossrush",
        [isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM]: "isaacs",
        [isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM]: "barren",
        [isaac_typescript_definitions_1.RoomType.VAULT]: "chest",
        [isaac_typescript_definitions_1.RoomType.DICE]: "dice",
        [isaac_typescript_definitions_1.RoomType.BLACK_MARKET]: "blackmarket",
        [isaac_typescript_definitions_1.RoomType.GREED_EXIT]: "greedexit",
        [isaac_typescript_definitions_1.RoomType.PLANETARIUM]: "planetarium",
        [isaac_typescript_definitions_1.RoomType.TELEPORTER]: "teleporter",
        [isaac_typescript_definitions_1.RoomType.TELEPORTER_EXIT]: "teleporterexit",
        [isaac_typescript_definitions_1.RoomType.SECRET_EXIT]: "secretexit",
        [isaac_typescript_definitions_1.RoomType.BLUE]: "blue",
        [isaac_typescript_definitions_1.RoomType.ULTRA_SECRET]: "ultrasecret"
        // 29
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/stageIDNames.js
  var require_stageIDNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/stageIDNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.STAGE_ID_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.STAGE_ID_NAMES = {
        [isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS]: "Special Rooms",
        [isaac_typescript_definitions_1.StageID.BASEMENT]: "Basement",
        [isaac_typescript_definitions_1.StageID.CELLAR]: "Cellar",
        [isaac_typescript_definitions_1.StageID.BURNING_BASEMENT]: "Burning Basement",
        [isaac_typescript_definitions_1.StageID.CAVES]: "Caves",
        [isaac_typescript_definitions_1.StageID.CATACOMBS]: "Catacombs",
        [isaac_typescript_definitions_1.StageID.FLOODED_CAVES]: "Flooded Caves",
        [isaac_typescript_definitions_1.StageID.DEPTHS]: "Depths",
        [isaac_typescript_definitions_1.StageID.NECROPOLIS]: "Necropolis",
        [isaac_typescript_definitions_1.StageID.DANK_DEPTHS]: "Dank Depths",
        [isaac_typescript_definitions_1.StageID.WOMB]: "Womb",
        [isaac_typescript_definitions_1.StageID.UTERO]: "Utero",
        [isaac_typescript_definitions_1.StageID.SCARRED_WOMB]: "Scarred Womb",
        [isaac_typescript_definitions_1.StageID.BLUE_WOMB]: "Blue Womb",
        [isaac_typescript_definitions_1.StageID.SHEOL]: "Sheol",
        [isaac_typescript_definitions_1.StageID.CATHEDRAL]: "Cathedral",
        [isaac_typescript_definitions_1.StageID.DARK_ROOM]: "Dark Room",
        [isaac_typescript_definitions_1.StageID.CHEST]: "Chest",
        [isaac_typescript_definitions_1.StageID.SHOP]: "The Shop",
        [isaac_typescript_definitions_1.StageID.ULTRA_GREED]: "Ultra Greed",
        [isaac_typescript_definitions_1.StageID.VOID]: "The Void",
        [isaac_typescript_definitions_1.StageID.DOWNPOUR]: "Downpour",
        [isaac_typescript_definitions_1.StageID.DROSS]: "Dross",
        [isaac_typescript_definitions_1.StageID.MINES]: "Mines",
        [isaac_typescript_definitions_1.StageID.ASHPIT]: "Ashpit",
        [isaac_typescript_definitions_1.StageID.MAUSOLEUM]: "Mausoleum",
        [isaac_typescript_definitions_1.StageID.GEHENNA]: "Gehenna",
        [isaac_typescript_definitions_1.StageID.CORPSE]: "Corpse",
        [isaac_typescript_definitions_1.StageID.MORTIS]: "Mortis",
        [isaac_typescript_definitions_1.StageID.HOME]: "Home",
        [isaac_typescript_definitions_1.StageID.BACKWARDS]: "The Ascent"
        // 36
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/stageToStageID.js
  var require_stageToStageID = __commonJS({
    "node_modules/isaacscript-common/dist/objects/stageToStageID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.STAGE_TO_STAGE_ID_GREED_MODE = exports2.STAGE_TO_STAGE_ID = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var BASEMENT_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.BASEMENT,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.CELLAR,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.BURNING_BASEMENT,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.BASEMENT,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.DOWNPOUR,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.DROSS
        // 5
      };
      var CAVES_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.CAVES,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.CATACOMBS,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.FLOODED_CAVES,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.CAVES,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.MINES,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.ASHPIT
        // 5
      };
      var DEPTHS_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.DEPTHS,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.NECROPOLIS,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.DANK_DEPTHS,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.DEPTHS,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.MAUSOLEUM,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.GEHENNA
        // 5
      };
      var WOMB_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.WOMB,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.UTERO,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.SCARRED_WOMB,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.WOMB,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.CORPSE,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.MORTIS
        // 5
      };
      var BLUE_WOMB_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.BLUE_WOMB
        // 5
      };
      var SHEOL_CATHEDRAL_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.SHEOL,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.CATHEDRAL,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.SHEOL,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.SHEOL,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.SHEOL,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.SHEOL
        // 5
      };
      var DARK_ROOM_CHEST_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.CHEST,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.DARK_ROOM
        // 5
      };
      var VOID_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.VOID,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.VOID,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.VOID,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.VOID,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.VOID,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.VOID
        // 5
      };
      var HOME_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.HOME,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.HOME,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.HOME,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.HOME,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.HOME,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.HOME
        // 5
      };
      exports2.STAGE_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_1]: BASEMENT_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_2]: BASEMENT_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.CAVES_1]: CAVES_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.CAVES_2]: CAVES_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_1]: DEPTHS_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_2]: DEPTHS_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.WOMB_1]: WOMB_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.WOMB_2]: WOMB_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.BLUE_WOMB]: BLUE_WOMB_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL]: SHEOL_CATHEDRAL_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST]: DARK_ROOM_CHEST_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.VOID]: VOID_TO_STAGE_ID,
        [isaac_typescript_definitions_1.LevelStage.HOME]: HOME_TO_STAGE_ID
        // 13
      };
      var SHOP_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.SHOP,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.SHOP,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.SHOP,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.SHOP,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.SHOP,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.SHOP
        // 5
      };
      var ULTRA_GREED_TO_STAGE_ID = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.StageID.ULTRA_GREED,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.StageID.ULTRA_GREED,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.StageID.ULTRA_GREED,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.StageID.ULTRA_GREED,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.StageID.ULTRA_GREED,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.StageID.ULTRA_GREED
        // 5
      };
      exports2.STAGE_TO_STAGE_ID_GREED_MODE = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_GREED_MODE, BASEMENT_TO_STAGE_ID],
        [isaac_typescript_definitions_1.LevelStage.CAVES_GREED_MODE, CAVES_TO_STAGE_ID],
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_GREED_MODE, DEPTHS_TO_STAGE_ID],
        [isaac_typescript_definitions_1.LevelStage.WOMB_GREED_MODE, WOMB_TO_STAGE_ID],
        [isaac_typescript_definitions_1.LevelStage.SHEOL_GREED_MODE, SHEOL_CATHEDRAL_TO_STAGE_ID],
        [isaac_typescript_definitions_1.LevelStage.SHOP_GREED_MODE, SHOP_TO_STAGE_ID],
        [isaac_typescript_definitions_1.LevelStage.ULTRA_GREED_GREED_MODE, ULTRA_GREED_TO_STAGE_ID]
        // 7
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/objects/stageTypeSuffixes.js
  var require_stageTypeSuffixes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/stageTypeSuffixes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.STAGE_TYPE_SUFFIXES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.STAGE_TYPE_SUFFIXES = {
        // For example, to go to Basement 2, the command is simply "stage 2" without a letter suffix.
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: "",
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: "a",
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: "b",
        // There is no corresponding suffix for Greed Mode.
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: "",
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: "c",
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: "d"
        // 5
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/stage.js
  var require_stage = __commonJS({
    "node_modules/isaacscript-common/dist/functions/stage.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setStage = exports2.onStageWithStoryBoss = exports2.onStageWithShovelTrapdoors = exports2.onStageWithSecretExitToMines = exports2.onStageWithSecretExitToMausoleum = exports2.onStageWithSecretExitToDownpour = exports2.onStageWithRandomBossCollectible = exports2.onStageWithNaturalDevilRoom = exports2.onStageType = exports2.onStageOrLower = exports2.onStageOrHigher = exports2.onStage = exports2.onSheol = exports2.onRepentanceStage = exports2.onFirstFloor = exports2.onFinalFloor = exports2.onEffectiveStage = exports2.onDarkRoom = exports2.onChest = exports2.onCathedral = exports2.onAscent = exports2.isStageWithStoryBoss = exports2.isStageWithShovelTrapdoors = exports2.isStageWithSecretExitToMines = exports2.isStageWithSecretExitToMausoleum = exports2.isStageWithSecretExitToDownpour = exports2.isStageWithRandomBossCollectible = exports2.isStageWithNaturalDevilRoom = exports2.isRepentanceStage = exports2.isFinalFloor = exports2.getStageTypeSuffix = exports2.getStageType = exports2.getStageIDName = exports2.getStageID = exports2.getStage = exports2.getLevelName = exports2.getGotoCommand = exports2.getEffectiveStage = exports2.calculateStageTypeRepentance = exports2.calculateStageType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var roomTypeSpecialGotoPrefixes_1 = require_roomTypeSpecialGotoPrefixes();
      var stageIDNames_1 = require_stageIDNames();
      var stageToStageID_1 = require_stageToStageID();
      var stageTypeSuffixes_1 = require_stageTypeSuffixes();
      var log_1 = require_log();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function calculateStageType(stage) {
        const seeds = cachedClasses_1.game.GetSeeds();
        const stageSeed = seeds.GetStageSeed(stage);
        if (stageSeed % 2 === 0) {
          return isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB;
        }
        if (stageSeed % 3 === 0) {
          return isaac_typescript_definitions_1.StageType.AFTERBIRTH;
        }
        return isaac_typescript_definitions_1.StageType.ORIGINAL;
      }
      exports2.calculateStageType = calculateStageType;
      function calculateStageTypeRepentance(stage) {
        if (stage === isaac_typescript_definitions_1.LevelStage.WOMB_1 || stage === isaac_typescript_definitions_1.LevelStage.WOMB_2) {
          return isaac_typescript_definitions_1.StageType.REPENTANCE;
        }
        const seeds = cachedClasses_1.game.GetSeeds();
        const adjustedStage = (0, types_1.asLevelStage)(stage + 1);
        const stageSeed = seeds.GetStageSeed(adjustedStage);
        const halfStageSeed = Math.floor(stageSeed / 2);
        if (halfStageSeed % 2 === 0) {
          return isaac_typescript_definitions_1.StageType.REPENTANCE_B;
        }
        return isaac_typescript_definitions_1.StageType.REPENTANCE;
      }
      exports2.calculateStageTypeRepentance = calculateStageTypeRepentance;
      function getEffectiveStage() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        if (onRepentanceStage()) {
          return stage + 1;
        }
        return stage;
      }
      exports2.getEffectiveStage = getEffectiveStage;
      function getGotoCommand(roomType, roomVariant, useSpecialRoomsForRoomTypeDefault = false) {
        const isNormalRoom = roomType === isaac_typescript_definitions_1.RoomType.DEFAULT && !useSpecialRoomsForRoomTypeDefault;
        const roomTypeSpecialGotoPrefix = roomTypeSpecialGotoPrefixes_1.ROOM_TYPE_SPECIAL_GOTO_PREFIXES[roomType];
        const prefix = isNormalRoom ? "d" : `s.${roomTypeSpecialGotoPrefix}`;
        return `goto ${prefix}.${roomVariant}`;
      }
      exports2.getGotoCommand = getGotoCommand;
      function getLevelName(stage, stageType) {
        const level = cachedClasses_1.game.GetLevel();
        if (stage === void 0) {
          stage = level.GetStage();
        }
        if (stageType === void 0) {
          stageType = level.GetStageType();
        }
        const stageID = getStageID(stage, stageType);
        const stageIDName = getStageIDName(stageID);
        let suffix;
        switch (stage) {
          case isaac_typescript_definitions_1.LevelStage.BASEMENT_1:
          case isaac_typescript_definitions_1.LevelStage.CAVES_1:
          case isaac_typescript_definitions_1.LevelStage.DEPTHS_1:
          case isaac_typescript_definitions_1.LevelStage.WOMB_1: {
            suffix = " 1";
            break;
          }
          case isaac_typescript_definitions_1.LevelStage.BASEMENT_2:
          case isaac_typescript_definitions_1.LevelStage.CAVES_2:
          case isaac_typescript_definitions_1.LevelStage.DEPTHS_2:
          case isaac_typescript_definitions_1.LevelStage.WOMB_2: {
            suffix = " 2";
            break;
          }
          default: {
            suffix = "";
            break;
          }
        }
        return stageIDName + suffix;
      }
      exports2.getLevelName = getLevelName;
      function getStage() {
        const level = cachedClasses_1.game.GetLevel();
        return level.GetStage();
      }
      exports2.getStage = getStage;
      function getStageID(stage, stageType) {
        const level = cachedClasses_1.game.GetLevel();
        if (stage === void 0) {
          stage = level.GetStage();
        }
        if (stageType === void 0) {
          stageType = level.GetStageType();
        }
        if (cachedClasses_1.game.IsGreedMode()) {
          const stageTypeToStageID2 = stageToStageID_1.STAGE_TO_STAGE_ID_GREED_MODE.get(stage);
          if (stageTypeToStageID2 === void 0) {
            return isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS;
          }
          return stageTypeToStageID2[stageType];
        }
        const stageTypeToStageID = stageToStageID_1.STAGE_TO_STAGE_ID[stage];
        return stageTypeToStageID[stageType];
      }
      exports2.getStageID = getStageID;
      function getStageIDName(stageID) {
        return stageIDNames_1.STAGE_ID_NAMES[stageID];
      }
      exports2.getStageIDName = getStageIDName;
      function getStageType() {
        const level = cachedClasses_1.game.GetLevel();
        return level.GetStageType();
      }
      exports2.getStageType = getStageType;
      function getStageTypeSuffix(stageType) {
        return stageTypeSuffixes_1.STAGE_TYPE_SUFFIXES[stageType];
      }
      exports2.getStageTypeSuffix = getStageTypeSuffix;
      function isFinalFloor(stage, stageType) {
        return stage === isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST || stage === isaac_typescript_definitions_1.LevelStage.VOID || stage === isaac_typescript_definitions_1.LevelStage.HOME || stage === isaac_typescript_definitions_1.LevelStage.WOMB_2 && isRepentanceStage(stageType);
      }
      exports2.isFinalFloor = isFinalFloor;
      function isRepentanceStage(stageType) {
        return stageType === isaac_typescript_definitions_1.StageType.REPENTANCE || stageType === isaac_typescript_definitions_1.StageType.REPENTANCE_B;
      }
      exports2.isRepentanceStage = isRepentanceStage;
      function isStageWithNaturalDevilRoom(effectiveStage) {
        return (0, utils_1.inRange)(effectiveStage, isaac_typescript_definitions_1.LevelStage.BASEMENT_2, isaac_typescript_definitions_1.LevelStage.WOMB_2) && effectiveStage !== isaac_typescript_definitions_1.LevelStage.BLUE_WOMB;
      }
      exports2.isStageWithNaturalDevilRoom = isStageWithNaturalDevilRoom;
      function isStageWithRandomBossCollectible(stage) {
        return !isStageWithStoryBoss(stage) || stage === isaac_typescript_definitions_1.LevelStage.VOID;
      }
      exports2.isStageWithRandomBossCollectible = isStageWithRandomBossCollectible;
      function isStageWithSecretExitToDownpour(stage) {
        return stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_1 || stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_2;
      }
      exports2.isStageWithSecretExitToDownpour = isStageWithSecretExitToDownpour;
      function isStageWithSecretExitToMausoleum(stage, stageType) {
        const repentanceStage = isRepentanceStage(stageType);
        return stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_1 && !repentanceStage || stage === isaac_typescript_definitions_1.LevelStage.CAVES_2 && repentanceStage;
      }
      exports2.isStageWithSecretExitToMausoleum = isStageWithSecretExitToMausoleum;
      function isStageWithSecretExitToMines(stage, stageType) {
        const repentanceStage = isRepentanceStage(stageType);
        return stage === isaac_typescript_definitions_1.LevelStage.CAVES_1 && !repentanceStage || stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_2 && repentanceStage;
      }
      exports2.isStageWithSecretExitToMines = isStageWithSecretExitToMines;
      function isStageWithShovelTrapdoors(stage, stageType) {
        const repentanceStage = isRepentanceStage(stageType);
        return stage < isaac_typescript_definitions_1.LevelStage.WOMB_2 || stage === isaac_typescript_definitions_1.LevelStage.WOMB_2 && !repentanceStage;
      }
      exports2.isStageWithShovelTrapdoors = isStageWithShovelTrapdoors;
      function isStageWithStoryBoss(stage) {
        return stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_2 || stage >= isaac_typescript_definitions_1.LevelStage.WOMB_2;
      }
      exports2.isStageWithStoryBoss = isStageWithStoryBoss;
      function onAscent() {
        return cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH);
      }
      exports2.onAscent = onAscent;
      function onCathedral() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return stage === isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL && stageType === isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB;
      }
      exports2.onCathedral = onCathedral;
      function onChest() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return stage === isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST && stageType === isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB;
      }
      exports2.onChest = onChest;
      function onDarkRoom() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return stage === isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST && stageType === isaac_typescript_definitions_1.StageType.ORIGINAL;
      }
      exports2.onDarkRoom = onDarkRoom;
      function onEffectiveStage(...effectiveStages) {
        const thisEffectiveStage = getEffectiveStage();
        return effectiveStages.includes(thisEffectiveStage);
      }
      exports2.onEffectiveStage = onEffectiveStage;
      function onFinalFloor() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return isFinalFloor(stage, stageType);
      }
      exports2.onFinalFloor = onFinalFloor;
      function onFirstFloor() {
        const effectiveStage = getEffectiveStage();
        const isOnAscent = onAscent();
        return effectiveStage === isaac_typescript_definitions_1.LevelStage.BASEMENT_1 && !isOnAscent;
      }
      exports2.onFirstFloor = onFirstFloor;
      function onRepentanceStage() {
        const level = cachedClasses_1.game.GetLevel();
        const stageType = level.GetStageType();
        return isRepentanceStage(stageType);
      }
      exports2.onRepentanceStage = onRepentanceStage;
      function onSheol() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return stage === isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL && stageType === isaac_typescript_definitions_1.StageType.ORIGINAL;
      }
      exports2.onSheol = onSheol;
      function onStage(...stages) {
        const level = cachedClasses_1.game.GetLevel();
        const thisStage = level.GetStage();
        return stages.includes(thisStage);
      }
      exports2.onStage = onStage;
      function onStageOrHigher(stage) {
        const level = cachedClasses_1.game.GetLevel();
        const thisStage = level.GetStage();
        return thisStage >= stage;
      }
      exports2.onStageOrHigher = onStageOrHigher;
      function onStageOrLower(stage) {
        const level = cachedClasses_1.game.GetLevel();
        const thisStage = level.GetStage();
        return thisStage <= stage;
      }
      exports2.onStageOrLower = onStageOrLower;
      function onStageType(...stageTypes) {
        const level = cachedClasses_1.game.GetLevel();
        const thisStageType = level.GetStageType();
        return stageTypes.includes(thisStageType);
      }
      exports2.onStageType = onStageType;
      function onStageWithNaturalDevilRoom() {
        const effectiveStage = getEffectiveStage();
        return isStageWithNaturalDevilRoom(effectiveStage);
      }
      exports2.onStageWithNaturalDevilRoom = onStageWithNaturalDevilRoom;
      function onStageWithRandomBossCollectible() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        return isStageWithRandomBossCollectible(stage);
      }
      exports2.onStageWithRandomBossCollectible = onStageWithRandomBossCollectible;
      function onStageWithSecretExitToDownpour() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        return isStageWithSecretExitToDownpour(stage);
      }
      exports2.onStageWithSecretExitToDownpour = onStageWithSecretExitToDownpour;
      function onStageWithSecretExitToMausoleum() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return isStageWithSecretExitToMausoleum(stage, stageType);
      }
      exports2.onStageWithSecretExitToMausoleum = onStageWithSecretExitToMausoleum;
      function onStageWithSecretExitToMines() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return isStageWithSecretExitToMines(stage, stageType);
      }
      exports2.onStageWithSecretExitToMines = onStageWithSecretExitToMines;
      function onStageWithShovelTrapdoors() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        return isStageWithShovelTrapdoors(stage, stageType);
      }
      exports2.onStageWithShovelTrapdoors = onStageWithShovelTrapdoors;
      function onStageWithStoryBoss() {
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        return isStageWithStoryBoss(stage);
      }
      exports2.onStageWithStoryBoss = onStageWithStoryBoss;
      function setStage(stage, stageType, reseed = false) {
        const stageTypeSuffix = getStageTypeSuffix(stageType);
        const command = `stage ${stage}${stageTypeSuffix}`;
        (0, log_1.log)(`Warping to a stage with a console command of: ${command}`);
        Isaac.ExecuteCommand(command);
        if (reseed) {
          (0, log_1.log)("Reseeding the floor with a console command of: reseed");
          Isaac.ExecuteCommand("reseed");
        }
      }
      exports2.setStage = setStage;
    }
  });

  // node_modules/isaacscript-common/dist/functions/rooms.js
  var require_rooms = __commonJS({
    "node_modules/isaacscript-common/dist/functions/rooms.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isMineShaft = exports2.isMegaSatanRoom = exports2.isLRoom = exports2.isHomeCloset = exports2.isGenesisRoom = exports2.isDoubleTrouble = exports2.isDogmaRoom = exports2.isDevilsCrownTreasureRoom = exports2.isDeathCertificateArea = exports2.isCrawlSpaceWithBlackMarketEntrance = exports2.isCrawlSpace = exports2.isBossRoomOf = exports2.isBigRoom = exports2.isBeastRoom = exports2.isAngelShop = exports2.isAllRoomsClear = exports2.is2x1Room = exports2.inStartingRoom = exports2.inSecretShop = exports2.inSecretExit = exports2.inRoomType = exports2.inRoomShape = exports2.inMirrorRoom = exports2.inMinibossRoomOf = exports2.inMineShaft = exports2.inMegaSatanRoom = exports2.inLRoom = exports2.inHomeCloset = exports2.inGenesisRoom = exports2.inDoubleTrouble = exports2.inDogmaRoom = exports2.inDevilsCrownTreasureRoom = exports2.inDeathCertificateArea = exports2.inCrawlSpaceWithBlackMarketEntrance = exports2.inCrawlSpace = exports2.inBossRoomOf = exports2.inBigRoom = exports2.inBeastRoom = exports2.inAngelShop = exports2.in2x1Room = exports2.getRoomsOutsideGrid = exports2.getRoomsOfDimension = exports2.getRoomsInsideGrid = exports2.getRooms = exports2.getRoomTypeName = exports2.getRoomItemPoolType = exports2.getRoomDataForTypeVariant = exports2.getReadOnlyRooms = exports2.getNumRooms = exports2.changeRoom = void 0;
      exports2.setRoomUncleared = exports2.setRoomCleared = exports2.setBackdrop = exports2.roomUpdateSafe = exports2.isSecretShop = exports2.isSecretRoomType = exports2.isSecretExit = exports2.isRoomType = exports2.isRoomShape = exports2.isMirrorRoom = exports2.isMinibossRoomOf = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var roomTypeNames_1 = require_roomTypeNames();
      var mineShaftRoomSubTypesSet_1 = require_mineShaftRoomSubTypesSet();
      var ReadonlySet_1 = require_ReadonlySet();
      var dimensions_1 = require_dimensions();
      var doors_1 = require_doors();
      var entities_1 = require_entities();
      var flag_1 = require_flag();
      var positionVelocity_1 = require_positionVelocity();
      var roomData_1 = require_roomData();
      var roomShape_1 = require_roomShape();
      var roomTransition_1 = require_roomTransition();
      var stage_1 = require_stage();
      var utils_1 = require_utils();
      var SECRET_ROOM_TYPES = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.RoomType.SECRET,
        isaac_typescript_definitions_1.RoomType.SUPER_SECRET,
        isaac_typescript_definitions_1.RoomType.ULTRA_SECRET
      ]);
      function changeRoom(roomGridIndex) {
        const level = cachedClasses_1.game.GetLevel();
        const roomData = (0, roomData_1.getRoomData)(roomGridIndex);
        (0, utils_1.assertDefined)(roomData, `Failed to change the room to grid index ${roomGridIndex} because that room does not exist.`);
        level.LeaveDoor = isaac_typescript_definitions_1.DoorSlot.NO_DOOR_SLOT;
        cachedClasses_1.game.ChangeRoom(roomGridIndex);
      }
      exports2.changeRoom = changeRoom;
      function getNumRooms() {
        const roomsInsideGrid = getRoomsInsideGrid();
        return roomsInsideGrid.length;
      }
      exports2.getNumRooms = getNumRooms;
      function getReadOnlyRooms() {
        const level = cachedClasses_1.game.GetLevel();
        const roomList = level.GetRooms();
        const readOnlyRoomDescriptors = [];
        for (let i = 0; i < roomList.Size; i++) {
          const readOnlyRoomDescriptor = roomList.Get(i);
          if (readOnlyRoomDescriptor !== void 0 && readOnlyRoomDescriptor.Data !== void 0) {
            readOnlyRoomDescriptors.push(readOnlyRoomDescriptor);
          }
        }
        return readOnlyRoomDescriptors;
      }
      exports2.getReadOnlyRooms = getReadOnlyRooms;
      function getRoomDataForTypeVariant(roomType, roomVariant, cancelRoomTransition = true, useSpecialRoomsForRoomTypeDefault = false) {
        const command = (0, stage_1.getGotoCommand)(roomType, roomVariant, useSpecialRoomsForRoomTypeDefault);
        Isaac.ExecuteCommand(command);
        const newRoomData = (0, roomData_1.getRoomData)(isaac_typescript_definitions_1.GridRoom.DEBUG);
        if (cancelRoomTransition) {
          (0, roomTransition_1.reloadRoom)();
        }
        return newRoomData;
      }
      exports2.getRoomDataForTypeVariant = getRoomDataForTypeVariant;
      function getRoomItemPoolType() {
        const itemPool = cachedClasses_1.game.GetItemPool();
        const room = cachedClasses_1.game.GetRoom();
        const roomType = room.GetType();
        const roomSeed = room.GetSpawnSeed();
        return itemPool.GetPoolForRoom(roomType, roomSeed);
      }
      exports2.getRoomItemPoolType = getRoomItemPoolType;
      function getRoomTypeName(roomType) {
        return roomTypeNames_1.ROOM_TYPE_NAMES[roomType];
      }
      exports2.getRoomTypeName = getRoomTypeName;
      function getRooms(includeExtraDimensionalRooms = false) {
        const roomsInGrid = getRoomsInsideGrid(includeExtraDimensionalRooms);
        const roomsOutsideGrid = getRoomsOutsideGrid();
        return [...roomsInGrid, ...roomsOutsideGrid];
      }
      exports2.getRooms = getRooms;
      function getRoomsInsideGrid(includeExtraDimensionalRooms = false) {
        const level = cachedClasses_1.game.GetLevel();
        const dimensions = includeExtraDimensionalRooms ? constants_1.DIMENSIONS : [isaac_typescript_definitions_1.Dimension.CURRENT];
        const roomDescriptorMap = /* @__PURE__ */ new Map();
        for (const dimension of dimensions) {
          for (const roomGridIndex of (0, utils_1.iRange)(constants_1.MAX_LEVEL_GRID_INDEX)) {
            const roomDescriptor = level.GetRoomByIdx(roomGridIndex, dimension);
            if (roomDescriptor.Data !== void 0) {
              const ptrHash = GetPtrHash(roomDescriptor);
              roomDescriptorMap.set(ptrHash, roomDescriptor);
            }
          }
        }
        return [...roomDescriptorMap.values()];
      }
      exports2.getRoomsInsideGrid = getRoomsInsideGrid;
      function getRoomsOfDimension(dimension) {
        const level = cachedClasses_1.game.GetLevel();
        const roomsMap = /* @__PURE__ */ new Map();
        for (const roomGridIndex of (0, utils_1.iRange)(constants_1.MAX_LEVEL_GRID_INDEX)) {
          const roomDescriptor = level.GetRoomByIdx(roomGridIndex, dimension);
          if (roomDescriptor.Data !== void 0) {
            const ptrHash = GetPtrHash(roomDescriptor);
            roomsMap.set(ptrHash, roomDescriptor);
          }
        }
        return [...roomsMap.values()];
      }
      exports2.getRoomsOfDimension = getRoomsOfDimension;
      function getRoomsOutsideGrid() {
        const readOnlyRooms = getReadOnlyRooms();
        const readOnlyRoomsOffGrid = readOnlyRooms.filter((readOnlyRoomDescriptor) => readOnlyRoomDescriptor.SafeGridIndex < 0);
        return readOnlyRoomsOffGrid.map((readOnlyRoomDescriptor) => (0, roomData_1.getRoomDescriptor)(readOnlyRoomDescriptor.SafeGridIndex));
      }
      exports2.getRoomsOutsideGrid = getRoomsOutsideGrid;
      function in2x1Room() {
        const roomData = (0, roomData_1.getRoomData)();
        return is2x1Room(roomData);
      }
      exports2.in2x1Room = in2x1Room;
      function inAngelShop() {
        const roomData = (0, roomData_1.getRoomData)();
        return isAngelShop(roomData);
      }
      exports2.inAngelShop = inAngelShop;
      function inBeastRoom() {
        const roomData = (0, roomData_1.getRoomData)();
        return isBeastRoom(roomData);
      }
      exports2.inBeastRoom = inBeastRoom;
      function inBigRoom() {
        const roomData = (0, roomData_1.getRoomData)();
        return isBigRoom(roomData);
      }
      exports2.inBigRoom = inBigRoom;
      function inBossRoomOf(bossID) {
        const roomData = (0, roomData_1.getRoomData)();
        return isBossRoomOf(roomData, bossID);
      }
      exports2.inBossRoomOf = inBossRoomOf;
      function inCrawlSpace() {
        const roomData = (0, roomData_1.getRoomData)();
        return isCrawlSpace(roomData);
      }
      exports2.inCrawlSpace = inCrawlSpace;
      function inCrawlSpaceWithBlackMarketEntrance() {
        const roomData = (0, roomData_1.getRoomData)();
        return isCrawlSpaceWithBlackMarketEntrance(roomData);
      }
      exports2.inCrawlSpaceWithBlackMarketEntrance = inCrawlSpaceWithBlackMarketEntrance;
      function inDeathCertificateArea() {
        const roomData = (0, roomData_1.getRoomData)();
        return isDeathCertificateArea(roomData);
      }
      exports2.inDeathCertificateArea = inDeathCertificateArea;
      function inDevilsCrownTreasureRoom() {
        const roomDescriptor = (0, roomData_1.getRoomDescriptorReadOnly)();
        return isDevilsCrownTreasureRoom(roomDescriptor);
      }
      exports2.inDevilsCrownTreasureRoom = inDevilsCrownTreasureRoom;
      function inDogmaRoom() {
        const roomData = (0, roomData_1.getRoomData)();
        return isDogmaRoom(roomData);
      }
      exports2.inDogmaRoom = inDogmaRoom;
      function inDoubleTrouble() {
        const roomData = (0, roomData_1.getRoomData)();
        return isDoubleTrouble(roomData);
      }
      exports2.inDoubleTrouble = inDoubleTrouble;
      function inGenesisRoom() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return isGenesisRoom(roomGridIndex);
      }
      exports2.inGenesisRoom = inGenesisRoom;
      function inHomeCloset() {
        const roomData = (0, roomData_1.getRoomData)();
        return isHomeCloset(roomData);
      }
      exports2.inHomeCloset = inHomeCloset;
      function inLRoom() {
        const roomData = (0, roomData_1.getRoomData)();
        return isLRoom(roomData);
      }
      exports2.inLRoom = inLRoom;
      function inMegaSatanRoom() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return isMegaSatanRoom(roomGridIndex);
      }
      exports2.inMegaSatanRoom = inMegaSatanRoom;
      function inMineShaft() {
        const roomData = (0, roomData_1.getRoomData)();
        return isMineShaft(roomData);
      }
      exports2.inMineShaft = inMineShaft;
      function inMinibossRoomOf(minibossID) {
        const roomData = (0, roomData_1.getRoomData)();
        return isMinibossRoomOf(roomData, minibossID);
      }
      exports2.inMinibossRoomOf = inMinibossRoomOf;
      function inMirrorRoom() {
        const roomData = (0, roomData_1.getRoomData)();
        return isMirrorRoom(roomData);
      }
      exports2.inMirrorRoom = inMirrorRoom;
      function inRoomShape(...roomShapes) {
        const roomData = (0, roomData_1.getRoomData)();
        return isRoomShape(roomData, ...roomShapes);
      }
      exports2.inRoomShape = inRoomShape;
      function inRoomType(...roomTypes) {
        const roomData = (0, roomData_1.getRoomData)();
        return isRoomType(roomData, ...roomTypes);
      }
      exports2.inRoomType = inRoomType;
      function inSecretExit() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return isSecretExit(roomGridIndex);
      }
      exports2.inSecretExit = inSecretExit;
      function inSecretShop() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return isSecretShop(roomGridIndex);
      }
      exports2.inSecretShop = inSecretShop;
      function inStartingRoom() {
        const level = cachedClasses_1.game.GetLevel();
        const startingRoomGridIndex = level.GetStartingRoomIndex();
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return roomGridIndex === startingRoomGridIndex && (0, dimensions_1.inDimension)(isaac_typescript_definitions_1.Dimension.MAIN);
      }
      exports2.inStartingRoom = inStartingRoom;
      function is2x1Room(roomData) {
        return (0, roomShape_1.is2x1RoomShape)(roomData.Shape);
      }
      exports2.is2x1Room = is2x1Room;
      function isAllRoomsClear(onlyCheckRoomTypes, includeSecretRoom = false, includeSuperSecretRoom = false, includeUltraSecretRoom = false) {
        const roomsInsideGrid = getRoomsInsideGrid();
        let matchingRooms;
        if (onlyCheckRoomTypes === void 0) {
          matchingRooms = roomsInsideGrid;
        } else {
          const roomTypeWhitelist = new ReadonlySet_1.ReadonlySet(onlyCheckRoomTypes);
          matchingRooms = roomsInsideGrid.filter((roomDescriptor) => roomDescriptor.Data !== void 0 && roomTypeWhitelist.has(roomDescriptor.Data.Type));
        }
        if (!includeSecretRoom) {
          matchingRooms = matchingRooms.filter((roomDescriptor) => roomDescriptor.Data !== void 0 && roomDescriptor.Data.Type !== isaac_typescript_definitions_1.RoomType.SECRET);
        }
        if (!includeSuperSecretRoom) {
          matchingRooms = matchingRooms.filter((roomDescriptor) => roomDescriptor.Data !== void 0 && roomDescriptor.Data.Type !== isaac_typescript_definitions_1.RoomType.SUPER_SECRET);
        }
        if (!includeUltraSecretRoom) {
          matchingRooms = matchingRooms.filter((roomDescriptor) => roomDescriptor.Data !== void 0 && roomDescriptor.Data.Type !== isaac_typescript_definitions_1.RoomType.ULTRA_SECRET);
        }
        return matchingRooms.every((roomDescriptor) => roomDescriptor.Clear);
      }
      exports2.isAllRoomsClear = isAllRoomsClear;
      function isAngelShop(roomData) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.ANGEL && roomData.Subtype === isaac_typescript_definitions_1.AngelRoomSubType.SHOP;
      }
      exports2.isAngelShop = isAngelShop;
      function isBeastRoom(roomData) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.DUNGEON && roomData.Subtype === isaac_typescript_definitions_1.DungeonSubType.BEAST_ROOM;
      }
      exports2.isBeastRoom = isBeastRoom;
      function isBigRoom(roomData) {
        return (0, roomShape_1.isBigRoomShape)(roomData.Shape);
      }
      exports2.isBigRoom = isBigRoom;
      function isBossRoomOf(roomData, bossID) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.BOSS && roomData.StageID === isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS && roomData.Subtype === bossID;
      }
      exports2.isBossRoomOf = isBossRoomOf;
      function isCrawlSpace(roomData) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.DUNGEON && roomData.Subtype === isaac_typescript_definitions_1.DungeonSubType.NORMAL;
      }
      exports2.isCrawlSpace = isCrawlSpace;
      function isCrawlSpaceWithBlackMarketEntrance(roomData) {
        return isCrawlSpace(roomData) && (0, flag_1.hasFlag)(roomData.Doors, isaac_typescript_definitions_1.DoorSlotFlag.RIGHT_0);
      }
      exports2.isCrawlSpaceWithBlackMarketEntrance = isCrawlSpaceWithBlackMarketEntrance;
      function isDeathCertificateArea(roomData) {
        return roomData.StageID === isaac_typescript_definitions_1.StageID.HOME && (roomData.Subtype === isaac_typescript_definitions_1.HomeRoomSubType.DEATH_CERTIFICATE_ENTRANCE || roomData.Subtype === isaac_typescript_definitions_1.HomeRoomSubType.DEATH_CERTIFICATE_ITEMS);
      }
      exports2.isDeathCertificateArea = isDeathCertificateArea;
      function isDevilsCrownTreasureRoom(roomDescriptor) {
        return (0, flag_1.hasFlag)(roomDescriptor.Flags, isaac_typescript_definitions_1.RoomDescriptorFlag.DEVIL_TREASURE);
      }
      exports2.isDevilsCrownTreasureRoom = isDevilsCrownTreasureRoom;
      function isDogmaRoom(roomData) {
        return roomData.StageID === isaac_typescript_definitions_1.StageID.HOME && roomData.Type === isaac_typescript_definitions_1.RoomType.DEFAULT && roomData.Variant === 1e3 && roomData.Subtype === isaac_typescript_definitions_1.HomeRoomSubType.LIVING_ROOM;
      }
      exports2.isDogmaRoom = isDogmaRoom;
      function isDoubleTrouble(roomData) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.BOSS && roomData.Name.includes("Double Trouble");
      }
      exports2.isDoubleTrouble = isDoubleTrouble;
      function isGenesisRoom(roomGridIndex) {
        return roomGridIndex === isaac_typescript_definitions_1.GridRoom.GENESIS;
      }
      exports2.isGenesisRoom = isGenesisRoom;
      function isHomeCloset(roomData) {
        return roomData.StageID === isaac_typescript_definitions_1.StageID.HOME && (roomData.Subtype === isaac_typescript_definitions_1.HomeRoomSubType.CLOSET_LEFT || roomData.Subtype === isaac_typescript_definitions_1.HomeRoomSubType.CLOSET_RIGHT);
      }
      exports2.isHomeCloset = isHomeCloset;
      function isLRoom(roomData) {
        return (0, roomShape_1.isLRoomShape)(roomData.Shape);
      }
      exports2.isLRoom = isLRoom;
      function isMegaSatanRoom(roomGridIndex) {
        return roomGridIndex === isaac_typescript_definitions_1.GridRoom.MEGA_SATAN;
      }
      exports2.isMegaSatanRoom = isMegaSatanRoom;
      function isMineShaft(roomData) {
        return (roomData.StageID === isaac_typescript_definitions_1.StageID.MINES || roomData.StageID === isaac_typescript_definitions_1.StageID.ASHPIT) && // eslint-disable-next-line isaacscript/strict-enums
        mineShaftRoomSubTypesSet_1.MINE_SHAFT_ROOM_SUB_TYPE_SET.has(roomData.Subtype);
      }
      exports2.isMineShaft = isMineShaft;
      function isMinibossRoomOf(roomData, minibossID) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.MINI_BOSS && roomData.StageID === isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS && roomData.Subtype === minibossID;
      }
      exports2.isMinibossRoomOf = isMinibossRoomOf;
      function isMirrorRoom(roomData) {
        return roomData.Type === isaac_typescript_definitions_1.RoomType.DEFAULT && (roomData.StageID === isaac_typescript_definitions_1.StageID.DOWNPOUR || roomData.StageID === isaac_typescript_definitions_1.StageID.DROSS) && roomData.Subtype === isaac_typescript_definitions_1.DownpourRoomSubType.MIRROR;
      }
      exports2.isMirrorRoom = isMirrorRoom;
      function isRoomShape(roomData, ...roomShapes) {
        return roomShapes.includes(roomData.Shape);
      }
      exports2.isRoomShape = isRoomShape;
      function isRoomType(roomData, ...roomTypes) {
        return roomTypes.includes(roomData.Type);
      }
      exports2.isRoomType = isRoomType;
      function isSecretExit(roomGridIndex) {
        return roomGridIndex === isaac_typescript_definitions_1.GridRoom.SECRET_EXIT;
      }
      exports2.isSecretExit = isSecretExit;
      function isSecretRoomType(roomType) {
        return SECRET_ROOM_TYPES.has(roomType);
      }
      exports2.isSecretRoomType = isSecretRoomType;
      function isSecretShop(roomGridIndex) {
        return roomGridIndex === isaac_typescript_definitions_1.GridRoom.SECRET_SHOP;
      }
      exports2.isSecretShop = isSecretShop;
      function roomUpdateSafe() {
        const room = cachedClasses_1.game.GetRoom();
        const entities = (0, entities_1.getEntities)();
        const entityPositions = (0, positionVelocity_1.getEntityPositions)(entities);
        const entityVelocities = (0, positionVelocity_1.getEntityVelocities)(entities);
        room.Update();
        (0, positionVelocity_1.setEntityPositions)(entityPositions, entities);
        (0, positionVelocity_1.setEntityVelocities)(entityVelocities, entities);
      }
      exports2.roomUpdateSafe = roomUpdateSafe;
      function setBackdrop(backdropType) {
        cachedClasses_1.game.ShowHallucination(0, backdropType);
        cachedClasses_1.sfxManager.Stop(isaac_typescript_definitions_1.SoundEffect.DEATH_CARD);
      }
      exports2.setBackdrop = setBackdrop;
      function setRoomCleared() {
        const room = cachedClasses_1.game.GetRoom();
        const roomClear = room.IsClear();
        if (roomClear) {
          return;
        }
        room.SetClear(true);
        for (const door of (0, doors_1.getDoors)()) {
          if ((0, doors_1.isHiddenSecretRoomDoor)(door)) {
            continue;
          }
          (0, doors_1.openDoorFast)(door);
          door.ExtraVisible = false;
        }
        cachedClasses_1.sfxManager.Stop(isaac_typescript_definitions_1.SoundEffect.DOOR_HEAVY_OPEN);
        cachedClasses_1.game.ShakeScreen(0);
      }
      exports2.setRoomCleared = setRoomCleared;
      function setRoomUncleared() {
        const room = cachedClasses_1.game.GetRoom();
        room.SetClear(false);
        (0, doors_1.closeAllDoors)();
      }
      exports2.setRoomUncleared = setRoomUncleared;
    }
  });

  // node_modules/isaacscript-common/dist/functions/gridEntities.js
  var require_gridEntities = __commonJS({
    "node_modules/isaacscript-common/dist/functions/gridEntities.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnVoidPortal = exports2.spawnGridEntityWithVariant = exports2.spawnGridEntity = exports2.spawnGiantPoop = exports2.setGridEntityType = exports2.setGridEntityInvisible = exports2.removeGridEntity = exports2.removeGridEntities = exports2.removeEntitiesSpawnedFromGridEntity = exports2.removeAllMatchingGridEntities = exports2.removeAllGridEntitiesExcept = exports2.isPostBossVoidPortal = exports2.isPoopGridEntityXMLType = exports2.isGridIndexAdjacentToDoor = exports2.isGridEntityXMLType = exports2.isGridEntityBroken = exports2.isGridEntityBreakableByExplosion = exports2.getTopLeftWallGridIndex = exports2.getTopLeftWall = exports2.getSurroundingGridIndexes = exports2.getSurroundingGridEntities = exports2.getRockPNGPath = exports2.getMatchingGridEntities = exports2.getGridEntityIDFromConstituents = exports2.getGridEntityID = exports2.getGridEntityCollisionPoints = exports2.getGridEntityANM2Path = exports2.getGridEntitiesMap = exports2.getGridEntitiesInRadius = exports2.getGridEntitiesExcept = exports2.getGridEntities = exports2.getConstituentsFromGridEntityID = exports2.getCollidingEntitiesWithGridEntity = exports2.getAllGridIndexes = exports2.doesGridEntityExist = exports2.convertXMLGridEntityType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var gridEntityTypeToBrokenStateMap_1 = require_gridEntityTypeToBrokenStateMap();
      var gridEntityXMLMap_1 = require_gridEntityXMLMap();
      var roomShapeToTopLeftWallGridIndexMap_1 = require_roomShapeToTopLeftWallGridIndexMap();
      var gridEntityTypeToANM2Name_1 = require_gridEntityTypeToANM2Name();
      var poopGridEntityXMLTypesSet_1 = require_poopGridEntityXMLTypesSet();
      var ReadonlySet_1 = require_ReadonlySet();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var math_1 = require_math();
      var rooms_1 = require_rooms();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var vector_1 = require_vector();
      var GRID_ENTITY_TYPES_THAT_KEEP_GRID_ENTITY_XML_VARIANT = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.GridEntityType.SPIKES_ON_OFF,
        isaac_typescript_definitions_1.GridEntityType.PRESSURE_PLATE,
        isaac_typescript_definitions_1.GridEntityType.TELEPORTER
        // 23
      ]);
      var BREAKABLE_GRID_ENTITY_TYPES_BY_EXPLOSIONS = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.GridEntityType.ROCK,
        isaac_typescript_definitions_1.GridEntityType.ROCK_TINTED,
        isaac_typescript_definitions_1.GridEntityType.ROCK_BOMB,
        isaac_typescript_definitions_1.GridEntityType.ROCK_ALT,
        isaac_typescript_definitions_1.GridEntityType.SPIDER_WEB,
        isaac_typescript_definitions_1.GridEntityType.TNT,
        // GridEntityType.FIREPLACE (13) does not count since it is turned into a non-grid entity upon
        // spawning.
        isaac_typescript_definitions_1.GridEntityType.POOP,
        isaac_typescript_definitions_1.GridEntityType.ROCK_SUPER_SPECIAL,
        isaac_typescript_definitions_1.GridEntityType.ROCK_SPIKED,
        isaac_typescript_definitions_1.GridEntityType.ROCK_ALT_2,
        isaac_typescript_definitions_1.GridEntityType.ROCK_GOLD
        // 27
      ]);
      var BREAKABLE_GRID_ENTITY_TYPES_VARIANTS_BY_EXPLOSIONS = new ReadonlySet_1.ReadonlySet([`${isaac_typescript_definitions_1.GridEntityType.STATUE}.${isaac_typescript_definitions_1.StatueVariant.ANGEL}`]);
      var GRID_ENTITY_XML_TYPES_SET = new ReadonlySet_1.ReadonlySet(cachedEnumValues_1.GRID_ENTITY_XML_TYPE_VALUES);
      function convertXMLGridEntityType(gridEntityXMLType, gridEntityXMLVariant) {
        const gridEntityArray = gridEntityXMLMap_1.GRID_ENTITY_XML_MAP.get(gridEntityXMLType);
        (0, utils_1.assertDefined)(gridEntityArray, `Failed to find an entry in the grid entity map for XML entity type: ${gridEntityXMLType}`);
        const gridEntityType = gridEntityArray[0];
        const variant = GRID_ENTITY_TYPES_THAT_KEEP_GRID_ENTITY_XML_VARIANT.has(gridEntityType) ? gridEntityXMLVariant : gridEntityArray[1];
        return [gridEntityType, variant];
      }
      exports2.convertXMLGridEntityType = convertXMLGridEntityType;
      function doesGridEntityExist(gridEntityType, variant = -1) {
        const room = cachedClasses_1.game.GetRoom();
        const gridIndexes = getAllGridIndexes();
        return gridIndexes.some((gridIndex) => {
          const gridEntity = room.GetGridEntity(gridIndex);
          if (gridEntity === void 0) {
            return false;
          }
          const thisGridEntityType = gridEntity.GetType();
          const thisVariant = gridEntity.GetVariant();
          return gridEntityType === thisGridEntityType && (variant === -1 || variant === thisVariant);
        });
      }
      exports2.doesGridEntityExist = doesGridEntityExist;
      function getAllGridIndexes() {
        const room = cachedClasses_1.game.GetRoom();
        const gridSize = room.GetGridSize();
        return (0, utils_1.eRange)(gridSize);
      }
      exports2.getAllGridIndexes = getAllGridIndexes;
      function getCollidingEntitiesWithGridEntity(gridEntity) {
        const { topLeft, bottomRight } = getGridEntityCollisionPoints(gridEntity);
        const closeEntities = Isaac.FindInRadius(gridEntity.Position, constants_1.DISTANCE_OF_GRID_TILE * 2);
        return closeEntities.filter((entity) => entity.CollidesWithGrid() && (0, math_1.isCircleIntersectingRectangle)(
          entity.Position,
          // We arbitrarily add 0.1 to account for entities that are already pushed back by the time
          // the `POST_UPDATE` callback fires.
          entity.Size + 0.1,
          topLeft,
          bottomRight
        ));
      }
      exports2.getCollidingEntitiesWithGridEntity = getCollidingEntitiesWithGridEntity;
      function getConstituentsFromGridEntityID(gridEntityID) {
        const parts = gridEntityID.split(".");
        if (parts.length !== 2) {
          error(`Failed to get the constituents from a grid entity ID: ${gridEntityID}`);
        }
        const [gridEntityTypeString, variantString] = parts;
        (0, utils_1.assertDefined)(gridEntityTypeString, `Failed to get the first constituent from a grid entity ID: ${gridEntityID}`);
        (0, utils_1.assertDefined)(variantString, `Failed to get the second constituent from a grid entity ID: ${gridEntityID}`);
        const gridEntityType = (0, types_1.parseIntSafe)(gridEntityTypeString);
        (0, utils_1.assertDefined)(gridEntityType, `Failed to convert the grid entity type to a number: ${gridEntityTypeString}`);
        const variant = (0, types_1.parseIntSafe)(variantString);
        (0, utils_1.assertDefined)(variant, `Failed to convert the grid entity variant to an integer: ${variantString}`);
        return [gridEntityType, variant];
      }
      exports2.getConstituentsFromGridEntityID = getConstituentsFromGridEntityID;
      function getGridEntities(...gridEntityTypes) {
        const gridEntities = getAllGridEntities();
        if (gridEntityTypes.length === 0) {
          return gridEntities;
        }
        const gridEntityTypesSet = new ReadonlySet_1.ReadonlySet(gridEntityTypes);
        return gridEntities.filter((gridEntity) => {
          const gridEntityType = gridEntity.GetType();
          return gridEntityTypesSet.has(gridEntityType);
        });
      }
      exports2.getGridEntities = getGridEntities;
      function getGridEntitiesExcept(...gridEntityTypes) {
        const gridEntities = getAllGridEntities();
        if (gridEntityTypes.length === 0) {
          return gridEntities;
        }
        const gridEntityTypesSet = new ReadonlySet_1.ReadonlySet(gridEntityTypes);
        return gridEntities.filter((gridEntity) => {
          const gridEntityType = gridEntity.GetType();
          return !gridEntityTypesSet.has(gridEntityType);
        });
      }
      exports2.getGridEntitiesExcept = getGridEntitiesExcept;
      function getAllGridEntities() {
        const room = cachedClasses_1.game.GetRoom();
        const gridEntities = [];
        for (const gridIndex of getAllGridIndexes()) {
          const gridEntity = room.GetGridEntity(gridIndex);
          if (gridEntity !== void 0) {
            gridEntities.push(gridEntity);
          }
        }
        return gridEntities;
      }
      function getGridEntitiesInRadius(targetPosition, radius) {
        radius = Math.abs(radius);
        const topLeftOffset = constants_1.VectorOne.mul(-radius);
        const mostTopLeftPosition = targetPosition.add(topLeftOffset);
        const room = cachedClasses_1.game.GetRoom();
        const diameter = radius * 2;
        const iterations = Math.ceil(diameter / constants_1.DISTANCE_OF_GRID_TILE);
        const separation = diameter / iterations;
        const gridEntities = [];
        const registeredGridIndexes = /* @__PURE__ */ new Set();
        for (const x of (0, utils_1.iRange)(iterations)) {
          for (const y of (0, utils_1.iRange)(iterations)) {
            const position = mostTopLeftPosition.add(Vector(x * separation, y * separation));
            const gridIndex = room.GetGridIndex(position);
            const gridEntity = room.GetGridEntityFromPos(position);
            if (gridEntity === void 0 || registeredGridIndexes.has(gridIndex)) {
              continue;
            }
            registeredGridIndexes.add(gridIndex);
            const { topLeft, bottomRight } = getGridEntityCollisionPoints(gridEntity);
            if ((0, math_1.isCircleIntersectingRectangle)(targetPosition, radius, topLeft, bottomRight)) {
              gridEntities.push(gridEntity);
            }
          }
        }
        return gridEntities;
      }
      exports2.getGridEntitiesInRadius = getGridEntitiesInRadius;
      function getGridEntitiesMap(...gridEntityTypes) {
        const gridEntities = getGridEntities(...gridEntityTypes);
        const gridEntityMap = /* @__PURE__ */ new Map();
        for (const gridEntity of gridEntities) {
          const gridIndex = gridEntity.GetGridIndex();
          gridEntityMap.set(gridIndex, gridEntity);
        }
        return gridEntityMap;
      }
      exports2.getGridEntitiesMap = getGridEntitiesMap;
      function getGridEntityANM2Path(gridEntityType) {
        const gridEntityANM2Name = getGridEntityANM2Name(gridEntityType);
        return `gfx/grid/${gridEntityANM2Name}`;
      }
      exports2.getGridEntityANM2Path = getGridEntityANM2Path;
      function getGridEntityANM2Name(gridEntityType) {
        switch (gridEntityType) {
          case isaac_typescript_definitions_1.GridEntityType.DECORATION: {
            return getGridEntityANM2NameDecoration();
          }
          default: {
            return gridEntityTypeToANM2Name_1.GRID_ENTITY_TYPE_TO_ANM2_NAME[gridEntityType];
          }
        }
      }
      function getGridEntityANM2NameDecoration() {
        const room = cachedClasses_1.game.GetRoom();
        const backdropType = room.GetBackdropType();
        switch (backdropType) {
          case isaac_typescript_definitions_1.BackdropType.BASEMENT:
          case isaac_typescript_definitions_1.BackdropType.CELLAR:
          case isaac_typescript_definitions_1.BackdropType.BURNING_BASEMENT:
          case isaac_typescript_definitions_1.BackdropType.DOWNPOUR_ENTRANCE:
          case isaac_typescript_definitions_1.BackdropType.ISAACS_BEDROOM:
          case isaac_typescript_definitions_1.BackdropType.CLOSET: {
            return "Props_01_Basement.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.CAVES:
          case isaac_typescript_definitions_1.BackdropType.CATACOMBS:
          case isaac_typescript_definitions_1.BackdropType.FLOODED_CAVES:
          case isaac_typescript_definitions_1.BackdropType.MINES_ENTRANCE: {
            return "Props_03_Caves.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.DEPTHS:
          case isaac_typescript_definitions_1.BackdropType.NECROPOLIS:
          case isaac_typescript_definitions_1.BackdropType.DANK_DEPTHS:
          case isaac_typescript_definitions_1.BackdropType.SACRIFICE:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_ENTRANCE:
          case isaac_typescript_definitions_1.BackdropType.CORPSE_ENTRANCE:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_2:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_3:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_4:
          case isaac_typescript_definitions_1.BackdropType.CLOSET_B:
          case isaac_typescript_definitions_1.BackdropType.DARK_CLOSET: {
            return "Props_05_Depths.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.WOMB:
          case isaac_typescript_definitions_1.BackdropType.SCARRED_WOMB: {
            return "Props_07_The Womb.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.UTERO: {
            return "Props_07_Utero.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.BLUE_WOMB:
          case isaac_typescript_definitions_1.BackdropType.BLUE_WOMB_PASS: {
            return "Props_07_The Womb_blue.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.SHEOL:
          case isaac_typescript_definitions_1.BackdropType.GEHENNA: {
            return "Props_09_Sheol.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.CATHEDRAL: {
            return "Props_10_Cathedral.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.CHEST: {
            return "Props_11_The Chest.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.GREED_SHOP: {
            return "Props_12_Greed.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.DOWNPOUR: {
            return "props_01x_downpour.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.MINES:
          case isaac_typescript_definitions_1.BackdropType.ASHPIT:
          case isaac_typescript_definitions_1.BackdropType.MINES_SHAFT:
          case isaac_typescript_definitions_1.BackdropType.ASHPIT_SHAFT: {
            return "props_03x_mines.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.CORPSE:
          case isaac_typescript_definitions_1.BackdropType.CORPSE_2:
          case isaac_typescript_definitions_1.BackdropType.CORPSE_3:
          case isaac_typescript_definitions_1.BackdropType.MORTIS: {
            return "props_07_the corpse.anm2";
          }
          case isaac_typescript_definitions_1.BackdropType.DROSS: {
            return "props_02x_dross.anm2";
          }
          default: {
            return "Props_01_Basement.anm2";
          }
        }
      }
      function getGridEntityCollisionPoints(gridEntity) {
        const topLeft = Vector(gridEntity.Position.X - constants_1.DISTANCE_OF_GRID_TILE / 2, gridEntity.Position.Y - constants_1.DISTANCE_OF_GRID_TILE / 2);
        const bottomRight = Vector(gridEntity.Position.X + constants_1.DISTANCE_OF_GRID_TILE / 2, gridEntity.Position.Y + constants_1.DISTANCE_OF_GRID_TILE / 2);
        return { topLeft, bottomRight };
      }
      exports2.getGridEntityCollisionPoints = getGridEntityCollisionPoints;
      function getGridEntityID(gridEntity) {
        const gridEntityType = gridEntity.GetType();
        const variant = gridEntity.GetVariant();
        return `${gridEntityType}.${variant}`;
      }
      exports2.getGridEntityID = getGridEntityID;
      function getGridEntityIDFromConstituents(gridEntityType, variant) {
        return `${gridEntityType}.${variant}`;
      }
      exports2.getGridEntityIDFromConstituents = getGridEntityIDFromConstituents;
      function getMatchingGridEntities(gridEntityType, variant) {
        const gridEntities = getGridEntities(gridEntityType);
        return gridEntities.filter((gridEntity) => gridEntity.GetVariant() === variant);
      }
      exports2.getMatchingGridEntities = getMatchingGridEntities;
      function getRockPNGPath() {
        const rockPNGName = getRockPNGName();
        return `gfx/grid/${rockPNGName}`;
      }
      exports2.getRockPNGPath = getRockPNGPath;
      function getRockPNGName() {
        const room = cachedClasses_1.game.GetRoom();
        const backdropType = room.GetBackdropType();
        switch (backdropType) {
          case isaac_typescript_definitions_1.BackdropType.BASEMENT:
          case isaac_typescript_definitions_1.BackdropType.CHEST: {
            return "rocks_basement.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CELLAR: {
            return "rocks_cellar.png";
          }
          case isaac_typescript_definitions_1.BackdropType.BURNING_BASEMENT: {
            return "rocks_burningbasement.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CAVES: {
            return "rocks_caves.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CATACOMBS: {
            return "rocks_catacombs.png";
          }
          case isaac_typescript_definitions_1.BackdropType.FLOODED_CAVES: {
            return "rocks_drownedcaves.png";
          }
          case isaac_typescript_definitions_1.BackdropType.DEPTHS:
          case isaac_typescript_definitions_1.BackdropType.NECROPOLIS:
          case isaac_typescript_definitions_1.BackdropType.DANK_DEPTHS:
          case isaac_typescript_definitions_1.BackdropType.SACRIFICE:
          case isaac_typescript_definitions_1.BackdropType.DARK_CLOSET: {
            return "rocks_depths.png";
          }
          case isaac_typescript_definitions_1.BackdropType.WOMB: {
            return "rocks_womb.png";
          }
          case isaac_typescript_definitions_1.BackdropType.UTERO: {
            return "rocks_utero.png";
          }
          case isaac_typescript_definitions_1.BackdropType.SCARRED_WOMB: {
            return "rocks_scarredwomb.png";
          }
          case isaac_typescript_definitions_1.BackdropType.BLUE_WOMB:
          case isaac_typescript_definitions_1.BackdropType.BLUE_WOMB_PASS: {
            return "rocks_bluewomb.png";
          }
          case isaac_typescript_definitions_1.BackdropType.SHEOL:
          case isaac_typescript_definitions_1.BackdropType.DARK_ROOM: {
            return "rocks_sheol.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CATHEDRAL:
          case isaac_typescript_definitions_1.BackdropType.PLANETARIUM: {
            return "rocks_cathedral.png";
          }
          case isaac_typescript_definitions_1.BackdropType.SECRET:
          case isaac_typescript_definitions_1.BackdropType.MINES:
          case isaac_typescript_definitions_1.BackdropType.MINES_ENTRANCE:
          case isaac_typescript_definitions_1.BackdropType.MINES_SHAFT: {
            return "rocks_secretroom.png";
          }
          case isaac_typescript_definitions_1.BackdropType.DOWNPOUR:
          case isaac_typescript_definitions_1.BackdropType.DOWNPOUR_ENTRANCE: {
            return "rocks_downpour.png";
          }
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_ENTRANCE:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_2:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_3:
          case isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_4: {
            return "rocks_mausoleum.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CORPSE:
          case isaac_typescript_definitions_1.BackdropType.MORTIS: {
            return "rocks_corpse.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CORPSE_ENTRANCE: {
            return "rocks_corpseentrance.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CORPSE_2: {
            return "rocks_corpse2.png";
          }
          case isaac_typescript_definitions_1.BackdropType.CORPSE_3: {
            return "rocks_corpse3.png";
          }
          case isaac_typescript_definitions_1.BackdropType.DROSS: {
            return "rocks_dross.png";
          }
          case isaac_typescript_definitions_1.BackdropType.ASHPIT:
          case isaac_typescript_definitions_1.BackdropType.ASHPIT_SHAFT: {
            return "rocks_ashpit.png";
          }
          case isaac_typescript_definitions_1.BackdropType.GEHENNA: {
            return "rocks_gehenna.png";
          }
          default: {
            return "rocks_basement.png";
          }
        }
      }
      function getSurroundingGridEntities(gridEntity) {
        const room = cachedClasses_1.game.GetRoom();
        const gridIndex = gridEntity.GetGridIndex();
        const surroundingGridIndexes = getSurroundingGridIndexes(gridIndex);
        const surroundingGridEntities = [];
        for (const surroundingGridIndex of surroundingGridIndexes) {
          const surroundingGridEntity = room.GetGridEntity(surroundingGridIndex);
          if (surroundingGridEntity !== void 0) {
            surroundingGridEntities.push(surroundingGridEntity);
          }
        }
        return surroundingGridEntities;
      }
      exports2.getSurroundingGridEntities = getSurroundingGridEntities;
      function getSurroundingGridIndexes(gridIndex) {
        const room = cachedClasses_1.game.GetRoom();
        const gridWidth = room.GetGridWidth();
        return [
          gridIndex - gridWidth - 1,
          gridIndex - gridWidth,
          gridIndex - gridWidth + 1,
          gridIndex - 1,
          gridIndex + 1,
          gridIndex + gridWidth - 1,
          gridIndex + gridWidth,
          gridIndex + gridWidth + 1
          // Bottom-right
        ];
      }
      exports2.getSurroundingGridIndexes = getSurroundingGridIndexes;
      function getTopLeftWall() {
        const room = cachedClasses_1.game.GetRoom();
        const topLeftWallGridIndex = getTopLeftWallGridIndex();
        return room.GetGridEntity(topLeftWallGridIndex);
      }
      exports2.getTopLeftWall = getTopLeftWall;
      function getTopLeftWallGridIndex() {
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        const topLeftWallGridIndex = roomShapeToTopLeftWallGridIndexMap_1.ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP.get(roomShape);
        return topLeftWallGridIndex ?? roomShapeToTopLeftWallGridIndexMap_1.DEFAULT_TOP_LEFT_WALL_GRID_INDEX;
      }
      exports2.getTopLeftWallGridIndex = getTopLeftWallGridIndex;
      function isGridEntityBreakableByExplosion(gridEntity) {
        const gridEntityType = gridEntity.GetType();
        const variant = gridEntity.GetVariant();
        const gridEntityTypeVariant = `${gridEntityType}.${variant}`;
        return BREAKABLE_GRID_ENTITY_TYPES_BY_EXPLOSIONS.has(gridEntityType) || BREAKABLE_GRID_ENTITY_TYPES_VARIANTS_BY_EXPLOSIONS.has(gridEntityTypeVariant);
      }
      exports2.isGridEntityBreakableByExplosion = isGridEntityBreakableByExplosion;
      function isGridEntityBroken(gridEntity) {
        const gridEntityType = gridEntity.GetType();
        const brokenState = gridEntityTypeToBrokenStateMap_1.GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP.get(gridEntityType);
        return gridEntity.State === brokenState;
      }
      exports2.isGridEntityBroken = isGridEntityBroken;
      function isGridEntityXMLType(num) {
        return GRID_ENTITY_XML_TYPES_SET.has(num);
      }
      exports2.isGridEntityXMLType = isGridEntityXMLType;
      function isGridIndexAdjacentToDoor(gridIndex) {
        const room = cachedClasses_1.game.GetRoom();
        const surroundingGridIndexes = getSurroundingGridIndexes(gridIndex);
        const gridIndexes = [gridIndex, ...surroundingGridIndexes];
        for (const gridIndexToInspect of gridIndexes) {
          const gridEntity = room.GetGridEntity(gridIndexToInspect);
          if (gridEntity !== void 0) {
            const door = gridEntity.ToDoor();
            if (door !== void 0) {
              return true;
            }
          }
        }
        return false;
      }
      exports2.isGridIndexAdjacentToDoor = isGridIndexAdjacentToDoor;
      function isPoopGridEntityXMLType(gridEntityXMLType) {
        return poopGridEntityXMLTypesSet_1.POOP_GRID_ENTITY_XML_TYPES_SET.has(gridEntityXMLType);
      }
      exports2.isPoopGridEntityXMLType = isPoopGridEntityXMLType;
      function isPostBossVoidPortal(gridEntity) {
        const saveState = gridEntity.GetSaveState();
        return saveState.Type === isaac_typescript_definitions_1.GridEntityType.TRAPDOOR && saveState.Variant === isaac_typescript_definitions_1.TrapdoorVariant.VOID_PORTAL && saveState.VarData === 1;
      }
      exports2.isPostBossVoidPortal = isPostBossVoidPortal;
      function removeAllGridEntitiesExcept(...gridEntityTypes) {
        const gridEntityTypeExceptions = new ReadonlySet_1.ReadonlySet(gridEntityTypes);
        const gridEntities = getGridEntities();
        const removedGridEntities = [];
        for (const gridEntity of gridEntities) {
          const gridEntityType = gridEntity.GetType();
          if (!gridEntityTypeExceptions.has(gridEntityType)) {
            removeGridEntity(gridEntity, false);
            removedGridEntities.push(gridEntity);
          }
        }
        if (removedGridEntities.length > 0) {
          (0, rooms_1.roomUpdateSafe)();
        }
        return removedGridEntities;
      }
      exports2.removeAllGridEntitiesExcept = removeAllGridEntitiesExcept;
      function removeAllMatchingGridEntities(...gridEntityType) {
        const gridEntities = getGridEntities(...gridEntityType);
        if (gridEntities.length === 0) {
          return [];
        }
        for (const gridEntity of gridEntities) {
          removeGridEntity(gridEntity, false);
        }
        (0, rooms_1.roomUpdateSafe)();
        return gridEntities;
      }
      exports2.removeAllMatchingGridEntities = removeAllMatchingGridEntities;
      function removeEntitiesSpawnedFromGridEntity(entities, gridEntity) {
        const entitiesFromGridEntity = entities.filter((entity) => entity.FrameCount === 0 && (0, vector_1.vectorEquals)(entity.Position, gridEntity.Position));
        (0, entities_1.removeEntities)(entitiesFromGridEntity);
      }
      exports2.removeEntitiesSpawnedFromGridEntity = removeEntitiesSpawnedFromGridEntity;
      function removeGridEntities(gridEntities, updateRoom, cap) {
        if (gridEntities.length === 0) {
          return [];
        }
        const gridEntitiesRemoved = [];
        for (const gridEntity of gridEntities) {
          removeGridEntity(gridEntity, false);
          gridEntitiesRemoved.push(gridEntity);
          if (cap !== void 0 && gridEntitiesRemoved.length >= cap) {
            break;
          }
        }
        if (updateRoom) {
          (0, rooms_1.roomUpdateSafe)();
        }
        return gridEntitiesRemoved;
      }
      exports2.removeGridEntities = removeGridEntities;
      function removeGridEntity(gridEntityOrGridIndex, updateRoom) {
        const room = cachedClasses_1.game.GetRoom();
        const gridEntity = (0, types_1.isInteger)(gridEntityOrGridIndex) ? room.GetGridEntity(gridEntityOrGridIndex) : gridEntityOrGridIndex;
        if (gridEntity === void 0) {
          return;
        }
        const gridEntityType = gridEntity.GetType();
        const variant = gridEntity.GetVariant();
        const position = gridEntity.Position;
        const gridIndex = (0, types_1.isInteger)(gridEntityOrGridIndex) ? gridEntityOrGridIndex : gridEntityOrGridIndex.GetGridIndex();
        room.RemoveGridEntity(gridIndex, 0, false);
        if (updateRoom) {
          (0, rooms_1.roomUpdateSafe)();
        }
        if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.STATUE) {
          const effectVariant = variant === isaac_typescript_definitions_1.StatueVariant.DEVIL ? isaac_typescript_definitions_1.EffectVariant.DEVIL : isaac_typescript_definitions_1.EffectVariant.ANGEL;
          const effects = (0, entitiesSpecific_1.getEffects)(effectVariant);
          const effectsOnTile = effects.filter((effect) => (0, vector_1.vectorEquals)(effect.Position, position));
          (0, entities_1.removeEntities)(effectsOnTile);
        }
      }
      exports2.removeGridEntity = removeGridEntity;
      function setGridEntityInvisible(gridEntity) {
        const sprite = gridEntity.GetSprite();
        sprite.Reset();
      }
      exports2.setGridEntityInvisible = setGridEntityInvisible;
      function setGridEntityType(gridEntity, gridEntityType) {
        gridEntity.SetType(gridEntityType);
        const sprite = gridEntity.GetSprite();
        const anm2Path = getGridEntityANM2Path(gridEntityType);
        if (anm2Path === void 0) {
          return;
        }
        sprite.Load(anm2Path, false);
        if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.ROCK) {
          const pngPath = getRockPNGPath();
          sprite.ReplaceSpritesheet(0, pngPath);
        }
        sprite.LoadGraphics();
        const defaultAnimation = sprite.GetDefaultAnimation();
        sprite.Play(defaultAnimation, true);
      }
      exports2.setGridEntityType = setGridEntityType;
      function spawnGiantPoop(topLeftGridIndex) {
        const room = cachedClasses_1.game.GetRoom();
        const gridWidth = room.GetGridWidth();
        const topRightGridIndex = topLeftGridIndex + 1;
        const bottomLeftGridIndex = topLeftGridIndex + gridWidth;
        const bottomRightGridIndex = bottomLeftGridIndex + 1;
        for (const gridIndex of [
          topLeftGridIndex,
          topRightGridIndex,
          bottomLeftGridIndex,
          bottomRightGridIndex
        ]) {
          const gridEntity = room.GetGridEntity(gridIndex);
          if (gridEntity !== void 0) {
            return false;
          }
        }
        const topLeft = spawnGridEntityWithVariant(isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_TOP_LEFT, topLeftGridIndex);
        const topRight = spawnGridEntityWithVariant(isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_TOP_RIGHT, topRightGridIndex);
        const bottomLeft = spawnGridEntityWithVariant(isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_BOTTOM_LEFT, bottomLeftGridIndex);
        const bottomRight = spawnGridEntityWithVariant(isaac_typescript_definitions_1.GridEntityType.POOP, isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_BOTTOM_RIGHT, bottomRightGridIndex);
        return topLeft !== void 0 && topLeft.GetType() === isaac_typescript_definitions_1.GridEntityType.POOP && topLeft.GetVariant() === isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_TOP_LEFT && topRight !== void 0 && topRight.GetType() === isaac_typescript_definitions_1.GridEntityType.POOP && topRight.GetVariant() === isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_TOP_RIGHT && bottomLeft !== void 0 && bottomLeft.GetType() === isaac_typescript_definitions_1.GridEntityType.POOP && bottomLeft.GetVariant() === isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_BOTTOM_LEFT && bottomRight !== void 0 && bottomRight.GetType() === isaac_typescript_definitions_1.GridEntityType.POOP && bottomRight.GetVariant() === isaac_typescript_definitions_1.PoopGridEntityVariant.GIANT_BOTTOM_RIGHT;
      }
      exports2.spawnGiantPoop = spawnGiantPoop;
      function spawnGridEntity(gridEntityType, gridIndexOrPosition, removeExistingGridEntity = true) {
        return spawnGridEntityWithVariant(gridEntityType, 0, gridIndexOrPosition, removeExistingGridEntity);
      }
      exports2.spawnGridEntity = spawnGridEntity;
      function spawnGridEntityWithVariant(gridEntityType, variant, gridIndexOrPosition, removeExistingGridEntity = true) {
        const room = cachedClasses_1.game.GetRoom();
        const existingGridEntity = (0, vector_1.isVector)(gridIndexOrPosition) ? room.GetGridEntityFromPos(gridIndexOrPosition) : room.GetGridEntity(gridIndexOrPosition);
        if (existingGridEntity !== void 0) {
          if (removeExistingGridEntity) {
            removeGridEntity(existingGridEntity, true);
          } else {
            return void 0;
          }
        }
        const position = (0, vector_1.isVector)(gridIndexOrPosition) ? gridIndexOrPosition : room.GetGridPosition(gridIndexOrPosition);
        const gridEntity = Isaac.GridSpawn(gridEntityType, variant, position);
        if (gridEntity === void 0) {
          return gridEntity;
        }
        if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.PIT) {
          const pit = gridEntity.ToPit();
          if (pit !== void 0) {
            pit.UpdateCollision();
          }
        } else if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.WALL) {
          gridEntity.CollisionClass = isaac_typescript_definitions_1.GridCollisionClass.WALL;
        }
        return gridEntity;
      }
      exports2.spawnGridEntityWithVariant = spawnGridEntityWithVariant;
      function spawnVoidPortal(gridIndex) {
        const voidPortal = spawnGridEntityWithVariant(isaac_typescript_definitions_1.GridEntityType.TRAPDOOR, isaac_typescript_definitions_1.TrapdoorVariant.VOID_PORTAL, gridIndex);
        if (voidPortal === void 0) {
          return voidPortal;
        }
        voidPortal.VarData = 1;
        const sprite = voidPortal.GetSprite();
        sprite.Load("gfx/grid/voidtrapdoor.anm2", true);
        return voidPortal;
      }
      exports2.spawnVoidPortal = spawnVoidPortal;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNewRoomEarly.js
  var require_PostNewRoomEarly = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNewRoomEarly.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNewRoomEarly = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var gridEntities_1 = require_gridEntities();
      var log_1 = require_log();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNewRoomEarly = class extends CustomCallback_1.CustomCallback {
        currentRoomTopLeftWallPtrHash = null;
        /** The wall entity directly to the right of the top-left wall. */
        currentRoomTopLeftWallPtrHash2 = null;
        constructor() {
          super();
          this.callbacksUsed = [
            // 19
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_NEW_ROOM, this.postNewRoom],
            // 24
            [isaac_typescript_definitions_1.ModCallback.PRE_ENTITY_SPAWN, this.preEntitySpawn]
          ];
        }
        shouldFire = shouldFire_1.shouldFireRoom;
        // ModCallback.POST_NEW_ROOM (19)
        postNewRoom = () => {
          this.checkRoomChanged();
        };
        // ModCallback.PRE_ENTITY_SPAWN (24)
        preEntitySpawn = () => {
          this.checkRoomChanged();
          return void 0;
        };
        checkRoomChanged() {
          if (this.isNewRoom()) {
            const room = cachedClasses_1.game.GetRoom();
            const roomType = room.GetType();
            this.fire(roomType);
          }
        }
        isNewRoom() {
          const room = cachedClasses_1.game.GetRoom();
          const topLeftWallGridIndex = (0, gridEntities_1.getTopLeftWallGridIndex)();
          const rightOfTopWallGridIndex = topLeftWallGridIndex + 1;
          let topLeftWall = room.GetGridEntity(topLeftWallGridIndex);
          let topLeftWall2 = room.GetGridEntity(rightOfTopWallGridIndex);
          if (topLeftWall === void 0) {
            topLeftWall = (0, gridEntities_1.spawnGridEntity)(isaac_typescript_definitions_1.GridEntityType.WALL, topLeftWallGridIndex);
            if (topLeftWall === void 0) {
              (0, log_1.logError)("Failed to spawn a new wall for the POST_NEW_ROOM_EARLY callback (on the first try).");
              return false;
            }
          }
          if (topLeftWall2 === void 0) {
            topLeftWall2 = (0, gridEntities_1.spawnGridEntity)(isaac_typescript_definitions_1.GridEntityType.WALL, rightOfTopWallGridIndex);
            if (topLeftWall2 === void 0) {
              (0, log_1.logError)("Failed to spawn a new wall for the POST_NEW_ROOM_EARLY callback (on the second try).");
              return false;
            }
          }
          const oldTopLeftWallPtrHash = this.currentRoomTopLeftWallPtrHash;
          const oldTopLeftWallPtrHash2 = this.currentRoomTopLeftWallPtrHash2;
          this.currentRoomTopLeftWallPtrHash = GetPtrHash(topLeftWall);
          this.currentRoomTopLeftWallPtrHash2 = GetPtrHash(topLeftWall2);
          return oldTopLeftWallPtrHash !== this.currentRoomTopLeftWallPtrHash || oldTopLeftWallPtrHash2 !== this.currentRoomTopLeftWallPtrHash2;
        }
      };
      exports2.PostNewRoomEarly = PostNewRoomEarly;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostNewRoomReordered.js
  var require_PostNewRoomReordered = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostNewRoomReordered.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostNewRoomReordered = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostNewRoomReordered = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.GAME_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFireRoom;
      };
      exports2.PostNewRoomReordered = PostNewRoomReordered;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPEffectUpdateReordered.js
  var require_PostPEffectUpdateReordered = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPEffectUpdateReordered.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPEffectUpdateReordered = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPEffectUpdateReordered = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PLAYER_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
      };
      exports2.PostPEffectUpdateReordered = PostPEffectUpdateReordered;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupChanged.js
  var require_PostPickupChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupChanged = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPickupChanged = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PICKUP_CHANGE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
      };
      exports2.PostPickupChanged = PostPickupChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupCollect.js
  var require_PostPickupCollect = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupCollect.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupCollect = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var players_1 = require_players();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostPickupCollect = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 36
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_RENDER, this.postPickupRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_RENDER (36)
        postPickupRender = (pickup) => {
          const sprite = pickup.GetSprite();
          const animation = sprite.GetAnimation();
          if (animation !== "Collect") {
            return;
          }
          const index = GetPtrHash(pickup);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            const player = (0, players_1.getClosestPlayer)(pickup.Position);
            this.fire(pickup, player);
          }
        };
      };
      exports2.PostPickupCollect = PostPickupCollect;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupInitFilter.js
  var require_PostPickupInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPickupInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 34
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_INIT, this.postPickupInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_INIT (34)
        postPickupInit = (pickup) => {
          this.fire(pickup);
        };
      };
      exports2.PostPickupInitFilter = PostPickupInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupInitFirst.js
  var require_PostPickupInitFirst = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupInitFirst.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupInitFirst = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var frames_1 = require_frames();
      var roomData_1 = require_roomData();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPickupInitFirst = class extends CustomCallback_1.CustomCallback {
        v = {
          room: {
            firedSet: /* @__PURE__ */ new Set()
          }
        };
        constructor() {
          super();
          this.callbacksUsed = [
            // 34
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_INIT, this.postPickupInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_INIT (34)
        postPickupInit = (pickup) => {
          const roomVisitedCount = (0, roomData_1.getRoomVisitedCount)();
          if ((0, frames_1.isAfterRoomFrame)(0) || roomVisitedCount === 0) {
            this.fire(pickup);
          }
        };
      };
      exports2.PostPickupInitFirst = PostPickupInitFirst;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupInitLate.js
  var require_PostPickupInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostPickupInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 35
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_UPDATE, this.postPickupUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_UPDATE (35)
        postPickupUpdate = (pickup) => {
          const index = GetPtrHash(pickup);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            this.fire(pickup);
          }
        };
      };
      exports2.PostPickupInitLate = PostPickupInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupRenderFilter.js
  var require_PostPickupRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPickupRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 36
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_RENDER, this.postPickupRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_RENDER (36)
        postPickupRender = (pickup, renderOffset) => {
          this.fire(pickup, renderOffset);
        };
      };
      exports2.PostPickupRenderFilter = PostPickupRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupSelectionFilter.js
  var require_PostPickupSelectionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupSelectionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupSelectionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CustomCallback_1 = require_CustomCallback();
      var PostPickupSelectionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 37
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_SELECTION, this.postPickupSelection]
          ];
        }
        /**
         * We cannot use the `shouldFirePickup` helper function because in the case of non-collectibles,
         * `EntityPickup.Type` and `EntityPickup.Variant` and `EntityPickup.SubType` will all be set to 0
         * in this callback.
         */
        shouldFire = (fireArgs, optionalArgs) => {
          const [_pickup, pickupVariant, subType] = fireArgs;
          const [callbackPickupVariant, callbackPickupSubType] = optionalArgs;
          return (callbackPickupVariant === void 0 || callbackPickupVariant === pickupVariant) && (callbackPickupSubType === void 0 || callbackPickupSubType === subType);
        };
        // ModCallback.POST_PICKUP_SELECTION (37)
        postPickupSelection = (pickup, variant, subType) => this.fire(pickup, variant, subType);
      };
      exports2.PostPickupSelectionFilter = PostPickupSelectionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupStateChanged.js
  var require_PostPickupStateChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupStateChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupStateChanged = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          stateMap: new DefaultMap_1.DefaultMap((state) => state)
        }
      };
      var PostPickupStateChanged = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 35
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_UPDATE, this.postPickupUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_UPDATE (35)
        postPickupUpdate = (pickup) => {
          const ptrHash = GetPtrHash(pickup);
          const previousState = v.run.stateMap.getAndSetDefault(ptrHash, pickup.State);
          const currentState = pickup.State;
          v.run.stateMap.set(ptrHash, currentState);
          if (previousState !== currentState) {
            this.fire(pickup, previousState, currentState);
          }
        };
      };
      exports2.PostPickupStateChanged = PostPickupStateChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPickupUpdateFilter.js
  var require_PostPickupUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPickupUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPickupUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPickupUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 35
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_UPDATE, this.postPickupUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePickup;
        // ModCallback.POST_PICKUP_UPDATE (35)
        postPickupUpdate = (pickup) => {
          this.fire(pickup);
        };
      };
      exports2.PostPickupUpdateFilter = PostPickupUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/functions/gridEntitiesSpecific.js
  var require_gridEntitiesSpecific = __commonJS({
    "node_modules/isaacscript-common/dist/functions/gridEntitiesSpecific.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnTrapdoorWithVariant = exports2.spawnTrapdoor = exports2.spawnTeleporterWithVariant = exports2.spawnTeleporter = exports2.spawnTNTWithVariant = exports2.spawnTNT = exports2.spawnSpikesWithVariant = exports2.spawnSpikes = exports2.spawnRockWithVariant = exports2.spawnRock = exports2.spawnPressurePlateWithVariant = exports2.spawnPressurePlate = exports2.spawnPoopWithVariant = exports2.spawnPoop = exports2.spawnPitWithVariant = exports2.spawnPit = exports2.spawnDoorWithVariant = exports2.spawnDoor = exports2.spawnCrawlSpaceWithVariant = exports2.spawnCrawlSpace = exports2.removeAllTrapdoors = exports2.removeAllTeleporters = exports2.removeAllTNT = exports2.removeAllSpikes = exports2.removeAllRocks = exports2.removeAllPressurePlates = exports2.removeAllPoops = exports2.removeAllPits = exports2.removeAllCrawlSpaces = exports2.getTrapdoors = exports2.getTeleporters = exports2.getTNT = exports2.getSpikes = exports2.getRocks = exports2.getPressurePlates = exports2.getPoops = exports2.getPits = exports2.getCrawlSpaces = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntities_1 = require_gridEntities();
      var utils_1 = require_utils();
      function getCrawlSpaces(crawlSpaceVariant = -1) {
        if (crawlSpaceVariant === -1) {
          return (0, gridEntities_1.getGridEntities)(isaac_typescript_definitions_1.GridEntityType.CRAWL_SPACE);
        }
        return (0, gridEntities_1.getMatchingGridEntities)(isaac_typescript_definitions_1.GridEntityType.CRAWL_SPACE, crawlSpaceVariant);
      }
      exports2.getCrawlSpaces = getCrawlSpaces;
      function getPits(pitVariant = -1) {
        const pits = [];
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const pit = gridEntity.ToPit();
          if (pit !== void 0) {
            const thisPitVariant = pit.GetVariant();
            if (pitVariant === -1 || pitVariant === thisPitVariant) {
              pits.push(pit);
            }
          }
        }
        return pits;
      }
      exports2.getPits = getPits;
      function getPoops(poopVariant = -1) {
        const poops = [];
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const poop = gridEntity.ToPoop();
          if (poop !== void 0) {
            const thisPoopVariant = poop.GetVariant();
            if (poopVariant === -1 || poopVariant === thisPoopVariant) {
              poops.push(poop);
            }
          }
        }
        return poops;
      }
      exports2.getPoops = getPoops;
      function getPressurePlates(pressurePlateVariant = -1) {
        const pressurePlates = [];
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const pressurePlate = gridEntity.ToPressurePlate();
          if (pressurePlate !== void 0) {
            const thisPressurePlateVariant = pressurePlate.GetVariant();
            if (pressurePlateVariant === -1 || pressurePlateVariant === thisPressurePlateVariant) {
              pressurePlates.push(pressurePlate);
            }
          }
        }
        return pressurePlates;
      }
      exports2.getPressurePlates = getPressurePlates;
      function getRocks(variant = -1) {
        const rocks = [];
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const rock = gridEntity.ToRock();
          if (rock !== void 0) {
            const thisVariant = rock.GetVariant();
            if (variant === -1 || variant === thisVariant) {
              rocks.push(rock);
            }
          }
        }
        return rocks;
      }
      exports2.getRocks = getRocks;
      function getSpikes(variant = -1) {
        const spikes = [];
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const spike = gridEntity.ToSpikes();
          if (spike !== void 0) {
            const thisVariant = spike.GetVariant();
            if (variant === -1 || variant === thisVariant) {
              spikes.push(spike);
            }
          }
        }
        return spikes;
      }
      exports2.getSpikes = getSpikes;
      function getTNT(variant = -1) {
        const tntArray = [];
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const tnt = gridEntity.ToTNT();
          if (tnt !== void 0) {
            const thisVariant = tnt.GetVariant();
            if (variant === -1 || variant === thisVariant) {
              tntArray.push(tnt);
            }
          }
        }
        return tntArray;
      }
      exports2.getTNT = getTNT;
      function getTeleporters(variant = -1) {
        if (variant === -1) {
          return (0, gridEntities_1.getGridEntities)(isaac_typescript_definitions_1.GridEntityType.TELEPORTER);
        }
        return (0, gridEntities_1.getMatchingGridEntities)(isaac_typescript_definitions_1.GridEntityType.TELEPORTER, variant);
      }
      exports2.getTeleporters = getTeleporters;
      function getTrapdoors(trapdoorVariant = -1) {
        if (trapdoorVariant === -1) {
          return (0, gridEntities_1.getGridEntities)(isaac_typescript_definitions_1.GridEntityType.TRAPDOOR);
        }
        return (0, gridEntities_1.getMatchingGridEntities)(isaac_typescript_definitions_1.GridEntityType.TRAPDOOR, trapdoorVariant);
      }
      exports2.getTrapdoors = getTrapdoors;
      function removeAllCrawlSpaces(crawlSpaceVariant = -1, updateRoom = false, cap) {
        const crawlSpaces = getCrawlSpaces(crawlSpaceVariant);
        return (0, gridEntities_1.removeGridEntities)(crawlSpaces, updateRoom, cap);
      }
      exports2.removeAllCrawlSpaces = removeAllCrawlSpaces;
      function removeAllPits(pitVariant = -1, updateRoom = false, cap) {
        const pits = getPits(pitVariant);
        return (0, gridEntities_1.removeGridEntities)(pits, updateRoom, cap);
      }
      exports2.removeAllPits = removeAllPits;
      function removeAllPoops(poopVariant = -1, updateRoom = false, cap) {
        const poops = getPoops(poopVariant);
        return (0, gridEntities_1.removeGridEntities)(poops, updateRoom, cap);
      }
      exports2.removeAllPoops = removeAllPoops;
      function removeAllPressurePlates(pressurePlateVariant = -1, updateRoom = false, cap) {
        const pressurePlates = getPressurePlates(pressurePlateVariant);
        return (0, gridEntities_1.removeGridEntities)(pressurePlates, updateRoom, cap);
      }
      exports2.removeAllPressurePlates = removeAllPressurePlates;
      function removeAllRocks(variant = -1, updateRoom = false, cap) {
        const rocks = getRocks(variant);
        return (0, gridEntities_1.removeGridEntities)(rocks, updateRoom, cap);
      }
      exports2.removeAllRocks = removeAllRocks;
      function removeAllSpikes(variant = -1, updateRoom = false, cap) {
        const spikes = getSpikes(variant);
        return (0, gridEntities_1.removeGridEntities)(spikes, updateRoom, cap);
      }
      exports2.removeAllSpikes = removeAllSpikes;
      function removeAllTNT(variant = -1, updateRoom = false, cap) {
        const tnt = getTNT(variant);
        return (0, gridEntities_1.removeGridEntities)(tnt, updateRoom, cap);
      }
      exports2.removeAllTNT = removeAllTNT;
      function removeAllTeleporters(variant = -1, updateRoom = false, cap) {
        const teleporters = getTeleporters(variant);
        return (0, gridEntities_1.removeGridEntities)(teleporters, updateRoom, cap);
      }
      exports2.removeAllTeleporters = removeAllTeleporters;
      function removeAllTrapdoors(trapdoorVariant = -1, updateRoom = false, cap) {
        const trapdoors = getTrapdoors(trapdoorVariant);
        return (0, gridEntities_1.removeGridEntities)(trapdoors, updateRoom, cap);
      }
      exports2.removeAllTrapdoors = removeAllTrapdoors;
      function spawnCrawlSpace(gridIndexOrPosition) {
        return spawnCrawlSpaceWithVariant(isaac_typescript_definitions_1.CrawlSpaceVariant.NORMAL, gridIndexOrPosition);
      }
      exports2.spawnCrawlSpace = spawnCrawlSpace;
      function spawnCrawlSpaceWithVariant(crawlSpaceVariant, gridIndexOrPosition) {
        return (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.CRAWL_SPACE, crawlSpaceVariant, gridIndexOrPosition);
      }
      exports2.spawnCrawlSpaceWithVariant = spawnCrawlSpaceWithVariant;
      function spawnDoor(gridIndexOrPosition) {
        return spawnDoorWithVariant(isaac_typescript_definitions_1.DoorVariant.UNSPECIFIED, gridIndexOrPosition);
      }
      exports2.spawnDoor = spawnDoor;
      function spawnDoorWithVariant(doorVariant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.DOOR, doorVariant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const door = gridEntity.ToDoor();
        (0, utils_1.assertDefined)(door, "Failed to spawn a door.");
        return door;
      }
      exports2.spawnDoorWithVariant = spawnDoorWithVariant;
      function spawnPit(gridIndexOrPosition) {
        return spawnPitWithVariant(isaac_typescript_definitions_1.PitVariant.NORMAL, gridIndexOrPosition);
      }
      exports2.spawnPit = spawnPit;
      function spawnPitWithVariant(pitVariant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.PIT, pitVariant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const pit = gridEntity.ToPit();
        (0, utils_1.assertDefined)(pit, "Failed to spawn a pit.");
        return pit;
      }
      exports2.spawnPitWithVariant = spawnPitWithVariant;
      function spawnPoop(gridIndexOrPosition) {
        return spawnPoopWithVariant(isaac_typescript_definitions_1.PoopGridEntityVariant.NORMAL, gridIndexOrPosition);
      }
      exports2.spawnPoop = spawnPoop;
      function spawnPoopWithVariant(poopVariant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.POOP, poopVariant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const poop = gridEntity.ToPoop();
        (0, utils_1.assertDefined)(poop, "Failed to spawn a poop.");
        return poop;
      }
      exports2.spawnPoopWithVariant = spawnPoopWithVariant;
      function spawnPressurePlate(gridIndexOrPosition) {
        return spawnPressurePlateWithVariant(isaac_typescript_definitions_1.PressurePlateVariant.PRESSURE_PLATE, gridIndexOrPosition);
      }
      exports2.spawnPressurePlate = spawnPressurePlate;
      function spawnPressurePlateWithVariant(pressurePlateVariant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.PRESSURE_PLATE, pressurePlateVariant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const pressurePlate = gridEntity.ToPressurePlate();
        (0, utils_1.assertDefined)(pressurePlate, "Failed to spawn a pressure plate.");
        return pressurePlate;
      }
      exports2.spawnPressurePlateWithVariant = spawnPressurePlateWithVariant;
      function spawnRock(gridIndexOrPosition) {
        return spawnRockWithVariant(isaac_typescript_definitions_1.RockVariant.NORMAL, gridIndexOrPosition);
      }
      exports2.spawnRock = spawnRock;
      function spawnRockWithVariant(rockVariant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.ROCK, rockVariant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const rock = gridEntity.ToRock();
        (0, utils_1.assertDefined)(rock, "Failed to spawn a rock.");
        return rock;
      }
      exports2.spawnRockWithVariant = spawnRockWithVariant;
      function spawnSpikes(gridIndexOrPosition) {
        return spawnSpikesWithVariant(0, gridIndexOrPosition);
      }
      exports2.spawnSpikes = spawnSpikes;
      function spawnSpikesWithVariant(variant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.SPIKES, variant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const spikes = gridEntity.ToSpikes();
        (0, utils_1.assertDefined)(spikes, "Failed to spawn spikes.");
        return spikes;
      }
      exports2.spawnSpikesWithVariant = spawnSpikesWithVariant;
      function spawnTNT(gridIndexOrPosition) {
        return spawnTNTWithVariant(0, gridIndexOrPosition);
      }
      exports2.spawnTNT = spawnTNT;
      function spawnTNTWithVariant(variant, gridIndexOrPosition) {
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.TNT, variant, gridIndexOrPosition);
        if (gridEntity === void 0) {
          return void 0;
        }
        const tnt = gridEntity.ToTNT();
        (0, utils_1.assertDefined)(tnt, "Failed to spawn TNT.");
        return tnt;
      }
      exports2.spawnTNTWithVariant = spawnTNTWithVariant;
      function spawnTeleporter(gridIndexOrPosition) {
        return spawnTeleporterWithVariant(0, gridIndexOrPosition);
      }
      exports2.spawnTeleporter = spawnTeleporter;
      function spawnTeleporterWithVariant(variant, gridIndexOrPosition) {
        return (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.TELEPORTER, variant, gridIndexOrPosition);
      }
      exports2.spawnTeleporterWithVariant = spawnTeleporterWithVariant;
      function spawnTrapdoor(gridIndexOrPosition) {
        return spawnCrawlSpaceWithVariant(isaac_typescript_definitions_1.CrawlSpaceVariant.NORMAL, gridIndexOrPosition);
      }
      exports2.spawnTrapdoor = spawnTrapdoor;
      function spawnTrapdoorWithVariant(trapdoorVariant, gridIndexOrPosition) {
        return (0, gridEntities_1.spawnGridEntityWithVariant)(isaac_typescript_definitions_1.GridEntityType.TRAPDOOR, trapdoorVariant, gridIndexOrPosition);
      }
      exports2.spawnTrapdoorWithVariant = spawnTrapdoorWithVariant;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPitRender.js
  var require_PostPitRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPitRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPitRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPitRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePit;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const pit of (0, gridEntitiesSpecific_1.getPits)()) {
            this.fire(pit);
          }
        };
      };
      exports2.PostPitRender = PostPitRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPitUpdate.js
  var require_PostPitUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPitUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPitUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPitUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePit;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const pit of (0, gridEntitiesSpecific_1.getPits)()) {
            this.fire(pit);
          }
        };
      };
      exports2.PostPitUpdate = PostPitUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerHealth.js
  var require_playerHealth = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerHealth.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.wouldDamageTaintedMagdaleneNonTemporaryHeartContainers = exports2.setPlayerHealth = exports2.removeAllPlayerHealth = exports2.playerHasHealthLeft = exports2.playerConvertSoulHeartsToBlackHearts = exports2.playerConvertBlackHeartsToSoulHearts = exports2.newPlayerHealth = exports2.getTaintedMagdaleneNonTemporaryMaxHearts = exports2.getPlayerSoulHearts = exports2.getPlayerMaxHeartContainers = exports2.getPlayerLastHeart = exports2.getPlayerHearts = exports2.getPlayerHealthType = exports2.getPlayerHealth = exports2.getPlayerBlackHearts = exports2.getPlayerAvailableHeartSlots = exports2.doesPlayerHaveAllSoulHearts = exports2.doesPlayerHaveAllBlackHearts = exports2.canPickEternalHearts = exports2.addPlayerHealthType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var HealthType_1 = require_HealthType();
      var bitwise_1 = require_bitwise();
      var characters_1 = require_characters();
      var charge_1 = require_charge();
      var playerCollectibles_1 = require_playerCollectibles();
      var players_1 = require_players();
      var utils_1 = require_utils();
      function addPlayerHealthType(player, healthType, numHearts) {
        switch (healthType) {
          case HealthType_1.HealthType.RED: {
            player.AddHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.SOUL: {
            player.AddSoulHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.ETERNAL: {
            player.AddEternalHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.BLACK: {
            player.AddBlackHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.GOLDEN: {
            player.AddGoldenHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.BONE: {
            player.AddBoneHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.ROTTEN: {
            player.AddRottenHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.BROKEN: {
            player.AddBrokenHearts(numHearts);
            break;
          }
          case HealthType_1.HealthType.MAX_HEARTS: {
            player.AddMaxHearts(numHearts, false);
            break;
          }
        }
      }
      exports2.addPlayerHealthType = addPlayerHealthType;
      function canPickEternalHearts(player) {
        const eternalHearts = player.GetEternalHearts();
        const maxHearts = player.GetMaxHearts();
        const heartLimit = player.GetHeartLimit();
        return eternalHearts === 0 || maxHearts !== heartLimit;
      }
      exports2.canPickEternalHearts = canPickEternalHearts;
      function doesPlayerHaveAllBlackHearts(player) {
        const soulHearts = getPlayerSoulHearts(player);
        const blackHearts = getPlayerBlackHearts(player);
        return blackHearts > 0 && soulHearts === 0;
      }
      exports2.doesPlayerHaveAllBlackHearts = doesPlayerHaveAllBlackHearts;
      function doesPlayerHaveAllSoulHearts(player) {
        const soulHearts = getPlayerSoulHearts(player);
        const blackHearts = getPlayerBlackHearts(player);
        return soulHearts > 0 && blackHearts === 0;
      }
      exports2.doesPlayerHaveAllSoulHearts = doesPlayerHaveAllSoulHearts;
      function getPlayerAvailableHeartSlots(player) {
        const maxHeartContainers = getPlayerMaxHeartContainers(player);
        const effectiveMaxHearts = player.GetEffectiveMaxHearts();
        const normalAndBoneHeartContainers = effectiveMaxHearts / 2;
        const soulHearts = player.GetSoulHearts();
        const soulHeartContainers = Math.ceil(soulHearts / 2);
        const totalHeartContainers = normalAndBoneHeartContainers + soulHeartContainers;
        const brokenHearts = player.GetBrokenHearts();
        const totalOccupiedHeartSlots = totalHeartContainers + brokenHearts;
        return maxHeartContainers - totalOccupiedHeartSlots;
      }
      exports2.getPlayerAvailableHeartSlots = getPlayerAvailableHeartSlots;
      function getPlayerBlackHearts(player) {
        const blackHeartsBitmask = player.GetBlackHearts();
        const blackHeartBits = (0, bitwise_1.countSetBits)(blackHeartsBitmask);
        return blackHeartBits * 2;
      }
      exports2.getPlayerBlackHearts = getPlayerBlackHearts;
      function getPlayerHealth(player) {
        const character = player.GetPlayerType();
        let maxHearts = player.GetMaxHearts();
        let hearts = getPlayerHearts(player);
        let soulHearts = player.GetSoulHearts();
        let boneHearts = player.GetBoneHearts();
        const goldenHearts = player.GetGoldenHearts();
        const eternalHearts = player.GetEternalHearts();
        const rottenHearts = player.GetRottenHearts();
        const brokenHearts = player.GetBrokenHearts();
        const subPlayer = player.GetSubPlayer();
        const soulCharges = player.GetEffectiveSoulCharge();
        const bloodCharges = player.GetEffectiveBloodCharge();
        if (character === isaac_typescript_definitions_1.PlayerType.FORGOTTEN && subPlayer !== void 0) {
          maxHearts = boneHearts * 2;
          boneHearts = 0;
          soulHearts = subPlayer.GetSoulHearts();
        } else if (character === isaac_typescript_definitions_1.PlayerType.SOUL && subPlayer !== void 0) {
          maxHearts = subPlayer.GetBoneHearts() * 2;
          hearts = subPlayer.GetHearts();
        }
        const extraHearts = Math.ceil(soulHearts / 2) + boneHearts;
        let currentSoulHeart = 0;
        const soulHeartTypes = [];
        for (let i = 0; i < extraHearts; i++) {
          let isBoneHeart = player.IsBoneHeart(i);
          if (character === isaac_typescript_definitions_1.PlayerType.FORGOTTEN && subPlayer !== void 0) {
            isBoneHeart = subPlayer.IsBoneHeart(i);
          }
          if (isBoneHeart) {
            soulHeartTypes.push(isaac_typescript_definitions_1.HeartSubType.BONE);
          } else {
            let isBlackHeart = player.IsBlackHeart(currentSoulHeart + 1);
            if (character === isaac_typescript_definitions_1.PlayerType.FORGOTTEN && subPlayer !== void 0) {
              isBlackHeart = subPlayer.IsBlackHeart(currentSoulHeart + 1);
            }
            if (isBlackHeart) {
              soulHeartTypes.push(isaac_typescript_definitions_1.HeartSubType.BLACK);
            } else {
              soulHeartTypes.push(isaac_typescript_definitions_1.HeartSubType.SOUL);
            }
            currentSoulHeart += 2;
          }
        }
        return {
          maxHearts,
          hearts,
          eternalHearts,
          soulHearts,
          boneHearts,
          goldenHearts,
          rottenHearts,
          brokenHearts,
          soulCharges,
          bloodCharges,
          soulHeartTypes
        };
      }
      exports2.getPlayerHealth = getPlayerHealth;
      function getPlayerHealthType(player, healthType) {
        switch (healthType) {
          case HealthType_1.HealthType.RED: {
            return getPlayerHearts(player);
          }
          case HealthType_1.HealthType.SOUL: {
            return getPlayerSoulHearts(player);
          }
          case HealthType_1.HealthType.ETERNAL: {
            return player.GetEternalHearts();
          }
          case HealthType_1.HealthType.BLACK: {
            return getPlayerBlackHearts(player);
          }
          case HealthType_1.HealthType.GOLDEN: {
            return player.GetGoldenHearts();
          }
          case HealthType_1.HealthType.BONE: {
            return player.GetBoneHearts();
          }
          case HealthType_1.HealthType.ROTTEN: {
            return player.GetRottenHearts();
          }
          case HealthType_1.HealthType.BROKEN: {
            return player.GetBrokenHearts();
          }
          case HealthType_1.HealthType.MAX_HEARTS: {
            return player.GetMaxHearts();
          }
        }
      }
      exports2.getPlayerHealthType = getPlayerHealthType;
      function getPlayerHearts(player) {
        const rottenHearts = player.GetRottenHearts();
        const hearts = player.GetHearts();
        return hearts - rottenHearts * 2;
      }
      exports2.getPlayerHearts = getPlayerHearts;
      function getPlayerLastHeart(player) {
        const hearts = player.GetHearts();
        const effectiveMaxHearts = player.GetEffectiveMaxHearts();
        const soulHearts = player.GetSoulHearts();
        const blackHearts = player.GetBlackHearts();
        const eternalHearts = player.GetEternalHearts();
        const boneHearts = player.GetBoneHearts();
        const rottenHearts = player.GetRottenHearts();
        const soulHeartSlots = soulHearts / 2;
        const lastHeartIndex = boneHearts + soulHeartSlots - 1;
        const isLastHeartBone = player.IsBoneHeart(lastHeartIndex);
        if (isLastHeartBone) {
          const isLastContainerEmpty = hearts <= effectiveMaxHearts - 2;
          if (isLastContainerEmpty) {
            return HealthType_1.HealthType.BONE;
          }
          if (rottenHearts > 0) {
            return HealthType_1.HealthType.ROTTEN;
          }
          if (eternalHearts > 0) {
            return HealthType_1.HealthType.ETERNAL;
          }
          return HealthType_1.HealthType.RED;
        }
        if (soulHearts > 0) {
          const numBits = (0, bitwise_1.getNumBitsOfN)(blackHearts);
          const finalBit = (0, bitwise_1.getKBitOfN)(numBits - 1, blackHearts);
          const isBlack = finalBit === 1;
          if (isBlack) {
            return HealthType_1.HealthType.BLACK;
          }
          return HealthType_1.HealthType.SOUL;
        }
        if (eternalHearts > 0) {
          return HealthType_1.HealthType.ETERNAL;
        }
        if (rottenHearts > 0) {
          return HealthType_1.HealthType.ROTTEN;
        }
        return HealthType_1.HealthType.RED;
      }
      exports2.getPlayerLastHeart = getPlayerLastHeart;
      function getPlayerMaxHeartContainers(player) {
        const character = player.GetPlayerType();
        const characterMaxHeartContainers = (0, characters_1.getCharacterMaxHeartContainers)(character);
        if (character === isaac_typescript_definitions_1.PlayerType.MAGDALENE && player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.BIRTHRIGHT)) {
          const extraMaxHeartContainersFromBirthright = 6;
          return characterMaxHeartContainers + extraMaxHeartContainersFromBirthright;
        }
        if ((0, players_1.isKeeper)(player)) {
          const numMothersKisses = player.GetTrinketMultiplier(isaac_typescript_definitions_1.TrinketType.MOTHERS_KISS);
          const hasGreedsGullet = player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.GREEDS_GULLET);
          const coins = player.GetNumCoins();
          const greedsGulletCoinContainers = hasGreedsGullet ? Math.floor(coins / 25) : 0;
          return characterMaxHeartContainers + numMothersKisses + greedsGulletCoinContainers;
        }
        return characterMaxHeartContainers;
      }
      exports2.getPlayerMaxHeartContainers = getPlayerMaxHeartContainers;
      function getPlayerSoulHearts(player) {
        const soulHearts = player.GetSoulHearts();
        const blackHearts = getPlayerBlackHearts(player);
        return soulHearts - blackHearts;
      }
      exports2.getPlayerSoulHearts = getPlayerSoulHearts;
      function getTaintedMagdaleneNonTemporaryMaxHearts(player) {
        const maxHearts = player.GetMaxHearts();
        const hasBirthright = player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.BIRTHRIGHT);
        const maxNonTemporaryMaxHearts = hasBirthright ? 6 : 4;
        return Math.min(maxHearts, maxNonTemporaryMaxHearts);
      }
      exports2.getTaintedMagdaleneNonTemporaryMaxHearts = getTaintedMagdaleneNonTemporaryMaxHearts;
      function newPlayerHealth() {
        return {
          maxHearts: 0,
          hearts: 0,
          eternalHearts: 0,
          soulHearts: 0,
          boneHearts: 0,
          goldenHearts: 0,
          rottenHearts: 0,
          brokenHearts: 0,
          soulCharges: 0,
          bloodCharges: 0,
          soulHeartTypes: []
        };
      }
      exports2.newPlayerHealth = newPlayerHealth;
      function playerConvertBlackHeartsToSoulHearts(player) {
        const playerHealth = getPlayerHealth(player);
        removeAllPlayerHealth(player);
        const newSoulHeartTypes = playerHealth.soulHeartTypes.map((soulHeartType) => soulHeartType === isaac_typescript_definitions_1.HeartSubType.BLACK ? isaac_typescript_definitions_1.HeartSubType.SOUL : soulHeartType);
        const playerHealthWithSoulHearts = {
          ...playerHealth,
          soulHeartTypes: newSoulHeartTypes
        };
        setPlayerHealth(player, playerHealthWithSoulHearts);
      }
      exports2.playerConvertBlackHeartsToSoulHearts = playerConvertBlackHeartsToSoulHearts;
      function playerConvertSoulHeartsToBlackHearts(player) {
        const playerHealth = getPlayerHealth(player);
        removeAllPlayerHealth(player);
        const newSoulHeartTypes = playerHealth.soulHeartTypes.map((soulHeartType) => soulHeartType === isaac_typescript_definitions_1.HeartSubType.SOUL ? isaac_typescript_definitions_1.HeartSubType.BLACK : soulHeartType);
        const playerHealthWithBlackHearts = {
          ...playerHealth,
          soulHeartTypes: newSoulHeartTypes
        };
        setPlayerHealth(player, playerHealthWithBlackHearts);
      }
      exports2.playerConvertSoulHeartsToBlackHearts = playerConvertSoulHeartsToBlackHearts;
      function playerHasHealthLeft(player) {
        const hearts = player.GetHearts();
        const soulHearts = player.GetSoulHearts();
        const boneHearts = player.GetBoneHearts();
        return hearts > 0 || soulHearts > 0 || boneHearts > 0;
      }
      exports2.playerHasHealthLeft = playerHasHealthLeft;
      function removeAllPlayerHealth(player) {
        const goldenHearts = player.GetGoldenHearts();
        const eternalHearts = player.GetEternalHearts();
        const boneHearts = player.GetBoneHearts();
        const brokenHearts = player.GetBrokenHearts();
        player.AddGoldenHearts(goldenHearts * -1);
        player.AddEternalHearts(eternalHearts * -1);
        player.AddBoneHearts(boneHearts * -1);
        player.AddBrokenHearts(brokenHearts * -1);
        player.AddMaxHearts(constants_1.MAX_PLAYER_HEART_CONTAINERS * -2, true);
        player.AddSoulHearts(constants_1.MAX_PLAYER_HEART_CONTAINERS * -2);
        if ((0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.SOUL)) {
          const forgotten = player.GetSubPlayer();
          if (forgotten !== void 0) {
            const forgottenBoneHearts = forgotten.GetBoneHearts();
            forgotten.AddBoneHearts(forgottenBoneHearts * -1);
          }
        }
      }
      exports2.removeAllPlayerHealth = removeAllPlayerHealth;
      function setPlayerHealth(player, playerHealth) {
        const character = player.GetPlayerType();
        const subPlayer = player.GetSubPlayer();
        const alabasterBoxDescriptions = [];
        const alabasterBoxActiveSlots = (0, playerCollectibles_1.getActiveItemSlots)(player, isaac_typescript_definitions_1.CollectibleType.ALABASTER_BOX);
        for (const activeSlot of alabasterBoxActiveSlots) {
          const totalCharge = (0, charge_1.getTotalCharge)(player, activeSlot);
          (0, playerCollectibles_1.setActiveItem)(player, isaac_typescript_definitions_1.CollectibleType.NULL, activeSlot);
          alabasterBoxDescriptions.push({ activeSlot, totalCharge });
        }
        removeAllPlayerHealth(player);
        if (character === isaac_typescript_definitions_1.PlayerType.SOUL && subPlayer !== void 0) {
          subPlayer.AddMaxHearts(playerHealth.maxHearts, false);
        } else {
          player.AddMaxHearts(playerHealth.maxHearts, false);
        }
        player.AddEternalHearts(playerHealth.eternalHearts);
        let soulHeartsRemaining = playerHealth.soulHearts;
        for (const [i, soulHeartType] of playerHealth.soulHeartTypes.entries()) {
          const isHalf = playerHealth.soulHearts + playerHealth.boneHearts * 2 < (i + 1) * 2;
          let addAmount = 2;
          if (isHalf || soulHeartType === isaac_typescript_definitions_1.HeartSubType.BONE || soulHeartsRemaining < 2) {
            addAmount = 1;
          }
          switch (soulHeartType) {
            case isaac_typescript_definitions_1.HeartSubType.SOUL: {
              player.AddSoulHearts(addAmount);
              soulHeartsRemaining -= addAmount;
              break;
            }
            case isaac_typescript_definitions_1.HeartSubType.BLACK: {
              player.AddBlackHearts(addAmount);
              soulHeartsRemaining -= addAmount;
              break;
            }
            case isaac_typescript_definitions_1.HeartSubType.BONE: {
              player.AddBoneHearts(addAmount);
              break;
            }
          }
        }
        player.AddRottenHearts(playerHealth.rottenHearts * 2);
        if (character === isaac_typescript_definitions_1.PlayerType.MAGDALENE_B) {
          (0, utils_1.repeat)(playerHealth.hearts, () => {
            if (player.HasFullHearts()) {
              return;
            }
            const hearts = player.GetHearts();
            const maxHearts = player.GetMaxHearts();
            if (hearts === maxHearts - 1) {
              player.AddHearts(1);
              return;
            }
            player.AddHearts(1);
            player.AddHearts(-1);
          });
        } else {
          player.AddHearts(playerHealth.hearts);
        }
        player.AddGoldenHearts(playerHealth.goldenHearts);
        player.AddBrokenHearts(playerHealth.brokenHearts);
        if (character === isaac_typescript_definitions_1.PlayerType.BETHANY) {
          player.SetSoulCharge(playerHealth.soulCharges);
        } else if (character === isaac_typescript_definitions_1.PlayerType.BETHANY_B) {
          player.SetBloodCharge(playerHealth.bloodCharges);
        }
        for (const { activeSlot, totalCharge } of alabasterBoxDescriptions) {
          (0, playerCollectibles_1.setActiveItem)(player, isaac_typescript_definitions_1.CollectibleType.ALABASTER_BOX, activeSlot, totalCharge);
        }
      }
      exports2.setPlayerHealth = setPlayerHealth;
      function wouldDamageTaintedMagdaleneNonTemporaryHeartContainers(player, damageAmount) {
        const soulHearts = player.GetSoulHearts();
        if (soulHearts > 0) {
          return false;
        }
        const boneHearts = player.GetBoneHearts();
        if (boneHearts > 0) {
          return false;
        }
        const hearts = player.GetHearts();
        const rottenHearts = player.GetRottenHearts();
        const effectiveDamageAmount = damageAmount + Math.min(rottenHearts, damageAmount);
        const heartsAfterDamage = hearts - effectiveDamageAmount;
        const nonTemporaryMaxHearts = getTaintedMagdaleneNonTemporaryMaxHearts(player);
        return heartsAfterDamage < nonTemporaryMaxHearts;
      }
      exports2.wouldDamageTaintedMagdaleneNonTemporaryHeartContainers = wouldDamageTaintedMagdaleneNonTemporaryHeartContainers;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerChangeHealth.js
  var require_PostPlayerChangeHealth = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerChangeHealth.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerChangeHealth = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerHealth_1 = require_playerHealth();
      var playerIndex_1 = require_playerIndex();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersHealthMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        }
      };
      var PostPlayerChangeHealth = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectReordered = (player) => {
          const playerIndex = (0, playerIndex_1.getPlayerIndex)(player, true);
          const playerHealthMap = v.run.playersHealthMap.getAndSetDefault(playerIndex);
          for (const healthType of cachedEnumValues_1.HEALTH_TYPE_VALUES) {
            const storedHealthValue = playerHealthMap.get(healthType);
            const currentHealthValue = (0, playerHealth_1.getPlayerHealthType)(player, healthType);
            playerHealthMap.set(healthType, currentHealthValue);
            if (storedHealthValue !== void 0 && storedHealthValue !== currentHealthValue) {
              const difference = currentHealthValue - storedHealthValue;
              this.fire(player, healthType, difference, storedHealthValue, currentHealthValue);
            }
          }
        };
      };
      exports2.PostPlayerChangeHealth = PostPlayerChangeHealth;
    }
  });

  // node_modules/isaacscript-common/dist/functions/bitSet128.js
  var require_bitSet128 = __commonJS({
    "node_modules/isaacscript-common/dist/functions/bitSet128.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.serializeBitSet128 = exports2.isSerializedBitSet128 = exports2.isBitSet128 = exports2.deserializeBitSet128 = exports2.copyBitSet128 = void 0;
      var SerializationBrand_1 = require_SerializationBrand();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var table_1 = require_table();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var OBJECT_NAME = "BitSet128";
      var KEYS = ["l", "h"];
      function copyBitSet128(bitSet128) {
        if (!isBitSet128(bitSet128)) {
          error(`Failed to copy a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const lowBits = bitSet128.l;
        const highBits = bitSet128.h;
        return BitSet128(lowBits, highBits);
      }
      exports2.copyBitSet128 = copyBitSet128;
      function deserializeBitSet128(bitSet128) {
        if (!(0, types_1.isTable)(bitSet128)) {
          error(`Failed to deserialize a ${OBJECT_NAME} object since the provided object was not a Lua table.`);
        }
        const [l, h] = (0, table_1.getNumbersFromTable)(bitSet128, OBJECT_NAME, ...KEYS);
        (0, utils_1.assertDefined)(l, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: l`);
        (0, utils_1.assertDefined)(h, `Failed to deserialize a ${OBJECT_NAME} object since the provided object did not have a value for: h`);
        return BitSet128(l, h);
      }
      exports2.deserializeBitSet128 = deserializeBitSet128;
      function isBitSet128(object) {
        return (0, isaacAPIClass_1.isIsaacAPIClassOfType)(object, OBJECT_NAME);
      }
      exports2.isBitSet128 = isBitSet128;
      function isSerializedBitSet128(object) {
        if (!(0, types_1.isTable)(object)) {
          return false;
        }
        return (0, table_1.tableHasKeys)(object, ...KEYS) && object.has(SerializationBrand_1.SerializationBrand.BIT_SET_128);
      }
      exports2.isSerializedBitSet128 = isSerializedBitSet128;
      function serializeBitSet128(bitSet128) {
        if (!isBitSet128(bitSet128)) {
          error(`Failed to serialize a ${OBJECT_NAME} object since the provided object was not a userdata ${OBJECT_NAME} class.`);
        }
        const bitSet128Table = new LuaMap();
        (0, table_1.copyUserdataValuesToTable)(bitSet128, KEYS, bitSet128Table);
        bitSet128Table.set(SerializationBrand_1.SerializationBrand.BIT_SET_128, "");
        return bitSet128Table;
      }
      exports2.serializeBitSet128 = serializeBitSet128;
    }
  });

  // node_modules/isaacscript-common/dist/functions/tears.js
  var require_tears = __commonJS({
    "node_modules/isaacscript-common/dist/functions/tears.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isTearFromPlayer = exports2.isTearFromFamiliar = exports2.isMissedTear = exports2.getTearsStat = exports2.getFireDelay = exports2.addTearsStat = void 0;
      function addTearsStat(player, tearsStat) {
        const existingTearsStat = getTearsStat(player.MaxFireDelay);
        const newTearsStat = existingTearsStat + tearsStat;
        const newMaxFireDelay = getFireDelay(newTearsStat);
        player.MaxFireDelay = newMaxFireDelay;
      }
      exports2.addTearsStat = addTearsStat;
      function getFireDelay(tearsStat) {
        return Math.max(30 / tearsStat - 1, -0.9999);
      }
      exports2.getFireDelay = getFireDelay;
      function getTearsStat(fireDelay) {
        return 30 / (fireDelay + 1);
      }
      exports2.getTearsStat = getTearsStat;
      function isMissedTear(tear) {
        return tear.IsDead();
      }
      exports2.isMissedTear = isMissedTear;
      function isTearFromFamiliar(tear, familiarVariant, subType) {
        if (tear.FrameCount === 0) {
          error(`Failed to check if the given tear was from a player since the tear's frame count was equal to 0. (The "isTearFromFamiliar" function must only be used in the "POST_TEAR_INIT_VERY_LATE" callback or on frame 1 and onwards.)`);
        }
        if (tear.SpawnerEntity === void 0) {
          return false;
        }
        const familiar = tear.SpawnerEntity.ToFamiliar();
        if (familiar === void 0) {
          return false;
        }
        return (familiarVariant === void 0 || familiarVariant === familiar.Variant) && (subType === void 0 || subType === familiar.SubType);
      }
      exports2.isTearFromFamiliar = isTearFromFamiliar;
      function isTearFromPlayer(tear) {
        if (tear.FrameCount === 0) {
          error(`Failed to check if the given tear was from a player since the tear's frame count was equal to 0. (The "isTearFromPlayer" function must only be used in the "POST_TEAR_INIT_VERY_LATE" callback or on frame 1 and onwards.)`);
        }
        if (tear.SpawnerEntity === void 0) {
          return false;
        }
        const player = tear.SpawnerEntity.ToPlayer();
        return player !== void 0;
      }
      exports2.isTearFromPlayer = isTearFromPlayer;
    }
  });

  // node_modules/isaacscript-common/dist/maps/defaultPlayerStatMap.js
  var require_defaultPlayerStatMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/defaultPlayerStatMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DEFAULT_PLAYER_STAT_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var tears_1 = require_tears();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var DEFAULT_MAX_FIRE_DELAY = 10;
      exports2.DEFAULT_PLAYER_STAT_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.CacheFlag.DAMAGE, 3.5],
        // The default tears stat is 2.73.
        [isaac_typescript_definitions_1.CacheFlag.FIRE_DELAY, (0, tears_1.getTearsStat)(DEFAULT_MAX_FIRE_DELAY)],
        [isaac_typescript_definitions_1.CacheFlag.SHOT_SPEED, 1],
        [isaac_typescript_definitions_1.CacheFlag.RANGE, 6.5],
        [isaac_typescript_definitions_1.CacheFlag.SPEED, 1],
        [isaac_typescript_definitions_1.CacheFlag.LUCK, 0]
        // 1 << 10
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/stats.js
  var require_stats = __commonJS({
    "node_modules/isaacscript-common/dist/functions/stats.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getPlayerStats = exports2.getPlayerStat = exports2.getDefaultPlayerStat = exports2.addPlayerStat = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var PlayerStat_1 = require_PlayerStat();
      var defaultPlayerStatMap_1 = require_defaultPlayerStatMap();
      var ReadonlySet_1 = require_ReadonlySet();
      var tears_1 = require_tears();
      var STAT_CACHE_FLAGS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.CacheFlag.DAMAGE,
        isaac_typescript_definitions_1.CacheFlag.FIRE_DELAY,
        isaac_typescript_definitions_1.CacheFlag.SHOT_SPEED,
        isaac_typescript_definitions_1.CacheFlag.RANGE,
        isaac_typescript_definitions_1.CacheFlag.SPEED,
        isaac_typescript_definitions_1.CacheFlag.LUCK
        // 1 << 10
      ]);
      function addPlayerStat(player, cacheFlag, amount) {
        if (!STAT_CACHE_FLAGS_SET.has(cacheFlag)) {
          error(`You cannot add a stat to a player with the cache flag of: ${cacheFlag}`);
        }
        switch (cacheFlag) {
          case isaac_typescript_definitions_1.CacheFlag.DAMAGE: {
            player.Damage += amount;
            break;
          }
          case isaac_typescript_definitions_1.CacheFlag.FIRE_DELAY: {
            (0, tears_1.addTearsStat)(player, amount);
            break;
          }
          case isaac_typescript_definitions_1.CacheFlag.SHOT_SPEED: {
            player.ShotSpeed += amount;
            break;
          }
          case isaac_typescript_definitions_1.CacheFlag.RANGE: {
            player.TearHeight += amount;
            break;
          }
          case isaac_typescript_definitions_1.CacheFlag.SPEED: {
            player.MoveSpeed += amount;
            break;
          }
          case isaac_typescript_definitions_1.CacheFlag.LUCK: {
            player.Luck += amount;
            break;
          }
        }
      }
      exports2.addPlayerStat = addPlayerStat;
      function getDefaultPlayerStat(cacheFlag) {
        return defaultPlayerStatMap_1.DEFAULT_PLAYER_STAT_MAP.get(cacheFlag);
      }
      exports2.getDefaultPlayerStat = getDefaultPlayerStat;
      function getPlayerStat(player, playerStat) {
        const playerStats = getPlayerStats(player);
        return playerStats[playerStat];
      }
      exports2.getPlayerStat = getPlayerStat;
      function getPlayerStats(player) {
        return {
          [PlayerStat_1.PlayerStat.DAMAGE]: player.Damage,
          [PlayerStat_1.PlayerStat.FIRE_DELAY]: player.MaxFireDelay,
          [PlayerStat_1.PlayerStat.SHOT_SPEED]: player.ShotSpeed,
          [PlayerStat_1.PlayerStat.TEAR_HEIGHT]: player.TearHeight,
          [PlayerStat_1.PlayerStat.TEAR_RANGE]: player.TearRange,
          [PlayerStat_1.PlayerStat.TEAR_FALLING_ACCELERATION]: player.TearFallingAcceleration,
          [PlayerStat_1.PlayerStat.TEAR_FALLING_SPEED]: player.TearFallingSpeed,
          [PlayerStat_1.PlayerStat.MOVE_SPEED]: player.MoveSpeed,
          [PlayerStat_1.PlayerStat.TEAR_FLAG]: player.TearFlags,
          [PlayerStat_1.PlayerStat.TEAR_COLOR]: player.TearColor,
          [PlayerStat_1.PlayerStat.FLYING]: player.CanFly,
          [PlayerStat_1.PlayerStat.LUCK]: player.Luck,
          [PlayerStat_1.PlayerStat.SIZE]: player.SpriteScale
          // 1 << 11
        };
      }
      exports2.getPlayerStats = getPlayerStats;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerChangeStat.js
  var require_PostPlayerChangeStat = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerChangeStat.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerChangeStat = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var bitSet128_1 = require_bitSet128();
      var color_1 = require_color();
      var playerIndex_1 = require_playerIndex();
      var stats_1 = require_stats();
      var types_1 = require_types();
      var vector_1 = require_vector();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersStatMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        }
      };
      var PostPlayerChangeStat = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectReordered = (player) => {
          const playerIndex = (0, playerIndex_1.getPlayerIndex)(player, true);
          const playerStatMap = v.run.playersStatMap.getAndSetDefault(playerIndex);
          for (const statType of cachedEnumValues_1.PLAYER_STAT_VALUES) {
            const storedStatValue = playerStatMap.get(statType);
            const currentStatValue = (0, stats_1.getPlayerStat)(player, statType);
            playerStatMap.set(statType, currentStatValue);
            if (storedStatValue === void 0) {
              continue;
            }
            if (!statEquals(storedStatValue, currentStatValue)) {
              const isNumberStat = (0, types_1.isNumber)(storedStatValue) && (0, types_1.isNumber)(currentStatValue);
              const difference = isNumberStat ? currentStatValue - storedStatValue : 0;
              this.fire(player, statType, difference, storedStatValue, currentStatValue);
            }
          }
        };
      };
      exports2.PostPlayerChangeStat = PostPlayerChangeStat;
      function statEquals(oldValue, newValue) {
        const isNumberStat = (0, types_1.isNumber)(oldValue) && (0, types_1.isNumber)(newValue);
        if (isNumberStat) {
          return oldValue === newValue;
        }
        const isBooleanStat = (0, types_1.isBoolean)(oldValue) && (0, types_1.isBoolean)(newValue);
        if (isBooleanStat) {
          return oldValue === newValue;
        }
        const isBitSet128Stat = (0, bitSet128_1.isBitSet128)(oldValue) && (0, bitSet128_1.isBitSet128)(newValue);
        if (isBitSet128Stat) {
          return oldValue === newValue;
        }
        const isColorStat = (0, color_1.isColor)(oldValue) && (0, color_1.isColor)(newValue);
        if (isColorStat) {
          return (0, color_1.colorEquals)(oldValue, newValue);
        }
        const isVectorStat = (0, vector_1.isVector)(oldValue) && (0, vector_1.isVector)(newValue);
        if (isVectorStat) {
          return (0, vector_1.vectorEquals)(oldValue, newValue);
        }
        error('Failed to determine the type of a stat in the "POST_PLAYER_CHANGE_STAT" callback.');
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerChangeType.js
  var require_PostPlayerChangeType = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerChangeType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerChangeType = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerDataStructures_1 = require_playerDataStructures();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersCharacterMap: new DefaultMap_1.DefaultMap((character) => character)
          // eslint-disable-line isaacscript/strict-enums
        }
      };
      var PostPlayerChangeType = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectReordered = (player) => {
          const character = player.GetPlayerType();
          const storedCharacter = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersCharacterMap, player, character);
          if (character !== storedCharacter) {
            (0, playerDataStructures_1.mapSetPlayer)(v.run.playersCharacterMap, player, character);
            this.fire(player, storedCharacter, character);
          }
        };
      };
      exports2.PostPlayerChangeType = PostPlayerChangeType;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerCollectibleAdded.js
  var require_PostPlayerCollectibleAdded = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerCollectibleAdded.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerCollectibleAdded = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPlayerCollectibleAdded = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PLAYER_COLLECTIBLE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireCollectibleType;
      };
      exports2.PostPlayerCollectibleAdded = PostPlayerCollectibleAdded;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerCollectibleRemoved.js
  var require_PostPlayerCollectibleRemoved = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerCollectibleRemoved.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerCollectibleRemoved = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPlayerCollectibleRemoved = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PLAYER_COLLECTIBLE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireCollectibleType;
      };
      exports2.PostPlayerCollectibleRemoved = PostPlayerCollectibleRemoved;
    }
  });

  // node_modules/isaacscript-common/dist/enums/MysteriousPaperEffect.js
  var require_MysteriousPaperEffect = __commonJS({
    "node_modules/isaacscript-common/dist/enums/MysteriousPaperEffect.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.MysteriousPaperEffect = void 0;
      var MysteriousPaperEffect;
      (function(MysteriousPaperEffect2) {
        MysteriousPaperEffect2[MysteriousPaperEffect2["POLAROID"] = 0] = "POLAROID";
        MysteriousPaperEffect2[MysteriousPaperEffect2["NEGATIVE"] = 1] = "NEGATIVE";
        MysteriousPaperEffect2[MysteriousPaperEffect2["MISSING_PAGE"] = 2] = "MISSING_PAGE";
        MysteriousPaperEffect2[MysteriousPaperEffect2["MISSING_POSTER"] = 3] = "MISSING_POSTER";
      })(MysteriousPaperEffect || (exports2.MysteriousPaperEffect = MysteriousPaperEffect = {}));
    }
  });

  // node_modules/isaacscript-common/dist/objects/trinketDescriptions.js
  var require_trinketDescriptions = __commonJS({
    "node_modules/isaacscript-common/dist/objects/trinketDescriptions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TRINKET_DESCRIPTIONS = exports2.DEFAULT_TRINKET_DESCRIPTION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_TRINKET_DESCRIPTION = "Unknown";
      exports2.TRINKET_DESCRIPTIONS = {
        [isaac_typescript_definitions_1.TrinketType.NULL]: exports2.DEFAULT_TRINKET_DESCRIPTION,
        [isaac_typescript_definitions_1.TrinketType.SWALLOWED_PENNY]: "Gulp!",
        [isaac_typescript_definitions_1.TrinketType.PETRIFIED_POOP]: "It feels lucky?",
        [isaac_typescript_definitions_1.TrinketType.AAA_BATTERY]: "Trickle charge",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_REMOTE]: "It's broken",
        [isaac_typescript_definitions_1.TrinketType.PURPLE_HEART]: "Challenge up",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_MAGNET]: "It kinda works",
        [isaac_typescript_definitions_1.TrinketType.ROSARY_BEAD]: "Faith up",
        [isaac_typescript_definitions_1.TrinketType.CARTRIDGE]: "I remember these",
        [isaac_typescript_definitions_1.TrinketType.PULSE_WORM]: "Wub wub!",
        [isaac_typescript_definitions_1.TrinketType.WIGGLE_WORM]: "Wiggle waggle!",
        [isaac_typescript_definitions_1.TrinketType.RING_WORM]: "Woop woop!",
        [isaac_typescript_definitions_1.TrinketType.FLAT_WORM]: "Blub blub!",
        [isaac_typescript_definitions_1.TrinketType.STORE_CREDIT]: "YES!",
        [isaac_typescript_definitions_1.TrinketType.CALLUS]: "Your feet feel stronger",
        [isaac_typescript_definitions_1.TrinketType.LUCKY_ROCK]: "There's something inside it",
        [isaac_typescript_definitions_1.TrinketType.MOMS_TOENAIL]: "???",
        [isaac_typescript_definitions_1.TrinketType.BLACK_LIPSTICK]: "Evil up",
        [isaac_typescript_definitions_1.TrinketType.BIBLE_TRACT]: "Faith up",
        [isaac_typescript_definitions_1.TrinketType.PAPER_CLIP]: "Master of lockpicking",
        [isaac_typescript_definitions_1.TrinketType.MONKEY_PAW]: "Wish granted",
        [isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_PAPER]: "???",
        [isaac_typescript_definitions_1.TrinketType.DAEMONS_TAIL]: "Evil up",
        [isaac_typescript_definitions_1.TrinketType.MISSING_POSTER]: "???",
        [isaac_typescript_definitions_1.TrinketType.BUTT_PENNY]: "Wealth of gas",
        [isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_CANDY]: "Uh-oh!",
        [isaac_typescript_definitions_1.TrinketType.HOOK_WORM]: "Zip zoop!",
        [isaac_typescript_definitions_1.TrinketType.WHIP_WORM]: "Wooosh!",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_ANKH]: "Eternal life?",
        [isaac_typescript_definitions_1.TrinketType.FISH_HEAD]: "It stinks",
        [isaac_typescript_definitions_1.TrinketType.PINKY_EYE]: "Poison shots",
        [isaac_typescript_definitions_1.TrinketType.PUSH_PIN]: "Piercing shots",
        [isaac_typescript_definitions_1.TrinketType.LIBERTY_CAP]: "Touch fuzzy, get dizzy",
        [isaac_typescript_definitions_1.TrinketType.UMBILICAL_CORD]: "Fetal protection",
        [isaac_typescript_definitions_1.TrinketType.CHILDS_HEART]: "It calls out to its brothers",
        [isaac_typescript_definitions_1.TrinketType.CURVED_HORN]: "DMG up",
        [isaac_typescript_definitions_1.TrinketType.RUSTED_KEY]: "It feels lucky?",
        [isaac_typescript_definitions_1.TrinketType.GOAT_HOOF]: "Speed up",
        [isaac_typescript_definitions_1.TrinketType.MOMS_PEARL]: "It emanates purity ",
        [isaac_typescript_definitions_1.TrinketType.CANCER]: "Yay, cancer!",
        [isaac_typescript_definitions_1.TrinketType.RED_PATCH]: "Your rage grows",
        [isaac_typescript_definitions_1.TrinketType.MATCH_STICK]: "Tastes like burning",
        [isaac_typescript_definitions_1.TrinketType.LUCKY_TOE]: "Luck up!",
        [isaac_typescript_definitions_1.TrinketType.CURSED_SKULL]: "Cursed?",
        [isaac_typescript_definitions_1.TrinketType.SAFETY_CAP]: "Don't swallow it",
        [isaac_typescript_definitions_1.TrinketType.ACE_OF_SPADES]: "Luck of the draw",
        [isaac_typescript_definitions_1.TrinketType.ISAACS_FORK]: "Consume thy enemy",
        // There is no `TrinketType` with a value of 47.
        [isaac_typescript_definitions_1.TrinketType.MISSING_PAGE]: "It glows with power",
        [isaac_typescript_definitions_1.TrinketType.BLOODY_PENNY]: "Wealth of health",
        [isaac_typescript_definitions_1.TrinketType.BURNT_PENNY]: "Wealth of chaos",
        [isaac_typescript_definitions_1.TrinketType.FLAT_PENNY]: "Wealth of answers",
        [isaac_typescript_definitions_1.TrinketType.COUNTERFEIT_PENNY]: "Wealth of wealth",
        [isaac_typescript_definitions_1.TrinketType.TICK]: "Well, that's not coming off",
        [isaac_typescript_definitions_1.TrinketType.ISAACS_HEAD]: "Dead friend",
        [isaac_typescript_definitions_1.TrinketType.MAGGYS_FAITH]: "Faith's reward",
        [isaac_typescript_definitions_1.TrinketType.JUDAS_TONGUE]: "Payment received ",
        [isaac_typescript_definitions_1.TrinketType.BLUE_BABYS_SOUL]: "Imaginary friend",
        [isaac_typescript_definitions_1.TrinketType.SAMSONS_LOCK]: "Your rage grows",
        [isaac_typescript_definitions_1.TrinketType.CAINS_EYE]: "May you see your destination",
        [isaac_typescript_definitions_1.TrinketType.EVES_BIRD_FOOT]: "Revenge from beyond",
        [isaac_typescript_definitions_1.TrinketType.LEFT_HAND]: "The left-hand path reaps dark rewards",
        [isaac_typescript_definitions_1.TrinketType.SHINY_ROCK]: "It shines for its brothers",
        [isaac_typescript_definitions_1.TrinketType.SAFETY_SCISSORS]: "Fuse cutter",
        [isaac_typescript_definitions_1.TrinketType.RAINBOW_WORM]: "Bleep bloop blop",
        [isaac_typescript_definitions_1.TrinketType.TAPE_WORM]: "Floooooooooop!",
        [isaac_typescript_definitions_1.TrinketType.LAZY_WORM]: "Pft",
        [isaac_typescript_definitions_1.TrinketType.CRACKED_DICE]: "You feel cursed... kinda.",
        [isaac_typescript_definitions_1.TrinketType.SUPER_MAGNET]: "It pulls",
        [isaac_typescript_definitions_1.TrinketType.FADED_POLAROID]: "You feel faded",
        [isaac_typescript_definitions_1.TrinketType.LOUSE]: "Itchy, tasty...",
        [isaac_typescript_definitions_1.TrinketType.BOBS_BLADDER]: "Creepy bombs",
        [isaac_typescript_definitions_1.TrinketType.WATCH_BATTERY]: "Lil charge",
        [isaac_typescript_definitions_1.TrinketType.BLASTING_CAP]: "Pop! Pop!",
        [isaac_typescript_definitions_1.TrinketType.STUD_FINDER]: "The ground below feels hollow...",
        [isaac_typescript_definitions_1.TrinketType.ERROR]: "Effect not found?",
        [isaac_typescript_definitions_1.TrinketType.POKER_CHIP]: "It's double down time!",
        [isaac_typescript_definitions_1.TrinketType.BLISTER]: "Bounce back!",
        [isaac_typescript_definitions_1.TrinketType.SECOND_HAND]: "Extended stat effect time!",
        [isaac_typescript_definitions_1.TrinketType.ENDLESS_NAMELESS]: "I'm stuck in a loop...",
        [isaac_typescript_definitions_1.TrinketType.BLACK_FEATHER]: "With darkness comes power",
        [isaac_typescript_definitions_1.TrinketType.BLIND_RAGE]: "Blind to damage",
        [isaac_typescript_definitions_1.TrinketType.GOLDEN_HORSE_SHOE]: "Feel lucky?",
        [isaac_typescript_definitions_1.TrinketType.STORE_KEY]: "Stores are open",
        [isaac_typescript_definitions_1.TrinketType.RIB_OF_GREED]: "Feels greedy",
        [isaac_typescript_definitions_1.TrinketType.KARMA]: "Karma up",
        [isaac_typescript_definitions_1.TrinketType.LIL_LARVA]: "The poop is moving...",
        [isaac_typescript_definitions_1.TrinketType.MOMS_LOCKET]: "You feel her love",
        [isaac_typescript_definitions_1.TrinketType.NO]: "Never again!",
        [isaac_typescript_definitions_1.TrinketType.CHILD_LEASH]: "Keep your friends close...",
        [isaac_typescript_definitions_1.TrinketType.BROWN_CAP]: "Fartoom!",
        [isaac_typescript_definitions_1.TrinketType.MECONIUM]: "Eww",
        [isaac_typescript_definitions_1.TrinketType.CRACKED_CROWN]: "Stat booster",
        [isaac_typescript_definitions_1.TrinketType.USED_DIAPER]: "You stink",
        [isaac_typescript_definitions_1.TrinketType.FISH_TAIL]: "It also stinks!",
        [isaac_typescript_definitions_1.TrinketType.BLACK_TOOTH]: "It looks dead",
        [isaac_typescript_definitions_1.TrinketType.OUROBOROS_WORM]: "Foop foop!",
        [isaac_typescript_definitions_1.TrinketType.TONSIL]: "Sick...",
        [isaac_typescript_definitions_1.TrinketType.NOSE_GOBLIN]: "Seems magic...",
        [isaac_typescript_definitions_1.TrinketType.SUPER_BALL]: "Boing!",
        [isaac_typescript_definitions_1.TrinketType.VIBRANT_BULB]: "It needs power",
        [isaac_typescript_definitions_1.TrinketType.DIM_BULB]: "I think it's broken",
        [isaac_typescript_definitions_1.TrinketType.FRAGMENTED_CARD]: "Double moon",
        [isaac_typescript_definitions_1.TrinketType.EQUALITY]: "=",
        [isaac_typescript_definitions_1.TrinketType.WISH_BONE]: "Make a wish",
        [isaac_typescript_definitions_1.TrinketType.BAG_LUNCH]: "I wonder what it is",
        [isaac_typescript_definitions_1.TrinketType.LOST_CORK]: "Uncorked",
        [isaac_typescript_definitions_1.TrinketType.CROW_HEART]: "Drain me",
        [isaac_typescript_definitions_1.TrinketType.WALNUT]: "That's a hard nut to crack!",
        [isaac_typescript_definitions_1.TrinketType.DUCT_TAPE]: "Stuck!",
        [isaac_typescript_definitions_1.TrinketType.SILVER_DOLLAR]: "Feels lucky...",
        [isaac_typescript_definitions_1.TrinketType.BLOODY_CROWN]: "Drips with blood...",
        [isaac_typescript_definitions_1.TrinketType.PAY_TO_WIN]: "...",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_WRATH]: "I bring War",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_PESTILENCE]: "I bring Pestilence",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_FAMINE]: "I bring Famine",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_DEATH]: "I bring Death",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_CONQUEST]: "I bring Conquest",
        [isaac_typescript_definitions_1.TrinketType.BAT_WING]: "They are growing...",
        [isaac_typescript_definitions_1.TrinketType.STEM_CELL]: "Regen!",
        [isaac_typescript_definitions_1.TrinketType.HAIRPIN]: "Danger charge",
        [isaac_typescript_definitions_1.TrinketType.WOODEN_CROSS]: "My faith protects me",
        [isaac_typescript_definitions_1.TrinketType.BUTTER]: "Can't hold it!",
        [isaac_typescript_definitions_1.TrinketType.FILIGREE_FEATHERS]: "Angelic spoils",
        [isaac_typescript_definitions_1.TrinketType.DOOR_STOP]: "Hold the door",
        [isaac_typescript_definitions_1.TrinketType.EXTENSION_CORD]: "Charged friends",
        [isaac_typescript_definitions_1.TrinketType.ROTTEN_PENNY]: "Wealth of flies",
        [isaac_typescript_definitions_1.TrinketType.BABY_BENDER]: "Feed them magic!",
        [isaac_typescript_definitions_1.TrinketType.FINGER_BONE]: "It looks brittle",
        [isaac_typescript_definitions_1.TrinketType.JAW_BREAKER]: "Don't chew on it",
        [isaac_typescript_definitions_1.TrinketType.CHEWED_PEN]: "It's leaking",
        [isaac_typescript_definitions_1.TrinketType.BLESSED_PENNY]: "Wealth of purity",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_SYRINGE]: "Mystery medicine",
        [isaac_typescript_definitions_1.TrinketType.SHORT_FUSE]: "Faster explosions",
        [isaac_typescript_definitions_1.TrinketType.GIGANTE_BEAN]: "Mega farts",
        [isaac_typescript_definitions_1.TrinketType.LIGHTER]: "Watch the world burn",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_PADLOCK]: "Bombs are key",
        [isaac_typescript_definitions_1.TrinketType.MYOSOTIS]: "Forget me not...",
        [isaac_typescript_definitions_1.TrinketType.M]: "t's broken9Reroll your dest       ",
        [isaac_typescript_definitions_1.TrinketType.TEARDROP_CHARM]: "It feels lucky",
        [isaac_typescript_definitions_1.TrinketType.APPLE_OF_SODOM]: "It feels empty",
        [isaac_typescript_definitions_1.TrinketType.FORGOTTEN_LULLABY]: "Sing for your friends",
        [isaac_typescript_definitions_1.TrinketType.BETHS_FAITH]: "My faith protects me",
        [isaac_typescript_definitions_1.TrinketType.OLD_CAPACITOR]: "Voltage starving",
        [isaac_typescript_definitions_1.TrinketType.BRAIN_WORM]: "Ding!",
        [isaac_typescript_definitions_1.TrinketType.PERFECTION]: "Luck way up. Don't lose it!",
        [isaac_typescript_definitions_1.TrinketType.DEVILS_CROWN]: "His special customer",
        [isaac_typescript_definitions_1.TrinketType.CHARGED_PENNY]: "Wealth of power",
        [isaac_typescript_definitions_1.TrinketType.FRIENDSHIP_NECKLACE]: "Gather round",
        [isaac_typescript_definitions_1.TrinketType.PANIC_BUTTON]: "Push in case of emergency",
        [isaac_typescript_definitions_1.TrinketType.BLUE_KEY]: "Look between the rooms",
        [isaac_typescript_definitions_1.TrinketType.FLAT_FILE]: "No more spikes",
        [isaac_typescript_definitions_1.TrinketType.TELESCOPE_LENS]: "Seek the stars",
        [isaac_typescript_definitions_1.TrinketType.MOMS_LOCK]: "A piece of her love",
        [isaac_typescript_definitions_1.TrinketType.DICE_BAG]: "Bonus roll",
        [isaac_typescript_definitions_1.TrinketType.HOLY_CROWN]: "Walk the path of the saint",
        [isaac_typescript_definitions_1.TrinketType.MOTHERS_KISS]: "HP up",
        [isaac_typescript_definitions_1.TrinketType.TORN_CARD]: "Death awaits",
        [isaac_typescript_definitions_1.TrinketType.TORN_POCKET]: "A hole in your pocket",
        [isaac_typescript_definitions_1.TrinketType.GILDED_KEY]: "Less is more",
        [isaac_typescript_definitions_1.TrinketType.LUCKY_SACK]: "Free goodies!",
        [isaac_typescript_definitions_1.TrinketType.WICKED_CROWN]: "Walk the path of the wicked",
        [isaac_typescript_definitions_1.TrinketType.AZAZELS_STUMP]: "Unleash your inner demon",
        [isaac_typescript_definitions_1.TrinketType.DINGLE_BERRY]: "Oops!",
        [isaac_typescript_definitions_1.TrinketType.RING_CAP]: "Twice the bang!",
        [isaac_typescript_definitions_1.TrinketType.NUH_UH]: "Don't want!",
        [isaac_typescript_definitions_1.TrinketType.MODELING_CLAY]: "???",
        [isaac_typescript_definitions_1.TrinketType.POLISHED_BONE]: "Friends from beyond",
        [isaac_typescript_definitions_1.TrinketType.HOLLOW_HEART]: "A brittle blessing",
        [isaac_typescript_definitions_1.TrinketType.KIDS_DRAWING]: "Looks familiar...",
        [isaac_typescript_definitions_1.TrinketType.CRYSTAL_KEY]: "Call to the other side",
        [isaac_typescript_definitions_1.TrinketType.KEEPERS_BARGAIN]: "Money talks",
        [isaac_typescript_definitions_1.TrinketType.CURSED_PENNY]: "Wealth of misery",
        [isaac_typescript_definitions_1.TrinketType.YOUR_SOUL]: "Give it to me",
        [isaac_typescript_definitions_1.TrinketType.NUMBER_MAGNET]: "6",
        [isaac_typescript_definitions_1.TrinketType.STRANGE_KEY]: "What could it open?",
        [isaac_typescript_definitions_1.TrinketType.LIL_CLOT]: "Mini friend",
        [isaac_typescript_definitions_1.TrinketType.TEMPORARY_TATTOO]: "You feel braver",
        [isaac_typescript_definitions_1.TrinketType.SWALLOWED_M80]: "Bang!",
        [isaac_typescript_definitions_1.TrinketType.RC_REMOTE]: "Controllable buddies!",
        [isaac_typescript_definitions_1.TrinketType.FOUND_SOUL]: "Finally!",
        [isaac_typescript_definitions_1.TrinketType.EXPANSION_PACK]: "Fun extras",
        [isaac_typescript_definitions_1.TrinketType.BETHS_ESSENCE]: "Virtue's reward",
        [isaac_typescript_definitions_1.TrinketType.TWINS]: "I'm seeing double...",
        [isaac_typescript_definitions_1.TrinketType.ADOPTION_PAPERS]: "Give them a home",
        [isaac_typescript_definitions_1.TrinketType.CRICKET_LEG]: "Infested",
        [isaac_typescript_definitions_1.TrinketType.APOLLYONS_BEST_FRIEND]: "Attack buddy",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_GLASSES]: "Double vision?",
        [isaac_typescript_definitions_1.TrinketType.ICE_CUBE]: "Stay frosty",
        [isaac_typescript_definitions_1.TrinketType.SIGIL_OF_BAPHOMET]: "Revel in death"
        // 189
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/trinketNames.js
  var require_trinketNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/trinketNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TRINKET_NAMES = exports2.DEFAULT_TRINKET_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_TRINKET_NAME = "Unknown";
      exports2.TRINKET_NAMES = {
        [isaac_typescript_definitions_1.TrinketType.NULL]: exports2.DEFAULT_TRINKET_NAME,
        [isaac_typescript_definitions_1.TrinketType.SWALLOWED_PENNY]: "Swallowed Penny",
        [isaac_typescript_definitions_1.TrinketType.PETRIFIED_POOP]: "Petrified Poop",
        [isaac_typescript_definitions_1.TrinketType.AAA_BATTERY]: "AAA Battery",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_REMOTE]: "Broken Remote",
        [isaac_typescript_definitions_1.TrinketType.PURPLE_HEART]: "Purple Heart",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_MAGNET]: "Broken Magnet",
        [isaac_typescript_definitions_1.TrinketType.ROSARY_BEAD]: "Rosary Bead",
        [isaac_typescript_definitions_1.TrinketType.CARTRIDGE]: "Cartridge",
        [isaac_typescript_definitions_1.TrinketType.PULSE_WORM]: "Pulse Worm",
        [isaac_typescript_definitions_1.TrinketType.WIGGLE_WORM]: "Wiggle Worm",
        [isaac_typescript_definitions_1.TrinketType.RING_WORM]: "Ring Worm",
        [isaac_typescript_definitions_1.TrinketType.FLAT_WORM]: "Flat Worm",
        [isaac_typescript_definitions_1.TrinketType.STORE_CREDIT]: "Store Credit",
        [isaac_typescript_definitions_1.TrinketType.CALLUS]: "Callus",
        [isaac_typescript_definitions_1.TrinketType.LUCKY_ROCK]: "Lucky Rock",
        [isaac_typescript_definitions_1.TrinketType.MOMS_TOENAIL]: "Mom's Toenail",
        [isaac_typescript_definitions_1.TrinketType.BLACK_LIPSTICK]: "Black Lipstick",
        [isaac_typescript_definitions_1.TrinketType.BIBLE_TRACT]: "Bible Tract",
        [isaac_typescript_definitions_1.TrinketType.PAPER_CLIP]: "Paper Clip",
        [isaac_typescript_definitions_1.TrinketType.MONKEY_PAW]: "Monkey Paw",
        [isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_PAPER]: "Mysterious Paper",
        [isaac_typescript_definitions_1.TrinketType.DAEMONS_TAIL]: "Daemon's Tail",
        [isaac_typescript_definitions_1.TrinketType.MISSING_POSTER]: "Missing Poster",
        [isaac_typescript_definitions_1.TrinketType.BUTT_PENNY]: "Butt Penny",
        [isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_CANDY]: "Mysterious Candy",
        [isaac_typescript_definitions_1.TrinketType.HOOK_WORM]: "Hook Worm",
        [isaac_typescript_definitions_1.TrinketType.WHIP_WORM]: "Whip Worm",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_ANKH]: "Broken Ankh",
        [isaac_typescript_definitions_1.TrinketType.FISH_HEAD]: "Fish Head",
        [isaac_typescript_definitions_1.TrinketType.PINKY_EYE]: "Pinky Eye",
        [isaac_typescript_definitions_1.TrinketType.PUSH_PIN]: "Push Pin",
        [isaac_typescript_definitions_1.TrinketType.LIBERTY_CAP]: "Liberty Cap",
        [isaac_typescript_definitions_1.TrinketType.UMBILICAL_CORD]: "Umbilical Cord",
        [isaac_typescript_definitions_1.TrinketType.CHILDS_HEART]: "Child's Heart",
        [isaac_typescript_definitions_1.TrinketType.CURVED_HORN]: "Curved Horn",
        [isaac_typescript_definitions_1.TrinketType.RUSTED_KEY]: "Rusted Key",
        [isaac_typescript_definitions_1.TrinketType.GOAT_HOOF]: "Goat Hoof",
        [isaac_typescript_definitions_1.TrinketType.MOMS_PEARL]: "Mom's Pearl",
        [isaac_typescript_definitions_1.TrinketType.CANCER]: "Cancer",
        [isaac_typescript_definitions_1.TrinketType.RED_PATCH]: "Red Patch",
        [isaac_typescript_definitions_1.TrinketType.MATCH_STICK]: "Match Stick",
        [isaac_typescript_definitions_1.TrinketType.LUCKY_TOE]: "Lucky Toe",
        [isaac_typescript_definitions_1.TrinketType.CURSED_SKULL]: "Cursed Skull",
        [isaac_typescript_definitions_1.TrinketType.SAFETY_CAP]: "Safety Cap",
        [isaac_typescript_definitions_1.TrinketType.ACE_OF_SPADES]: "Ace of Spades",
        [isaac_typescript_definitions_1.TrinketType.ISAACS_FORK]: "Isaac's Fork",
        // There is no `TrinketType` with a value of 47.
        [isaac_typescript_definitions_1.TrinketType.MISSING_PAGE]: "A Missing Page",
        [isaac_typescript_definitions_1.TrinketType.BLOODY_PENNY]: "Bloody Penny",
        [isaac_typescript_definitions_1.TrinketType.BURNT_PENNY]: "Burnt Penny",
        [isaac_typescript_definitions_1.TrinketType.FLAT_PENNY]: "Flat Penny",
        [isaac_typescript_definitions_1.TrinketType.COUNTERFEIT_PENNY]: "Counterfeit Penny",
        [isaac_typescript_definitions_1.TrinketType.TICK]: "Tick",
        [isaac_typescript_definitions_1.TrinketType.ISAACS_HEAD]: "Isaac's Head",
        [isaac_typescript_definitions_1.TrinketType.MAGGYS_FAITH]: "Maggy's Faith",
        [isaac_typescript_definitions_1.TrinketType.JUDAS_TONGUE]: "Judas' Tongue",
        [isaac_typescript_definitions_1.TrinketType.BLUE_BABYS_SOUL]: "???'s Soul",
        [isaac_typescript_definitions_1.TrinketType.SAMSONS_LOCK]: "Samson's Lock",
        [isaac_typescript_definitions_1.TrinketType.CAINS_EYE]: "Cain's Eye",
        [isaac_typescript_definitions_1.TrinketType.EVES_BIRD_FOOT]: "Eve's Bird Foot",
        [isaac_typescript_definitions_1.TrinketType.LEFT_HAND]: "The Left Hand",
        [isaac_typescript_definitions_1.TrinketType.SHINY_ROCK]: "Shiny Rock",
        [isaac_typescript_definitions_1.TrinketType.SAFETY_SCISSORS]: "Safety Scissors",
        [isaac_typescript_definitions_1.TrinketType.RAINBOW_WORM]: "Rainbow Worm",
        [isaac_typescript_definitions_1.TrinketType.TAPE_WORM]: "Tape Worm",
        [isaac_typescript_definitions_1.TrinketType.LAZY_WORM]: "Lazy Worm",
        [isaac_typescript_definitions_1.TrinketType.CRACKED_DICE]: "Cracked Dice",
        [isaac_typescript_definitions_1.TrinketType.SUPER_MAGNET]: "Super Magnet",
        [isaac_typescript_definitions_1.TrinketType.FADED_POLAROID]: "Faded Polaroid",
        [isaac_typescript_definitions_1.TrinketType.LOUSE]: "Louse",
        [isaac_typescript_definitions_1.TrinketType.BOBS_BLADDER]: "Bob's Bladder",
        [isaac_typescript_definitions_1.TrinketType.WATCH_BATTERY]: "Watch Battery",
        [isaac_typescript_definitions_1.TrinketType.BLASTING_CAP]: "Blasting Cap",
        [isaac_typescript_definitions_1.TrinketType.STUD_FINDER]: "Stud Finder",
        [isaac_typescript_definitions_1.TrinketType.ERROR]: "Error",
        [isaac_typescript_definitions_1.TrinketType.POKER_CHIP]: "Poker Chip",
        [isaac_typescript_definitions_1.TrinketType.BLISTER]: "Blister",
        [isaac_typescript_definitions_1.TrinketType.SECOND_HAND]: "Second Hand",
        [isaac_typescript_definitions_1.TrinketType.ENDLESS_NAMELESS]: "Endless Nameless",
        [isaac_typescript_definitions_1.TrinketType.BLACK_FEATHER]: "Black Feather",
        [isaac_typescript_definitions_1.TrinketType.BLIND_RAGE]: "Blind Rage",
        [isaac_typescript_definitions_1.TrinketType.GOLDEN_HORSE_SHOE]: "Golden Horse Shoe",
        [isaac_typescript_definitions_1.TrinketType.STORE_KEY]: "Store Key",
        [isaac_typescript_definitions_1.TrinketType.RIB_OF_GREED]: "Rib of Greed",
        [isaac_typescript_definitions_1.TrinketType.KARMA]: "Karma",
        [isaac_typescript_definitions_1.TrinketType.LIL_LARVA]: "Lil Larva",
        [isaac_typescript_definitions_1.TrinketType.MOMS_LOCKET]: "Mom's Locket",
        [isaac_typescript_definitions_1.TrinketType.NO]: "NO!",
        [isaac_typescript_definitions_1.TrinketType.CHILD_LEASH]: "Child Leash",
        [isaac_typescript_definitions_1.TrinketType.BROWN_CAP]: "Brown Cap",
        [isaac_typescript_definitions_1.TrinketType.MECONIUM]: "Meconium",
        [isaac_typescript_definitions_1.TrinketType.CRACKED_CROWN]: "Cracked Crown",
        [isaac_typescript_definitions_1.TrinketType.USED_DIAPER]: "Used Diaper",
        [isaac_typescript_definitions_1.TrinketType.FISH_TAIL]: "Fish Tail",
        [isaac_typescript_definitions_1.TrinketType.BLACK_TOOTH]: "Black Tooth",
        [isaac_typescript_definitions_1.TrinketType.OUROBOROS_WORM]: "Ouroboros Worm",
        [isaac_typescript_definitions_1.TrinketType.TONSIL]: "Tonsil",
        [isaac_typescript_definitions_1.TrinketType.NOSE_GOBLIN]: "Nose Goblin",
        [isaac_typescript_definitions_1.TrinketType.SUPER_BALL]: "Super Ball",
        [isaac_typescript_definitions_1.TrinketType.VIBRANT_BULB]: "Vibrant Bulb",
        [isaac_typescript_definitions_1.TrinketType.DIM_BULB]: "Dim Bulb",
        [isaac_typescript_definitions_1.TrinketType.FRAGMENTED_CARD]: "Fragmented Card",
        [isaac_typescript_definitions_1.TrinketType.EQUALITY]: "Equality!",
        [isaac_typescript_definitions_1.TrinketType.WISH_BONE]: "Wish Bone",
        [isaac_typescript_definitions_1.TrinketType.BAG_LUNCH]: "Bag Lunch",
        [isaac_typescript_definitions_1.TrinketType.LOST_CORK]: "Lost Cork",
        [isaac_typescript_definitions_1.TrinketType.CROW_HEART]: "Crow Heart",
        [isaac_typescript_definitions_1.TrinketType.WALNUT]: "Walnut",
        [isaac_typescript_definitions_1.TrinketType.DUCT_TAPE]: "Duct Tape",
        [isaac_typescript_definitions_1.TrinketType.SILVER_DOLLAR]: "Silver Dollar",
        [isaac_typescript_definitions_1.TrinketType.BLOODY_CROWN]: "Bloody Crown",
        [isaac_typescript_definitions_1.TrinketType.PAY_TO_WIN]: "Pay To Win",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_WRATH]: "Locust of War",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_PESTILENCE]: "Locust of Pestilence",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_FAMINE]: "Locust of Famine",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_DEATH]: "Locust of Death",
        [isaac_typescript_definitions_1.TrinketType.LOCUST_OF_CONQUEST]: "Locust of Conquest",
        [isaac_typescript_definitions_1.TrinketType.BAT_WING]: "Bat Wing",
        [isaac_typescript_definitions_1.TrinketType.STEM_CELL]: "Stem Cell",
        [isaac_typescript_definitions_1.TrinketType.HAIRPIN]: "Hairpin",
        [isaac_typescript_definitions_1.TrinketType.WOODEN_CROSS]: "Wooden Cross",
        [isaac_typescript_definitions_1.TrinketType.BUTTER]: "Butter!",
        [isaac_typescript_definitions_1.TrinketType.FILIGREE_FEATHERS]: "Filigree Feather",
        [isaac_typescript_definitions_1.TrinketType.DOOR_STOP]: "Door Stop",
        [isaac_typescript_definitions_1.TrinketType.EXTENSION_CORD]: "Extension Cord",
        [isaac_typescript_definitions_1.TrinketType.ROTTEN_PENNY]: "Rotten Penny",
        [isaac_typescript_definitions_1.TrinketType.BABY_BENDER]: "Baby-Bender",
        [isaac_typescript_definitions_1.TrinketType.FINGER_BONE]: "Finger Bone",
        [isaac_typescript_definitions_1.TrinketType.JAW_BREAKER]: "Jawbreaker",
        [isaac_typescript_definitions_1.TrinketType.CHEWED_PEN]: "Chewed Pen",
        [isaac_typescript_definitions_1.TrinketType.BLESSED_PENNY]: "Blessed Penny",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_SYRINGE]: "Broken Syringe",
        [isaac_typescript_definitions_1.TrinketType.SHORT_FUSE]: "Short Fuse",
        [isaac_typescript_definitions_1.TrinketType.GIGANTE_BEAN]: "Gigante Bean",
        [isaac_typescript_definitions_1.TrinketType.LIGHTER]: "A Lighter",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_PADLOCK]: "Broken Padlock",
        [isaac_typescript_definitions_1.TrinketType.MYOSOTIS]: "Myosotis",
        [isaac_typescript_definitions_1.TrinketType.M]: " 'M",
        [isaac_typescript_definitions_1.TrinketType.TEARDROP_CHARM]: "Teardrop Charm",
        [isaac_typescript_definitions_1.TrinketType.APPLE_OF_SODOM]: "Apple of Sodom",
        [isaac_typescript_definitions_1.TrinketType.FORGOTTEN_LULLABY]: "Forgotten Lullaby",
        [isaac_typescript_definitions_1.TrinketType.BETHS_FAITH]: "Beth's Faith",
        [isaac_typescript_definitions_1.TrinketType.OLD_CAPACITOR]: "Old Capacitor",
        [isaac_typescript_definitions_1.TrinketType.BRAIN_WORM]: "Brain Worm",
        [isaac_typescript_definitions_1.TrinketType.PERFECTION]: "Perfection",
        [isaac_typescript_definitions_1.TrinketType.DEVILS_CROWN]: "Devil's Crown",
        [isaac_typescript_definitions_1.TrinketType.CHARGED_PENNY]: "Charged Penny",
        [isaac_typescript_definitions_1.TrinketType.FRIENDSHIP_NECKLACE]: "Friendship Necklace",
        [isaac_typescript_definitions_1.TrinketType.PANIC_BUTTON]: "Panic Button",
        [isaac_typescript_definitions_1.TrinketType.BLUE_KEY]: "Blue Key",
        [isaac_typescript_definitions_1.TrinketType.FLAT_FILE]: "Flat File",
        [isaac_typescript_definitions_1.TrinketType.TELESCOPE_LENS]: "Telescope Lens",
        [isaac_typescript_definitions_1.TrinketType.MOMS_LOCK]: "Mom's Lock",
        [isaac_typescript_definitions_1.TrinketType.DICE_BAG]: "Dice Bag",
        [isaac_typescript_definitions_1.TrinketType.HOLY_CROWN]: "Holy Crown",
        [isaac_typescript_definitions_1.TrinketType.MOTHERS_KISS]: "Mother's Kiss",
        [isaac_typescript_definitions_1.TrinketType.TORN_CARD]: "Torn Card",
        [isaac_typescript_definitions_1.TrinketType.TORN_POCKET]: "Torn Pocket",
        [isaac_typescript_definitions_1.TrinketType.GILDED_KEY]: "Gilded Key",
        [isaac_typescript_definitions_1.TrinketType.LUCKY_SACK]: "Lucky Sack",
        [isaac_typescript_definitions_1.TrinketType.WICKED_CROWN]: "Wicked Crown",
        [isaac_typescript_definitions_1.TrinketType.AZAZELS_STUMP]: "Azazel's Stump",
        [isaac_typescript_definitions_1.TrinketType.DINGLE_BERRY]: "Dingle Berry",
        [isaac_typescript_definitions_1.TrinketType.RING_CAP]: "Ring Cap",
        [isaac_typescript_definitions_1.TrinketType.NUH_UH]: "Nuh Uh!",
        [isaac_typescript_definitions_1.TrinketType.MODELING_CLAY]: "Modeling Clay",
        [isaac_typescript_definitions_1.TrinketType.POLISHED_BONE]: "Polished Bone",
        [isaac_typescript_definitions_1.TrinketType.HOLLOW_HEART]: "Hollow Heart",
        [isaac_typescript_definitions_1.TrinketType.KIDS_DRAWING]: "Kid's Drawing",
        [isaac_typescript_definitions_1.TrinketType.CRYSTAL_KEY]: "Crystal Key",
        [isaac_typescript_definitions_1.TrinketType.KEEPERS_BARGAIN]: "Keeper's Bargain",
        [isaac_typescript_definitions_1.TrinketType.CURSED_PENNY]: "Cursed Penny",
        [isaac_typescript_definitions_1.TrinketType.YOUR_SOUL]: "Your Soul",
        [isaac_typescript_definitions_1.TrinketType.NUMBER_MAGNET]: "Number Magnet",
        [isaac_typescript_definitions_1.TrinketType.STRANGE_KEY]: "Strange Key",
        [isaac_typescript_definitions_1.TrinketType.LIL_CLOT]: "Lil Clot",
        [isaac_typescript_definitions_1.TrinketType.TEMPORARY_TATTOO]: "Temporary Tattoo",
        [isaac_typescript_definitions_1.TrinketType.SWALLOWED_M80]: "Swallowed M80",
        [isaac_typescript_definitions_1.TrinketType.RC_REMOTE]: "RC Remote",
        [isaac_typescript_definitions_1.TrinketType.FOUND_SOUL]: "Found Soul",
        [isaac_typescript_definitions_1.TrinketType.EXPANSION_PACK]: "Expansion Pack",
        [isaac_typescript_definitions_1.TrinketType.BETHS_ESSENCE]: "Beth's Essence",
        [isaac_typescript_definitions_1.TrinketType.TWINS]: "The Twins",
        [isaac_typescript_definitions_1.TrinketType.ADOPTION_PAPERS]: "Adoption Papers",
        [isaac_typescript_definitions_1.TrinketType.CRICKET_LEG]: "Cricket Leg",
        [isaac_typescript_definitions_1.TrinketType.APOLLYONS_BEST_FRIEND]: "Apollyon's Best Friend",
        [isaac_typescript_definitions_1.TrinketType.BROKEN_GLASSES]: "Broken Glasses",
        [isaac_typescript_definitions_1.TrinketType.ICE_CUBE]: "Ice Cube",
        [isaac_typescript_definitions_1.TrinketType.SIGIL_OF_BAPHOMET]: "Sigil of Baphomet"
        // 189
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/trinkets.js
  var require_trinkets = __commonJS({
    "node_modules/isaacscript-common/dist/functions/trinkets.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.trinketHasCacheFlag = exports2.setTrinketSprite = exports2.newTrinketSprite = exports2.isVanillaTrinketType = exports2.isValidTrinketType = exports2.isModdedTrinketType = exports2.isGoldenTrinketType = exports2.getTrinketName = exports2.getTrinketGfxFilename = exports2.getTrinketDescription = exports2.getNormalTrinketType = exports2.getMysteriousPaperEffectForFrame = exports2.getGoldenTrinketType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var MysteriousPaperEffect_1 = require_MysteriousPaperEffect();
      var trinketDescriptions_1 = require_trinketDescriptions();
      var trinketNames_1 = require_trinketNames();
      var entities_1 = require_entities();
      var enums_1 = require_enums();
      var flag_1 = require_flag();
      var pickupVariants_1 = require_pickupVariants();
      var sprites_1 = require_sprites();
      var types_1 = require_types();
      var GOLDEN_TRINKET_ADJUSTMENT = 32768;
      var NUM_MYSTERIOUS_PAPER_EFFECTS = (0, enums_1.getEnumLength)(MysteriousPaperEffect_1.MysteriousPaperEffect);
      var TRINKET_ANM2_PATH = "gfx/005.350_trinket.anm2";
      var TRINKET_SPRITE_LAYER = 0;
      function getGoldenTrinketType(trinketType) {
        return isGoldenTrinketType(trinketType) ? trinketType : trinketType + GOLDEN_TRINKET_ADJUSTMENT;
      }
      exports2.getGoldenTrinketType = getGoldenTrinketType;
      function getMysteriousPaperEffectForFrame(player, frameCount) {
        if (frameCount === void 0) {
          frameCount = player.FrameCount;
        }
        if (!player.HasTrinket(isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_PAPER)) {
          return void 0;
        }
        return frameCount % NUM_MYSTERIOUS_PAPER_EFFECTS;
      }
      exports2.getMysteriousPaperEffectForFrame = getMysteriousPaperEffectForFrame;
      function getNormalTrinketType(trinketType) {
        return isGoldenTrinketType(trinketType) ? trinketType - GOLDEN_TRINKET_ADJUSTMENT : trinketType;
      }
      exports2.getNormalTrinketType = getNormalTrinketType;
      function getTrinketDescription(trinketType) {
        const trinketDescription = trinketDescriptions_1.TRINKET_DESCRIPTIONS[trinketType];
        if (trinketDescription !== void 0) {
          return trinketDescription;
        }
        const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        if (itemConfigItem !== void 0) {
          return itemConfigItem.Description;
        }
        return trinketDescriptions_1.DEFAULT_TRINKET_DESCRIPTION;
      }
      exports2.getTrinketDescription = getTrinketDescription;
      function getTrinketGfxFilename(trinketType) {
        const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        if (itemConfigItem === void 0) {
          return constants_1.BLIND_ITEM_PNG_PATH;
        }
        return itemConfigItem.GfxFileName;
      }
      exports2.getTrinketGfxFilename = getTrinketGfxFilename;
      function getTrinketName(trinketType) {
        const trinketName = trinketNames_1.TRINKET_NAMES[trinketType];
        if (trinketName !== void 0) {
          return trinketName;
        }
        const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        if (itemConfigItem !== void 0) {
          return itemConfigItem.Name;
        }
        return trinketNames_1.DEFAULT_TRINKET_NAME;
      }
      exports2.getTrinketName = getTrinketName;
      function isGoldenTrinketType(trinketType) {
        return (0, types_1.asNumber)(trinketType) > GOLDEN_TRINKET_ADJUSTMENT;
      }
      exports2.isGoldenTrinketType = isGoldenTrinketType;
      function isModdedTrinketType(trinketType) {
        return !isVanillaTrinketType(trinketType);
      }
      exports2.isModdedTrinketType = isModdedTrinketType;
      function isValidTrinketType(trinketType) {
        const potentialTrinketType = (0, types_1.asTrinketType)(trinketType);
        const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(potentialTrinketType);
        return itemConfigItem !== void 0;
      }
      exports2.isValidTrinketType = isValidTrinketType;
      function isVanillaTrinketType(trinketType) {
        return trinketType <= constantsFirstLast_1.LAST_VANILLA_TRINKET_TYPE;
      }
      exports2.isVanillaTrinketType = isVanillaTrinketType;
      function newTrinketSprite(trinketType) {
        const sprite = Sprite();
        sprite.Load(TRINKET_ANM2_PATH, false);
        const gfxFileName = getTrinketGfxFilename(trinketType);
        sprite.ReplaceSpritesheet(TRINKET_SPRITE_LAYER, gfxFileName);
        sprite.LoadGraphics();
        const defaultAnimation = sprite.GetDefaultAnimation();
        sprite.Play(defaultAnimation, true);
        return sprite;
      }
      exports2.newTrinketSprite = newTrinketSprite;
      function setTrinketSprite(trinket, pngPath) {
        if (!(0, pickupVariants_1.isTrinket)(trinket)) {
          const entityID = (0, entities_1.getEntityID)(trinket);
          error(`The "setTrinketSprite" function was given a non-trinket: ${entityID}`);
        }
        const sprite = trinket.GetSprite();
        if (pngPath === void 0) {
          (0, sprites_1.clearSprite)(sprite);
        } else {
          sprite.ReplaceSpritesheet(TRINKET_SPRITE_LAYER, pngPath);
          sprite.LoadGraphics();
        }
      }
      exports2.setTrinketSprite = setTrinketSprite;
      function trinketHasCacheFlag(trinketType, cacheFlag) {
        const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        if (itemConfigItem === void 0) {
          return false;
        }
        return (0, flag_1.hasFlag)(itemConfigItem.CacheFlags, cacheFlag);
      }
      exports2.trinketHasCacheFlag = trinketHasCacheFlag;
    }
  });

  // node_modules/isaacscript-common/dist/functions/trinketGive.js
  var require_trinketGive = __commonJS({
    "node_modules/isaacscript-common/dist/functions/trinketGive.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.temporarilyRemoveTrinkets = exports2.temporarilyRemoveTrinket = exports2.smeltTrinkets = exports2.smeltTrinket = exports2.giveTrinketsBack = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var playerCollectibles_1 = require_playerCollectibles();
      var trinkets_1 = require_trinkets();
      var utils_1 = require_utils();
      function giveTrinketsBack(player, trinketSituation) {
        if (trinketSituation === void 0) {
          return;
        }
        const trinketType1 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_1);
        const trinketType2 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_2);
        if (trinketType1 !== isaac_typescript_definitions_1.TrinketType.NULL) {
          player.TryRemoveTrinket(trinketType1);
        }
        if (trinketType2 !== isaac_typescript_definitions_1.TrinketType.NULL) {
          player.TryRemoveTrinket(trinketType2);
        }
        (0, utils_1.repeat)(trinketSituation.numSmeltedTrinkets, () => {
          player.AddTrinket(trinketSituation.trinketTypeRemoved, false);
          (0, playerCollectibles_1.useActiveItemTemp)(player, isaac_typescript_definitions_1.CollectibleType.SMELTER);
        });
        if (trinketSituation.trinketType1 !== isaac_typescript_definitions_1.TrinketType.NULL) {
          player.AddTrinket(trinketSituation.trinketType1, false);
        }
        if (trinketSituation.trinketType2 !== isaac_typescript_definitions_1.TrinketType.NULL) {
          player.AddTrinket(trinketSituation.trinketType2, false);
        }
      }
      exports2.giveTrinketsBack = giveTrinketsBack;
      function smeltTrinket(player, trinketType, numTrinkets = 1) {
        const trinketSituation = temporarilyRemoveTrinkets(player);
        (0, utils_1.repeat)(numTrinkets, () => {
          player.AddTrinket(trinketType);
          (0, playerCollectibles_1.useActiveItemTemp)(player, isaac_typescript_definitions_1.CollectibleType.SMELTER);
        });
        giveTrinketsBack(player, trinketSituation);
      }
      exports2.smeltTrinket = smeltTrinket;
      function smeltTrinkets(player, ...trinketTypes) {
        for (const trinketType of trinketTypes) {
          smeltTrinket(player, trinketType);
        }
      }
      exports2.smeltTrinkets = smeltTrinkets;
      function temporarilyRemoveTrinket(player, trinketType) {
        if (!player.HasTrinket(trinketType)) {
          return void 0;
        }
        const trinketType1 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_1);
        const trinketType2 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_2);
        let numTrinkets = 0;
        while (player.HasTrinket(trinketType)) {
          player.TryRemoveTrinket(trinketType);
          numTrinkets++;
        }
        let numSmeltedTrinkets = numTrinkets;
        const trinketWasInSlot1 = trinketType1 === trinketType || trinketType1 === (0, trinkets_1.getGoldenTrinketType)(trinketType);
        if (trinketWasInSlot1) {
          numSmeltedTrinkets--;
        }
        const trinketWasInSlot2 = trinketType2 === trinketType || trinketType2 === (0, trinkets_1.getGoldenTrinketType)(trinketType);
        if (trinketWasInSlot2) {
          numSmeltedTrinkets--;
        }
        return {
          trinketTypeRemoved: trinketType,
          trinketType1,
          trinketType2,
          numSmeltedTrinkets
        };
      }
      exports2.temporarilyRemoveTrinket = temporarilyRemoveTrinket;
      function temporarilyRemoveTrinkets(player) {
        const trinketType1 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_1);
        const trinketType2 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_2);
        if (trinketType1 === isaac_typescript_definitions_1.TrinketType.NULL && trinketType2 === isaac_typescript_definitions_1.TrinketType.NULL) {
          return void 0;
        }
        if (trinketType1 !== isaac_typescript_definitions_1.TrinketType.NULL) {
          player.TryRemoveTrinket(trinketType1);
        }
        if (trinketType2 !== isaac_typescript_definitions_1.TrinketType.NULL) {
          player.TryRemoveTrinket(trinketType2);
        }
        return {
          trinketTypeRemoved: isaac_typescript_definitions_1.TrinketType.NULL,
          trinketType1,
          trinketType2,
          numSmeltedTrinkets: 0
        };
      }
      exports2.temporarilyRemoveTrinkets = temporarilyRemoveTrinkets;
    }
  });

  // node_modules/isaacscript-common/dist/functions/revive.js
  var require_revive = __commonJS({
    "node_modules/isaacscript-common/dist/functions/revive.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.willReviveFromSpiritShackles = exports2.willReviveFromHeartbreak = exports2.willPlayerRevive = exports2.willMysteriousPaperRevive = exports2.isDamageToPlayerFatal = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var MysteriousPaperEffect_1 = require_MysteriousPaperEffect();
      var characters_1 = require_characters();
      var frames_1 = require_frames();
      var playerHealth_1 = require_playerHealth();
      var players_1 = require_players();
      var sprites_1 = require_sprites();
      var trinketGive_1 = require_trinketGive();
      var trinkets_1 = require_trinkets();
      function isDamageToPlayerFatal(player, amount, source, lastDamageGameFrame) {
        const character = player.GetPlayerType();
        const effects = player.GetEffects();
        const isBerserk = effects.HasCollectibleEffect(isaac_typescript_definitions_1.CollectibleType.BERSERK);
        if (character === isaac_typescript_definitions_1.PlayerType.JACOB_B && source.Type === isaac_typescript_definitions_1.EntityType.DARK_ESAU) {
          return false;
        }
        if (isBerserk) {
          return false;
        }
        const berserkChargeAfterHit = player.SamsonBerserkCharge + constants_1.TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE;
        if (character === isaac_typescript_definitions_1.PlayerType.SAMSON_B && berserkChargeAfterHit >= constants_1.MAX_TAINTED_SAMSON_BERSERK_CHARGE) {
          return false;
        }
        if (willReviveFromSpiritShackles(player)) {
          return false;
        }
        if (character === isaac_typescript_definitions_1.PlayerType.JACOB_2_B) {
          return true;
        }
        if ((0, players_1.hasLostCurse)(player)) {
          return true;
        }
        const playerNumAllHearts = (0, players_1.getPlayerNumHitsRemaining)(player);
        if (amount < playerNumAllHearts) {
          return false;
        }
        if (willReviveFromHeartbreak(player)) {
          return false;
        }
        if (player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.BROKEN_GLASS_CANNON) && (0, frames_1.onGameFrame)(lastDamageGameFrame)) {
          return false;
        }
        const hearts = player.GetHearts();
        const eternalHearts = player.GetEternalHearts();
        const soulHearts = player.GetSoulHearts();
        const boneHearts = player.GetBoneHearts();
        if (hearts > 0 && soulHearts > 0 || hearts > 0 && boneHearts > 0 || soulHearts > 0 && boneHearts > 0 || soulHearts > 0 && eternalHearts > 0 || boneHearts >= 2) {
          return false;
        }
        return true;
      }
      exports2.isDamageToPlayerFatal = isDamageToPlayerFatal;
      function willMysteriousPaperRevive(player) {
        const sprite = player.GetSprite();
        const character = player.GetPlayerType();
        const animation = (0, characters_1.getCharacterDeathAnimationName)(character);
        const deathAnimationFrames = (0, sprites_1.getLastFrameOfAnimation)(sprite, animation);
        const frameOfDeath = player.FrameCount + deathAnimationFrames;
        const mysteriousPaperEffect = (0, trinkets_1.getMysteriousPaperEffectForFrame)(player, frameOfDeath);
        if (mysteriousPaperEffect === void 0) {
          return false;
        }
        return mysteriousPaperEffect === MysteriousPaperEffect_1.MysteriousPaperEffect.MISSING_POSTER;
      }
      exports2.willMysteriousPaperRevive = willMysteriousPaperRevive;
      function willPlayerRevive(player) {
        const trinketSituation = (0, trinketGive_1.temporarilyRemoveTrinket)(player, isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_PAPER);
        const willRevive = player.WillPlayerRevive() || trinketSituation !== void 0 && willMysteriousPaperRevive(player);
        (0, trinketGive_1.giveTrinketsBack)(player, trinketSituation);
        return willRevive;
      }
      exports2.willPlayerRevive = willPlayerRevive;
      function willReviveFromHeartbreak(player) {
        if (!player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.HEARTBREAK)) {
          return false;
        }
        const maxHeartContainers = (0, playerHealth_1.getPlayerMaxHeartContainers)(player);
        const numBrokenHeartsThatWillBeAdded = (0, players_1.isKeeper)(player) ? 1 : 2;
        const brokenHearts = player.GetBrokenHearts();
        const numBrokenHeartsAfterRevival = numBrokenHeartsThatWillBeAdded + brokenHearts;
        return maxHeartContainers > numBrokenHeartsAfterRevival;
      }
      exports2.willReviveFromHeartbreak = willReviveFromHeartbreak;
      function willReviveFromSpiritShackles(player) {
        if (!player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.SPIRIT_SHACKLES)) {
          return false;
        }
        const effects = player.GetEffects();
        const spiritShacklesEnabled = !effects.HasNullEffect(isaac_typescript_definitions_1.NullItemID.SPIRIT_SHACKLES_DISABLED);
        const playerInSoulForm = effects.HasNullEffect(isaac_typescript_definitions_1.NullItemID.SPIRIT_SHACKLES_SOUL);
        return spiritShacklesEnabled && !playerInSoulForm;
      }
      exports2.willReviveFromSpiritShackles = willReviveFromSpiritShackles;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerFatalDamage.js
  var require_PostPlayerFatalDamage = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerFatalDamage.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerFatalDamage = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var flag_1 = require_flag();
      var playerDataStructures_1 = require_playerDataStructures();
      var playerIndex_1 = require_playerIndex();
      var revive_1 = require_revive();
      var rooms_1 = require_rooms();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          /** Needed to detect if Glass Cannon will kill the player. */
          playersLastDamageGameFrame: /* @__PURE__ */ new Map()
        }
      };
      var PostPlayerFatalDamage = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 23
            [isaac_typescript_definitions_1.ModCallback.PRE_USE_ITEM, this.preUseItemBible, [isaac_typescript_definitions_1.CollectibleType.BIBLE]]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER, this.entityTakeDmgPlayer]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        /**
         * Using The Bible on Satan is one of the few ways to die without taking damage, so we need to
         * handle this case.
         */
        // ModCallback.PRE_USE_ITEM (23)
        // CollectibleType.BIBLE (33)
        preUseItemBible = (_collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData) => {
          if (!(0, rooms_1.inBossRoomOf)(isaac_typescript_definitions_1.BossID.SATAN)) {
            return void 0;
          }
          if ((0, revive_1.willPlayerRevive)(player)) {
            return void 0;
          }
          const shouldSustainDeath = this.fire(player, 0, isaac_typescript_definitions_1.DamageFlagZero, EntityRef(player), 0);
          if (shouldSustainDeath !== void 0) {
            return !shouldSustainDeath;
          }
          return void 0;
        };
        // ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER
        entityTakeDmgPlayer = (player, amount, damageFlags, source, countdownFrames) => {
          if ((0, playerIndex_1.isChildPlayer)(player)) {
            return void 0;
          }
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const lastDamageGameFrame = (0, playerDataStructures_1.mapGetPlayer)(v.run.playersLastDamageGameFrame, player);
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersLastDamageGameFrame, player, gameFrameCount);
          if ((0, flag_1.hasFlag)(damageFlags, isaac_typescript_definitions_1.DamageFlag.NO_KILL)) {
            return void 0;
          }
          if ((0, revive_1.willPlayerRevive)(player)) {
            return void 0;
          }
          if (!(0, revive_1.isDamageToPlayerFatal)(player, amount, source, lastDamageGameFrame)) {
            return void 0;
          }
          const shouldSustainDeath = this.fire(player, amount, damageFlags, source, countdownFrames);
          if (shouldSustainDeath !== void 0) {
            return shouldSustainDeath;
          }
          return void 0;
        };
      };
      exports2.PostPlayerFatalDamage = PostPlayerFatalDamage;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerInitFirst.js
  var require_PostPlayerInitFirst = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerInitFirst.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerInitFirst = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerIndex_1 = require_playerIndex();
      var rooms_1 = require_rooms();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPlayerInitFirst = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered],
            [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_INIT_LATE, this.postPlayerInitLate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          if ((0, rooms_1.inGenesisRoom)()) {
            for (const player of (0, playerIndex_1.getPlayers)()) {
              this.fire(player);
            }
          }
        };
        // ModCallbackCustom.POST_PLAYER_INIT_LATE
        postPlayerInitLate = (player) => {
          if ((0, playerIndex_1.isChildPlayer)(player)) {
            return;
          }
          this.fire(player);
        };
      };
      exports2.PostPlayerInitFirst = PostPlayerInitFirst;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerInitLate.js
  var require_PostPlayerInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerInitLate = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerDataStructures_1 = require_playerDataStructures();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          playersFiredSet: /* @__PURE__ */ new Set()
        }
      };
      var PostPlayerInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          if (!(0, playerDataStructures_1.setHasPlayer)(v.run.playersFiredSet, player)) {
            (0, playerDataStructures_1.setAddPlayer)(v.run.playersFiredSet, player);
            this.fire(player);
          }
        };
      };
      exports2.PostPlayerInitLate = PostPlayerInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerRenderReordered.js
  var require_PostPlayerRenderReordered = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerRenderReordered.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerRenderReordered = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPlayerRenderReordered = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PLAYER_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
      };
      exports2.PostPlayerRenderReordered = PostPlayerRenderReordered;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerUpdateReordered.js
  var require_PostPlayerUpdateReordered = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPlayerUpdateReordered.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPlayerUpdateReordered = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPlayerUpdateReordered = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PLAYER_REORDERED_CALLBACKS];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
      };
      exports2.PostPlayerUpdateReordered = PostPlayerUpdateReordered;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPoopRender.js
  var require_PostPoopRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPoopRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPoopRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPoopRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePoop;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const poop of (0, gridEntitiesSpecific_1.getPoops)()) {
            this.fire(poop);
          }
        };
      };
      exports2.PostPoopRender = PostPoopRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPoopUpdate.js
  var require_PostPoopUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPoopUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPoopUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPoopUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePoop;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const poop of (0, gridEntitiesSpecific_1.getPoops)()) {
            this.fire(poop);
          }
        };
      };
      exports2.PostPoopUpdate = PostPoopUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPressurePlateRender.js
  var require_PostPressurePlateRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPressurePlateRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPressurePlateRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPressurePlateRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePressurePlate;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const pressurePlate of (0, gridEntitiesSpecific_1.getPressurePlates)()) {
            this.fire(pressurePlate);
          }
        };
      };
      exports2.PostPressurePlateRender = PostPressurePlateRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPressurePlateUpdate.js
  var require_PostPressurePlateUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPressurePlateUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPressurePlateUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostPressurePlateUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePressurePlate;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const pressurePlate of (0, gridEntitiesSpecific_1.getPressurePlates)()) {
            this.fire(pressurePlate);
          }
        };
      };
      exports2.PostPressurePlateUpdate = PostPressurePlateUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileInitFilter.js
  var require_PostProjectileInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostProjectileInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostProjectileInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 43
            [isaac_typescript_definitions_1.ModCallback.POST_PROJECTILE_INIT, this.postProjectileInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireProjectile;
        // ModCallback.POST_PROJECTILE_INIT (43)
        postProjectileInit = (projectile) => {
          this.fire(projectile);
        };
      };
      exports2.PostProjectileInitFilter = PostProjectileInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileInitLate.js
  var require_PostProjectileInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostProjectileInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostProjectileInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 44
            [isaac_typescript_definitions_1.ModCallback.POST_PROJECTILE_UPDATE, this.postProjectileUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireProjectile;
        // ModCallback.POST_PROJECTILE_UPDATE (44)
        postProjectileUpdate = (projectile) => {
          const ptrHash = GetPtrHash(projectile);
          if (!v.room.firedSet.has(ptrHash)) {
            v.room.firedSet.add(ptrHash);
            this.fire(projectile);
          }
        };
      };
      exports2.PostProjectileInitLate = PostProjectileInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileKill.js
  var require_PostProjectileKill = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileKill.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostProjectileKill = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostProjectileKill = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 44
            [isaac_typescript_definitions_1.ModCallback.POST_PROJECTILE_UPDATE, this.postProjectileUpdate],
            // 46
            [isaac_typescript_definitions_1.ModCallback.PRE_PROJECTILE_COLLISION, this.preProjectileCollision],
            // 67
            [isaac_typescript_definitions_1.ModCallback.POST_ENTITY_REMOVE, this.postEntityRemove]
          ];
        }
        shouldFire = shouldFire_1.shouldFireProjectile;
        // ModCallback.POST_PROJECTILE_UPDATE (44)
        postProjectileUpdate = (projectile) => {
          const ptrHash = GetPtrHash(projectile);
          if (projectile.CollidesWithGrid() || projectile.IsDead()) {
            v.room.firedSet.add(ptrHash);
          }
        };
        // ModCallback.PRE_PROJECTILE_COLLISION (46)
        preProjectileCollision = (projectile) => {
          const ptrHash = GetPtrHash(projectile);
          v.room.firedSet.add(ptrHash);
          return void 0;
        };
        // ModCallback.POST_ENTITY_REMOVE (67)
        postEntityRemove = (entity) => {
          const projectile = entity.ToProjectile();
          if (projectile === void 0) {
            return;
          }
          const ptrHash = GetPtrHash(projectile);
          if (v.room.firedSet.has(ptrHash)) {
            v.room.firedSet.add(ptrHash);
            this.fire(projectile);
          }
        };
      };
      exports2.PostProjectileKill = PostProjectileKill;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileRenderFilter.js
  var require_PostProjectileRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostProjectileRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostProjectileRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 45
            [isaac_typescript_definitions_1.ModCallback.POST_PROJECTILE_RENDER, this.postProjectileRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireProjectile;
        // ModCallback.POST_PROJECTILE_RENDER (45)
        postProjectileRender = (projectile, renderOffset) => {
          this.fire(projectile, renderOffset);
        };
      };
      exports2.PostProjectileRenderFilter = PostProjectileRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileUpdateFilter.js
  var require_PostProjectileUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostProjectileUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostProjectileUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostProjectileUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 44
            [isaac_typescript_definitions_1.ModCallback.POST_PROJECTILE_UPDATE, this.postProjectileUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireProjectile;
        // ModCallback.POST_PROJECTILE_UPDATE (44)
        postProjectileUpdate = (projectile) => {
          this.fire(projectile);
        };
      };
      exports2.PostProjectileUpdateFilter = PostProjectileUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostPurchase.js
  var require_PostPurchase = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostPurchase.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostPurchase = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var playerDataStructures_1 = require_playerDataStructures();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          playersHoldingItemOnLastFrameMap: new DefaultMap_1.DefaultMap(false),
          playersUsedItemOnFrame: new DefaultMap_1.DefaultMap(0)
        }
      };
      var PostPurchase = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 3
            [isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM, this.postUseItem],
            // 5
            [isaac_typescript_definitions_1.ModCallback.POST_USE_CARD, this.postUseCard],
            // 10
            [isaac_typescript_definitions_1.ModCallback.POST_USE_PILL, this.postUsePill]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_player, pickup] = fireArgs;
          const [callbackPickupVariant, callbackPickupSubType] = optionalArgs;
          return (callbackPickupVariant === void 0 || callbackPickupVariant === pickup.Variant) && (callbackPickupSubType === void 0 || callbackPickupSubType === pickup.SubType);
        };
        // ModCallback.POST_USE_ITEM (3)
        postUseItem = (_collectibleType, _rng, player) => {
          markUsedItemOnThisFrame(player);
          return void 0;
        };
        // ModCallback.POST_USE_CARD (5)
        postUseCard = (_cardType, player) => {
          markUsedItemOnThisFrame(player);
          return void 0;
        };
        // ModCallback.POST_USE_PILL (10)
        postUsePill = (_pillEffect, player) => {
          markUsedItemOnThisFrame(player);
          return void 0;
        };
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const isHoldingItem = player.IsHoldingItem();
          const wasHoldingItemOnLastFrame = (0, playerDataStructures_1.defaultMapGetPlayer)(v.room.playersHoldingItemOnLastFrameMap, player);
          (0, playerDataStructures_1.mapSetPlayer)(v.room.playersHoldingItemOnLastFrameMap, player, isHoldingItem);
          if (!wasHoldingItemOnLastFrame && isHoldingItem && !this.playerUsedItemRecently(player)) {
            this.playerPickedUpNewItem(player);
          }
        };
        playerUsedItemRecently(player) {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const usedCollectibleOnFrame = (0, playerDataStructures_1.defaultMapGetPlayer)(v.room.playersUsedItemOnFrame, player);
          return gameFrameCount === usedCollectibleOnFrame || gameFrameCount === usedCollectibleOnFrame + 1;
        }
        playerPickedUpNewItem(player) {
          const pickups = (0, entitiesSpecific_1.getPickups)();
          const disappearingPickup = pickups.find((pickup) => !pickup.Exists() && pickup.Price !== 0);
          if (disappearingPickup !== void 0) {
            this.fire(player, disappearingPickup);
          }
        }
      };
      exports2.PostPurchase = PostPurchase;
      function markUsedItemOnThisFrame(player) {
        const gameFrameCount = cachedClasses_1.game.GetFrameCount();
        (0, playerDataStructures_1.mapSetPlayer)(v.room.playersUsedItemOnFrame, player, gameFrameCount);
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostRockRender.js
  var require_PostRockRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostRockRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostRockRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostRockRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireRock;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const rock of (0, gridEntitiesSpecific_1.getRocks)()) {
            this.fire(rock);
          }
        };
      };
      exports2.PostRockRender = PostRockRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostRockUpdate.js
  var require_PostRockUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostRockUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostRockUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostRockUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireRock;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const rock of (0, gridEntitiesSpecific_1.getRocks)()) {
            this.fire(rock);
          }
        };
      };
      exports2.PostRockUpdate = PostRockUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostRoomClearChanged.js
  var require_PostRoomClearChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostRoomClearChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostRoomClearChanged = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          cleared: false
        }
      };
      var PostRoomClearChanged = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [roomClear] = fireArgs;
          const [callbackRoomClear] = optionalArgs;
          return callbackRoomClear === void 0 || callbackRoomClear === roomClear;
        };
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          const room = cachedClasses_1.game.GetRoom();
          const roomClear = room.IsClear();
          if (roomClear !== v.room.cleared) {
            v.room.cleared = roomClear;
            this.fire(roomClear);
          }
        };
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          const room = cachedClasses_1.game.GetRoom();
          const roomClear = room.IsClear();
          v.room.cleared = roomClear;
        };
      };
      exports2.PostRoomClearChanged = PostRoomClearChanged;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSacrifice.js
  var require_PostSacrifice = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSacrifice.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSacrifice = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var flag_1 = require_flag();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        level: {
          numSacrifices: 0
        }
      };
      var PostSacrifice = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER, this.entityTakeDmgPlayer]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.ENTITY_TAKE_DMG
        entityTakeDmgPlayer = (player, _amount, damageFlags, _source, _countdownFrames) => {
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const isSpikeDamage = (0, flag_1.hasFlag)(damageFlags, isaac_typescript_definitions_1.DamageFlag.SPIKES);
          if (roomType === isaac_typescript_definitions_1.RoomType.SACRIFICE && isSpikeDamage) {
            v.level.numSacrifices++;
            this.fire(player, v.level.numSacrifices);
          }
          return void 0;
        };
      };
      exports2.PostSacrifice = PostSacrifice;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSlotAnimationChanged.js
  var require_PostSlotAnimationChanged = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSlotAnimationChanged.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSlotAnimationChanged = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSlotAnimationChanged = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.SLOT_RENDER_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireSlot;
      };
      exports2.PostSlotAnimationChanged = PostSlotAnimationChanged;
    }
  });

  // node_modules/isaacscript-common/dist/functions/entityTypes.js
  var require_entityTypes = __commonJS({
    "node_modules/isaacscript-common/dist/functions/entityTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isSlot = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      function isSlot(entity) {
        return entity.Type === isaac_typescript_definitions_1.EntityType.SLOT;
      }
      exports2.isSlot = isSlot;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSlotCollision.js
  var require_PostSlotCollision = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSlotCollision.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSlotCollision = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var entityTypes_1 = require_entityTypes();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSlotCollision = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 33
            [isaac_typescript_definitions_1.ModCallback.PRE_PLAYER_COLLISION, this.prePlayerCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireSlot;
        // ModCallback.PRE_PLAYER_COLLISION (33)
        prePlayerCollision = (player, collider) => {
          if ((0, entityTypes_1.isSlot)(collider)) {
            this.fire(collider, player);
          }
          return void 0;
        };
      };
      exports2.PostSlotCollision = PostSlotCollision;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSlotDestroyed.js
  var require_PostSlotDestroyed = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSlotDestroyed.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSlotDestroyed = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSlotDestroyed = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.SLOT_DESTROYED_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireSlot;
      };
      exports2.PostSlotDestroyed = PostSlotDestroyed;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSlotInit.js
  var require_PostSlotInit = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSlotInit.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSlotInit = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSlotInit = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.SLOT_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireSlot;
      };
      exports2.PostSlotInit = PostSlotInit;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSlotRender.js
  var require_PostSlotRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSlotRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSlotRender = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSlotRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.SLOT_RENDER_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireSlot;
      };
      exports2.PostSlotRender = PostSlotRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSlotUpdate.js
  var require_PostSlotUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSlotUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSlotUpdate = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSlotUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.SLOT_UPDATE_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireSlot;
      };
      exports2.PostSlotUpdate = PostSlotUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSpikesRender.js
  var require_PostSpikesRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSpikesRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSpikesRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSpikesRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireSpikes;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const spikes of (0, gridEntitiesSpecific_1.getSpikes)()) {
            this.fire(spikes);
          }
        };
      };
      exports2.PostSpikesRender = PostSpikesRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostSpikesUpdate.js
  var require_PostSpikesUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostSpikesUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostSpikesUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostSpikesUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireSpikes;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const spikes of (0, gridEntitiesSpecific_1.getSpikes)()) {
            this.fire(spikes);
          }
        };
      };
      exports2.PostSpikesUpdate = PostSpikesUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTNTRender.js
  var require_PostTNTRender = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTNTRender.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTNTRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostTNTRender = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTNT;
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const tnt of (0, gridEntitiesSpecific_1.getTNT)()) {
            this.fire(tnt);
          }
        };
      };
      exports2.PostTNTRender = PostTNTRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTNTUpdate.js
  var require_PostTNTUpdate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTNTUpdate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTNTUpdate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostTNTUpdate = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTNT;
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const tnt of (0, gridEntitiesSpecific_1.getTNT)()) {
            this.fire(tnt);
          }
        };
      };
      exports2.PostTNTUpdate = PostTNTUpdate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTearInitFilter.js
  var require_PostTearInitFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTearInitFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTearInitFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostTearInitFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 39
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_INIT, this.postTearInit]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.POST_TEAR_INIT (39)
        postTearInit = (tear) => {
          this.fire(tear);
        };
      };
      exports2.PostTearInitFilter = PostTearInitFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTearInitLate.js
  var require_PostTearInitLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTearInitLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTearInitLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostTearInitLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 40
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_UPDATE, this.postTearUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.POST_TEAR_UPDATE (40)
        postTearUpdate = (tear) => {
          const ptrHash = GetPtrHash(tear);
          if (!v.room.firedSet.has(ptrHash)) {
            v.room.firedSet.add(ptrHash);
            this.fire(tear);
          }
        };
      };
      exports2.PostTearInitLate = PostTearInitLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTearInitVeryLate.js
  var require_PostTearInitVeryLate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTearInitVeryLate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTearInitVeryLate = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostTearInitVeryLate = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 40
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_UPDATE, this.postTearUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.POST_TEAR_UPDATE (40)
        postTearUpdate = (tear) => {
          if (tear.FrameCount === 0) {
            return;
          }
          const index = GetPtrHash(tear);
          if (!v.room.firedSet.has(index)) {
            v.room.firedSet.add(index);
            this.fire(tear);
          }
        };
      };
      exports2.PostTearInitVeryLate = PostTearInitVeryLate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTearKill.js
  var require_PostTearKill = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTearKill.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTearKill = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        room: {
          firedSet: /* @__PURE__ */ new Set()
        }
      };
      var PostTearKill = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 40
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_UPDATE, this.postTearUpdate],
            // 42
            [isaac_typescript_definitions_1.ModCallback.PRE_TEAR_COLLISION, this.preTearCollision],
            // 67
            [isaac_typescript_definitions_1.ModCallback.POST_ENTITY_REMOVE, this.postEntityRemove]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.POST_PROJECTILE_UPDATE (40)
        postTearUpdate = (tear) => {
          const ptrHash = GetPtrHash(tear);
          if (tear.CollidesWithGrid() || tear.IsDead()) {
            v.room.firedSet.add(ptrHash);
          }
        };
        // ModCallback.PRE_TEAR_COLLISION (42)
        preTearCollision = (tear) => {
          const ptrHash = GetPtrHash(tear);
          v.room.firedSet.add(ptrHash);
          return void 0;
        };
        // ModCallback.POST_ENTITY_REMOVE (67)
        postEntityRemove = (entity) => {
          const tear = entity.ToTear();
          if (tear === void 0) {
            return;
          }
          const ptrHash = GetPtrHash(tear);
          if (v.room.firedSet.has(ptrHash)) {
            v.room.firedSet.add(ptrHash);
            this.fire(tear);
          }
        };
      };
      exports2.PostTearKill = PostTearKill;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTearRenderFilter.js
  var require_PostTearRenderFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTearRenderFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTearRenderFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostTearRenderFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 41
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_RENDER, this.postTearRender]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.POST_TEAR_RENDER (41)
        postTearRender = (tear, renderOffset) => {
          this.fire(tear, renderOffset);
        };
      };
      exports2.PostTearRenderFilter = PostTearRenderFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTearUpdateFilter.js
  var require_PostTearUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTearUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTearUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PostTearUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 40
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_UPDATE, this.postTearUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.POST_TEAR_UPDATE (40)
        postTearUpdate = (tear) => {
          this.fire(tear);
        };
      };
      exports2.PostTearUpdateFilter = PostTearUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTransformation.js
  var require_PostTransformation = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTransformation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTransformation = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerDataStructures_1 = require_playerDataStructures();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          // We cannot use a nested `DefaultMap` here.
          playersTransformationsMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        }
      };
      var PostTransformation = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [_player, playerForm] = fireArgs;
          const [callbackPlayerForm] = optionalArgs;
          return callbackPlayerForm === void 0 || callbackPlayerForm === playerForm;
        };
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const playerTransformationsMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersTransformationsMap, player);
          for (const playerForm of cachedEnumValues_1.PLAYER_FORM_VALUES) {
            const hasForm = player.HasPlayerForm(playerForm);
            let storedForm = playerTransformationsMap.get(playerForm);
            if (storedForm === void 0) {
              storedForm = false;
            }
            if (hasForm !== storedForm) {
              playerTransformationsMap.set(playerForm, hasForm);
              this.fire(player, playerForm, hasForm);
            }
          }
        };
      };
      exports2.PostTransformation = PostTransformation;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostTrinketBreak.js
  var require_PostTrinketBreak = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostTrinketBreak.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostTrinketBreak = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerDataStructures_1 = require_playerDataStructures();
      var shouldFire_1 = require_shouldFire();
      var DefaultMap_1 = require_DefaultMap();
      var CustomCallback_1 = require_CustomCallback();
      var TRINKETS_THAT_CAN_BREAK = [
        isaac_typescript_definitions_1.TrinketType.WISH_BONE,
        isaac_typescript_definitions_1.TrinketType.WALNUT
      ];
      var v = {
        run: {
          // We cannot use a nested `DefaultMap` here.
          playersTrinketMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        }
      };
      var PostTrinketBreak = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER, this.entityTakeDmgPlayer],
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTrinketType;
        // ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER
        entityTakeDmgPlayer = (player, _amount, _damageFlags, _source, _countdownFrames) => {
          const trinketMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersTrinketMap, player);
          for (const trinketType of TRINKETS_THAT_CAN_BREAK) {
            const numTrinketsHeld = player.GetTrinketMultiplier(trinketType);
            let oldNumTrinketsHeld = trinketMap.get(trinketType);
            if (oldNumTrinketsHeld === void 0) {
              oldNumTrinketsHeld = 0;
            }
            if (numTrinketsHeld >= oldNumTrinketsHeld) {
              continue;
            }
            trinketMap.set(trinketType, numTrinketsHeld);
            const numTrinketsOnGround = Isaac.CountEntities(void 0, isaac_typescript_definitions_1.EntityType.PICKUP, isaac_typescript_definitions_1.PickupVariant.TRINKET, trinketType);
            if (numTrinketsOnGround > 0) {
              continue;
            }
            this.fire(player, trinketType);
          }
          return void 0;
        };
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const trinketMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersTrinketMap, player);
          for (const trinketType of TRINKETS_THAT_CAN_BREAK) {
            const numTrinkets = player.GetTrinketMultiplier(trinketType);
            if (numTrinkets === 0) {
              trinketMap.delete(trinketType);
            } else {
              trinketMap.set(trinketType, numTrinkets);
            }
          }
        };
      };
      exports2.PostTrinketBreak = PostTrinketBreak;
    }
  });

  // node_modules/isaacscript-common/dist/enums/PocketItemType.js
  var require_PocketItemType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/PocketItemType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PocketItemType = void 0;
      var PocketItemType;
      (function(PocketItemType2) {
        PocketItemType2[PocketItemType2["EMPTY"] = 0] = "EMPTY";
        PocketItemType2[PocketItemType2["CARD"] = 1] = "CARD";
        PocketItemType2[PocketItemType2["PILL"] = 2] = "PILL";
        PocketItemType2[PocketItemType2["ACTIVE_ITEM"] = 3] = "ACTIVE_ITEM";
        PocketItemType2[PocketItemType2["DICE_BAG_DICE"] = 4] = "DICE_BAG_DICE";
        PocketItemType2[PocketItemType2["UNDETERMINABLE"] = 5] = "UNDETERMINABLE";
      })(PocketItemType || (exports2.PocketItemType = PocketItemType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/maps/PHDPillConversionsMap.js
  var require_PHDPillConversionsMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/PHDPillConversionsMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PHD_PILL_CONVERSIONS_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.PHD_PILL_CONVERSIONS_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.PillEffect.BAD_TRIP, isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL],
        [isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN, isaac_typescript_definitions_1.PillEffect.HEALTH_UP],
        [isaac_typescript_definitions_1.PillEffect.RANGE_DOWN, isaac_typescript_definitions_1.PillEffect.RANGE_UP],
        [isaac_typescript_definitions_1.PillEffect.SPEED_DOWN, isaac_typescript_definitions_1.PillEffect.SPEED_UP],
        [isaac_typescript_definitions_1.PillEffect.TEARS_DOWN, isaac_typescript_definitions_1.PillEffect.TEARS_UP],
        [isaac_typescript_definitions_1.PillEffect.LUCK_DOWN, isaac_typescript_definitions_1.PillEffect.LUCK_UP],
        [isaac_typescript_definitions_1.PillEffect.PARALYSIS, isaac_typescript_definitions_1.PillEffect.PHEROMONES],
        [isaac_typescript_definitions_1.PillEffect.AMNESIA, isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER],
        [isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD, isaac_typescript_definitions_1.PillEffect.POWER],
        [isaac_typescript_definitions_1.PillEffect.ADDICTED, isaac_typescript_definitions_1.PillEffect.PERCS],
        [isaac_typescript_definitions_1.PillEffect.QUESTION_MARKS, isaac_typescript_definitions_1.PillEffect.TELEPILLS],
        [isaac_typescript_definitions_1.PillEffect.RETRO_VISION, isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER],
        [isaac_typescript_definitions_1.PillEffect.X_LAX, isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG],
        [isaac_typescript_definitions_1.PillEffect.IM_EXCITED, isaac_typescript_definitions_1.PillEffect.IM_DROWSY],
        [isaac_typescript_definitions_1.PillEffect.HORF, isaac_typescript_definitions_1.PillEffect.GULP],
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_DOWN, isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_UP]
        // 47
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/falsePHDPillConversionsMap.js
  var require_falsePHDPillConversionsMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/falsePHDPillConversionsMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FALSE_PHD_PILL_CONVERSIONS_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.FALSE_PHD_PILL_CONVERSIONS_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.PillEffect.BAD_GAS, isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN],
        [isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL, isaac_typescript_definitions_1.PillEffect.BAD_TRIP],
        [isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS, isaac_typescript_definitions_1.PillEffect.TEARS_DOWN],
        [isaac_typescript_definitions_1.PillEffect.EXPLOSIVE_DIARRHEA, isaac_typescript_definitions_1.PillEffect.RANGE_DOWN],
        [isaac_typescript_definitions_1.PillEffect.FULL_HEALTH, isaac_typescript_definitions_1.PillEffect.BAD_TRIP],
        [isaac_typescript_definitions_1.PillEffect.HEALTH_UP, isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN],
        [isaac_typescript_definitions_1.PillEffect.PRETTY_FLY, isaac_typescript_definitions_1.PillEffect.LUCK_DOWN],
        [isaac_typescript_definitions_1.PillEffect.RANGE_UP, isaac_typescript_definitions_1.PillEffect.RANGE_DOWN],
        [isaac_typescript_definitions_1.PillEffect.SPEED_UP, isaac_typescript_definitions_1.PillEffect.SPEED_DOWN],
        [isaac_typescript_definitions_1.PillEffect.TEARS_UP, isaac_typescript_definitions_1.PillEffect.TEARS_DOWN],
        [isaac_typescript_definitions_1.PillEffect.LUCK_UP, isaac_typescript_definitions_1.PillEffect.LUCK_DOWN],
        [isaac_typescript_definitions_1.PillEffect.TELEPILLS, isaac_typescript_definitions_1.PillEffect.QUESTION_MARKS],
        [isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY, isaac_typescript_definitions_1.PillEffect.SPEED_DOWN],
        [isaac_typescript_definitions_1.PillEffect.HEMATEMESIS, isaac_typescript_definitions_1.PillEffect.BAD_TRIP],
        [isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER, isaac_typescript_definitions_1.PillEffect.AMNESIA],
        [isaac_typescript_definitions_1.PillEffect.PHEROMONES, isaac_typescript_definitions_1.PillEffect.PARALYSIS],
        [isaac_typescript_definitions_1.PillEffect.LEMON_PARTY, isaac_typescript_definitions_1.PillEffect.AMNESIA],
        [isaac_typescript_definitions_1.PillEffect.PERCS, isaac_typescript_definitions_1.PillEffect.ADDICTED],
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_LARGER, isaac_typescript_definitions_1.PillEffect.RANGE_DOWN],
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_SMALL, isaac_typescript_definitions_1.PillEffect.SPEED_DOWN],
        [isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION, isaac_typescript_definitions_1.PillEffect.TEARS_DOWN],
        [isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION, isaac_typescript_definitions_1.PillEffect.LUCK_DOWN],
        [isaac_typescript_definitions_1.PillEffect.POWER, isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD],
        [isaac_typescript_definitions_1.PillEffect.FRIENDS_TILL_THE_END, isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN],
        [isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG, isaac_typescript_definitions_1.PillEffect.X_LAX],
        [isaac_typescript_definitions_1.PillEffect.IM_DROWSY, isaac_typescript_definitions_1.PillEffect.IM_EXCITED],
        [isaac_typescript_definitions_1.PillEffect.GULP, isaac_typescript_definitions_1.PillEffect.HORF],
        [isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE, isaac_typescript_definitions_1.PillEffect.RETRO_VISION],
        [isaac_typescript_definitions_1.PillEffect.VURP, isaac_typescript_definitions_1.PillEffect.HORF],
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_UP, isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_DOWN]
        // 48
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/objects/pillEffectClasses.js
  var require_pillEffectClasses = __commonJS({
    "node_modules/isaacscript-common/dist/objects/pillEffectClasses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PILL_EFFECT_CLASSES = exports2.DEFAULT_PILL_EFFECT_CLASS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_PILL_EFFECT_CLASS = isaac_typescript_definitions_1.ItemConfigPillEffectClass.MODDED;
      exports2.PILL_EFFECT_CLASSES = {
        [isaac_typescript_definitions_1.PillEffect.BAD_GAS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.BAD_TRIP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.EXPLOSIVE_DIARRHEA]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.FULL_HEALTH]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.HEALTH_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.I_FOUND_PILLS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.JOKE,
        [isaac_typescript_definitions_1.PillEffect.PUBERTY]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.JOKE,
        [isaac_typescript_definitions_1.PillEffect.PRETTY_FLY]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.RANGE_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.RANGE_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.SPEED_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.SPEED_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.TEARS_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.TEARS_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.LUCK_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.LUCK_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.TELEPILLS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.HEMATEMESIS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.PARALYSIS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.PHEROMONES]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.AMNESIA]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.LEMON_PARTY]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.PERCS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.ADDICTED]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.RELAX]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.JOKE,
        [isaac_typescript_definitions_1.PillEffect.QUESTION_MARKS]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_LARGER]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_SMALL]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.POWER]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.RETRO_VISION]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.FRIENDS_TILL_THE_END]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.X_LAX]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.JOKE,
        [isaac_typescript_definitions_1.PillEffect.IM_DROWSY]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.IM_EXCITED]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.GULP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.HORF]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.JOKE,
        [isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MINOR,
        [isaac_typescript_definitions_1.PillEffect.VURP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MEDIUM,
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR,
        [isaac_typescript_definitions_1.PillEffect.EXPERIMENTAL]: isaac_typescript_definitions_1.ItemConfigPillEffectClass.MAJOR
        // 49
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/pillEffectNames.js
  var require_pillEffectNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/pillEffectNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PILL_EFFECT_NAMES = exports2.DEFAULT_PILL_EFFECT_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_PILL_EFFECT_NAME = "Unknown";
      exports2.PILL_EFFECT_NAMES = {
        [isaac_typescript_definitions_1.PillEffect.BAD_GAS]: "Bad Gas",
        [isaac_typescript_definitions_1.PillEffect.BAD_TRIP]: "Bad Trip",
        [isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL]: "Balls of Steel",
        [isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS]: "Bombs Are Key",
        [isaac_typescript_definitions_1.PillEffect.EXPLOSIVE_DIARRHEA]: "Explosive Diarrhea",
        [isaac_typescript_definitions_1.PillEffect.FULL_HEALTH]: "Full Health",
        [isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN]: "Health Down",
        [isaac_typescript_definitions_1.PillEffect.HEALTH_UP]: "Health Up",
        [isaac_typescript_definitions_1.PillEffect.I_FOUND_PILLS]: "I Found Pills",
        [isaac_typescript_definitions_1.PillEffect.PUBERTY]: "Puberty",
        [isaac_typescript_definitions_1.PillEffect.PRETTY_FLY]: "Pretty Fly",
        [isaac_typescript_definitions_1.PillEffect.RANGE_DOWN]: "Range Down",
        [isaac_typescript_definitions_1.PillEffect.RANGE_UP]: "Range Up",
        [isaac_typescript_definitions_1.PillEffect.SPEED_DOWN]: "Speed Down",
        [isaac_typescript_definitions_1.PillEffect.SPEED_UP]: "Speed Up",
        [isaac_typescript_definitions_1.PillEffect.TEARS_DOWN]: "Tears Down",
        [isaac_typescript_definitions_1.PillEffect.TEARS_UP]: "Tears Up",
        [isaac_typescript_definitions_1.PillEffect.LUCK_DOWN]: "Luck Down",
        [isaac_typescript_definitions_1.PillEffect.LUCK_UP]: "Luck Up",
        [isaac_typescript_definitions_1.PillEffect.TELEPILLS]: "Telepills",
        [isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY]: "48 Hour Energy",
        [isaac_typescript_definitions_1.PillEffect.HEMATEMESIS]: "Hematemesis",
        [isaac_typescript_definitions_1.PillEffect.PARALYSIS]: "Paralysis",
        [isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER]: "I can see forever!",
        [isaac_typescript_definitions_1.PillEffect.PHEROMONES]: "Pheromones",
        [isaac_typescript_definitions_1.PillEffect.AMNESIA]: "Amnesia",
        [isaac_typescript_definitions_1.PillEffect.LEMON_PARTY]: "Lemon Party",
        [isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD]: "R U a Wizard?",
        [isaac_typescript_definitions_1.PillEffect.PERCS]: "Percs!",
        [isaac_typescript_definitions_1.PillEffect.ADDICTED]: "Addicted!",
        [isaac_typescript_definitions_1.PillEffect.RELAX]: "Re-Lax",
        [isaac_typescript_definitions_1.PillEffect.QUESTION_MARKS]: "???",
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_LARGER]: "One makes you larger",
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_SMALL]: "One makes you small",
        [isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION]: "Infested!",
        [isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION]: "Infested?",
        [isaac_typescript_definitions_1.PillEffect.POWER]: "Power Pill!",
        [isaac_typescript_definitions_1.PillEffect.RETRO_VISION]: "Retro Vision",
        [isaac_typescript_definitions_1.PillEffect.FRIENDS_TILL_THE_END]: "Friends Till The End!",
        [isaac_typescript_definitions_1.PillEffect.X_LAX]: "X-Lax",
        [isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG]: "Something's wrong...",
        [isaac_typescript_definitions_1.PillEffect.IM_DROWSY]: "I'm Drowsy...",
        [isaac_typescript_definitions_1.PillEffect.IM_EXCITED]: "I'm Excited!!!",
        [isaac_typescript_definitions_1.PillEffect.GULP]: "Gulp!",
        [isaac_typescript_definitions_1.PillEffect.HORF]: "Horf!",
        [isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE]: "Feels like I'm walking on sunshine!",
        [isaac_typescript_definitions_1.PillEffect.VURP]: "Vurp!",
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_DOWN]: "Shot Speed Down",
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_UP]: "Shot Speed Up",
        [isaac_typescript_definitions_1.PillEffect.EXPERIMENTAL]: "Experimental Pill"
        // 49
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/pillEffectTypes.js
  var require_pillEffectTypes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/pillEffectTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PILL_EFFECT_TYPES = exports2.DEFAULT_PILL_EFFECT_TYPE = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_PILL_EFFECT_TYPE = isaac_typescript_definitions_1.ItemConfigPillEffectType.MODDED;
      exports2.PILL_EFFECT_TYPES = {
        [isaac_typescript_definitions_1.PillEffect.BAD_GAS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.BAD_TRIP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.EXPLOSIVE_DIARRHEA]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.FULL_HEALTH]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.HEALTH_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.I_FOUND_PILLS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.PUBERTY]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.PRETTY_FLY]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.RANGE_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.RANGE_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.SPEED_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.SPEED_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.TEARS_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.TEARS_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.LUCK_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.LUCK_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.TELEPILLS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.HEMATEMESIS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.PARALYSIS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.PHEROMONES]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.AMNESIA]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.LEMON_PARTY]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.PERCS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.ADDICTED]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.RELAX]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.QUESTION_MARKS]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_LARGER]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_SMALL]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.POWER]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.RETRO_VISION]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.FRIENDS_TILL_THE_END]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.X_LAX]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.IM_DROWSY]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.IM_EXCITED]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.GULP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.HORF]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL,
        [isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.VURP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_DOWN]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE,
        [isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_UP]: isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE,
        [isaac_typescript_definitions_1.PillEffect.EXPERIMENTAL]: isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL
        // 49
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/pillEffectTypeToPillEffects.js
  var require_pillEffectTypeToPillEffects = __commonJS({
    "node_modules/isaacscript-common/dist/objects/pillEffectTypeToPillEffects.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PILL_EFFECT_TYPE_TO_PILL_EFFECTS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constantsVanilla_1 = require_constantsVanilla();
      var array_1 = require_array();
      var pillEffectTypes_1 = require_pillEffectTypes();
      exports2.PILL_EFFECT_TYPE_TO_PILL_EFFECTS = {
        // 0
        [isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE]: getPillEffectsOfType(isaac_typescript_definitions_1.ItemConfigPillEffectType.POSITIVE),
        // 1
        [isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE]: getPillEffectsOfType(isaac_typescript_definitions_1.ItemConfigPillEffectType.NEGATIVE),
        // 2
        [isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL]: getPillEffectsOfType(isaac_typescript_definitions_1.ItemConfigPillEffectType.NEUTRAL),
        // 3
        [isaac_typescript_definitions_1.ItemConfigPillEffectType.MODDED]: getPillEffectsOfType(isaac_typescript_definitions_1.ItemConfigPillEffectType.MODDED)
      };
      function getPillEffectsOfType(matchingPillEffectType) {
        return (0, array_1.filterMap)(constantsVanilla_1.VANILLA_PILL_EFFECTS, (pillEffect) => {
          const pillEffectType = pillEffectTypes_1.PILL_EFFECT_TYPES[pillEffect];
          return pillEffectType === matchingPillEffectType ? pillEffect : void 0;
        });
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/pills.js
  var require_pills = __commonJS({
    "node_modules/isaacscript-common/dist/functions/pills.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isVanillaPillEffect = exports2.isValidPillEffect = exports2.isModdedPillEffect = exports2.isHorsePill = exports2.isGoldPill = exports2.getVanillaPillEffectsOfType = exports2.getPillEffectType = exports2.getPillEffectName = exports2.getPillEffectClass = exports2.getPillColorFromEffect = exports2.getPHDPillEffect = exports2.getNormalPillColors = exports2.getNormalPillColorFromHorse = exports2.getHorsePillColors = exports2.getHorsePillColor = exports2.getFalsePHDPillEffect = exports2.getAllPillColors = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var PHDPillConversionsMap_1 = require_PHDPillConversionsMap();
      var falsePHDPillConversionsMap_1 = require_falsePHDPillConversionsMap();
      var pillEffectClasses_1 = require_pillEffectClasses();
      var pillEffectNames_1 = require_pillEffectNames();
      var pillEffectTypeToPillEffects_1 = require_pillEffectTypeToPillEffects();
      var pillEffectTypes_1 = require_pillEffectTypes();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var HORSE_PILL_COLOR_ADJUSTMENT = 2048;
      function getAllPillColors() {
        return cachedEnumValues_1.PILL_COLOR_VALUES.slice(1);
      }
      exports2.getAllPillColors = getAllPillColors;
      function getFalsePHDPillEffect(pillEffect) {
        const convertedPillEffect = falsePHDPillConversionsMap_1.FALSE_PHD_PILL_CONVERSIONS_MAP.get(pillEffect);
        return convertedPillEffect ?? pillEffect;
      }
      exports2.getFalsePHDPillEffect = getFalsePHDPillEffect;
      function getHorsePillColor(pillColor) {
        return isHorsePill(pillColor) ? pillColor : pillColor + HORSE_PILL_COLOR_ADJUSTMENT;
      }
      exports2.getHorsePillColor = getHorsePillColor;
      function getHorsePillColors() {
        return (0, utils_1.iRange)(constantsFirstLast_1.FIRST_HORSE_PILL_COLOR, constantsFirstLast_1.LAST_HORSE_PILL_COLOR);
      }
      exports2.getHorsePillColors = getHorsePillColors;
      function getNormalPillColorFromHorse(pillColor) {
        return isHorsePill(pillColor) ? (0, types_1.asPillColor)(pillColor - HORSE_PILL_COLOR_ADJUSTMENT) : pillColor;
      }
      exports2.getNormalPillColorFromHorse = getNormalPillColorFromHorse;
      function getNormalPillColors() {
        return (0, utils_1.iRange)(constantsFirstLast_1.FIRST_PILL_COLOR, constantsFirstLast_1.LAST_NORMAL_PILL_COLOR);
      }
      exports2.getNormalPillColors = getNormalPillColors;
      function getPHDPillEffect(pillEffect) {
        const convertedPillEffect = PHDPillConversionsMap_1.PHD_PILL_CONVERSIONS_MAP.get(pillEffect);
        return convertedPillEffect ?? pillEffect;
      }
      exports2.getPHDPillEffect = getPHDPillEffect;
      function getPillColorFromEffect(pillEffect) {
        const itemPool = cachedClasses_1.game.GetItemPool();
        const normalPillColors = getNormalPillColors();
        for (const normalPillColor of normalPillColors) {
          const normalPillEffect = itemPool.GetPillEffect(normalPillColor);
          if (normalPillEffect === pillEffect) {
            return normalPillColor;
          }
        }
        return isaac_typescript_definitions_1.PillColor.NULL;
      }
      exports2.getPillColorFromEffect = getPillColorFromEffect;
      function getPillEffectClass(pillEffect) {
        const pillEffectClass = pillEffectClasses_1.PILL_EFFECT_CLASSES[pillEffect];
        return pillEffectClass ?? pillEffectClasses_1.DEFAULT_PILL_EFFECT_CLASS;
      }
      exports2.getPillEffectClass = getPillEffectClass;
      function getPillEffectName(pillEffect) {
        const pillEffectName = pillEffectNames_1.PILL_EFFECT_NAMES[pillEffect];
        if (pillEffectName !== void 0) {
          return pillEffectName;
        }
        const itemConfigPillEffect = cachedClasses_1.itemConfig.GetPillEffect(pillEffect);
        if (itemConfigPillEffect !== void 0) {
          return itemConfigPillEffect.Name;
        }
        return pillEffectNames_1.DEFAULT_PILL_EFFECT_NAME;
      }
      exports2.getPillEffectName = getPillEffectName;
      function getPillEffectType(pillEffect) {
        const pillEffectType = pillEffectTypes_1.PILL_EFFECT_TYPES[pillEffect];
        return pillEffectType ?? pillEffectTypes_1.DEFAULT_PILL_EFFECT_TYPE;
      }
      exports2.getPillEffectType = getPillEffectType;
      function getVanillaPillEffectsOfType(pillEffectType) {
        return pillEffectTypeToPillEffects_1.PILL_EFFECT_TYPE_TO_PILL_EFFECTS[pillEffectType];
      }
      exports2.getVanillaPillEffectsOfType = getVanillaPillEffectsOfType;
      function isGoldPill(pillColor) {
        return pillColor === isaac_typescript_definitions_1.PillColor.GOLD || pillColor === isaac_typescript_definitions_1.PillColor.HORSE_GOLD;
      }
      exports2.isGoldPill = isGoldPill;
      function isHorsePill(pillColor) {
        return (0, types_1.asNumber)(pillColor) > HORSE_PILL_COLOR_ADJUSTMENT;
      }
      exports2.isHorsePill = isHorsePill;
      function isModdedPillEffect(pillEffect) {
        return !isVanillaPillEffect(pillEffect);
      }
      exports2.isModdedPillEffect = isModdedPillEffect;
      function isValidPillEffect(pillEffect) {
        const potentialPillEffect = (0, types_1.asPillEffect)(pillEffect);
        const itemConfigPillEffect = cachedClasses_1.itemConfig.GetPillEffect(potentialPillEffect);
        return itemConfigPillEffect !== void 0;
      }
      exports2.isValidPillEffect = isValidPillEffect;
      function isVanillaPillEffect(pillEffect) {
        return pillEffect <= constantsFirstLast_1.LAST_VANILLA_PILL_EFFECT;
      }
      exports2.isVanillaPillEffect = isVanillaPillEffect;
    }
  });

  // node_modules/isaacscript-common/dist/functions/pocketItems.js
  var require_pocketItems = __commonJS({
    "node_modules/isaacscript-common/dist/functions/pocketItems.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.pocketItemsEquals = exports2.isFirstSlotPocketActiveItem = exports2.hasOpenPocketItemSlot = exports2.getPocketItems = exports2.getFirstPill = exports2.getFirstCardOrPill = exports2.getFirstCard = exports2.getActivePocketItemSlot = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var PocketItemType_1 = require_PocketItemType();
      var players_1 = require_players();
      function getActivePocketItemSlot(player) {
        const pocketItems = getPocketItems(player);
        for (const pocketItem of pocketItems) {
          if (pocketItem.type === PocketItemType_1.PocketItemType.ACTIVE_ITEM) {
            return pocketItem.slot;
          }
        }
        return void 0;
      }
      exports2.getActivePocketItemSlot = getActivePocketItemSlot;
      function getFirstCard(player) {
        const pocketItems = getPocketItems(player);
        return pocketItems.find((pocketItem) => pocketItem.type === PocketItemType_1.PocketItemType.CARD);
      }
      exports2.getFirstCard = getFirstCard;
      function getFirstCardOrPill(player) {
        const pocketItems = getPocketItems(player);
        return pocketItems.find((pocketItem) => pocketItem.type === PocketItemType_1.PocketItemType.CARD || pocketItem.type === PocketItemType_1.PocketItemType.PILL);
      }
      exports2.getFirstCardOrPill = getFirstCardOrPill;
      function getFirstPill(player) {
        const pocketItems = getPocketItems(player);
        return pocketItems.find((pocketItem) => pocketItem.type === PocketItemType_1.PocketItemType.PILL);
      }
      exports2.getFirstPill = getFirstPill;
      function getPocketItems(player) {
        const pocketItem = player.GetActiveItem(isaac_typescript_definitions_1.ActiveSlot.POCKET);
        const hasPocketItem = pocketItem !== isaac_typescript_definitions_1.CollectibleType.NULL;
        const pocketItem2 = player.GetActiveItem(isaac_typescript_definitions_1.ActiveSlot.POCKET_SINGLE_USE);
        const hasPocketItem2 = pocketItem2 !== isaac_typescript_definitions_1.CollectibleType.NULL;
        const maxPocketItems = player.GetMaxPocketItems();
        const pocketItems = [];
        let pocketItemIdentified = false;
        let pocketItem2Identified = false;
        for (const slot of cachedEnumValues_1.POCKET_ITEM_SLOT_VALUES) {
          const cardType = player.GetCard(slot);
          const pillColor = player.GetPill(slot);
          if (cardType !== isaac_typescript_definitions_1.CardType.NULL) {
            pocketItems.push({
              slot,
              type: PocketItemType_1.PocketItemType.CARD,
              subType: cardType
            });
          } else if (pillColor !== isaac_typescript_definitions_1.PillColor.NULL) {
            pocketItems.push({
              slot,
              type: PocketItemType_1.PocketItemType.PILL,
              subType: pillColor
            });
          } else if (hasPocketItem && !hasPocketItem2 && !pocketItemIdentified) {
            pocketItemIdentified = true;
            pocketItems.push({
              slot,
              type: PocketItemType_1.PocketItemType.ACTIVE_ITEM,
              subType: pocketItem
            });
          } else if (!hasPocketItem && hasPocketItem2 && !pocketItem2Identified) {
            pocketItem2Identified = true;
            pocketItems.push({
              slot,
              type: PocketItemType_1.PocketItemType.DICE_BAG_DICE,
              subType: pocketItem2
            });
          } else if (hasPocketItem && hasPocketItem2) {
            pocketItems.push({
              slot,
              type: PocketItemType_1.PocketItemType.UNDETERMINABLE,
              subType: 0
            });
          } else {
            pocketItems.push({
              slot,
              type: PocketItemType_1.PocketItemType.EMPTY,
              subType: 0
            });
          }
          if (slot + 1 === maxPocketItems) {
            break;
          }
        }
        return pocketItems;
      }
      exports2.getPocketItems = getPocketItems;
      function hasOpenPocketItemSlot(player) {
        if ((0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.SOUL_B)) {
          return false;
        }
        const pocketItems = getPocketItems(player);
        return pocketItems.some((pocketItem) => pocketItem.type === PocketItemType_1.PocketItemType.EMPTY);
      }
      exports2.hasOpenPocketItemSlot = hasOpenPocketItemSlot;
      function isFirstSlotPocketActiveItem(player) {
        const pocketItems = getPocketItems(player);
        const firstPocketItem = pocketItems[0];
        if (firstPocketItem === void 0) {
          return false;
        }
        return firstPocketItem.type === PocketItemType_1.PocketItemType.ACTIVE_ITEM;
      }
      exports2.isFirstSlotPocketActiveItem = isFirstSlotPocketActiveItem;
      function pocketItemsEquals(pocketItems1, pocketItems2) {
        if (pocketItems1.length !== pocketItems2.length) {
          return false;
        }
        for (let i = 0; i < pocketItems1.length; i++) {
          const pocketItem1 = pocketItems1[i];
          const pocketItem2 = pocketItems2[i];
          const keys = Object.keys(pocketItem1);
          for (const key of keys) {
            if (pocketItem1[key] !== pocketItem2[key]) {
              return false;
            }
          }
        }
        return true;
      }
      exports2.pocketItemsEquals = pocketItemsEquals;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PostUsePillFilter.js
  var require_PostUsePillFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PostUsePillFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostUsePillFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var PocketItemType_1 = require_PocketItemType();
      var pills_1 = require_pills();
      var playerDataStructures_1 = require_playerDataStructures();
      var pocketItems_1 = require_pocketItems();
      var CustomCallback_1 = require_CustomCallback();
      var v = {
        run: {
          pillColorToPillEffect: /* @__PURE__ */ new Map(),
          playerPocketItems: /* @__PURE__ */ new Map()
        }
      };
      var PostUsePillFilter = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.callbacksUsed = [
            // 10
            [isaac_typescript_definitions_1.ModCallback.POST_USE_PILL, this.postUsePill]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        // ModCallback.POST_USE_PILL (10)
        postUsePill = (pillEffect, player, useFlags) => {
          const pillColor = this.getPillColorOfCurrentlyUsedPill(player, pillEffect);
          this.fire(pillEffect, pillColor, player, useFlags);
        };
        getPillColorOfCurrentlyUsedPill(player, pillEffect) {
          const oldPocketItems = (0, playerDataStructures_1.mapGetPlayer)(v.run.playerPocketItems, player);
          if (oldPocketItems !== void 0) {
            const pocketItems = (0, pocketItems_1.getPocketItems)(player);
            if (!(0, pocketItems_1.pocketItemsEquals)(oldPocketItems, pocketItems)) {
              const oldPocketItemSlot1 = oldPocketItems.find((pocketItem) => pocketItem.slot === isaac_typescript_definitions_1.PocketItemSlot.SLOT_1);
              if (oldPocketItemSlot1 !== void 0 && oldPocketItemSlot1.type === PocketItemType_1.PocketItemType.PILL) {
                return oldPocketItemSlot1.subType;
              }
            }
          }
          return (0, pills_1.getPillColorFromEffect)(pillEffect);
        }
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          this.updateCurrentPocketItems(player);
        };
        updateCurrentPocketItems(player) {
          const pocketItems = (0, pocketItems_1.getPocketItems)(player);
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playerPocketItems, player, pocketItems);
        }
      };
      exports2.PostUsePillFilter = PostUsePillFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreBerserkDeath.js
  var require_PreBerserkDeath = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreBerserkDeath.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreBerserkDeath = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      var revive_1 = require_revive();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreBerserkDeath = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          if ((0, playerIndex_1.isChildPlayer)(player)) {
            return;
          }
          const effects = player.GetEffects();
          const berserkEffect = effects.GetCollectibleEffect(isaac_typescript_definitions_1.CollectibleType.BERSERK);
          const numHitsRemaining = (0, players_1.getPlayerNumHitsRemaining)(player);
          if (berserkEffect !== void 0 && berserkEffect.Cooldown === 1 && numHitsRemaining === 0 && !(0, revive_1.willPlayerRevive)(player)) {
            this.fire(player);
          }
        };
      };
      exports2.PreBerserkDeath = PreBerserkDeath;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreBombCollisionFilter.js
  var require_PreBombCollisionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreBombCollisionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreBombCollisionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreBombCollisionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 60
            [isaac_typescript_definitions_1.ModCallback.PRE_BOMB_COLLISION, this.preBombCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireBomb;
        // ModCallback.PRE_BOMB_COLLISION (60)
        preBombCollision = (bomb, collider, low) => this.fire(bomb, collider, low);
      };
      exports2.PreBombCollisionFilter = PreBombCollisionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreCustomRevive.js
  var require_PreCustomRevive = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreCustomRevive.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreCustomRevive = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreCustomRevive = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.CUSTOM_REVIVE];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
      };
      exports2.PreCustomRevive = PreCustomRevive;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreEntitySpawnFilter.js
  var require_PreEntitySpawnFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreEntitySpawnFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreEntitySpawnFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CustomCallback_1 = require_CustomCallback();
      var PreEntitySpawnFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 24
            [isaac_typescript_definitions_1.ModCallback.PRE_ENTITY_SPAWN, this.preEntitySpawn]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [entityType, variant, subType] = fireArgs;
          const [callbackEntityType, callbackVariant, callbackSubType] = optionalArgs;
          return (callbackEntityType === void 0 || callbackEntityType === entityType) && (callbackVariant === void 0 || callbackVariant === variant) && (callbackSubType === void 0 || callbackSubType === subType);
        };
        // ModCallback.PRE_ENTITY_SPAWN (24)
        preEntitySpawn = (entityType, variant, subType, position, velocity, spawner, initSeed) => this.fire(entityType, variant, subType, position, velocity, spawner, initSeed);
      };
      exports2.PreEntitySpawnFilter = PreEntitySpawnFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreFamiliarCollisionFilter.js
  var require_PreFamiliarCollisionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreFamiliarCollisionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreFamiliarCollisionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreFamiliarCollisionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 26
            [isaac_typescript_definitions_1.ModCallback.PRE_FAMILIAR_COLLISION, this.preFamiliarCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireFamiliar;
        // ModCallback.PRE_FAMILIAR_COLLISION (26)
        preFamiliarCollision = (familiar, collider, low) => this.fire(familiar, collider, low);
      };
      exports2.PreFamiliarCollisionFilter = PreFamiliarCollisionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreGetPedestal.js
  var require_PreGetPedestal = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreGetPedestal.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreGetPedestal = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreGetPedestal = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 38
            [
              isaac_typescript_definitions_1.ModCallback.PRE_PICKUP_COLLISION,
              this.prePickupCollision,
              [isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE]
            ]
          ];
        }
        shouldFire = shouldFire_1.shouldFirePlayer;
        // ModCallback.PRE_PICKUP_COLLISION (35)
        prePickupCollision = (pickup, collider, _low) => {
          const collectible = pickup;
          if (collectible.SubType === isaac_typescript_definitions_1.CollectibleType.NULL) {
            return void 0;
          }
          const player = collider.ToPlayer();
          if (player === void 0) {
            return void 0;
          }
          const numCoins = player.GetNumCoins();
          if (collectible.Price > numCoins) {
            return void 0;
          }
          if (collectible.Wait > 0 || player.ItemHoldCooldown > 0) {
            return void 0;
          }
          if (player.IsHoldingItem()) {
            return void 0;
          }
          return this.fire(player, collectible);
        };
      };
      exports2.PreGetPedestal = PreGetPedestal;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreItemPickup.js
  var require_PreItemPickup = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreItemPickup.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreItemPickup = void 0;
      var ISCFeature_1 = require_ISCFeature();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreItemPickup = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ITEM_PICKUP_DETECTION];
        }
        shouldFire = shouldFire_1.shouldFireItemPickup;
      };
      exports2.PreItemPickup = PreItemPickup;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreKnifeCollisionFilter.js
  var require_PreKnifeCollisionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreKnifeCollisionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreKnifeCollisionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreKnifeCollisionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 53
            [isaac_typescript_definitions_1.ModCallback.PRE_KNIFE_COLLISION, this.preKnifeCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireKnife;
        // ModCallback.PRE_KNIFE_COLLISION (53)
        preKnifeCollision = (knife, collider, low) => this.fire(knife, collider, low);
      };
      exports2.PreKnifeCollisionFilter = PreKnifeCollisionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreNPCCollisionFilter.js
  var require_PreNPCCollisionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreNPCCollisionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreNPCCollisionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreNPCCollisionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 30
            [isaac_typescript_definitions_1.ModCallback.PRE_NPC_COLLISION, this.preNPCCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.PRE_NPC_COLLISION (30)
        preNPCCollision = (npc, collider, low) => this.fire(npc, collider, low);
      };
      exports2.PreNPCCollisionFilter = PreNPCCollisionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreNPCUpdateFilter.js
  var require_PreNPCUpdateFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreNPCUpdateFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreNPCUpdateFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreNPCUpdateFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 69
            [isaac_typescript_definitions_1.ModCallback.PRE_NPC_UPDATE, this.preNPCUpdate]
          ];
        }
        shouldFire = shouldFire_1.shouldFireNPC;
        // ModCallback.PRE_NPC_UPDATE (69)
        preNPCUpdate = (npc) => this.fire(npc);
      };
      exports2.PreNPCUpdateFilter = PreNPCUpdateFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreNewLevel.js
  var require_PreNewLevel = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreNewLevel.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreNewLevel = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var sprites_1 = require_sprites();
      var stage_1 = require_stage();
      var ReadonlySet_1 = require_ReadonlySet();
      var CustomCallback_1 = require_CustomCallback();
      var TRAVELING_TO_NEXT_FLOOR_ANIMATIONS = new ReadonlySet_1.ReadonlySet([
        "Trapdoor",
        "LightTravel"
      ]);
      var v = {
        run: {
          firedOnStage: null
        }
      };
      var PreNewLevel = class extends CustomCallback_1.CustomCallback {
        v = v;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED,
              this.postPlayerRenderReordered
            ]
          ];
        }
        // ModCallbackCustom.POST_PLAYER_RENDER_REORDERED
        postPlayerRenderReordered = (player) => {
          const effectiveStage = (0, stage_1.getEffectiveStage)();
          if (effectiveStage === v.run.firedOnStage) {
            return;
          }
          const sprite = player.GetSprite();
          const animation = sprite.GetAnimation();
          if (!TRAVELING_TO_NEXT_FLOOR_ANIMATIONS.has(animation)) {
            return;
          }
          const frame = sprite.GetFrame();
          const finalFrame = (0, sprites_1.getLastFrameOfAnimation)(sprite);
          if (frame === finalFrame) {
            v.run.firedOnStage = effectiveStage;
            this.fire(player);
          }
        };
      };
      exports2.PreNewLevel = PreNewLevel;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreProjectileCollisionFilter.js
  var require_PreProjectileCollisionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreProjectileCollisionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreProjectileCollisionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreProjectileCollisionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 46
            [isaac_typescript_definitions_1.ModCallback.PRE_PROJECTILE_COLLISION, this.preProjectileCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireProjectile;
        // ModCallback.PRE_PROJECTILE_COLLISION (46)
        preProjectileCollision = (projectile, collider, low) => this.fire(projectile, collider, low);
      };
      exports2.PreProjectileCollisionFilter = PreProjectileCollisionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreRoomEntitySpawnFilter.js
  var require_PreRoomEntitySpawnFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreRoomEntitySpawnFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreRoomEntitySpawnFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var CustomCallback_1 = require_CustomCallback();
      var PreRoomEntitySpawnFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 71
            [isaac_typescript_definitions_1.ModCallback.PRE_ROOM_ENTITY_SPAWN, this.preRoomEntitySpawn]
          ];
        }
        shouldFire = (fireArgs, optionalArgs) => {
          const [entityTypeOrGridEntityXMLType, variant, subType] = fireArgs;
          const [callbackEntityTypeOrGridEntityXMLType, callbackVariant, callbackSubType] = optionalArgs;
          return (callbackEntityTypeOrGridEntityXMLType === void 0 || callbackEntityTypeOrGridEntityXMLType === entityTypeOrGridEntityXMLType) && (callbackVariant === void 0 || callbackVariant === variant) && (callbackSubType === void 0 || callbackSubType === subType);
        };
        // ModCallback.PRE_ROOM_ENTITY_SPAWN (71)
        preRoomEntitySpawn = (entityTypeOrGridEntityXMLType, variant, subType, gridIndex, initSeed) => this.fire(entityTypeOrGridEntityXMLType, variant, subType, gridIndex, initSeed);
      };
      exports2.PreRoomEntitySpawnFilter = PreRoomEntitySpawnFilter;
    }
  });

  // node_modules/isaacscript-common/dist/classes/callbacks/PreTearCollisionFilter.js
  var require_PreTearCollisionFilter = __commonJS({
    "node_modules/isaacscript-common/dist/classes/callbacks/PreTearCollisionFilter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreTearCollisionFilter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var shouldFire_1 = require_shouldFire();
      var CustomCallback_1 = require_CustomCallback();
      var PreTearCollisionFilter = class extends CustomCallback_1.CustomCallback {
        constructor() {
          super();
          this.callbacksUsed = [
            // 42
            [isaac_typescript_definitions_1.ModCallback.PRE_TEAR_COLLISION, this.preTearCollision]
          ];
        }
        shouldFire = shouldFire_1.shouldFireTear;
        // ModCallback.PRE_TEAR_COLLISION (42)
        preTearCollision = (tear, collider, low) => this.fire(tear, collider, low);
      };
      exports2.PreTearCollisionFilter = PreTearCollisionFilter;
    }
  });

  // node_modules/isaacscript-common/dist/callbackClasses.js
  var require_callbackClasses = __commonJS({
    "node_modules/isaacscript-common/dist/callbackClasses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PostGridEntityStateChanged = exports2.PostGridEntityRender = exports2.PostGridEntityRemove = exports2.PostGridEntityInit = exports2.PostGridEntityCustomUpdate = exports2.PostGridEntityCustomStateChanged = exports2.PostGridEntityCustomRender = exports2.PostGridEntityCustomRemove = exports2.PostGridEntityCustomInit = exports2.PostGridEntityCustomCollision = exports2.PostGridEntityCustomBroken = exports2.PostGridEntityCollision = exports2.PostGridEntityBroken = exports2.PostGreedModeWave = exports2.PostGameStartedReorderedLast = exports2.PostGameStartedReordered = exports2.PostGameEndFilter = exports2.PostFlip = exports2.PostFirstFlip = exports2.PostFirstEsauJr = exports2.PostFamiliarUpdateFilter = exports2.PostFamiliarStateChanged = exports2.PostFamiliarRenderFilter = exports2.PostFamiliarInitLate = exports2.PostFamiliarInitFilter = exports2.PostEsauJr = exports2.PostEntityKillFilter = exports2.PostEffectUpdateFilter = exports2.PostEffectStateChanged = exports2.PostEffectRenderFilter = exports2.PostEffectInitLate = exports2.PostEffectInitFilter = exports2.PostDoorUpdate = exports2.PostDoorRender = exports2.PostDiceRoomActivated = exports2.PostCustomRevive = exports2.PostCursedTeleport = exports2.PostCollectibleEmpty = exports2.PostBoneSwing = exports2.PostBombUpdateFilter = exports2.PostBombRenderFilter = exports2.PostBombInitLate = exports2.PostBombInitFilter = exports2.PostBombExploded = exports2.PostAmbushStarted = exports2.PostAmbushFinished = exports2.InputActionPlayer = exports2.InputActionFilter = exports2.EntityTakeDmgPlayer = exports2.EntityTakeDmgFilter = void 0;
      exports2.PostProjectileInitLate = exports2.PostProjectileInitFilter = exports2.PostPressurePlateUpdate = exports2.PostPressurePlateRender = exports2.PostPoopUpdate = exports2.PostPoopRender = exports2.PostPlayerUpdateReordered = exports2.PostPlayerRenderReordered = exports2.PostPlayerInitLate = exports2.PostPlayerInitFirst = exports2.PostPlayerFatalDamage = exports2.PostPlayerCollectibleRemoved = exports2.PostPlayerCollectibleAdded = exports2.PostPlayerChangeType = exports2.PostPlayerChangeStat = exports2.PostPlayerChangeHealth = exports2.PostPitUpdate = exports2.PostPitRender = exports2.PostPickupUpdateFilter = exports2.PostPickupStateChanged = exports2.PostPickupSelectionFilter = exports2.PostPickupRenderFilter = exports2.PostPickupInitLate = exports2.PostPickupInitFirst = exports2.PostPickupInitFilter = exports2.PostPickupCollect = exports2.PostPickupChanged = exports2.PostPEffectUpdateReordered = exports2.PostNewRoomReordered = exports2.PostNewRoomEarly = exports2.PostNewLevelReordered = exports2.PostNPCUpdateFilter = exports2.PostNPCStateChanged = exports2.PostNPCRenderFilter = exports2.PostNPCInitLate = exports2.PostNPCInitFilter = exports2.PostNPCDeathFilter = exports2.PostLaserUpdateFilter = exports2.PostLaserRenderFilter = exports2.PostLaserInitLate = exports2.PostLaserInitFilter = exports2.PostKnifeUpdateFilter = exports2.PostKnifeRenderFilter = exports2.PostKnifeInitLate = exports2.PostKnifeInitFilter = exports2.PostKeyboardPressed = exports2.PostItemPickup = exports2.PostItemDischarge = exports2.PostHolyMantleRemoved = exports2.PostGridEntityUpdate = void 0;
      exports2.PreTearCollisionFilter = exports2.PreRoomEntitySpawnFilter = exports2.PreProjectileCollisionFilter = exports2.PreNewLevel = exports2.PreNPCUpdateFilter = exports2.PreNPCCollisionFilter = exports2.PreKnifeCollisionFilter = exports2.PreItemPickup = exports2.PreGetPedestal = exports2.PreFamiliarCollisionFilter = exports2.PreEntitySpawnFilter = exports2.PreCustomRevive = exports2.PreBombCollisionFilter = exports2.PreBerserkDeath = exports2.PostUsePillFilter = exports2.PostTrinketBreak = exports2.PostTransformation = exports2.PostTearUpdateFilter = exports2.PostTearRenderFilter = exports2.PostTearKill = exports2.PostTearInitVeryLate = exports2.PostTearInitLate = exports2.PostTearInitFilter = exports2.PostTNTUpdate = exports2.PostTNTRender = exports2.PostSpikesUpdate = exports2.PostSpikesRender = exports2.PostSlotUpdate = exports2.PostSlotRender = exports2.PostSlotInit = exports2.PostSlotDestroyed = exports2.PostSlotCollision = exports2.PostSlotAnimationChanged = exports2.PostSacrifice = exports2.PostRoomClearChanged = exports2.PostRockUpdate = exports2.PostRockRender = exports2.PostPurchase = exports2.PostProjectileUpdateFilter = exports2.PostProjectileRenderFilter = exports2.PostProjectileKill = void 0;
      var EntityTakeDmgFilter_1 = require_EntityTakeDmgFilter();
      Object.defineProperty(exports2, "EntityTakeDmgFilter", { enumerable: true, get: function() {
        return EntityTakeDmgFilter_1.EntityTakeDmgFilter;
      } });
      var EntityTakeDmgPlayer_1 = require_EntityTakeDmgPlayer();
      Object.defineProperty(exports2, "EntityTakeDmgPlayer", { enumerable: true, get: function() {
        return EntityTakeDmgPlayer_1.EntityTakeDmgPlayer;
      } });
      var InputActionFilter_1 = require_InputActionFilter();
      Object.defineProperty(exports2, "InputActionFilter", { enumerable: true, get: function() {
        return InputActionFilter_1.InputActionFilter;
      } });
      var InputActionPlayer_1 = require_InputActionPlayer();
      Object.defineProperty(exports2, "InputActionPlayer", { enumerable: true, get: function() {
        return InputActionPlayer_1.InputActionPlayer;
      } });
      var PostAmbushFinished_1 = require_PostAmbushFinished();
      Object.defineProperty(exports2, "PostAmbushFinished", { enumerable: true, get: function() {
        return PostAmbushFinished_1.PostAmbushFinished;
      } });
      var PostAmbushStarted_1 = require_PostAmbushStarted();
      Object.defineProperty(exports2, "PostAmbushStarted", { enumerable: true, get: function() {
        return PostAmbushStarted_1.PostAmbushStarted;
      } });
      var PostBombExploded_1 = require_PostBombExploded();
      Object.defineProperty(exports2, "PostBombExploded", { enumerable: true, get: function() {
        return PostBombExploded_1.PostBombExploded;
      } });
      var PostBombInitFilter_1 = require_PostBombInitFilter();
      Object.defineProperty(exports2, "PostBombInitFilter", { enumerable: true, get: function() {
        return PostBombInitFilter_1.PostBombInitFilter;
      } });
      var PostBombInitLate_1 = require_PostBombInitLate();
      Object.defineProperty(exports2, "PostBombInitLate", { enumerable: true, get: function() {
        return PostBombInitLate_1.PostBombInitLate;
      } });
      var PostBombRenderFilter_1 = require_PostBombRenderFilter();
      Object.defineProperty(exports2, "PostBombRenderFilter", { enumerable: true, get: function() {
        return PostBombRenderFilter_1.PostBombRenderFilter;
      } });
      var PostBombUpdateFilter_1 = require_PostBombUpdateFilter();
      Object.defineProperty(exports2, "PostBombUpdateFilter", { enumerable: true, get: function() {
        return PostBombUpdateFilter_1.PostBombUpdateFilter;
      } });
      var PostBoneSwing_1 = require_PostBoneSwing();
      Object.defineProperty(exports2, "PostBoneSwing", { enumerable: true, get: function() {
        return PostBoneSwing_1.PostBoneSwing;
      } });
      var PostCollectibleEmpty_1 = require_PostCollectibleEmpty();
      Object.defineProperty(exports2, "PostCollectibleEmpty", { enumerable: true, get: function() {
        return PostCollectibleEmpty_1.PostCollectibleEmpty;
      } });
      var PostCursedTeleport_1 = require_PostCursedTeleport();
      Object.defineProperty(exports2, "PostCursedTeleport", { enumerable: true, get: function() {
        return PostCursedTeleport_1.PostCursedTeleport;
      } });
      var PostCustomRevive_1 = require_PostCustomRevive();
      Object.defineProperty(exports2, "PostCustomRevive", { enumerable: true, get: function() {
        return PostCustomRevive_1.PostCustomRevive;
      } });
      var PostDiceRoomActivated_1 = require_PostDiceRoomActivated();
      Object.defineProperty(exports2, "PostDiceRoomActivated", { enumerable: true, get: function() {
        return PostDiceRoomActivated_1.PostDiceRoomActivated;
      } });
      var PostDoorRender_1 = require_PostDoorRender();
      Object.defineProperty(exports2, "PostDoorRender", { enumerable: true, get: function() {
        return PostDoorRender_1.PostDoorRender;
      } });
      var PostDoorUpdate_1 = require_PostDoorUpdate();
      Object.defineProperty(exports2, "PostDoorUpdate", { enumerable: true, get: function() {
        return PostDoorUpdate_1.PostDoorUpdate;
      } });
      var PostEffectInitFilter_1 = require_PostEffectInitFilter();
      Object.defineProperty(exports2, "PostEffectInitFilter", { enumerable: true, get: function() {
        return PostEffectInitFilter_1.PostEffectInitFilter;
      } });
      var PostEffectInitLate_1 = require_PostEffectInitLate();
      Object.defineProperty(exports2, "PostEffectInitLate", { enumerable: true, get: function() {
        return PostEffectInitLate_1.PostEffectInitLate;
      } });
      var PostEffectRenderFilter_1 = require_PostEffectRenderFilter();
      Object.defineProperty(exports2, "PostEffectRenderFilter", { enumerable: true, get: function() {
        return PostEffectRenderFilter_1.PostEffectRenderFilter;
      } });
      var PostEffectStateChanged_1 = require_PostEffectStateChanged();
      Object.defineProperty(exports2, "PostEffectStateChanged", { enumerable: true, get: function() {
        return PostEffectStateChanged_1.PostEffectStateChanged;
      } });
      var PostEffectUpdateFilter_1 = require_PostEffectUpdateFilter();
      Object.defineProperty(exports2, "PostEffectUpdateFilter", { enumerable: true, get: function() {
        return PostEffectUpdateFilter_1.PostEffectUpdateFilter;
      } });
      var PostEntityKillFilter_1 = require_PostEntityKillFilter();
      Object.defineProperty(exports2, "PostEntityKillFilter", { enumerable: true, get: function() {
        return PostEntityKillFilter_1.PostEntityKillFilter;
      } });
      var PostEsauJr_1 = require_PostEsauJr();
      Object.defineProperty(exports2, "PostEsauJr", { enumerable: true, get: function() {
        return PostEsauJr_1.PostEsauJr;
      } });
      var PostFamiliarInitFilter_1 = require_PostFamiliarInitFilter();
      Object.defineProperty(exports2, "PostFamiliarInitFilter", { enumerable: true, get: function() {
        return PostFamiliarInitFilter_1.PostFamiliarInitFilter;
      } });
      var PostFamiliarInitLate_1 = require_PostFamiliarInitLate();
      Object.defineProperty(exports2, "PostFamiliarInitLate", { enumerable: true, get: function() {
        return PostFamiliarInitLate_1.PostFamiliarInitLate;
      } });
      var PostFamiliarRenderFilter_1 = require_PostFamiliarRenderFilter();
      Object.defineProperty(exports2, "PostFamiliarRenderFilter", { enumerable: true, get: function() {
        return PostFamiliarRenderFilter_1.PostFamiliarRenderFilter;
      } });
      var PostFamiliarStateChanged_1 = require_PostFamiliarStateChanged();
      Object.defineProperty(exports2, "PostFamiliarStateChanged", { enumerable: true, get: function() {
        return PostFamiliarStateChanged_1.PostFamiliarStateChanged;
      } });
      var PostFamiliarUpdateFilter_1 = require_PostFamiliarUpdateFilter();
      Object.defineProperty(exports2, "PostFamiliarUpdateFilter", { enumerable: true, get: function() {
        return PostFamiliarUpdateFilter_1.PostFamiliarUpdateFilter;
      } });
      var PostFirstEsauJr_1 = require_PostFirstEsauJr();
      Object.defineProperty(exports2, "PostFirstEsauJr", { enumerable: true, get: function() {
        return PostFirstEsauJr_1.PostFirstEsauJr;
      } });
      var PostFirstFlip_1 = require_PostFirstFlip();
      Object.defineProperty(exports2, "PostFirstFlip", { enumerable: true, get: function() {
        return PostFirstFlip_1.PostFirstFlip;
      } });
      var PostFlip_1 = require_PostFlip();
      Object.defineProperty(exports2, "PostFlip", { enumerable: true, get: function() {
        return PostFlip_1.PostFlip;
      } });
      var PostGameEndFilter_1 = require_PostGameEndFilter();
      Object.defineProperty(exports2, "PostGameEndFilter", { enumerable: true, get: function() {
        return PostGameEndFilter_1.PostGameEndFilter;
      } });
      var PostGameStartedReordered_1 = require_PostGameStartedReordered();
      Object.defineProperty(exports2, "PostGameStartedReordered", { enumerable: true, get: function() {
        return PostGameStartedReordered_1.PostGameStartedReordered;
      } });
      var PostGameStartedReorderedLast_1 = require_PostGameStartedReorderedLast();
      Object.defineProperty(exports2, "PostGameStartedReorderedLast", { enumerable: true, get: function() {
        return PostGameStartedReorderedLast_1.PostGameStartedReorderedLast;
      } });
      var PostGreedModeWave_1 = require_PostGreedModeWave();
      Object.defineProperty(exports2, "PostGreedModeWave", { enumerable: true, get: function() {
        return PostGreedModeWave_1.PostGreedModeWave;
      } });
      var PostGridEntityBroken_1 = require_PostGridEntityBroken();
      Object.defineProperty(exports2, "PostGridEntityBroken", { enumerable: true, get: function() {
        return PostGridEntityBroken_1.PostGridEntityBroken;
      } });
      var PostGridEntityCollision_1 = require_PostGridEntityCollision();
      Object.defineProperty(exports2, "PostGridEntityCollision", { enumerable: true, get: function() {
        return PostGridEntityCollision_1.PostGridEntityCollision;
      } });
      var PostGridEntityCustomBroken_1 = require_PostGridEntityCustomBroken();
      Object.defineProperty(exports2, "PostGridEntityCustomBroken", { enumerable: true, get: function() {
        return PostGridEntityCustomBroken_1.PostGridEntityCustomBroken;
      } });
      var PostGridEntityCustomCollision_1 = require_PostGridEntityCustomCollision();
      Object.defineProperty(exports2, "PostGridEntityCustomCollision", { enumerable: true, get: function() {
        return PostGridEntityCustomCollision_1.PostGridEntityCustomCollision;
      } });
      var PostGridEntityCustomInit_1 = require_PostGridEntityCustomInit();
      Object.defineProperty(exports2, "PostGridEntityCustomInit", { enumerable: true, get: function() {
        return PostGridEntityCustomInit_1.PostGridEntityCustomInit;
      } });
      var PostGridEntityCustomRemove_1 = require_PostGridEntityCustomRemove();
      Object.defineProperty(exports2, "PostGridEntityCustomRemove", { enumerable: true, get: function() {
        return PostGridEntityCustomRemove_1.PostGridEntityCustomRemove;
      } });
      var PostGridEntityCustomRender_1 = require_PostGridEntityCustomRender();
      Object.defineProperty(exports2, "PostGridEntityCustomRender", { enumerable: true, get: function() {
        return PostGridEntityCustomRender_1.PostGridEntityCustomRender;
      } });
      var PostGridEntityCustomStateChanged_1 = require_PostGridEntityCustomStateChanged();
      Object.defineProperty(exports2, "PostGridEntityCustomStateChanged", { enumerable: true, get: function() {
        return PostGridEntityCustomStateChanged_1.PostGridEntityCustomStateChanged;
      } });
      var PostGridEntityCustomUpdate_1 = require_PostGridEntityCustomUpdate();
      Object.defineProperty(exports2, "PostGridEntityCustomUpdate", { enumerable: true, get: function() {
        return PostGridEntityCustomUpdate_1.PostGridEntityCustomUpdate;
      } });
      var PostGridEntityInit_1 = require_PostGridEntityInit();
      Object.defineProperty(exports2, "PostGridEntityInit", { enumerable: true, get: function() {
        return PostGridEntityInit_1.PostGridEntityInit;
      } });
      var PostGridEntityRemove_1 = require_PostGridEntityRemove();
      Object.defineProperty(exports2, "PostGridEntityRemove", { enumerable: true, get: function() {
        return PostGridEntityRemove_1.PostGridEntityRemove;
      } });
      var PostGridEntityRender_1 = require_PostGridEntityRender();
      Object.defineProperty(exports2, "PostGridEntityRender", { enumerable: true, get: function() {
        return PostGridEntityRender_1.PostGridEntityRender;
      } });
      var PostGridEntityStateChanged_1 = require_PostGridEntityStateChanged();
      Object.defineProperty(exports2, "PostGridEntityStateChanged", { enumerable: true, get: function() {
        return PostGridEntityStateChanged_1.PostGridEntityStateChanged;
      } });
      var PostGridEntityUpdate_1 = require_PostGridEntityUpdate();
      Object.defineProperty(exports2, "PostGridEntityUpdate", { enumerable: true, get: function() {
        return PostGridEntityUpdate_1.PostGridEntityUpdate;
      } });
      var PostHolyMantleRemoved_1 = require_PostHolyMantleRemoved();
      Object.defineProperty(exports2, "PostHolyMantleRemoved", { enumerable: true, get: function() {
        return PostHolyMantleRemoved_1.PostHolyMantleRemoved;
      } });
      var PostItemDischarge_1 = require_PostItemDischarge();
      Object.defineProperty(exports2, "PostItemDischarge", { enumerable: true, get: function() {
        return PostItemDischarge_1.PostItemDischarge;
      } });
      var PostItemPickup_1 = require_PostItemPickup();
      Object.defineProperty(exports2, "PostItemPickup", { enumerable: true, get: function() {
        return PostItemPickup_1.PostItemPickup;
      } });
      var PostKeyboardChanged_1 = require_PostKeyboardChanged();
      Object.defineProperty(exports2, "PostKeyboardPressed", { enumerable: true, get: function() {
        return PostKeyboardChanged_1.PostKeyboardChanged;
      } });
      var PostKnifeInitFilter_1 = require_PostKnifeInitFilter();
      Object.defineProperty(exports2, "PostKnifeInitFilter", { enumerable: true, get: function() {
        return PostKnifeInitFilter_1.PostKnifeInitFilter;
      } });
      var PostKnifeInitLate_1 = require_PostKnifeInitLate();
      Object.defineProperty(exports2, "PostKnifeInitLate", { enumerable: true, get: function() {
        return PostKnifeInitLate_1.PostKnifeInitLate;
      } });
      var PostKnifeRenderFilter_1 = require_PostKnifeRenderFilter();
      Object.defineProperty(exports2, "PostKnifeRenderFilter", { enumerable: true, get: function() {
        return PostKnifeRenderFilter_1.PostKnifeRenderFilter;
      } });
      var PostKnifeUpdateFilter_1 = require_PostKnifeUpdateFilter();
      Object.defineProperty(exports2, "PostKnifeUpdateFilter", { enumerable: true, get: function() {
        return PostKnifeUpdateFilter_1.PostKnifeUpdateFilter;
      } });
      var PostLaserInitFilter_1 = require_PostLaserInitFilter();
      Object.defineProperty(exports2, "PostLaserInitFilter", { enumerable: true, get: function() {
        return PostLaserInitFilter_1.PostLaserInitFilter;
      } });
      var PostLaserInitLate_1 = require_PostLaserInitLate();
      Object.defineProperty(exports2, "PostLaserInitLate", { enumerable: true, get: function() {
        return PostLaserInitLate_1.PostLaserInitLate;
      } });
      var PostLaserRenderFilter_1 = require_PostLaserRenderFilter();
      Object.defineProperty(exports2, "PostLaserRenderFilter", { enumerable: true, get: function() {
        return PostLaserRenderFilter_1.PostLaserRenderFilter;
      } });
      var PostLaserUpdateFilter_1 = require_PostLaserUpdateFilter();
      Object.defineProperty(exports2, "PostLaserUpdateFilter", { enumerable: true, get: function() {
        return PostLaserUpdateFilter_1.PostLaserUpdateFilter;
      } });
      var PostNPCDeathFilter_1 = require_PostNPCDeathFilter();
      Object.defineProperty(exports2, "PostNPCDeathFilter", { enumerable: true, get: function() {
        return PostNPCDeathFilter_1.PostNPCDeathFilter;
      } });
      var PostNPCInitFilter_1 = require_PostNPCInitFilter();
      Object.defineProperty(exports2, "PostNPCInitFilter", { enumerable: true, get: function() {
        return PostNPCInitFilter_1.PostNPCInitFilter;
      } });
      var PostNPCInitLate_1 = require_PostNPCInitLate();
      Object.defineProperty(exports2, "PostNPCInitLate", { enumerable: true, get: function() {
        return PostNPCInitLate_1.PostNPCInitLate;
      } });
      var PostNPCRenderFilter_1 = require_PostNPCRenderFilter();
      Object.defineProperty(exports2, "PostNPCRenderFilter", { enumerable: true, get: function() {
        return PostNPCRenderFilter_1.PostNPCRenderFilter;
      } });
      var PostNPCStateChanged_1 = require_PostNPCStateChanged();
      Object.defineProperty(exports2, "PostNPCStateChanged", { enumerable: true, get: function() {
        return PostNPCStateChanged_1.PostNPCStateChanged;
      } });
      var PostNPCUpdateFilter_1 = require_PostNPCUpdateFilter();
      Object.defineProperty(exports2, "PostNPCUpdateFilter", { enumerable: true, get: function() {
        return PostNPCUpdateFilter_1.PostNPCUpdateFilter;
      } });
      var PostNewLevelReordered_1 = require_PostNewLevelReordered();
      Object.defineProperty(exports2, "PostNewLevelReordered", { enumerable: true, get: function() {
        return PostNewLevelReordered_1.PostNewLevelReordered;
      } });
      var PostNewRoomEarly_1 = require_PostNewRoomEarly();
      Object.defineProperty(exports2, "PostNewRoomEarly", { enumerable: true, get: function() {
        return PostNewRoomEarly_1.PostNewRoomEarly;
      } });
      var PostNewRoomReordered_1 = require_PostNewRoomReordered();
      Object.defineProperty(exports2, "PostNewRoomReordered", { enumerable: true, get: function() {
        return PostNewRoomReordered_1.PostNewRoomReordered;
      } });
      var PostPEffectUpdateReordered_1 = require_PostPEffectUpdateReordered();
      Object.defineProperty(exports2, "PostPEffectUpdateReordered", { enumerable: true, get: function() {
        return PostPEffectUpdateReordered_1.PostPEffectUpdateReordered;
      } });
      var PostPickupChanged_1 = require_PostPickupChanged();
      Object.defineProperty(exports2, "PostPickupChanged", { enumerable: true, get: function() {
        return PostPickupChanged_1.PostPickupChanged;
      } });
      var PostPickupCollect_1 = require_PostPickupCollect();
      Object.defineProperty(exports2, "PostPickupCollect", { enumerable: true, get: function() {
        return PostPickupCollect_1.PostPickupCollect;
      } });
      var PostPickupInitFilter_1 = require_PostPickupInitFilter();
      Object.defineProperty(exports2, "PostPickupInitFilter", { enumerable: true, get: function() {
        return PostPickupInitFilter_1.PostPickupInitFilter;
      } });
      var PostPickupInitFirst_1 = require_PostPickupInitFirst();
      Object.defineProperty(exports2, "PostPickupInitFirst", { enumerable: true, get: function() {
        return PostPickupInitFirst_1.PostPickupInitFirst;
      } });
      var PostPickupInitLate_1 = require_PostPickupInitLate();
      Object.defineProperty(exports2, "PostPickupInitLate", { enumerable: true, get: function() {
        return PostPickupInitLate_1.PostPickupInitLate;
      } });
      var PostPickupRenderFilter_1 = require_PostPickupRenderFilter();
      Object.defineProperty(exports2, "PostPickupRenderFilter", { enumerable: true, get: function() {
        return PostPickupRenderFilter_1.PostPickupRenderFilter;
      } });
      var PostPickupSelectionFilter_1 = require_PostPickupSelectionFilter();
      Object.defineProperty(exports2, "PostPickupSelectionFilter", { enumerable: true, get: function() {
        return PostPickupSelectionFilter_1.PostPickupSelectionFilter;
      } });
      var PostPickupStateChanged_1 = require_PostPickupStateChanged();
      Object.defineProperty(exports2, "PostPickupStateChanged", { enumerable: true, get: function() {
        return PostPickupStateChanged_1.PostPickupStateChanged;
      } });
      var PostPickupUpdateFilter_1 = require_PostPickupUpdateFilter();
      Object.defineProperty(exports2, "PostPickupUpdateFilter", { enumerable: true, get: function() {
        return PostPickupUpdateFilter_1.PostPickupUpdateFilter;
      } });
      var PostPitRender_1 = require_PostPitRender();
      Object.defineProperty(exports2, "PostPitRender", { enumerable: true, get: function() {
        return PostPitRender_1.PostPitRender;
      } });
      var PostPitUpdate_1 = require_PostPitUpdate();
      Object.defineProperty(exports2, "PostPitUpdate", { enumerable: true, get: function() {
        return PostPitUpdate_1.PostPitUpdate;
      } });
      var PostPlayerChangeHealth_1 = require_PostPlayerChangeHealth();
      Object.defineProperty(exports2, "PostPlayerChangeHealth", { enumerable: true, get: function() {
        return PostPlayerChangeHealth_1.PostPlayerChangeHealth;
      } });
      var PostPlayerChangeStat_1 = require_PostPlayerChangeStat();
      Object.defineProperty(exports2, "PostPlayerChangeStat", { enumerable: true, get: function() {
        return PostPlayerChangeStat_1.PostPlayerChangeStat;
      } });
      var PostPlayerChangeType_1 = require_PostPlayerChangeType();
      Object.defineProperty(exports2, "PostPlayerChangeType", { enumerable: true, get: function() {
        return PostPlayerChangeType_1.PostPlayerChangeType;
      } });
      var PostPlayerCollectibleAdded_1 = require_PostPlayerCollectibleAdded();
      Object.defineProperty(exports2, "PostPlayerCollectibleAdded", { enumerable: true, get: function() {
        return PostPlayerCollectibleAdded_1.PostPlayerCollectibleAdded;
      } });
      var PostPlayerCollectibleRemoved_1 = require_PostPlayerCollectibleRemoved();
      Object.defineProperty(exports2, "PostPlayerCollectibleRemoved", { enumerable: true, get: function() {
        return PostPlayerCollectibleRemoved_1.PostPlayerCollectibleRemoved;
      } });
      var PostPlayerFatalDamage_1 = require_PostPlayerFatalDamage();
      Object.defineProperty(exports2, "PostPlayerFatalDamage", { enumerable: true, get: function() {
        return PostPlayerFatalDamage_1.PostPlayerFatalDamage;
      } });
      var PostPlayerInitFirst_1 = require_PostPlayerInitFirst();
      Object.defineProperty(exports2, "PostPlayerInitFirst", { enumerable: true, get: function() {
        return PostPlayerInitFirst_1.PostPlayerInitFirst;
      } });
      var PostPlayerInitLate_1 = require_PostPlayerInitLate();
      Object.defineProperty(exports2, "PostPlayerInitLate", { enumerable: true, get: function() {
        return PostPlayerInitLate_1.PostPlayerInitLate;
      } });
      var PostPlayerRenderReordered_1 = require_PostPlayerRenderReordered();
      Object.defineProperty(exports2, "PostPlayerRenderReordered", { enumerable: true, get: function() {
        return PostPlayerRenderReordered_1.PostPlayerRenderReordered;
      } });
      var PostPlayerUpdateReordered_1 = require_PostPlayerUpdateReordered();
      Object.defineProperty(exports2, "PostPlayerUpdateReordered", { enumerable: true, get: function() {
        return PostPlayerUpdateReordered_1.PostPlayerUpdateReordered;
      } });
      var PostPoopRender_1 = require_PostPoopRender();
      Object.defineProperty(exports2, "PostPoopRender", { enumerable: true, get: function() {
        return PostPoopRender_1.PostPoopRender;
      } });
      var PostPoopUpdate_1 = require_PostPoopUpdate();
      Object.defineProperty(exports2, "PostPoopUpdate", { enumerable: true, get: function() {
        return PostPoopUpdate_1.PostPoopUpdate;
      } });
      var PostPressurePlateRender_1 = require_PostPressurePlateRender();
      Object.defineProperty(exports2, "PostPressurePlateRender", { enumerable: true, get: function() {
        return PostPressurePlateRender_1.PostPressurePlateRender;
      } });
      var PostPressurePlateUpdate_1 = require_PostPressurePlateUpdate();
      Object.defineProperty(exports2, "PostPressurePlateUpdate", { enumerable: true, get: function() {
        return PostPressurePlateUpdate_1.PostPressurePlateUpdate;
      } });
      var PostProjectileInitFilter_1 = require_PostProjectileInitFilter();
      Object.defineProperty(exports2, "PostProjectileInitFilter", { enumerable: true, get: function() {
        return PostProjectileInitFilter_1.PostProjectileInitFilter;
      } });
      var PostProjectileInitLate_1 = require_PostProjectileInitLate();
      Object.defineProperty(exports2, "PostProjectileInitLate", { enumerable: true, get: function() {
        return PostProjectileInitLate_1.PostProjectileInitLate;
      } });
      var PostProjectileKill_1 = require_PostProjectileKill();
      Object.defineProperty(exports2, "PostProjectileKill", { enumerable: true, get: function() {
        return PostProjectileKill_1.PostProjectileKill;
      } });
      var PostProjectileRenderFilter_1 = require_PostProjectileRenderFilter();
      Object.defineProperty(exports2, "PostProjectileRenderFilter", { enumerable: true, get: function() {
        return PostProjectileRenderFilter_1.PostProjectileRenderFilter;
      } });
      var PostProjectileUpdateFilter_1 = require_PostProjectileUpdateFilter();
      Object.defineProperty(exports2, "PostProjectileUpdateFilter", { enumerable: true, get: function() {
        return PostProjectileUpdateFilter_1.PostProjectileUpdateFilter;
      } });
      var PostPurchase_1 = require_PostPurchase();
      Object.defineProperty(exports2, "PostPurchase", { enumerable: true, get: function() {
        return PostPurchase_1.PostPurchase;
      } });
      var PostRockRender_1 = require_PostRockRender();
      Object.defineProperty(exports2, "PostRockRender", { enumerable: true, get: function() {
        return PostRockRender_1.PostRockRender;
      } });
      var PostRockUpdate_1 = require_PostRockUpdate();
      Object.defineProperty(exports2, "PostRockUpdate", { enumerable: true, get: function() {
        return PostRockUpdate_1.PostRockUpdate;
      } });
      var PostRoomClearChanged_1 = require_PostRoomClearChanged();
      Object.defineProperty(exports2, "PostRoomClearChanged", { enumerable: true, get: function() {
        return PostRoomClearChanged_1.PostRoomClearChanged;
      } });
      var PostSacrifice_1 = require_PostSacrifice();
      Object.defineProperty(exports2, "PostSacrifice", { enumerable: true, get: function() {
        return PostSacrifice_1.PostSacrifice;
      } });
      var PostSlotAnimationChanged_1 = require_PostSlotAnimationChanged();
      Object.defineProperty(exports2, "PostSlotAnimationChanged", { enumerable: true, get: function() {
        return PostSlotAnimationChanged_1.PostSlotAnimationChanged;
      } });
      var PostSlotCollision_1 = require_PostSlotCollision();
      Object.defineProperty(exports2, "PostSlotCollision", { enumerable: true, get: function() {
        return PostSlotCollision_1.PostSlotCollision;
      } });
      var PostSlotDestroyed_1 = require_PostSlotDestroyed();
      Object.defineProperty(exports2, "PostSlotDestroyed", { enumerable: true, get: function() {
        return PostSlotDestroyed_1.PostSlotDestroyed;
      } });
      var PostSlotInit_1 = require_PostSlotInit();
      Object.defineProperty(exports2, "PostSlotInit", { enumerable: true, get: function() {
        return PostSlotInit_1.PostSlotInit;
      } });
      var PostSlotRender_1 = require_PostSlotRender();
      Object.defineProperty(exports2, "PostSlotRender", { enumerable: true, get: function() {
        return PostSlotRender_1.PostSlotRender;
      } });
      var PostSlotUpdate_1 = require_PostSlotUpdate();
      Object.defineProperty(exports2, "PostSlotUpdate", { enumerable: true, get: function() {
        return PostSlotUpdate_1.PostSlotUpdate;
      } });
      var PostSpikesRender_1 = require_PostSpikesRender();
      Object.defineProperty(exports2, "PostSpikesRender", { enumerable: true, get: function() {
        return PostSpikesRender_1.PostSpikesRender;
      } });
      var PostSpikesUpdate_1 = require_PostSpikesUpdate();
      Object.defineProperty(exports2, "PostSpikesUpdate", { enumerable: true, get: function() {
        return PostSpikesUpdate_1.PostSpikesUpdate;
      } });
      var PostTNTRender_1 = require_PostTNTRender();
      Object.defineProperty(exports2, "PostTNTRender", { enumerable: true, get: function() {
        return PostTNTRender_1.PostTNTRender;
      } });
      var PostTNTUpdate_1 = require_PostTNTUpdate();
      Object.defineProperty(exports2, "PostTNTUpdate", { enumerable: true, get: function() {
        return PostTNTUpdate_1.PostTNTUpdate;
      } });
      var PostTearInitFilter_1 = require_PostTearInitFilter();
      Object.defineProperty(exports2, "PostTearInitFilter", { enumerable: true, get: function() {
        return PostTearInitFilter_1.PostTearInitFilter;
      } });
      var PostTearInitLate_1 = require_PostTearInitLate();
      Object.defineProperty(exports2, "PostTearInitLate", { enumerable: true, get: function() {
        return PostTearInitLate_1.PostTearInitLate;
      } });
      var PostTearInitVeryLate_1 = require_PostTearInitVeryLate();
      Object.defineProperty(exports2, "PostTearInitVeryLate", { enumerable: true, get: function() {
        return PostTearInitVeryLate_1.PostTearInitVeryLate;
      } });
      var PostTearKill_1 = require_PostTearKill();
      Object.defineProperty(exports2, "PostTearKill", { enumerable: true, get: function() {
        return PostTearKill_1.PostTearKill;
      } });
      var PostTearRenderFilter_1 = require_PostTearRenderFilter();
      Object.defineProperty(exports2, "PostTearRenderFilter", { enumerable: true, get: function() {
        return PostTearRenderFilter_1.PostTearRenderFilter;
      } });
      var PostTearUpdateFilter_1 = require_PostTearUpdateFilter();
      Object.defineProperty(exports2, "PostTearUpdateFilter", { enumerable: true, get: function() {
        return PostTearUpdateFilter_1.PostTearUpdateFilter;
      } });
      var PostTransformation_1 = require_PostTransformation();
      Object.defineProperty(exports2, "PostTransformation", { enumerable: true, get: function() {
        return PostTransformation_1.PostTransformation;
      } });
      var PostTrinketBreak_1 = require_PostTrinketBreak();
      Object.defineProperty(exports2, "PostTrinketBreak", { enumerable: true, get: function() {
        return PostTrinketBreak_1.PostTrinketBreak;
      } });
      var PostUsePillFilter_1 = require_PostUsePillFilter();
      Object.defineProperty(exports2, "PostUsePillFilter", { enumerable: true, get: function() {
        return PostUsePillFilter_1.PostUsePillFilter;
      } });
      var PreBerserkDeath_1 = require_PreBerserkDeath();
      Object.defineProperty(exports2, "PreBerserkDeath", { enumerable: true, get: function() {
        return PreBerserkDeath_1.PreBerserkDeath;
      } });
      var PreBombCollisionFilter_1 = require_PreBombCollisionFilter();
      Object.defineProperty(exports2, "PreBombCollisionFilter", { enumerable: true, get: function() {
        return PreBombCollisionFilter_1.PreBombCollisionFilter;
      } });
      var PreCustomRevive_1 = require_PreCustomRevive();
      Object.defineProperty(exports2, "PreCustomRevive", { enumerable: true, get: function() {
        return PreCustomRevive_1.PreCustomRevive;
      } });
      var PreEntitySpawnFilter_1 = require_PreEntitySpawnFilter();
      Object.defineProperty(exports2, "PreEntitySpawnFilter", { enumerable: true, get: function() {
        return PreEntitySpawnFilter_1.PreEntitySpawnFilter;
      } });
      var PreFamiliarCollisionFilter_1 = require_PreFamiliarCollisionFilter();
      Object.defineProperty(exports2, "PreFamiliarCollisionFilter", { enumerable: true, get: function() {
        return PreFamiliarCollisionFilter_1.PreFamiliarCollisionFilter;
      } });
      var PreGetPedestal_1 = require_PreGetPedestal();
      Object.defineProperty(exports2, "PreGetPedestal", { enumerable: true, get: function() {
        return PreGetPedestal_1.PreGetPedestal;
      } });
      var PreItemPickup_1 = require_PreItemPickup();
      Object.defineProperty(exports2, "PreItemPickup", { enumerable: true, get: function() {
        return PreItemPickup_1.PreItemPickup;
      } });
      var PreKnifeCollisionFilter_1 = require_PreKnifeCollisionFilter();
      Object.defineProperty(exports2, "PreKnifeCollisionFilter", { enumerable: true, get: function() {
        return PreKnifeCollisionFilter_1.PreKnifeCollisionFilter;
      } });
      var PreNPCCollisionFilter_1 = require_PreNPCCollisionFilter();
      Object.defineProperty(exports2, "PreNPCCollisionFilter", { enumerable: true, get: function() {
        return PreNPCCollisionFilter_1.PreNPCCollisionFilter;
      } });
      var PreNPCUpdateFilter_1 = require_PreNPCUpdateFilter();
      Object.defineProperty(exports2, "PreNPCUpdateFilter", { enumerable: true, get: function() {
        return PreNPCUpdateFilter_1.PreNPCUpdateFilter;
      } });
      var PreNewLevel_1 = require_PreNewLevel();
      Object.defineProperty(exports2, "PreNewLevel", { enumerable: true, get: function() {
        return PreNewLevel_1.PreNewLevel;
      } });
      var PreProjectileCollisionFilter_1 = require_PreProjectileCollisionFilter();
      Object.defineProperty(exports2, "PreProjectileCollisionFilter", { enumerable: true, get: function() {
        return PreProjectileCollisionFilter_1.PreProjectileCollisionFilter;
      } });
      var PreRoomEntitySpawnFilter_1 = require_PreRoomEntitySpawnFilter();
      Object.defineProperty(exports2, "PreRoomEntitySpawnFilter", { enumerable: true, get: function() {
        return PreRoomEntitySpawnFilter_1.PreRoomEntitySpawnFilter;
      } });
      var PreTearCollisionFilter_1 = require_PreTearCollisionFilter();
      Object.defineProperty(exports2, "PreTearCollisionFilter", { enumerable: true, get: function() {
        return PreTearCollisionFilter_1.PreTearCollisionFilter;
      } });
    }
  });

  // node_modules/isaacscript-common/dist/callbacks.js
  var require_callbacks = __commonJS({
    "node_modules/isaacscript-common/dist/callbacks.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getCallbacks = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cc = __importStar(require_callbackClasses());
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var MOD_CALLBACK_CUSTOM_TO_CLASS = {
        [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_FILTER]: cc.EntityTakeDmgFilter,
        [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER]: cc.EntityTakeDmgPlayer,
        [ModCallbackCustom_1.ModCallbackCustom.INPUT_ACTION_FILTER]: cc.InputActionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.INPUT_ACTION_PLAYER]: cc.InputActionPlayer,
        [ModCallbackCustom_1.ModCallbackCustom.POST_AMBUSH_FINISHED]: cc.PostAmbushFinished,
        [ModCallbackCustom_1.ModCallbackCustom.POST_AMBUSH_STARTED]: cc.PostAmbushStarted,
        [ModCallbackCustom_1.ModCallbackCustom.POST_BOMB_EXPLODED]: cc.PostBombExploded,
        [ModCallbackCustom_1.ModCallbackCustom.POST_BOMB_INIT_FILTER]: cc.PostBombInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_BOMB_INIT_LATE]: cc.PostBombInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_BOMB_RENDER_FILTER]: cc.PostBombRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_BOMB_UPDATE_FILTER]: cc.PostBombUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_BONE_SWING]: cc.PostBoneSwing,
        [ModCallbackCustom_1.ModCallbackCustom.POST_COLLECTIBLE_EMPTY]: cc.PostCollectibleEmpty,
        [ModCallbackCustom_1.ModCallbackCustom.POST_CURSED_TELEPORT]: cc.PostCursedTeleport,
        [ModCallbackCustom_1.ModCallbackCustom.POST_CUSTOM_REVIVE]: cc.PostCustomRevive,
        [ModCallbackCustom_1.ModCallbackCustom.POST_DICE_ROOM_ACTIVATED]: cc.PostDiceRoomActivated,
        [ModCallbackCustom_1.ModCallbackCustom.POST_DOOR_RENDER]: cc.PostDoorRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_DOOR_UPDATE]: cc.PostDoorUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_EFFECT_INIT_FILTER]: cc.PostEffectInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_EFFECT_INIT_LATE]: cc.PostEffectInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_EFFECT_RENDER_FILTER]: cc.PostEffectRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_EFFECT_STATE_CHANGED]: cc.PostEffectStateChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_EFFECT_UPDATE_FILTER]: cc.PostEffectUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ENTITY_KILL_FILTER]: cc.PostEntityKillFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ESAU_JR]: cc.PostEsauJr,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FAMILIAR_INIT_FILTER]: cc.PostFamiliarInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FAMILIAR_INIT_LATE]: cc.PostFamiliarInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FAMILIAR_RENDER_FILTER]: cc.PostFamiliarRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FAMILIAR_STATE_CHANGED]: cc.PostFamiliarStateChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FAMILIAR_UPDATE_FILTER]: cc.PostFamiliarUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FIRST_FLIP]: cc.PostFirstFlip,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FIRST_ESAU_JR]: cc.PostFirstEsauJr,
        [ModCallbackCustom_1.ModCallbackCustom.POST_FLIP]: cc.PostFlip,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GAME_END_FILTER]: cc.PostGameEndFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED]: cc.PostGameStartedReordered,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED_LAST]: cc.PostGameStartedReorderedLast,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GREED_MODE_WAVE]: cc.PostGreedModeWave,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_BROKEN]: cc.PostGridEntityBroken,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_COLLISION]: cc.PostGridEntityCollision,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_BROKEN]: cc.PostGridEntityCustomBroken,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_COLLISION]: cc.PostGridEntityCustomCollision,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_INIT]: cc.PostGridEntityCustomInit,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_REMOVE]: cc.PostGridEntityCustomRemove,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_RENDER]: cc.PostGridEntityCustomRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_STATE_CHANGED]: cc.PostGridEntityCustomStateChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_UPDATE]: cc.PostGridEntityCustomUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_INIT]: cc.PostGridEntityInit,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_REMOVE]: cc.PostGridEntityRemove,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_RENDER]: cc.PostGridEntityRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_STATE_CHANGED]: cc.PostGridEntityStateChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_UPDATE]: cc.PostGridEntityUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_HOLY_MANTLE_REMOVED]: cc.PostHolyMantleRemoved,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ITEM_DISCHARGE]: cc.PostItemDischarge,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ITEM_PICKUP]: cc.PostItemPickup,
        [ModCallbackCustom_1.ModCallbackCustom.POST_KEYBOARD_CHANGED]: cc.PostKeyboardPressed,
        [ModCallbackCustom_1.ModCallbackCustom.POST_KNIFE_INIT_FILTER]: cc.PostKnifeInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_KNIFE_INIT_LATE]: cc.PostKnifeInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_KNIFE_RENDER_FILTER]: cc.PostKnifeRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_KNIFE_UPDATE_FILTER]: cc.PostKnifeUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_LASER_INIT_FILTER]: cc.PostLaserInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_LASER_INIT_LATE]: cc.PostLaserInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_LASER_RENDER_FILTER]: cc.PostLaserRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_LASER_UPDATE_FILTER]: cc.PostLaserUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_LEVEL_REORDERED]: cc.PostNewLevelReordered,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_EARLY]: cc.PostNewRoomEarly,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED]: cc.PostNewRoomReordered,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NPC_DEATH_FILTER]: cc.PostNPCDeathFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NPC_INIT_FILTER]: cc.PostNPCInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NPC_INIT_LATE]: cc.PostNPCInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NPC_RENDER_FILTER]: cc.PostNPCRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NPC_STATE_CHANGED]: cc.PostNPCStateChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_NPC_UPDATE_FILTER]: cc.PostNPCUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED]: cc.PostPEffectUpdateReordered,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_CHANGED]: cc.PostPickupChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_COLLECT]: cc.PostPickupCollect,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_INIT_FILTER]: cc.PostPickupInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_INIT_FIRST]: cc.PostPickupInitFirst,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_INIT_LATE]: cc.PostPickupInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_RENDER_FILTER]: cc.PostPickupRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_SELECTION_FILTER]: cc.PostPickupSelectionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_STATE_CHANGED]: cc.PostPickupStateChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_UPDATE_FILTER]: cc.PostPickupUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PIT_RENDER]: cc.PostPitRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PIT_UPDATE]: cc.PostPitUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_CHANGE_HEALTH]: cc.PostPlayerChangeHealth,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_CHANGE_STAT]: cc.PostPlayerChangeStat,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_CHANGE_TYPE]: cc.PostPlayerChangeType,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED]: cc.PostPlayerCollectibleAdded,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED]: cc.PostPlayerCollectibleRemoved,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE]: cc.PostPlayerFatalDamage,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_INIT_FIRST]: cc.PostPlayerInitFirst,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_INIT_LATE]: cc.PostPlayerInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED]: cc.PostPlayerRenderReordered,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED]: cc.PostPlayerUpdateReordered,
        [ModCallbackCustom_1.ModCallbackCustom.POST_POOP_RENDER]: cc.PostPoopRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_POOP_UPDATE]: cc.PostPoopUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PRESSURE_PLATE_RENDER]: cc.PostPressurePlateRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PRESSURE_PLATE_UPDATE]: cc.PostPressurePlateUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PROJECTILE_INIT_FILTER]: cc.PostProjectileInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PROJECTILE_INIT_LATE]: cc.PostProjectileInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PROJECTILE_KILL]: cc.PostProjectileKill,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PROJECTILE_RENDER_FILTER]: cc.PostProjectileRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PROJECTILE_UPDATE_FILTER]: cc.PostProjectileUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_PURCHASE]: cc.PostPurchase,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ROCK_RENDER]: cc.PostRockRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ROCK_UPDATE]: cc.PostRockUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_ROOM_CLEAR_CHANGED]: cc.PostRoomClearChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SACRIFICE]: cc.PostSacrifice,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED]: cc.PostSlotAnimationChanged,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_COLLISION]: cc.PostSlotCollision,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_DESTROYED]: cc.PostSlotDestroyed,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_INIT]: cc.PostSlotInit,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_RENDER]: cc.PostSlotRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_UPDATE]: cc.PostSlotUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SPIKES_RENDER]: cc.PostSpikesRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_SPIKES_UPDATE]: cc.PostSpikesUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TEAR_INIT_FILTER]: cc.PostTearInitFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TEAR_INIT_LATE]: cc.PostTearInitLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TEAR_INIT_VERY_LATE]: cc.PostTearInitVeryLate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TEAR_KILL]: cc.PostTearKill,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TEAR_RENDER_FILTER]: cc.PostTearRenderFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TEAR_UPDATE_FILTER]: cc.PostTearUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TNT_RENDER]: cc.PostTNTRender,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TNT_UPDATE]: cc.PostTNTUpdate,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TRANSFORMATION]: cc.PostTransformation,
        [ModCallbackCustom_1.ModCallbackCustom.POST_TRINKET_BREAK]: cc.PostTrinketBreak,
        [ModCallbackCustom_1.ModCallbackCustom.POST_USE_PILL_FILTER]: cc.PostUsePillFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_BERSERK_DEATH]: cc.PreBerserkDeath,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_BOMB_COLLISION_FILTER]: cc.PreBombCollisionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_CUSTOM_REVIVE]: cc.PreCustomRevive,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_ENTITY_SPAWN_FILTER]: cc.PreEntitySpawnFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_FAMILIAR_COLLISION_FILTER]: cc.PreFamiliarCollisionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_GET_PEDESTAL]: cc.PreGetPedestal,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_ITEM_PICKUP]: cc.PreItemPickup,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_KNIFE_COLLISION_FILTER]: cc.PreKnifeCollisionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_NEW_LEVEL]: cc.PreNewLevel,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_NPC_COLLISION_FILTER]: cc.PreNPCCollisionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_NPC_UPDATE_FILTER]: cc.PreNPCUpdateFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_PROJECTILE_COLLISION_FILTER]: cc.PreProjectileCollisionFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_ROOM_ENTITY_SPAWN_FILTER]: cc.PreRoomEntitySpawnFilter,
        [ModCallbackCustom_1.ModCallbackCustom.PRE_TEAR_COLLISION_FILTER]: cc.PreTearCollisionFilter
      };
      function getCallbacks() {
        const instantiatedClasses = {};
        for (const modCallbackCustom of cachedEnumValues_1.MOD_CALLBACK_CUSTOM_VALUES) {
          const constructor = MOD_CALLBACK_CUSTOM_TO_CLASS[modCallbackCustom];
          instantiatedClasses[modCallbackCustom] = new constructor();
        }
        return instantiatedClasses;
      }
      exports2.getCallbacks = getCallbacks;
    }
  });

  // node_modules/isaacscript-common/dist/decorators.js
  var require_decorators = __commonJS({
    "node_modules/isaacscript-common/dist/decorators.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Exported = exports2.EXPORTED_METHOD_NAMES_KEY = void 0;
      var tstlClass_1 = require_tstlClass();
      exports2.EXPORTED_METHOD_NAMES_KEY = "__exportedMethodNames";
      function Exported(target, propertyKey) {
        const constructor = target.constructor;
        if (constructor === void 0) {
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(target) ?? "Unknown";
          error(`Failed to get the constructor for class "${tstlClassName}". Did you decorate a static method? You can only decorate non-static class methods.`);
        }
        let exportedMethodNames = constructor[exports2.EXPORTED_METHOD_NAMES_KEY];
        if (exportedMethodNames === void 0) {
          exportedMethodNames = [];
          constructor[exports2.EXPORTED_METHOD_NAMES_KEY] = exportedMethodNames;
        }
        exportedMethodNames.push(propertyKey);
      }
      exports2.Exported = Exported;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/CustomGridEntities.js
  var require_CustomGridEntities = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/CustomGridEntities.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomGridEntities = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var gridEntities_1 = require_gridEntities();
      var players_1 = require_players();
      var roomData_1 = require_roomData();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var vector_1 = require_vector();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        level: {
          /** Indexed by room list index and grid index. */
          customGridEntities: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        },
        room: {
          genericPropPtrHashes: /* @__PURE__ */ new Set(),
          manuallyUsingShovel: false
        }
      };
      var CustomGridEntities = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        runInNFrames;
        /** @internal */
        constructor(runInNFrames) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES];
          this.callbacksUsed = [
            // 23
            [
              isaac_typescript_definitions_1.ModCallback.PRE_USE_ITEM,
              this.preUseItemWeNeedToGoDeeper,
              [isaac_typescript_definitions_1.CollectibleType.WE_NEED_TO_GO_DEEPER]
            ]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
          this.runInNFrames = runInNFrames;
        }
        // ModCallback.PRE_USE_ITEM (23)
        // CollectibleType.WE_NEED_TO_GO_DEEPER (84)
        preUseItemWeNeedToGoDeeper = (_collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData) => {
          const room = cachedClasses_1.game.GetRoom();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const roomCustomGridEntities = v.level.customGridEntities.get(roomListIndex);
          if (roomCustomGridEntities === void 0) {
            return void 0;
          }
          const gridIndex = room.GetGridIndex(player.Position);
          const customGridEntity = roomCustomGridEntities.get(gridIndex);
          if (customGridEntity === void 0) {
            return void 0;
          }
          if (customGridEntity.gridCollisionClass !== isaac_typescript_definitions_1.GridCollisionClass.NONE) {
            return void 0;
          }
          (0, gridEntities_1.removeGridEntity)(customGridEntity.gridIndex, false);
          const entityPtr = EntityPtr(player);
          this.runInNFrames.runNextGameFrame(() => {
            const futurePlayer = (0, players_1.getPlayerFromPtr)(entityPtr);
            if (futurePlayer === void 0) {
              return;
            }
            v.room.manuallyUsingShovel = true;
            futurePlayer.UseActiveItem(isaac_typescript_definitions_1.CollectibleType.WE_NEED_TO_GO_DEEPER);
            v.room.manuallyUsingShovel = false;
          });
          return true;
        };
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const roomCustomGridEntities = v.level.customGridEntities.get(roomListIndex);
          if (roomCustomGridEntities === void 0) {
            return;
          }
          const room = cachedClasses_1.game.GetRoom();
          for (const [gridIndex, data] of roomCustomGridEntities) {
            const decoration = room.GetGridEntity(gridIndex);
            if (decoration === void 0) {
              roomCustomGridEntities.delete(gridIndex);
              continue;
            }
            if (data.anm2Path !== void 0) {
              const sprite = decoration.GetSprite();
              sprite.Load(data.anm2Path, true);
              const animationToPlay = data.defaultAnimation ?? sprite.GetDefaultAnimation();
              sprite.Play(animationToPlay, true);
            }
          }
        };
        /**
         * Helper function to spawn a custom grid entity. Custom grid entities are persistent in that they
         * will reappear if the player leaves and re-enters the room. (It will be manually respawned in
         * the `POST_NEW_ROOM` callback.)
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CUSTOM_GRID_ENTITIES`.
         *
         * Custom grid entities are built on top of real grid entities. You can use any existing grid
         * entity type as a base. For example, if you want to create a custom rock that would be breakable
         * like a normal rock, then you should specify `GridEntityType.ROCK` as the base grid entity type.
         *
         * Once a custom grid entity is spawned, you can take advantage of the custom grid callbacks such
         * as `POST_GRID_ENTITY_CUSTOM_UPDATE`. Note that the "normal" grid entities callbacks will not
         * fire for custom entities. For example, if you had a custom grid entity based on
         * `GridEntityType.ROCK`, and you also had a subscription to the `POST_GRID_ENTITY_UPDATE`
         * callback, the callback would only fire for normal rocks and not the custom entity.
         *
         * Custom grid entities are an IsaacScript feature because the vanilla game does not support any
         * custom grid entities.
         *
         * For example, this would be code to create a custom rock called a "Silver Rock" that produces a
         * dime when destroyed:
         *
         * ```ts
         * // This is local to the mod and can safely overlap with the values of `GridEntityType` (or
         * // values chosen by other mods).
         * const GridEntityTypeCustom = {
         *   SILVER_ROCK: 0 as GridEntityType,
         * } as const;
         *
         * // This is copied from "gfx/grid/grid_rock.anm2" with some tweaks to make it look special.
         * const SILVER_ROCK_ANM2_PATH = "gfx/grid/grid_rock_silver.anm2";
         *
         * export function silverRockInit(mod: ModUpgraded): void {
         *   mod.AddCallbackCustom(
         *     ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_BROKEN,
         *     postGridEntityCustomBrokenSilverRock,
         *     GridEntityTypeCustom.SILVER_ROCK,
         *   );
         * }
         *
         * function postGridEntityCustomBrokenSilverRock(gridEntity: GridEntity) {
         *   spawnCoin(CoinSubType.DIME, gridEntity.Position);
         * }
         *
         * export function spawnSilverRock(mod: ModUpgraded, gridIndex: int): GridEntity {
         *   return mod.spawnCustomGridEntity(
         *     GridEntityTypeCustom.SILVER_ROCK,
         *     gridIndex,
         *     undefined,
         *     SILVER_ROCK_ANM2_PATH,
         *     undefined,
         *     GridEntityType.ROCK,
         *   );
         * }
         * ```
         *
         * @param gridEntityTypeCustom An integer that identifies what kind of grid entity you are
         *                             creating. It should correspond to a local enum value created in
         *                             your mod. The integer can be any unique value and will not
         *                             correspond to the actual grid entity type used. (This integer is
         *                             used in the various custom grid entity callbacks.)
         * @param gridIndexOrPosition The grid index or position in the room that you want to spawn the
         *                            grid entity at. If a position is specified, the closest grid index
         *                            will be used.
         * @param gridCollisionClass Optional. The collision class that you want the custom grid entity to
         *                           have. If not specified, the grid collision class from the base grid
         *                           entity will be used.
         * @param anm2Path Optional. The path to the ANM2 file to use for the sprite. If not specified,
         *                 the normal sprite from the base grid entity will be used.
         * @param defaultAnimation Optional. The name of the animation to play after the sprite is
         *                         initialized and after the player re-enters a room with this grid entity
         *                         in it. If not specified, the default animation in the anm2 will be
         *                         used.
         * @param baseGridEntityType Optional. The type of the grid entity to use as a "base" for this
         *                           custom grid entity. Default is `GridEntityType.DECORATION`.
         * @param baseGridEntityVariant Optional. The variant of the grid entity to use as a "base" for
         *                              this custom grid entity. Default is 0.
         * @public
         */
        spawnCustomGridEntity(gridEntityTypeCustom, gridIndexOrPosition, gridCollisionClass, anm2Path, defaultAnimation, baseGridEntityType = isaac_typescript_definitions_1.GridEntityType.DECORATION, baseGridEntityVariant = 0) {
          const room = cachedClasses_1.game.GetRoom();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const gridIndex = (0, vector_1.isVector)(gridIndexOrPosition) ? room.GetGridIndex(gridIndexOrPosition) : gridIndexOrPosition;
          const customGridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(baseGridEntityType, baseGridEntityVariant, gridIndexOrPosition);
          (0, utils_1.assertDefined)(customGridEntity, "Failed to spawn a custom grid entity.");
          if (gridCollisionClass !== void 0) {
            customGridEntity.CollisionClass = gridCollisionClass;
          }
          if (anm2Path !== void 0) {
            const sprite = customGridEntity.GetSprite();
            sprite.Load(anm2Path, true);
            const animationToPlay = defaultAnimation ?? sprite.GetDefaultAnimation();
            sprite.Play(animationToPlay, true);
          }
          const customGridEntityData = {
            gridEntityTypeCustom,
            roomListIndex,
            gridIndex,
            anm2Path,
            defaultAnimation,
            gridCollisionClass
          };
          const roomCustomGridEntities = v.level.customGridEntities.getAndSetDefault(roomListIndex);
          roomCustomGridEntities.set(gridIndex, customGridEntityData);
          return customGridEntity;
        }
        /**
         * Helper function to remove a custom grid entity created by the `spawnCustomGrid` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CUSTOM_GRID_ENTITIES`.
         *
         * @param gridIndexOrPositionOrGridEntity You can specify the custom grid entity to remove by
         *                                providing the grid index, the room position, or the grid entity
         *                                itself.
         * @param updateRoom Optional. Whether to update the room after the grid entity is removed.
         *                   Default is true. This is generally a good idea because if the room is not
         *                   updated, you will be unable to spawn another grid entity on the same tile
         *                   until a frame has passed. However, doing this is expensive, since it involves
         *                   a call to `Isaac.GetRoomEntities`, so set it to false if you need to run this
         *                   function multiple times.
         * @returns The grid entity that was removed. Returns undefined if no grid entity was found at the
         *          given location or if the given grid entity was not a custom grid entity.
         * @public
         */
        removeCustomGridEntity(gridIndexOrPositionOrGridEntity, updateRoom = true) {
          const room = cachedClasses_1.game.GetRoom();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          let decoration;
          if (typeof gridIndexOrPositionOrGridEntity === "number") {
            const gridIndex2 = gridIndexOrPositionOrGridEntity;
            const gridEntity = room.GetGridEntity(gridIndex2);
            if (gridEntity === void 0) {
              return void 0;
            }
            decoration = gridEntity;
          } else if ((0, vector_1.isVector)(gridIndexOrPositionOrGridEntity)) {
            const position = gridIndexOrPositionOrGridEntity;
            const gridEntity = room.GetGridEntityFromPos(position);
            if (gridEntity === void 0) {
              return void 0;
            }
            decoration = gridEntity;
          } else {
            decoration = gridIndexOrPositionOrGridEntity;
          }
          const gridIndex = decoration.GetGridIndex();
          const roomCustomGridEntities = v.level.customGridEntities.getAndSetDefault(roomListIndex);
          const exists = roomCustomGridEntities.has(gridIndex);
          if (!exists) {
            return void 0;
          }
          roomCustomGridEntities.delete(gridIndex);
          (0, gridEntities_1.removeGridEntity)(decoration, updateRoom);
          return decoration;
        }
        /**
         * Helper function to get the custom grid entities in the current room. Returns an array of tuples
         * containing the raw decoration grid entity and the associated entity data.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CUSTOM_GRID_ENTITIES`.
         *
         * @public
         */
        getCustomGridEntities() {
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const roomCustomGridEntities = v.level.customGridEntities.get(roomListIndex);
          if (roomCustomGridEntities === void 0) {
            return [];
          }
          const room = cachedClasses_1.game.GetRoom();
          const customGridEntities = [];
          for (const [gridIndex, data] of roomCustomGridEntities) {
            const gridEntity = room.GetGridEntity(gridIndex);
            if (gridEntity !== void 0) {
              customGridEntities.push({ gridEntity, data });
            }
          }
          return customGridEntities;
        }
        /**
         * Helper function to get the custom `GridEntityType` from a `GridEntity` or grid index. Returns
         * undefined if the provided `GridEntity` is not a custom grid entity, or if there was not a grid
         * entity on the provided grid index.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CUSTOM_GRID_ENTITIES`.
         *
         * @public
         */
        getCustomGridEntityType(gridEntityOrGridIndex) {
          if (!this.initialized) {
            return void 0;
          }
          const gridIndex = (0, types_1.isInteger)(gridEntityOrGridIndex) ? gridEntityOrGridIndex : gridEntityOrGridIndex.GetGridIndex();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const roomCustomGridEntities = v.level.customGridEntities.get(roomListIndex);
          if (roomCustomGridEntities === void 0) {
            return void 0;
          }
          for (const [_gridIndex, data] of roomCustomGridEntities) {
            if (data.gridIndex === gridIndex) {
              return data.gridEntityTypeCustom;
            }
          }
          return void 0;
        }
        /**
         * Helper function to check if a `GridEntity` is a custom grid entity or if a grid index has a
         * custom grid entity.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CUSTOM_GRID_ENTITIES`.
         *
         * @public
         */
        isCustomGridEntity(gridEntityOrGridIndex) {
          const gridEntityTypeCustom = this.getCustomGridEntityType(gridEntityOrGridIndex);
          return gridEntityTypeCustom !== void 0;
        }
      };
      exports2.CustomGridEntities = CustomGridEntities;
      __decorate([
        decorators_1.Exported
      ], CustomGridEntities.prototype, "spawnCustomGridEntity", null);
      __decorate([
        decorators_1.Exported
      ], CustomGridEntities.prototype, "removeCustomGridEntity", null);
      __decorate([
        decorators_1.Exported
      ], CustomGridEntities.prototype, "getCustomGridEntities", null);
      __decorate([
        decorators_1.Exported
      ], CustomGridEntities.prototype, "getCustomGridEntityType", null);
      __decorate([
        decorators_1.Exported
      ], CustomGridEntities.prototype, "isCustomGridEntity", null);
    }
  });

  // node_modules/isaacscript-common/dist/functions/external.js
  var require_external = __commonJS({
    "node_modules/isaacscript-common/dist/functions/external.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.rebirthItemTrackerWriteToFile = exports2.rebirthItemTrackerRemoveCollectible = void 0;
      var collectibles_1 = require_collectibles();
      var REBIRTH_ITEM_TRACKER_REMOVE_COLLECTIBLE_COMMAND = "REBIRTH_ITEM_TRACKER_REMOVE_COLLECTIBLE";
      var REBIRTH_ITEM_TRACKER_WRITE_TO_FILE_COMMAND = "REBIRTH_ITEM_TRACKER_WRITE_TO_FILE";
      function rebirthItemTrackerRemoveCollectible(...collectibleTypes) {
        for (const collectibleType of collectibleTypes) {
          const collectibleName = (0, collectibles_1.getCollectibleName)(collectibleType);
          Isaac.DebugString(`${REBIRTH_ITEM_TRACKER_REMOVE_COLLECTIBLE_COMMAND} Removing collectible ${collectibleType} (${collectibleName}) on player 0 (Player)`);
        }
      }
      exports2.rebirthItemTrackerRemoveCollectible = rebirthItemTrackerRemoveCollectible;
      function rebirthItemTrackerWriteToFile(msg) {
        Isaac.DebugString(`${REBIRTH_ITEM_TRACKER_WRITE_TO_FILE_COMMAND} ${msg}`);
      }
      exports2.rebirthItemTrackerWriteToFile = rebirthItemTrackerWriteToFile;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/CustomRevive.js
  var require_CustomRevive = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/CustomRevive.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomRevive = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var external_1 = require_external();
      var log_1 = require_log();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      var Feature_1 = require_Feature();
      var DEBUG = false;
      var CustomReviveState;
      (function(CustomReviveState2) {
        CustomReviveState2[CustomReviveState2["DISABLED"] = 0] = "DISABLED";
        CustomReviveState2[CustomReviveState2["WAITING_FOR_ROOM_TRANSITION"] = 1] = "WAITING_FOR_ROOM_TRANSITION";
        CustomReviveState2[CustomReviveState2["WAITING_FOR_ITEM_ANIMATION"] = 2] = "WAITING_FOR_ITEM_ANIMATION";
      })(CustomReviveState || (CustomReviveState = {}));
      var v = {
        run: {
          state: CustomReviveState.DISABLED,
          revivalType: null,
          dyingPlayerIndex: null
        }
      };
      var CustomRevive = class extends Feature_1.Feature {
        v = v;
        preCustomRevive;
        postCustomRevive;
        runInNFrames;
        constructor(preCustomRevive, postCustomRevive, runInNFrames) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES];
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender],
            // 7
            [
              isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_INIT,
              this.postFamiliarInitOneUp,
              [isaac_typescript_definitions_1.FamiliarVariant.ONE_UP]
            ]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered],
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ],
            [ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE, this.postPlayerFatalDamage],
            [ModCallbackCustom_1.ModCallbackCustom.PRE_BERSERK_DEATH, this.preBerserkDeath]
          ];
          this.preCustomRevive = preCustomRevive;
          this.postCustomRevive = postCustomRevive;
          this.runInNFrames = runInNFrames;
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          if (v.run.state !== CustomReviveState.WAITING_FOR_ITEM_ANIMATION) {
            return;
          }
          cachedClasses_1.sfxManager.Stop(isaac_typescript_definitions_1.SoundEffect.ONE_UP);
        };
        // ModCallback.POST_FAMILIAR_INIT (7)
        // FamiliarVariant.ONE_UP (41)
        postFamiliarInitOneUp = (familiar) => {
          if (v.run.state !== CustomReviveState.WAITING_FOR_ROOM_TRANSITION) {
            return;
          }
          familiar.Remove();
        };
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          if (v.run.state !== CustomReviveState.WAITING_FOR_ROOM_TRANSITION) {
            return;
          }
          v.run.state = CustomReviveState.WAITING_FOR_ITEM_ANIMATION;
          this.logStateChanged();
        };
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          this.checkWaitingForItemAnimation(player);
        };
        checkWaitingForItemAnimation(player) {
          if (v.run.state !== CustomReviveState.WAITING_FOR_ITEM_ANIMATION) {
            return;
          }
          if (v.run.dyingPlayerIndex === null) {
            return;
          }
          const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
          if (playerIndex !== v.run.dyingPlayerIndex) {
            return;
          }
          let playerToCheckHoldingItem = player;
          if ((0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.SOUL_B)) {
            const forgottenBody = player.GetOtherTwin();
            if (forgottenBody !== void 0) {
              playerToCheckHoldingItem = forgottenBody;
            }
          }
          if (!playerToCheckHoldingItem.IsHoldingItem()) {
            return;
          }
          if (v.run.revivalType !== null) {
            this.postCustomRevive.fire(playerToCheckHoldingItem, v.run.revivalType);
          }
          v.run.state = CustomReviveState.DISABLED;
          v.run.revivalType = null;
          v.run.dyingPlayerIndex = null;
          this.logStateChanged();
        }
        // ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE
        postPlayerFatalDamage = (player) => {
          this.playerIsAboutToDie(player);
          return void 0;
        };
        // ModCallbackCustom.PRE_BERSERK_DEATH
        preBerserkDeath = (player) => {
          this.playerIsAboutToDie(player);
        };
        /**
         * The player is about to die, which will immediately delete the save data for the run. To prevent
         * this from happening, we grant the 1-Up item.
         */
        playerIsAboutToDie(player) {
          const revivalType = this.preCustomRevive.fire(player);
          if (revivalType === void 0) {
            return;
          }
          v.run.state = CustomReviveState.WAITING_FOR_ROOM_TRANSITION;
          v.run.revivalType = revivalType;
          v.run.dyingPlayerIndex = (0, playerIndex_1.getPlayerIndex)(player);
          this.logStateChanged();
          player.AddCollectible(isaac_typescript_definitions_1.CollectibleType.ONE_UP, 0, false);
          (0, external_1.rebirthItemTrackerRemoveCollectible)(isaac_typescript_definitions_1.CollectibleType.ONE_UP);
          const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
          this.runInNFrames.runNextGameFrame(() => {
            const futurePlayer = (0, playerIndex_1.getPlayerFromIndex)(playerIndex);
            if (futurePlayer === void 0) {
              return;
            }
            if (futurePlayer.IsDead()) {
              return;
            }
            (0, log_1.logError)("The player is still alive after initializing a custom revive. Explicitly killing the player.");
            futurePlayer.Kill();
          });
        }
        logStateChanged() {
          if (DEBUG) {
            (0, log_1.log)(`Custom revive state changed: ${CustomReviveState[v.run.state]} (${v.run.state})`);
          }
        }
      };
      exports2.CustomRevive = CustomRevive;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/EsauJrDetection.js
  var require_EsauJrDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/EsauJrDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EsauJrDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var players_1 = require_players();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          usedEsauJrFrame: null,
          usedEsauJrControllerIndex: null,
          usedEsauJrAtLeastOnce: false
        }
      };
      var EsauJrDetection = class extends Feature_1.Feature {
        v = v;
        postEsauJr;
        postFirstEsauJr;
        constructor(postEsauJr, postFirstEsauJr) {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate],
            // 3
            [
              isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM,
              this.postUseItemEsauJr,
              [isaac_typescript_definitions_1.CollectibleType.ESAU_JR]
            ]
          ];
          this.postEsauJr = postEsauJr;
          this.postFirstEsauJr = postFirstEsauJr;
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          if (v.run.usedEsauJrFrame === null || gameFrameCount < v.run.usedEsauJrFrame + 1) {
            return;
          }
          v.run.usedEsauJrFrame = null;
          if (v.run.usedEsauJrControllerIndex === null) {
            return;
          }
          const players = (0, players_1.getPlayersWithControllerIndex)(v.run.usedEsauJrControllerIndex);
          v.run.usedEsauJrControllerIndex = null;
          const player = players[0];
          if (player === void 0) {
            return;
          }
          if (!v.run.usedEsauJrAtLeastOnce) {
            v.run.usedEsauJrAtLeastOnce = true;
            this.postFirstEsauJr.fire(player);
          }
          this.postEsauJr.fire(player);
        };
        // ModCallback.POST_USE_ITEM (3)
        // CollectibleType.ESAU_JR (703)
        postUseItemEsauJr = (_collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData) => {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          v.run.usedEsauJrFrame = gameFrameCount + 1;
          v.run.usedEsauJrControllerIndex = player.ControllerIndex;
          return void 0;
        };
      };
      exports2.EsauJrDetection = EsauJrDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/FlipDetection.js
  var require_FlipDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/FlipDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FlipDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var players_1 = require_players();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          /** We don't consider the case of a multiplayer game with more than one Tainted Lazarus. */
          usedFlipAtLeastOnce: false
        }
      };
      var FlipDetection = class extends Feature_1.Feature {
        v = v;
        postFlip;
        postFirstFlip;
        constructor(postFlip, postFirstFlip) {
          super();
          this.callbacksUsed = [
            // 3
            [isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM, this.postUseItemFlip, [isaac_typescript_definitions_1.CollectibleType.FLIP]]
          ];
          this.postFlip = postFlip;
          this.postFirstFlip = postFirstFlip;
        }
        // ModCallback.POST_USE_ITEM (3)
        // CollectibleType.FLIP (711)
        postUseItemFlip = (_collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData) => {
          if (!(0, players_1.isTaintedLazarus)(player)) {
            return void 0;
          }
          const newLazarus = getNewLazarus(player);
          if (newLazarus === void 0) {
            return void 0;
          }
          if (!v.run.usedFlipAtLeastOnce) {
            v.run.usedFlipAtLeastOnce = true;
            this.postFirstFlip.fire(newLazarus, player);
          }
          this.postFlip.fire(newLazarus, player);
          return void 0;
        };
      };
      exports2.FlipDetection = FlipDetection;
      function getNewLazarus(oldLazarus) {
        const oldCharacter = oldLazarus.GetPlayerType();
        let newCharacter;
        if (oldCharacter === isaac_typescript_definitions_1.PlayerType.LAZARUS_B) {
          newCharacter = isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B;
        } else if (oldCharacter === isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B) {
          newCharacter = isaac_typescript_definitions_1.PlayerType.LAZARUS_B;
        } else {
          return void 0;
        }
        const playersOfType = (0, players_1.getPlayersOfType)(newCharacter);
        return playersOfType.find((player) => player.FrameCount === oldLazarus.FrameCount);
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/GameReorderedCallbacks.js
  var require_GameReorderedCallbacks = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/GameReorderedCallbacks.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GameReorderedCallbacks = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var frames_1 = require_frames();
      var Feature_1 = require_Feature();
      var GameReorderedCallbacks = class extends Feature_1.Feature {
        /** Used to detect a player resuming a saved run. */
        renderFrameRunStarted = null;
        currentStage = null;
        currentStageType = null;
        usedGlowingHourGlass = false;
        forceNewLevel = false;
        forceNewRoom = false;
        postGameStartedReordered;
        postNewLevelReordered;
        postNewRoomReordered;
        postGameStartedReorderedLast;
        /** @internal */
        constructor(postGameStartedReordered, postNewLevelReordered, postNewRoomReordered, postGameStartedReorderedLast) {
          super();
          this.callbacksUsed = [
            // 3
            [
              isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM,
              this.postUseItemGlowingHourGlass,
              [isaac_typescript_definitions_1.CollectibleType.GLOWING_HOUR_GLASS]
            ],
            // 9
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_INIT, this.postPlayerInit],
            // 15
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_GAME_STARTED, this.postGameStarted],
            // 17
            [isaac_typescript_definitions_1.ModCallback.PRE_GAME_EXIT, this.preGameExit],
            // 18
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_NEW_LEVEL, this.postNewLevel],
            // 19
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_NEW_ROOM, this.postNewRoom]
          ];
          this.postGameStartedReordered = postGameStartedReordered;
          this.postNewLevelReordered = postNewLevelReordered;
          this.postNewRoomReordered = postNewRoomReordered;
          this.postGameStartedReorderedLast = postGameStartedReorderedLast;
        }
        // ModCallback.POST_USE_ITEM (3)
        // CollectibleType.GLOWING_HOUR_GLASS (422)
        postUseItemGlowingHourGlass = () => {
          this.usedGlowingHourGlass = true;
          return void 0;
        };
        // ModCallback.POST_PLAYER_INIT (9)
        postPlayerInit = (_player) => {
          if (this.renderFrameRunStarted === null) {
            this.renderFrameRunStarted = Isaac.GetFrameCount();
          }
        };
        // ModCallback.POST_GAME_STARTED (15)
        postGameStarted = (isContinued) => {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          this.recordCurrentStage();
          this.postGameStartedReordered.fire(isContinued);
          this.postGameStartedReorderedLast.fire(isContinued);
          if (!isContinued) {
            this.postNewLevelReordered.fire(stage, stageType);
          }
          this.postNewRoomReordered.fire(roomType);
        };
        // ModCallback.PRE_GAME_EXIT (17)
        preGameExit = () => {
          this.renderFrameRunStarted = null;
        };
        // ModCallback.POST_NEW_LEVEL (18)
        postNewLevel = () => {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          if ((0, frames_1.onGameFrame)(0) && !this.forceNewLevel) {
            return;
          }
          this.forceNewLevel = false;
          this.recordCurrentStage();
          this.postNewLevelReordered.fire(stage, stageType);
          this.postNewRoomReordered.fire(roomType);
        };
        // ModCallback.POST_NEW_ROOM (19)
        postNewRoom = () => {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          if (this.usedGlowingHourGlass) {
            this.usedGlowingHourGlass = false;
            if (this.currentStage !== stage || this.currentStageType !== stageType) {
              this.recordCurrentStage();
              this.postNewLevelReordered.fire(stage, stageType);
              this.postNewRoomReordered.fire(roomType);
              return;
            }
          }
          if (((0, frames_1.onGameFrame)(0) || (0, frames_1.onRenderFrame)(this.renderFrameRunStarted) || this.currentStage !== stage || this.currentStageType !== stageType) && !this.forceNewRoom) {
            return;
          }
          this.forceNewRoom = false;
          this.postNewRoomReordered.fire(roomType);
        };
        recordCurrentStage() {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          this.currentStage = stage;
          this.currentStageType = stageType;
        }
        /**
         * Helper function to tell the `POST_NEW_LEVEL_REORDERED` callback that it should always fire on
         * the next `POST_NEW_LEVEL`.
         *
         * If some specific cases, mods can change the current level during run initialization on the 0th
         * frame. (For example, if you had a mod that made the player start the run in Caves instead of
         * Basement.) However, due to how the callback reordering works, the `POST_NEW_LEVEL_REORDERED`
         * callback will never fire on the 0th frame. To get around this, call this function before
         * changing levels to temporarily force the callback to fire.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.GAME_REORDERED_CALLBACKS`.
         *
         * @public
         */
        forceNewLevelCallback() {
          this.forceNewLevel = true;
        }
        /**
         * Helper function to tell the `POST_NEW_ROOM_REORDERED` callback that it should always fire on
         * the next `POST_NEW_ROOM`.
         *
         * If some specific cases, mods can change the current room during run initialization on the 0th
         * frame. (For example, if you had a mod that made the player start the Treasure Room of Basement
         * 1 instead of the normal starting room.) However, due to how the callback reordering works, the
         * `POST_NEW_ROOM_REORDERED` callback will never fire on the 0th frame. To get around this, call
         * this function before changing rooms to temporarily force the callback to fire.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.GAME_REORDERED_CALLBACKS`.
         *
         * @public
         */
        forceNewRoomCallback() {
          this.forceNewRoom = true;
        }
        /**
         * Helper function to manually set the variables that the reordered callback logic uses to track
         * the current stage and stage type.
         *
         * This is useful because if the stage is changed with the `Game.SetStage` method (or the
         * `setStage` helper function), the reordered callbacks will stop working.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.GAME_REORDERED_CALLBACKS`.
         *
         * @public
         */
        reorderedCallbacksSetStage(stage, stageType) {
          this.currentStage = stage;
          this.currentStageType = stageType;
        }
      };
      exports2.GameReorderedCallbacks = GameReorderedCallbacks;
      __decorate([
        decorators_1.Exported
      ], GameReorderedCallbacks.prototype, "forceNewLevelCallback", null);
      __decorate([
        decorators_1.Exported
      ], GameReorderedCallbacks.prototype, "forceNewRoomCallback", null);
      __decorate([
        decorators_1.Exported
      ], GameReorderedCallbacks.prototype, "reorderedCallbacksSetStage", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/GridEntityCollisionDetection.js
  var require_GridEntityCollisionDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/GridEntityCollisionDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridEntityCollisionDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntities_1 = require_gridEntities();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          /** Indexed by grid entity pointer hash. */
          collidingEntitiesMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Set())
        }
      };
      var GridEntityCollisionDetection = class extends Feature_1.Feature {
        v = v;
        postGridEntityCollision;
        postGridEntityCustomCollision;
        customGridEntities;
        constructor(postGridEntityCollision, postGridEntityCustomCollision, customGridEntities) {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
          this.postGridEntityCollision = postGridEntityCollision;
          this.postGridEntityCustomCollision = postGridEntityCustomCollision;
          this.customGridEntities = customGridEntities;
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          const gridEntities = (0, gridEntities_1.getGridEntities)();
          const gridEntitiesWithCollision = gridEntities.filter((gridEntity) => gridEntity.CollisionClass !== isaac_typescript_definitions_1.GridCollisionClass.NONE);
          for (const gridEntity of gridEntitiesWithCollision) {
            const gridEntityPtrHash = GetPtrHash(gridEntity);
            const oldCollidingEntities = v.room.collidingEntitiesMap.getAndSetDefault(gridEntityPtrHash);
            const collidingEntities = (0, gridEntities_1.getCollidingEntitiesWithGridEntity)(gridEntity);
            for (const entity of collidingEntities) {
              const entityPtrHash = GetPtrHash(entity);
              if (!oldCollidingEntities.has(entityPtrHash)) {
                oldCollidingEntities.add(entityPtrHash);
                const gridEntityTypeCustom = this.customGridEntities.getCustomGridEntityType(gridEntity);
                if (gridEntityTypeCustom === void 0) {
                  this.postGridEntityCollision.fire(gridEntity, entity);
                } else {
                  this.postGridEntityCustomCollision.fire(gridEntity, gridEntityTypeCustom, entity);
                }
              }
            }
            const collidingEntitiesPtrHashes = collidingEntities.map((entity) => GetPtrHash(entity));
            const collidingEntitiesPtrHashSet = new Set(collidingEntitiesPtrHashes);
            for (const oldCollidingEntityPtrHash of oldCollidingEntities) {
              if (!collidingEntitiesPtrHashSet.has(oldCollidingEntityPtrHash)) {
                oldCollidingEntities.delete(oldCollidingEntityPtrHash);
              }
            }
          }
        };
      };
      exports2.GridEntityCollisionDetection = GridEntityCollisionDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/GridEntityRenderDetection.js
  var require_GridEntityRenderDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/GridEntityRenderDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridEntityRenderDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntities_1 = require_gridEntities();
      var Feature_1 = require_Feature();
      var GridEntityRenderDetection = class extends Feature_1.Feature {
        postGridEntityRender;
        postGridEntityCustomRender;
        customGridEntities;
        constructor(postGridEntityRender, postGridEntityCustomRender, customGridEntities) {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
          this.postGridEntityRender = postGridEntityRender;
          this.postGridEntityCustomRender = postGridEntityCustomRender;
          this.customGridEntities = customGridEntities;
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
            const gridIndex = gridEntity.GetGridIndex();
            const gridEntityTypeCustom = this.customGridEntities.getCustomGridEntityType(gridIndex);
            if (gridEntityTypeCustom === void 0) {
              this.postGridEntityRender.fire(gridEntity);
            } else {
              this.postGridEntityCustomRender.fire(gridEntity, gridEntityTypeCustom);
            }
          }
        };
      };
      exports2.GridEntityRenderDetection = GridEntityRenderDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/GridEntityUpdateDetection.js
  var require_GridEntityUpdateDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/GridEntityUpdateDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridEntityUpdateDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var gridEntities_1 = require_gridEntities();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          /** Indexed by grid index. */
          initializedGridEntities: /* @__PURE__ */ new Map()
        }
      };
      var GridEntityUpdateDetection = class extends Feature_1.Feature {
        v = v;
        postGridEntityInit;
        postGridEntityCustomInit;
        postGridEntityUpdate;
        postGridEntityCustomUpdate;
        postGridEntityRemove;
        postGridEntityCustomRemove;
        postGridEntityStateChanged;
        postGridEntityCustomStateChanged;
        postGridEntityBroken;
        postGridEntityCustomBroken;
        customGridEntities;
        constructor(postGridEntityInit, postGridEntityCustomInit, postGridEntityUpdate, postGridEntityCustomUpdate, postGridEntityRemove, postGridEntityCustomRemove, postGridEntityStateChanged, postGridEntityCustomStateChanged, postGridEntityBroken, postGridEntityCustomBroken, customGridEntities) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES];
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
          this.postGridEntityInit = postGridEntityInit;
          this.postGridEntityCustomInit = postGridEntityCustomInit;
          this.postGridEntityUpdate = postGridEntityUpdate;
          this.postGridEntityCustomUpdate = postGridEntityCustomUpdate;
          this.postGridEntityRemove = postGridEntityRemove;
          this.postGridEntityCustomRemove = postGridEntityCustomRemove;
          this.postGridEntityStateChanged = postGridEntityStateChanged;
          this.postGridEntityCustomStateChanged = postGridEntityCustomStateChanged;
          this.postGridEntityBroken = postGridEntityBroken;
          this.postGridEntityCustomBroken = postGridEntityCustomBroken;
          this.customGridEntities = customGridEntities;
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          const gridEntitiesMap = (0, gridEntities_1.getGridEntitiesMap)();
          this.checkGridEntitiesRemoved(gridEntitiesMap);
          for (const [gridIndex, gridEntity] of gridEntitiesMap) {
            this.checkGridEntityStateChanged(gridIndex, gridEntity);
            this.checkNewGridEntity(gridIndex, gridEntity);
            const gridEntityTypeCustom = this.customGridEntities.getCustomGridEntityType(gridIndex);
            if (gridEntityTypeCustom === void 0) {
              this.postGridEntityUpdate.fire(gridEntity);
            } else {
              this.postGridEntityCustomUpdate.fire(gridEntity, gridEntityTypeCustom);
            }
          }
        };
        checkGridEntitiesRemoved(gridEntitiesMap) {
          for (const [gridIndex, gridEntityTuple] of v.room.initializedGridEntities) {
            const [storedGridEntityType, storedGridEntityVariant] = gridEntityTuple;
            const gridEntity = gridEntitiesMap.get(gridIndex);
            if (gridEntity === void 0 || gridEntity.GetType() !== storedGridEntityType) {
              v.room.initializedGridEntities.delete(gridIndex);
              const gridEntityTypeCustom = this.customGridEntities.getCustomGridEntityType(gridIndex);
              if (gridEntityTypeCustom === void 0) {
                this.postGridEntityRemove.fire(gridIndex, storedGridEntityType, storedGridEntityVariant);
              } else {
                this.postGridEntityCustomRemove.fire(gridIndex, gridEntityTypeCustom);
              }
            }
          }
        }
        checkGridEntityStateChanged(gridIndex, gridEntity) {
          const gridEntityTuple = v.room.initializedGridEntities.get(gridIndex);
          if (gridEntityTuple === void 0) {
            return;
          }
          const [_gridEntityType, _gridEntityVariant, oldState] = gridEntityTuple;
          const newState = gridEntity.State;
          if (oldState !== newState) {
            this.updateTupleInMap(gridEntity);
            const gridEntityTypeCustom = this.customGridEntities.getCustomGridEntityType(gridEntity);
            if (gridEntityTypeCustom === void 0) {
              this.postGridEntityStateChanged.fire(gridEntity, oldState, newState);
            } else {
              this.postGridEntityCustomStateChanged.fire(gridEntity, gridEntityTypeCustom, oldState, newState);
            }
            if ((0, gridEntities_1.isGridEntityBroken)(gridEntity)) {
              if (gridEntityTypeCustom === void 0) {
                this.postGridEntityBroken.fire(gridEntity);
              } else {
                this.postGridEntityCustomBroken.fire(gridEntity, gridEntityTypeCustom);
              }
            }
          }
        }
        checkNewGridEntity(gridIndex, gridEntity) {
          const gridEntityType = gridEntity.GetType();
          const gridEntityTuple = v.room.initializedGridEntities.get(gridIndex);
          if (gridEntityTuple === void 0 || gridEntityTuple[0] !== gridEntityType) {
            this.updateTupleInMap(gridEntity);
            const gridEntityTypeCustom = this.customGridEntities.getCustomGridEntityType(gridEntity);
            if (gridEntityTypeCustom === void 0) {
              this.postGridEntityInit.fire(gridEntity);
            } else {
              this.postGridEntityCustomInit.fire(gridEntity, gridEntityTypeCustom);
            }
          }
        }
        updateTupleInMap(gridEntity) {
          const gridEntityType = gridEntity.GetType();
          const variant = gridEntity.GetVariant();
          const gridIndex = gridEntity.GetGridIndex();
          const newTuple = [
            gridEntityType,
            variant,
            gridEntity.State
          ];
          v.room.initializedGridEntities.set(gridIndex, newTuple);
        }
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          const gridEntitiesMap = (0, gridEntities_1.getGridEntitiesMap)();
          for (const [gridIndex, gridEntity] of gridEntitiesMap) {
            this.checkNewGridEntity(gridIndex, gridEntity);
          }
        };
      };
      exports2.GridEntityUpdateDetection = GridEntityUpdateDetection;
    }
  });

  // node_modules/isaacscript-common/dist/types/PickingUpItem.js
  var require_PickingUpItem = __commonJS({
    "node_modules/isaacscript-common/dist/types/PickingUpItem.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isPickingUpItemTrinket = exports2.isPickingUpItemCollectible = exports2.isPickingUpItemNull = exports2.resetPickingUpItem = exports2.newPickingUpItem = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      var DEFAULT_ITEM_TYPE = isaac_typescript_definitions_1.ItemType.NULL;
      var DEFAULT_SUB_TYPE = isaac_typescript_definitions_1.CollectibleType.NULL;
      function newPickingUpItem() {
        return {
          itemType: DEFAULT_ITEM_TYPE,
          subType: DEFAULT_SUB_TYPE
        };
      }
      exports2.newPickingUpItem = newPickingUpItem;
      function resetPickingUpItem(pickingUpItem) {
        pickingUpItem.itemType = DEFAULT_ITEM_TYPE;
        pickingUpItem.subType = DEFAULT_SUB_TYPE;
      }
      exports2.resetPickingUpItem = resetPickingUpItem;
      var COLLECTIBLE_ITEM_TYPES = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.ItemType.PASSIVE,
        isaac_typescript_definitions_1.ItemType.ACTIVE,
        isaac_typescript_definitions_1.ItemType.FAMILIAR
        // 4
      ]);
      function isPickingUpItemNull(pickingUpItem) {
        return pickingUpItem.itemType === isaac_typescript_definitions_1.ItemType.NULL;
      }
      exports2.isPickingUpItemNull = isPickingUpItemNull;
      function isPickingUpItemCollectible(pickingUpItem) {
        return COLLECTIBLE_ITEM_TYPES.has(pickingUpItem.itemType);
      }
      exports2.isPickingUpItemCollectible = isPickingUpItemCollectible;
      function isPickingUpItemTrinket(pickingUpItem) {
        return pickingUpItem.itemType === isaac_typescript_definitions_1.ItemType.TRINKET;
      }
      exports2.isPickingUpItemTrinket = isPickingUpItemTrinket;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/ItemPickupDetection.js
  var require_ItemPickupDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/ItemPickupDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemPickupDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var playerDataStructures_1 = require_playerDataStructures();
      var types_1 = require_types();
      var PickingUpItem_1 = require_PickingUpItem();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          playersPickingUpItemMap: new DefaultMap_1.DefaultMap(() => (0, PickingUpItem_1.newPickingUpItem)())
        }
      };
      var ItemPickupDetection = class extends Feature_1.Feature {
        v = v;
        postItemPickup;
        preItemPickup;
        constructor(postItemPickup, preItemPickup) {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
          this.postItemPickup = postItemPickup;
          this.preItemPickup = preItemPickup;
        }
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const pickingUpItem = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersPickingUpItemMap, player);
          if (player.IsItemQueueEmpty()) {
            this.queueEmpty(player, pickingUpItem);
          } else {
            this.queueNotEmpty(player, pickingUpItem);
          }
        };
        queueEmpty(player, pickingUpItem) {
          if (pickingUpItem.itemType === isaac_typescript_definitions_1.ItemType.NULL || (0, types_1.asNumber)(pickingUpItem.subType) === 0) {
            return;
          }
          this.postItemPickup.fire(player, pickingUpItem);
          (0, PickingUpItem_1.resetPickingUpItem)(pickingUpItem);
        }
        queueNotEmpty(player, pickingUpItem) {
          const queuedItem = player.QueuedItem.Item;
          if (queuedItem === void 0 || queuedItem.Type === isaac_typescript_definitions_1.ItemType.NULL) {
            return;
          }
          if (queuedItem.Type !== pickingUpItem.itemType || queuedItem.ID !== pickingUpItem.subType) {
            pickingUpItem.itemType = queuedItem.Type;
            pickingUpItem.subType = queuedItem.ID;
            this.preItemPickup.fire(player, pickingUpItem);
          }
        }
      };
      exports2.ItemPickupDetection = ItemPickupDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/PickupChangeDetection.js
  var require_PickupChangeDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/PickupChangeDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PickupChangeDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ISCFeature_1 = require_ISCFeature();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          pickupVariants: /* @__PURE__ */ new Map(),
          pickupSubTypes: /* @__PURE__ */ new Map()
        }
      };
      var PickupChangeDetection = class extends Feature_1.Feature {
        v = v;
        postPickupChanged;
        pickupIndexCreation;
        constructor(postPickupChanged, pickupIndexCreation) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PICKUP_INDEX_CREATION];
          this.callbacksUsed = [
            // 35
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_UPDATE, this.postPickupUpdate]
          ];
          this.postPickupChanged = postPickupChanged;
          this.pickupIndexCreation = pickupIndexCreation;
        }
        // ModCallback.POST_PICKUP_UPDATE (35)
        postPickupUpdate = (pickup) => {
          const pickupIndex = this.pickupIndexCreation.getPickupIndex(pickup);
          const oldVariant = v.room.pickupVariants.get(pickupIndex);
          v.room.pickupVariants.set(pickupIndex, pickup.Variant);
          const oldSubType = v.room.pickupSubTypes.get(pickupIndex);
          v.room.pickupSubTypes.set(pickupIndex, pickup.SubType);
          if (oldVariant === void 0 || oldSubType === void 0) {
            return;
          }
          if (oldVariant !== pickup.Variant || oldSubType !== pickup.SubType) {
            this.postPickupChanged.fire(pickup, oldVariant, oldSubType, pickup.Variant, pickup.SubType);
          }
        };
      };
      exports2.PickupChangeDetection = PickupChangeDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/PlayerCollectibleDetection.js
  var require_PlayerCollectibleDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/PlayerCollectibleDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerCollectibleDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var flag_1 = require_flag();
      var playerDataStructures_1 = require_playerDataStructures();
      var players_1 = require_players();
      var sort_1 = require_sort();
      var utils_1 = require_utils();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          playersCollectibleCount: new DefaultMap_1.DefaultMap(0),
          playersCollectibleMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map()),
          playersActiveItemMap: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        }
      };
      var PlayerCollectibleDetection = class extends Feature_1.Feature {
        v = v;
        postPlayerCollectibleAdded;
        postPlayerCollectibleRemoved;
        moddedElementSets;
        runInNFrames;
        constructor(postPlayerCollectibleAdded, postPlayerCollectibleRemoved, moddedElementSets, runInNFrames) {
          super();
          this.featuresUsed = [
            ISCFeature_1.ISCFeature.MODDED_ELEMENT_SETS,
            ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES
          ];
          this.callbacksUsed = [
            // 3
            [isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM, this.postUseItemD4, [isaac_typescript_definitions_1.CollectibleType.D4]]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER, this.entityTakeDmgPlayer],
            [ModCallbackCustom_1.ModCallbackCustom.POST_ITEM_PICKUP, this.postItemPickup],
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
          this.postPlayerCollectibleAdded = postPlayerCollectibleAdded;
          this.postPlayerCollectibleRemoved = postPlayerCollectibleRemoved;
          this.moddedElementSets = moddedElementSets;
          this.runInNFrames = runInNFrames;
        }
        /**
         * This is called when the collectible count changes and in situations where the entire build is
         * rerolled.
         *
         * Since getting a new player collectible map is expensive, we want to only run this function when
         * necessary, and not on e.g. every frame. Unfortunately, this has the side effect of missing out
         * on collectible changes from mods that add and remove a collectible on the same frame.
         *
         * @param player The player to update.
         * @param numCollectiblesChanged Pass undefined for situations where the entire build was
         *                               rerolled.
         */
        updateCollectibleMapAndFire(player, numCollectiblesChanged) {
          const oldCollectibleMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersCollectibleMap, player);
          const newCollectibleMap = this.moddedElementSets.getPlayerCollectibleMap(player);
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersCollectibleMap, player, newCollectibleMap);
          const collectibleTypesSet = /* @__PURE__ */ new Set([
            ...oldCollectibleMap.keys(),
            ...newCollectibleMap.keys()
          ]);
          let numFired = 0;
          for (const collectibleType of collectibleTypesSet) {
            const oldNum = oldCollectibleMap.get(collectibleType) ?? 0;
            const newNum = newCollectibleMap.get(collectibleType) ?? 0;
            const difference = newNum - oldNum;
            const increased = difference > 0;
            const absoluteDifference = Math.abs(difference);
            (0, utils_1.repeat)(absoluteDifference, () => {
              if (increased) {
                this.postPlayerCollectibleAdded.fire(player, collectibleType);
              } else {
                this.postPlayerCollectibleRemoved.fire(player, collectibleType);
              }
              numFired++;
            });
            if (numFired === numCollectiblesChanged) {
              return;
            }
          }
        }
        // ModCallback.POST_USE_ITEM (3)
        // CollectibleType.D4 (284)
        postUseItemD4 = (_collectibleType, _rng, player) => {
          this.updateCollectibleMapAndFire(player, void 0);
          return void 0;
        };
        /** We need to handle the case of Tainted Eden taking damage. */
        // ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER
        entityTakeDmgPlayer = (player, _amount, damageFlags, _source, _countdownFrames) => {
          if ((0, flag_1.hasFlag)(damageFlags, isaac_typescript_definitions_1.DamageFlag.FAKE)) {
            return void 0;
          }
          const character = player.GetPlayerType();
          if (character !== isaac_typescript_definitions_1.PlayerType.EDEN_B) {
            return void 0;
          }
          const entityPtr = EntityPtr(player);
          this.runInNFrames.runNextGameFrame(() => {
            const futurePlayer = (0, players_1.getPlayerFromPtr)(entityPtr);
            if (futurePlayer !== void 0) {
              this.updateCollectibleMapAndFire(player, void 0);
            }
          });
          return void 0;
        };
        /**
         * We need to handle TMTRAINER collectibles, since they do not cause the player's collectible
         * count to change.
         */
        // ModCallbackCustom.POST_ITEM_PICKUP
        postItemPickup = (player, pickingUpItem) => {
          if (pickingUpItem.itemType === isaac_typescript_definitions_1.ItemType.TRINKET || pickingUpItem.itemType === isaac_typescript_definitions_1.ItemType.NULL) {
            return;
          }
          const newCollectibleCount = player.GetCollectibleCount();
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersCollectibleCount, player, newCollectibleCount);
          this.updateCollectibleMapAndFire(player, 1);
        };
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const oldCollectibleCount = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersCollectibleCount, player);
          const newCollectibleCount = player.GetCollectibleCount();
          (0, playerDataStructures_1.mapSetPlayer)(v.run.playersCollectibleCount, player, newCollectibleCount);
          const difference = newCollectibleCount - oldCollectibleCount;
          if (difference > 0) {
            this.updateCollectibleMapAndFire(player, difference);
          } else if (difference < 0) {
            this.updateCollectibleMapAndFire(player, difference * -1);
          } else if (difference === 0) {
            this.checkActiveItemsChanged(player);
          }
        };
        /**
         * Checking for collectible count will work to detect when a player swaps their active item for
         * another active item. This is because the collectible count will decrement by 1 when the item is
         * swapped onto the pedestal and the hold animation begins, and increment by 1 when the item is
         * dequeued and the hold animation ends.
         *
         * However, we also want to explicitly check for the case where a mod swaps in a custom active
         * collectible on the same frame, since doing so is cheap.
         */
        checkActiveItemsChanged(player) {
          const activeItemMap = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersActiveItemMap, player);
          const oldCollectibleTypes = [];
          const newCollectibleTypes = [];
          for (const activeSlot of cachedEnumValues_1.ACTIVE_SLOT_VALUES) {
            const oldCollectibleType = activeItemMap.get(activeSlot) ?? isaac_typescript_definitions_1.CollectibleType.NULL;
            const newCollectibleType = player.GetActiveItem(activeSlot);
            activeItemMap.set(activeSlot, newCollectibleType);
            oldCollectibleTypes.push(oldCollectibleType);
            newCollectibleTypes.push(newCollectibleType);
          }
          oldCollectibleTypes.sort(sort_1.sortNormal);
          newCollectibleTypes.sort(sort_1.sortNormal);
          if (!(0, array_1.arrayEquals)(oldCollectibleTypes, newCollectibleTypes)) {
            this.updateCollectibleMapAndFire(player, void 0);
          }
        }
      };
      exports2.PlayerCollectibleDetection = PlayerCollectibleDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/PlayerReorderedCallbacks.js
  var require_PlayerReorderedCallbacks = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/PlayerReorderedCallbacks.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerReorderedCallbacks = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var playerIndex_1 = require_playerIndex();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          postGameStartedFiredOnThisRun: false,
          postPEffectUpdateQueue: [],
          postPlayerUpdateQueue: [],
          postPlayerRenderQueue: []
        }
      };
      var PlayerReorderedCallbacks = class extends Feature_1.Feature {
        v = v;
        postPEffectUpdateReordered;
        postPlayerRenderReordered;
        postPlayerUpdateReordered;
        constructor(postPEffectUpdateReordered, postPlayerRenderReordered, postPlayerUpdateReordered) {
          super();
          this.callbacksUsed = [
            // 4
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_PEFFECT_UPDATE, this.postPEffectUpdate],
            // 31
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_UPDATE, this.postPlayerUpdate],
            // 32
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_RENDER, this.postPlayerRender]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED_LAST,
              this.postGameStartedReorderedLast
            ]
          ];
          this.postPEffectUpdateReordered = postPEffectUpdateReordered;
          this.postPlayerRenderReordered = postPlayerRenderReordered;
          this.postPlayerUpdateReordered = postPlayerUpdateReordered;
        }
        // ModCallback.POST_PEFFECT_UPDATE (4)
        postPEffectUpdate = (player) => {
          if (v.run.postGameStartedFiredOnThisRun) {
            this.postPEffectUpdateReordered.fire(player);
          } else {
            const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
            v.run.postPEffectUpdateQueue.push({
              playerIndex,
              renderOffset: constants_1.VectorZero
            });
          }
        };
        // ModCallback.POST_PLAYER_UPDATE (31)
        postPlayerUpdate = (player) => {
          if (v.run.postGameStartedFiredOnThisRun) {
            this.postPlayerUpdateReordered.fire(player);
          } else {
            const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
            v.run.postPlayerUpdateQueue.push({
              playerIndex,
              renderOffset: constants_1.VectorZero
            });
          }
        };
        // ModCallback.POST_PLAYER_RENDER (32)
        postPlayerRender = (player, renderOffset) => {
          if (v.run.postGameStartedFiredOnThisRun) {
            this.postPlayerRenderReordered.fire(player, renderOffset);
          } else {
            const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
            v.run.postPlayerRenderQueue.push({ playerIndex, renderOffset });
          }
        };
        // ModCallbackCustom.POST_GAME_STARTED_REORDERED_LAST
        postGameStartedReorderedLast = () => {
          v.run.postGameStartedFiredOnThisRun = true;
          dequeue(v.run.postPEffectUpdateQueue, this.postPEffectUpdateReordered.fire);
          dequeue(v.run.postPlayerUpdateQueue, this.postPlayerUpdateReordered.fire);
          dequeue(v.run.postPlayerRenderQueue, this.postPlayerRenderReordered.fire);
        };
      };
      exports2.PlayerReorderedCallbacks = PlayerReorderedCallbacks;
      function dequeue(queue, fireFunc) {
        for (const element of queue) {
          const { playerIndex, renderOffset } = element;
          const player = (0, playerIndex_1.getPlayerFromIndex)(playerIndex);
          if (player !== void 0) {
            fireFunc(player, renderOffset);
          }
        }
        (0, array_1.emptyArray)(queue);
      }
    }
  });

  // node_modules/isaacscript-common/dist/enums/SlotDestructionType.js
  var require_SlotDestructionType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/SlotDestructionType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SlotDestructionType = void 0;
      var SlotDestructionType;
      (function(SlotDestructionType2) {
        SlotDestructionType2[SlotDestructionType2["NORMAL"] = 0] = "NORMAL";
        SlotDestructionType2[SlotDestructionType2["COLLECTIBLE_PAYOUT"] = 1] = "COLLECTIBLE_PAYOUT";
      })(SlotDestructionType || (exports2.SlotDestructionType = SlotDestructionType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/objects/slotNames.js
  var require_slotNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/slotNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SLOT_NAMES = exports2.DEFAULT_SLOT_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_SLOT_NAME = "Unknown";
      exports2.SLOT_NAMES = {
        [isaac_typescript_definitions_1.SlotVariant.SLOT_MACHINE]: "Slot Machine",
        [isaac_typescript_definitions_1.SlotVariant.BLOOD_DONATION_MACHINE]: "Blood Donation Machine",
        [isaac_typescript_definitions_1.SlotVariant.FORTUNE_TELLING_MACHINE]: "Fortune Telling Machine",
        [isaac_typescript_definitions_1.SlotVariant.BEGGAR]: "Beggar",
        [isaac_typescript_definitions_1.SlotVariant.DEVIL_BEGGAR]: "Devil Beggar",
        [isaac_typescript_definitions_1.SlotVariant.SHELL_GAME]: "Shell Game",
        [isaac_typescript_definitions_1.SlotVariant.KEY_MASTER]: "Key Master",
        [isaac_typescript_definitions_1.SlotVariant.DONATION_MACHINE]: "Donation Machine",
        [isaac_typescript_definitions_1.SlotVariant.BOMB_BUM]: "Bomb Bum",
        [isaac_typescript_definitions_1.SlotVariant.SHOP_RESTOCK_MACHINE]: "Shop Restock Machine",
        [isaac_typescript_definitions_1.SlotVariant.GREED_DONATION_MACHINE]: "Greed Donation Machine",
        [isaac_typescript_definitions_1.SlotVariant.MOMS_DRESSING_TABLE]: "Mom's Dressing Table",
        [isaac_typescript_definitions_1.SlotVariant.BATTERY_BUM]: "Battery Bum",
        [isaac_typescript_definitions_1.SlotVariant.ISAAC_SECRET]: "Isaac (secret)",
        [isaac_typescript_definitions_1.SlotVariant.HELL_GAME]: "Hell Game",
        [isaac_typescript_definitions_1.SlotVariant.CRANE_GAME]: "Crane Game",
        [isaac_typescript_definitions_1.SlotVariant.CONFESSIONAL]: "Confessional",
        [isaac_typescript_definitions_1.SlotVariant.ROTTEN_BEGGAR]: "Rotten Beggar"
        // 18
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/slots.js
  var require_slots = __commonJS({
    "node_modules/isaacscript-common/dist/functions/slots.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isSlotMachine = exports2.getSlotName = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var slotNames_1 = require_slotNames();
      var ReadonlySet_1 = require_ReadonlySet();
      var entityTypes_1 = require_entityTypes();
      var SLOT_MACHINE_VARIANTS = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.SlotVariant.SLOT_MACHINE,
        isaac_typescript_definitions_1.SlotVariant.BLOOD_DONATION_MACHINE,
        isaac_typescript_definitions_1.SlotVariant.FORTUNE_TELLING_MACHINE,
        isaac_typescript_definitions_1.SlotVariant.DONATION_MACHINE,
        isaac_typescript_definitions_1.SlotVariant.SHOP_RESTOCK_MACHINE,
        isaac_typescript_definitions_1.SlotVariant.GREED_DONATION_MACHINE,
        isaac_typescript_definitions_1.SlotVariant.MOMS_DRESSING_TABLE,
        isaac_typescript_definitions_1.SlotVariant.CRANE_GAME,
        isaac_typescript_definitions_1.SlotVariant.CONFESSIONAL
        // 17
      ]);
      function getSlotName(slotVariant) {
        return slotNames_1.SLOT_NAMES[slotVariant] ?? slotNames_1.DEFAULT_SLOT_NAME;
      }
      exports2.getSlotName = getSlotName;
      function isSlotMachine(entity) {
        if (!(0, entityTypes_1.isSlot)(entity)) {
          return false;
        }
        return SLOT_MACHINE_VARIANTS.has(entity.Variant);
      }
      exports2.isSlotMachine = isSlotMachine;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/SlotDestroyedDetection.js
  var require_SlotDestroyedDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/SlotDestroyedDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SlotDestroyedDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var SlotDestructionType_1 = require_SlotDestructionType();
      var slots_1 = require_slots();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          destroyedSlotSet: /* @__PURE__ */ new Set()
        }
      };
      var SlotDestroyedDetection = class extends Feature_1.Feature {
        v = v;
        postSlotDestroyed;
        roomHistory;
        constructor(postSlotDestroyed, roomHistory) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ROOM_HISTORY];
          this.callbacksUsed = [
            // 67
            [
              isaac_typescript_definitions_1.ModCallback.POST_ENTITY_REMOVE,
              this.postEntityRemoveSlot,
              [isaac_typescript_definitions_1.EntityType.SLOT]
            ]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_UPDATE, this.postSlotUpdate]
          ];
          this.postSlotDestroyed = postSlotDestroyed;
          this.roomHistory = roomHistory;
        }
        // ModCallback.POST_ENTITY_REMOVE (67)
        // EntityType.SLOT (6)
        postEntityRemoveSlot = (entity) => {
          const slot = entity;
          if (this.roomHistory.isLeavingRoom()) {
            return;
          }
          if ((0, slots_1.isSlotMachine)(slot)) {
            this.postEntityRemoveSlotMachine(slot);
          } else {
            this.postEntityRemoveBeggar(slot);
          }
        };
        postEntityRemoveSlotMachine(slot) {
          this.postSlotDestroyed.fire(slot, SlotDestructionType_1.SlotDestructionType.COLLECTIBLE_PAYOUT);
        }
        postEntityRemoveBeggar(slot) {
          const sprite = slot.GetSprite();
          const animation = sprite.GetAnimation();
          const slotDestructionType = animation === "Teleport" ? SlotDestructionType_1.SlotDestructionType.COLLECTIBLE_PAYOUT : SlotDestructionType_1.SlotDestructionType.NORMAL;
          this.postSlotDestroyed.fire(slot, slotDestructionType);
        }
        // ModCallbackCustom.POST_SLOT_UPDATE
        postSlotUpdate = (slot) => {
          const ptrHash = GetPtrHash(slot);
          const alreadyDestroyed = v.room.destroyedSlotSet.has(ptrHash);
          if (alreadyDestroyed) {
            return;
          }
          this.checkDestroyedFromCollisionClass(slot);
        };
        /**
         * Slots normally have an entity collision class of `EntityCollisionClass.ALL` (4) and a grid
         * collision class of `EntityGridCollisionClass.NONE` (0). When they are destroyed with a bomb,
         * the entity collision class stays the same, but the grid collision class switches to
         * `EntityGridCollisionClass.GROUND` (5).
         */
        checkDestroyedFromCollisionClass(slot) {
          if (slot.GridCollisionClass === isaac_typescript_definitions_1.EntityGridCollisionClass.GROUND) {
            const ptrHash = GetPtrHash(slot);
            v.room.destroyedSlotSet.add(ptrHash);
            this.postSlotDestroyed.fire(slot, SlotDestructionType_1.SlotDestructionType.NORMAL);
          }
        }
      };
      exports2.SlotDestroyedDetection = SlotDestroyedDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/SlotRenderDetection.js
  var require_SlotRenderDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/SlotRenderDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SlotRenderDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          slotAnimations: new DefaultMap_1.DefaultMap((slot) => {
            const sprite = slot.GetSprite();
            return sprite.GetAnimation();
          }),
          brokenSlots: /* @__PURE__ */ new Set()
        }
      };
      var SlotRenderDetection = class extends Feature_1.Feature {
        v = v;
        postSlotRender;
        postSlotAnimationChanged;
        constructor(postSlotRender, postSlotAnimationChanged) {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
          this.postSlotRender = postSlotRender;
          this.postSlotAnimationChanged = postSlotAnimationChanged;
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const slot of (0, entitiesSpecific_1.getSlots)()) {
            this.postSlotRender.fire(slot);
            this.checkSlotAnimationChanged(slot);
          }
        };
        checkSlotAnimationChanged(slot) {
          const sprite = slot.GetSprite();
          const currentAnimation = sprite.GetAnimation();
          const ptrHash = GetPtrHash(slot);
          const previousAnimation = v.room.slotAnimations.getAndSetDefault(ptrHash, slot);
          v.room.slotAnimations.set(ptrHash, currentAnimation);
          if (currentAnimation !== previousAnimation) {
            this.postSlotAnimationChanged.fire(slot, previousAnimation, currentAnimation);
          }
        }
      };
      exports2.SlotRenderDetection = SlotRenderDetection;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/callbackLogic/SlotUpdateDetection.js
  var require_SlotUpdateDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/callbackLogic/SlotUpdateDetection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SlotUpdateDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          initializedSlots: /* @__PURE__ */ new Set()
        }
      };
      var SlotUpdateDetection = class extends Feature_1.Feature {
        v = v;
        postSlotInit;
        postSlotUpdate;
        constructor(postSlotInit, postSlotUpdate) {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate]
          ];
          this.customCallbacksUsed = [
            // This has to be the reordered callback because we don't want the `POST_SLOT_INIT` callback
            // firing on the first room of a floor before the `POST_NEW_LEVEL` callback.
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
          this.postSlotInit = postSlotInit;
          this.postSlotUpdate = postSlotUpdate;
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          for (const slot of (0, entitiesSpecific_1.getSlots)()) {
            this.checkNewEntity(slot);
            this.postSlotUpdate.fire(slot);
          }
        };
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          for (const slot of (0, entitiesSpecific_1.getSlots)()) {
            this.checkNewEntity(slot);
          }
        };
        checkNewEntity(slot) {
          const ptrHash = GetPtrHash(slot);
          if (!v.room.initializedSlots.has(ptrHash)) {
            v.room.initializedSlots.add(ptrHash);
            this.postSlotInit.fire(slot);
          }
        }
      };
      exports2.SlotUpdateDetection = SlotUpdateDetection;
    }
  });

  // node_modules/isaacscript-common/dist/objects/batteryNames.js
  var require_batteryNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/batteryNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BATTERY_NAMES = exports2.DEFAULT_BATTERY_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_BATTERY_NAME = "Unknown";
      exports2.BATTERY_NAMES = {
        [isaac_typescript_definitions_1.BatterySubType.NULL]: exports2.DEFAULT_BATTERY_NAME,
        [isaac_typescript_definitions_1.BatterySubType.NORMAL]: "Lil' Battery",
        [isaac_typescript_definitions_1.BatterySubType.MICRO]: "Micro Battery",
        [isaac_typescript_definitions_1.BatterySubType.MEGA]: "Mega Battery",
        [isaac_typescript_definitions_1.BatterySubType.GOLDEN]: "Golden Battery"
        // 4
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/bombNames.js
  var require_bombNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/bombNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BOMB_NAMES = exports2.DEFAULT_BOMB_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_BOMB_NAME = "Unknown";
      exports2.BOMB_NAMES = {
        [isaac_typescript_definitions_1.BombSubType.NULL]: exports2.DEFAULT_BOMB_NAME,
        [isaac_typescript_definitions_1.BombSubType.NORMAL]: "Bomb",
        [isaac_typescript_definitions_1.BombSubType.DOUBLE_PACK]: "Double Bomb",
        [isaac_typescript_definitions_1.BombSubType.TROLL]: "Troll Bomb",
        [isaac_typescript_definitions_1.BombSubType.GOLDEN]: "Golden Bomb",
        [isaac_typescript_definitions_1.BombSubType.MEGA_TROLL]: "Megatroll Bomb",
        // The entry for "Golden Troll Bomb" is absent in "entities2.xml", so we infer the name.
        [isaac_typescript_definitions_1.BombSubType.GOLDEN_TROLL]: "Golden Troll Bomb",
        [isaac_typescript_definitions_1.BombSubType.GIGA]: "Giga Bomb"
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/chestNames.js
  var require_chestNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/chestNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHEST_NAMES = exports2.DEFAULT_CHEST_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_CHEST_NAME = "Unknown";
      exports2.CHEST_NAMES = {
        [isaac_typescript_definitions_1.PickupVariant.CHEST]: "Chest",
        [isaac_typescript_definitions_1.PickupVariant.BOMB_CHEST]: "Bomb Chest",
        [isaac_typescript_definitions_1.PickupVariant.SPIKED_CHEST]: "Spiked Chest",
        [isaac_typescript_definitions_1.PickupVariant.ETERNAL_CHEST]: "Eternal Chest",
        [isaac_typescript_definitions_1.PickupVariant.MIMIC_CHEST]: "Mimic Chest",
        [isaac_typescript_definitions_1.PickupVariant.OLD_CHEST]: "Old Chest",
        [isaac_typescript_definitions_1.PickupVariant.WOODEN_CHEST]: "Wooden Chest",
        [isaac_typescript_definitions_1.PickupVariant.MEGA_CHEST]: "Mega Chest",
        [isaac_typescript_definitions_1.PickupVariant.HAUNTED_CHEST]: "Haunted Chest",
        [isaac_typescript_definitions_1.PickupVariant.LOCKED_CHEST]: "Locked Chest",
        [isaac_typescript_definitions_1.PickupVariant.RED_CHEST]: "Red Chest",
        [isaac_typescript_definitions_1.PickupVariant.MOMS_CHEST]: "Mom's Chest"
        // 390
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/coinNames.js
  var require_coinNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/coinNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.COIN_NAMES = exports2.DEFAULT_COIN_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_COIN_NAME = "Unknown";
      exports2.COIN_NAMES = {
        [isaac_typescript_definitions_1.CoinSubType.NULL]: exports2.DEFAULT_COIN_NAME,
        [isaac_typescript_definitions_1.CoinSubType.PENNY]: "Penny",
        [isaac_typescript_definitions_1.CoinSubType.NICKEL]: "Nickel",
        [isaac_typescript_definitions_1.CoinSubType.DIME]: "Dime",
        [isaac_typescript_definitions_1.CoinSubType.DOUBLE_PACK]: "Double Penny",
        [isaac_typescript_definitions_1.CoinSubType.LUCKY_PENNY]: "Lucky Penny",
        [isaac_typescript_definitions_1.CoinSubType.STICKY_NICKEL]: "Sticky Nickel",
        [isaac_typescript_definitions_1.CoinSubType.GOLDEN]: "Golden Penny"
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/coinSubTypeToValue.js
  var require_coinSubTypeToValue = __commonJS({
    "node_modules/isaacscript-common/dist/objects/coinSubTypeToValue.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.COIN_SUB_TYPE_TO_VALUE = exports2.DEFAULT_COIN_VALUE = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_COIN_VALUE = 1;
      exports2.COIN_SUB_TYPE_TO_VALUE = {
        [isaac_typescript_definitions_1.CoinSubType.NULL]: 0,
        [isaac_typescript_definitions_1.CoinSubType.PENNY]: 1,
        [isaac_typescript_definitions_1.CoinSubType.NICKEL]: 5,
        [isaac_typescript_definitions_1.CoinSubType.DIME]: 10,
        [isaac_typescript_definitions_1.CoinSubType.DOUBLE_PACK]: 2,
        [isaac_typescript_definitions_1.CoinSubType.LUCKY_PENNY]: 1,
        [isaac_typescript_definitions_1.CoinSubType.STICKY_NICKEL]: 5,
        [isaac_typescript_definitions_1.CoinSubType.GOLDEN]: 1
        // 7
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/heartNames.js
  var require_heartNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/heartNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.HEART_NAMES = exports2.DEFAULT_HEART_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_HEART_NAME = "Unknown";
      exports2.HEART_NAMES = {
        [isaac_typescript_definitions_1.HeartSubType.NULL]: exports2.DEFAULT_HEART_NAME,
        [isaac_typescript_definitions_1.HeartSubType.FULL]: "Heart",
        [isaac_typescript_definitions_1.HeartSubType.HALF]: "Heart (half)",
        [isaac_typescript_definitions_1.HeartSubType.SOUL]: "Heart (soul)",
        [isaac_typescript_definitions_1.HeartSubType.ETERNAL]: "Heart (eternal)",
        [isaac_typescript_definitions_1.HeartSubType.DOUBLE_PACK]: "Heart (double)",
        [isaac_typescript_definitions_1.HeartSubType.BLACK]: "Black Heart",
        [isaac_typescript_definitions_1.HeartSubType.GOLDEN]: "Gold Heart",
        [isaac_typescript_definitions_1.HeartSubType.HALF_SOUL]: "Heart (half soul)",
        [isaac_typescript_definitions_1.HeartSubType.SCARED]: "Scared Heart",
        [isaac_typescript_definitions_1.HeartSubType.BLENDED]: "Blended Heart",
        [isaac_typescript_definitions_1.HeartSubType.BONE]: "Bone Heart",
        [isaac_typescript_definitions_1.HeartSubType.ROTTEN]: "Rotten Heart"
        // 12
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/keyNames.js
  var require_keyNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/keyNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.KEY_NAMES = exports2.DEFAULT_KEY_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_KEY_NAME = "Unknown";
      exports2.KEY_NAMES = {
        [isaac_typescript_definitions_1.KeySubType.NULL]: exports2.DEFAULT_KEY_NAME,
        [isaac_typescript_definitions_1.KeySubType.NORMAL]: "Key",
        [isaac_typescript_definitions_1.KeySubType.GOLDEN]: "Golden Key",
        [isaac_typescript_definitions_1.KeySubType.DOUBLE_PACK]: "Key Ring",
        [isaac_typescript_definitions_1.KeySubType.CHARGED]: "Charged Key"
        // 4
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/sackNames.js
  var require_sackNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/sackNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SACK_NAMES = exports2.DEFAULT_SACK_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_SACK_NAME = "Unknown";
      exports2.SACK_NAMES = {
        [isaac_typescript_definitions_1.SackSubType.NULL]: exports2.DEFAULT_SACK_NAME,
        [isaac_typescript_definitions_1.SackSubType.NORMAL]: "Grab Bag",
        [isaac_typescript_definitions_1.SackSubType.BLACK]: "Black Sack"
        // 2
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/redHeartSubTypesSet.js
  var require_redHeartSubTypesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/redHeartSubTypesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RED_HEART_SUB_TYPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.RED_HEART_SUB_TYPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.HeartSubType.FULL,
        isaac_typescript_definitions_1.HeartSubType.HALF,
        isaac_typescript_definitions_1.HeartSubType.DOUBLE_PACK
        // 5
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/pickupsSpecific.js
  var require_pickupsSpecific = __commonJS({
    "node_modules/isaacscript-common/dist/functions/pickupsSpecific.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnTrinketWithSeed = exports2.spawnTrinket = exports2.spawnSackWithSeed = exports2.spawnSack = exports2.spawnPillWithSeed = exports2.spawnPill = exports2.spawnKeyWithSeed = exports2.spawnKey = exports2.spawnHeartWithSeed = exports2.spawnHeart = exports2.spawnCoinWithSeed = exports2.spawnCoin = exports2.spawnCardWithSeed = exports2.spawnCard = exports2.spawnBombPickupWithSeed = exports2.spawnBombPickup = exports2.spawnBatteryWithSeed = exports2.spawnBattery = exports2.removeAllTrinkets = exports2.removeAllSacks = exports2.removeAllPills = exports2.removeAllKeys = exports2.removeAllHearts = exports2.removeAllCollectibles = exports2.removeAllCoins = exports2.removeAllChests = exports2.removeAllCards = exports2.removeAllBombPickups = exports2.removeAllBatteries = exports2.getTrinkets = exports2.getSacks = exports2.getPills = exports2.getKeys = exports2.getHearts = exports2.getCollectibles = exports2.getCoins = exports2.getChests = exports2.getCards = exports2.getBombPickups = exports2.getBatteries = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      function getBatteries(batterySubType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.LIL_BATTERY, batterySubType);
      }
      exports2.getBatteries = getBatteries;
      function getBombPickups(bombSubType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.BOMB, bombSubType);
      }
      exports2.getBombPickups = getBombPickups;
      function getCards(cardType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.CARD, cardType);
      }
      exports2.getCards = getCards;
      function getChests(subType = -1) {
        const chests = [];
        for (const pickupVariant of constants_1.CHEST_PICKUP_VARIANTS) {
          const pickups = (0, entitiesSpecific_1.getPickups)(pickupVariant, subType);
          chests.push(...pickups);
        }
        return chests;
      }
      exports2.getChests = getChests;
      function getCoins(coinSubType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.COIN, coinSubType);
      }
      exports2.getCoins = getCoins;
      function getCollectibles(collectibleType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE, collectibleType);
      }
      exports2.getCollectibles = getCollectibles;
      function getHearts(heartSubType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.HEART, heartSubType);
      }
      exports2.getHearts = getHearts;
      function getKeys(keySubType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.KEY, keySubType);
      }
      exports2.getKeys = getKeys;
      function getPills(pillColor = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.PILL, pillColor);
      }
      exports2.getPills = getPills;
      function getSacks(sackSubType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.SACK, sackSubType);
      }
      exports2.getSacks = getSacks;
      function getTrinkets(trinketType = -1) {
        return (0, entitiesSpecific_1.getPickups)(isaac_typescript_definitions_1.PickupVariant.TRINKET, trinketType);
      }
      exports2.getTrinkets = getTrinkets;
      function removeAllBatteries(batterySubType = -1, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.LIL_BATTERY, batterySubType, cap);
      }
      exports2.removeAllBatteries = removeAllBatteries;
      function removeAllBombPickups(bombSubType = -1, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.BOMB, bombSubType, cap);
      }
      exports2.removeAllBombPickups = removeAllBombPickups;
      function removeAllCards(cardType = -1, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.CARD, cardType, cap);
      }
      exports2.removeAllCards = removeAllCards;
      function removeAllChests(subType = -1, cap) {
        const chests = getChests(subType);
        return (0, entities_1.removeEntities)(chests, cap);
      }
      exports2.removeAllChests = removeAllChests;
      function removeAllCoins(coinSubType, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.COIN, coinSubType, cap);
      }
      exports2.removeAllCoins = removeAllCoins;
      function removeAllCollectibles(collectibleType, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE, collectibleType, cap);
      }
      exports2.removeAllCollectibles = removeAllCollectibles;
      function removeAllHearts(heartSubType, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.HEART, heartSubType, cap);
      }
      exports2.removeAllHearts = removeAllHearts;
      function removeAllKeys(keySubType, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.KEY, keySubType, cap);
      }
      exports2.removeAllKeys = removeAllKeys;
      function removeAllPills(pillColor, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.PILL, pillColor, cap);
      }
      exports2.removeAllPills = removeAllPills;
      function removeAllSacks(sackSubType, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.SACK, sackSubType, cap);
      }
      exports2.removeAllSacks = removeAllSacks;
      function removeAllTrinkets(trinketType, cap) {
        return (0, entitiesSpecific_1.removeAllPickups)(isaac_typescript_definitions_1.PickupVariant.TRINKET, trinketType, cap);
      }
      exports2.removeAllTrinkets = removeAllTrinkets;
      function spawnBattery(batterySubType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.LIL_BATTERY, batterySubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnBattery = spawnBattery;
      function spawnBatteryWithSeed(batterySubType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnBattery(batterySubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnBatteryWithSeed = spawnBatteryWithSeed;
      function spawnBombPickup(bombSubType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.BOMB, bombSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnBombPickup = spawnBombPickup;
      function spawnBombPickupWithSeed(bombSubType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnBombPickup(bombSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnBombPickupWithSeed = spawnBombPickupWithSeed;
      function spawnCard(cardType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.CARD, cardType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnCard = spawnCard;
      function spawnCardWithSeed(cardType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnCard(cardType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnCardWithSeed = spawnCardWithSeed;
      function spawnCoin(coinSubType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.COIN, coinSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnCoin = spawnCoin;
      function spawnCoinWithSeed(coinSubType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnCoin(coinSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnCoinWithSeed = spawnCoinWithSeed;
      function spawnHeart(heartSubType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.HEART, heartSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnHeart = spawnHeart;
      function spawnHeartWithSeed(heartSubType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnHeart(heartSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnHeartWithSeed = spawnHeartWithSeed;
      function spawnKey(keySubType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.KEY, keySubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnKey = spawnKey;
      function spawnKeyWithSeed(keySubType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnKey(keySubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnKeyWithSeed = spawnKeyWithSeed;
      function spawnPill(pillColor, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.PILL, pillColor, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnPill = spawnPill;
      function spawnPillWithSeed(pillColor, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnPill(pillColor, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnPillWithSeed = spawnPillWithSeed;
      function spawnSack(sackSubType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.SACK, sackSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnSack = spawnSack;
      function spawnSackWithSeed(sackSubType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnSack(sackSubType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnSackWithSeed = spawnSackWithSeed;
      function spawnTrinket(trinketType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0) {
        return (0, entitiesSpecific_1.spawnPickup)(isaac_typescript_definitions_1.PickupVariant.TRINKET, trinketType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnTrinket = spawnTrinket;
      function spawnTrinketWithSeed(trinketType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0) {
        return spawnTrinket(trinketType, positionOrGridIndex, velocity, spawner, seedOrRNG);
      }
      exports2.spawnTrinketWithSeed = spawnTrinketWithSeed;
    }
  });

  // node_modules/isaacscript-common/dist/functions/pickups.js
  var require_pickups = __commonJS({
    "node_modules/isaacscript-common/dist/functions/pickups.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.removeAllRedHearts = exports2.isRedHeartSubType = exports2.isRedHeart = exports2.isChestVariant = exports2.isChest = exports2.getSackName = exports2.getRedHearts = exports2.getKeyName = exports2.getHeartName = exports2.getCoinValue = exports2.getCoinName = exports2.getChestName = exports2.getBombName = exports2.getBatteryName = void 0;
      var constants_1 = require_constants();
      var batteryNames_1 = require_batteryNames();
      var bombNames_1 = require_bombNames();
      var chestNames_1 = require_chestNames();
      var coinNames_1 = require_coinNames();
      var coinSubTypeToValue_1 = require_coinSubTypeToValue();
      var heartNames_1 = require_heartNames();
      var keyNames_1 = require_keyNames();
      var sackNames_1 = require_sackNames();
      var redHeartSubTypesSet_1 = require_redHeartSubTypesSet();
      var entities_1 = require_entities();
      var pickupVariants_1 = require_pickupVariants();
      var pickupsSpecific_1 = require_pickupsSpecific();
      function getBatteryName(batterySubType) {
        return batteryNames_1.BATTERY_NAMES[batterySubType] ?? batteryNames_1.DEFAULT_BATTERY_NAME;
      }
      exports2.getBatteryName = getBatteryName;
      function getBombName(bombSubType) {
        return bombNames_1.BOMB_NAMES[bombSubType] ?? bombNames_1.DEFAULT_BOMB_NAME;
      }
      exports2.getBombName = getBombName;
      function getChestName(pickupVariant) {
        const chestNames = chestNames_1.CHEST_NAMES;
        return chestNames[pickupVariant] ?? chestNames_1.DEFAULT_CHEST_NAME;
      }
      exports2.getChestName = getChestName;
      function getCoinName(coinSubType) {
        return coinNames_1.COIN_NAMES[coinSubType] ?? coinNames_1.DEFAULT_COIN_NAME;
      }
      exports2.getCoinName = getCoinName;
      function getCoinValue(coinSubType) {
        const value = coinSubTypeToValue_1.COIN_SUB_TYPE_TO_VALUE[coinSubType];
        return value ?? coinSubTypeToValue_1.DEFAULT_COIN_VALUE;
      }
      exports2.getCoinValue = getCoinValue;
      function getHeartName(heartSubType) {
        return heartNames_1.HEART_NAMES[heartSubType] ?? heartNames_1.DEFAULT_HEART_NAME;
      }
      exports2.getHeartName = getHeartName;
      function getKeyName(keySubType) {
        return keyNames_1.KEY_NAMES[keySubType] ?? keyNames_1.DEFAULT_KEY_NAME;
      }
      exports2.getKeyName = getKeyName;
      function getRedHearts() {
        const hearts = (0, pickupsSpecific_1.getHearts)();
        return hearts.filter((heart) => redHeartSubTypesSet_1.RED_HEART_SUB_TYPES_SET.has(heart.SubType));
      }
      exports2.getRedHearts = getRedHearts;
      function getSackName(sackSubType) {
        return sackNames_1.SACK_NAMES[sackSubType] ?? sackNames_1.DEFAULT_SACK_NAME;
      }
      exports2.getSackName = getSackName;
      function isChest(pickup) {
        return isChestVariant(pickup.Variant);
      }
      exports2.isChest = isChest;
      function isChestVariant(pickupVariant) {
        return constants_1.CHEST_PICKUP_VARIANTS_SET.has(pickupVariant);
      }
      exports2.isChestVariant = isChestVariant;
      function isRedHeart(pickup) {
        return (0, pickupVariants_1.isHeart)(pickup) && redHeartSubTypesSet_1.RED_HEART_SUB_TYPES_SET.has(pickup.SubType);
      }
      exports2.isRedHeart = isRedHeart;
      function isRedHeartSubType(heartSubType) {
        return redHeartSubTypesSet_1.RED_HEART_SUB_TYPES_SET.has(heartSubType);
      }
      exports2.isRedHeartSubType = isRedHeartSubType;
      function removeAllRedHearts(cap) {
        const redHearts = getRedHearts();
        return (0, entities_1.removeEntities)(redHearts, cap);
      }
      exports2.removeAllRedHearts = removeAllRedHearts;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CharacterHealthConversion.js
  var require_CharacterHealthConversion = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CharacterHealthConversion.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CharacterHealthConversion = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var pickups_1 = require_pickups();
      var Feature_1 = require_Feature();
      var CharacterHealthConversion = class extends Feature_1.Feature {
        characterHealthReplacementMap = /* @__PURE__ */ new Map();
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 38
            [
              isaac_typescript_definitions_1.ModCallback.PRE_PICKUP_COLLISION,
              this.prePickupCollisionHeart,
              [isaac_typescript_definitions_1.PickupVariant.HEART]
            ]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        // ModCallback.PRE_PICKUP_COLLISION (38)
        // PickupVariant.HEART (10)
        prePickupCollisionHeart = (pickup, collider) => {
          if (!(0, pickups_1.isRedHeart)(pickup)) {
            return void 0;
          }
          const player = collider.ToPlayer();
          if (player === void 0) {
            return void 0;
          }
          const character = player.GetPlayerType();
          const conversionHeartSubType = this.characterHealthReplacementMap.get(character);
          if (conversionHeartSubType === void 0) {
            return void 0;
          }
          return false;
        };
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const character = player.GetPlayerType();
          const conversionHeartSubType = this.characterHealthReplacementMap.get(character);
          if (conversionHeartSubType === void 0) {
            return void 0;
          }
          convertRedHeartContainers(player, conversionHeartSubType);
          removeRedHearts(player);
        };
        /**
         * Helper function to make a character that has the same health mechanic as Blue Baby (red heart
         * containers --> soul hearts) or Dark Judas (red heart containers --> black hearts).
         *
         * Call this function once at the beginning of your mod to declare the health conversion type.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CHARACTER_HEALTH_CONVERSION`.
         *
         * @public
         */
        registerCharacterHealthConversion(playerType, conversionHeartSubType) {
          if (this.characterHealthReplacementMap.has(playerType)) {
            error(`Failed to register a character of type ${playerType} because there is already an existing registered character with that type.`);
          }
          this.characterHealthReplacementMap.set(playerType, conversionHeartSubType);
        }
      };
      exports2.CharacterHealthConversion = CharacterHealthConversion;
      __decorate([
        decorators_1.Exported
      ], CharacterHealthConversion.prototype, "registerCharacterHealthConversion", null);
      function convertRedHeartContainers(player, heartSubType) {
        const maxHearts = player.GetMaxHearts();
        if (maxHearts === 0) {
          return;
        }
        player.AddMaxHearts(maxHearts * -1, false);
        switch (heartSubType) {
          case isaac_typescript_definitions_1.HeartSubType.SOUL: {
            player.AddSoulHearts(maxHearts);
            break;
          }
          case isaac_typescript_definitions_1.HeartSubType.BLACK: {
            player.AddBlackHearts(maxHearts);
            break;
          }
        }
      }
      function removeRedHearts(player) {
        const hearts = player.GetHearts();
        if (hearts > 0) {
          player.AddHearts(hearts * -1);
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CharacterStats.js
  var require_CharacterStats = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CharacterStats.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CharacterStats = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var stats_1 = require_stats();
      var Feature_1 = require_Feature();
      var CharacterStats = class extends Feature_1.Feature {
        charactersStatMap = /* @__PURE__ */ new Map();
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 8
            [isaac_typescript_definitions_1.ModCallback.EVALUATE_CACHE, this.evaluateCache]
          ];
        }
        // ModCallback.EVALUATE_CACHE (8)
        evaluateCache = (player, cacheFlag) => {
          const character = player.GetPlayerType();
          const statMap = this.charactersStatMap.get(character);
          if (statMap === void 0) {
            return;
          }
          const stat = statMap.get(cacheFlag);
          const defaultStat = (0, stats_1.getDefaultPlayerStat)(cacheFlag);
          if (stat === void 0 || defaultStat === void 0) {
            return;
          }
          const delta = stat - defaultStat;
          (0, stats_1.addPlayerStat)(player, cacheFlag, delta);
        };
        /**
         * Helper function to manage the stats for a vanilla or custom character. Call this function once
         * at the beginning of your mod to declare the starting stats.
         *
         * You must provide this function with a map of CacheFlag to the default stat amount. For example,
         * the default amount of damage is 3.5. To make a custom character start with 4.5 damage:
         *
         * ```ts
         * const fooDefaultStats = new Map<CacheFlag, number>([
         *   [CacheFlag.DAMAGE, 4.5],
         * ])
         * registerCharacterStats(PlayerTypeCustom.FOO, fooDefaultStats);
         * ```
         *
         * Note that the format for the `CacheFlag.FIRE_DELAY` value should be in the tears stat format,
         * not the `MaxFireDelay` format.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CHARACTER_STATS`.
         *
         * @public
         */
        registerCharacterStats(playerType, statMap) {
          this.charactersStatMap.set(playerType, statMap);
        }
      };
      exports2.CharacterStats = CharacterStats;
      __decorate([
        decorators_1.Exported
      ], CharacterStats.prototype, "registerCharacterStats", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CollectibleItemPoolType.js
  var require_CollectibleItemPoolType = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CollectibleItemPoolType.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CollectibleItemPoolType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var entities_1 = require_entities();
      var pickupVariants_1 = require_pickupVariants();
      var rooms_1 = require_rooms();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          collectibleItemPoolTypeMap: /* @__PURE__ */ new Map()
        }
      };
      var CollectibleItemPoolType = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        pickupIndexCreation;
        /** @internal */
        constructor(pickupIndexCreation) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PICKUP_INDEX_CREATION];
          this.callbacksUsed = [
            // 34
            [
              isaac_typescript_definitions_1.ModCallback.POST_PICKUP_INIT,
              this.postPickupInitCollectible,
              [isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE]
            ]
          ];
          this.pickupIndexCreation = pickupIndexCreation;
        }
        // ModCallback.POST_PICKUP_INIT (34)
        // PickupVariant.COLLECTIBLE (100)
        postPickupInitCollectible = (collectible) => {
          const pickupIndex = this.pickupIndexCreation.getPickupIndex(collectible);
          if (!v.run.collectibleItemPoolTypeMap.has(pickupIndex)) {
            const itemPool = cachedClasses_1.game.GetItemPool();
            const lastItemPoolType = itemPool.GetLastPool();
            v.run.collectibleItemPoolTypeMap.set(pickupIndex, lastItemPoolType);
          }
        };
        /**
         * Helper function to get the item pool type that a given collectible came from. Since there is no
         * native method in the API to get this, we listen in the `POST_PICKUP_INIT` callback for
         * collectibles, use the `ItemPool.GetLastPool` method, and then assume that the collectible
         * matches.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.COLLECTIBLE_ITEM_POOL_TYPE`.
         *
         * @public
         */
        getCollectibleItemPoolType(collectible) {
          if (!(0, pickupVariants_1.isCollectible)(collectible)) {
            const entityID = (0, entities_1.getEntityID)(collectible);
            error(`The "getCollectibleItemPoolType" function was given a non-collectible: ${entityID}`);
          }
          const pickupIndex = this.pickupIndexCreation.getPickupIndex(collectible);
          const itemPoolType = v.run.collectibleItemPoolTypeMap.get(pickupIndex);
          return itemPoolType ?? (0, rooms_1.getRoomItemPoolType)();
        }
      };
      exports2.CollectibleItemPoolType = CollectibleItemPoolType;
      __decorate([
        decorators_1.Exported
      ], CollectibleItemPoolType.prototype, "getCollectibleItemPoolType", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CustomHotkeys.js
  var require_CustomHotkeys = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CustomHotkeys.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomHotkeys = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var input_1 = require_input();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var CustomHotkeys = class extends Feature_1.Feature {
        /**
         * The keys are the keyboard keys that trigger the hotkey. The values are the functions that
         * contain the arbitrary code to run.
         */
        staticHotkeyFunctionMap = /* @__PURE__ */ new Map();
        /**
         * The keys are the functions that determine what the hotkey key is. The values are the functions
         * that contain the arbitrary code to run.
         */
        dynamicHotkeyFunctionMap = /* @__PURE__ */ new Map();
        keyPressedMap = new DefaultMap_1.DefaultMap(false);
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          for (const [keyboard, triggerFunc] of this.staticHotkeyFunctionMap) {
            this.checkIfTriggered(keyboard, triggerFunc);
          }
          for (const [keyboardFunc, triggerFunc] of this.dynamicHotkeyFunctionMap) {
            const keyboard = keyboardFunc();
            if (keyboard !== void 0) {
              this.checkIfTriggered(keyboard, triggerFunc);
            }
          }
        };
        checkIfTriggered(keyboard, triggerFunc) {
          const isPressed = (0, input_1.isKeyboardPressed)(keyboard);
          const wasPreviouslyPressed = this.keyPressedMap.getAndSetDefault(keyboard);
          this.keyPressedMap.set(keyboard, isPressed);
          if (isPressed && !wasPreviouslyPressed) {
            triggerFunc();
          }
        }
        /**
         * Helper function to run arbitrary code when you press and release a specific keyboard key.
         *
         * This can be used to easily set up custom hotkeys to facilitate custom game features or to
         * assist in debugging.
         *
         * Inputs are checked for in the `POST_RENDER` callback.
         *
         * This is different from the `setHotkey` function in that the keyboard activation key is not
         * hardcoded and is instead the return value of a provided function. This is useful for situations
         * where the key can change (like if end-users can specify a custom hotkey using Mod Config Menu).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_HOTKEYS`.
         *
         * @param getKeyFunc The function that returns the key that will trigger the hotkey.
         * @param triggerFunc A function containing the arbitrary code that you want to execute when the
         *                    hotkey is triggered.
         * @public
         */
        setConditionalHotkey(getKeyFunc, triggerFunc) {
          if (this.dynamicHotkeyFunctionMap.has(getKeyFunc)) {
            error("Failed to register a hotkey due to a custom hotkey already being defined for the submitted function.");
          }
          this.dynamicHotkeyFunctionMap.set(getKeyFunc, triggerFunc);
        }
        /**
         * Helper function to run arbitrary code when you press and release a specific keyboard key.
         *
         * This can be used to easily set up custom hotkeys to facilitate custom game features or to
         * assist in debugging.
         *
         * Inputs are checked for in the `POST_RENDER` callback.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_HOTKEYS`.
         *
         * @param keyboard The key that you want to trigger the hotkey.
         * @param triggerFunc A function containing the arbitrary code that you want to execute when the
         *                    hotkey is triggered.
         * @public
         */
        setHotkey(keyboard, triggerFunc) {
          if (this.staticHotkeyFunctionMap.has(keyboard)) {
            error(`Failed to register a hotkey due to a hotkey already being defined for: Keyboard.${isaac_typescript_definitions_1.Keyboard[keyboard]} (${keyboard})`);
          }
          this.staticHotkeyFunctionMap.set(keyboard, triggerFunc);
        }
        /**
         * Helper function to remove a hotkey created with the `setConditionalHotkey` function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_HOTKEYS`.
         *
         * @param getKeyFunc Equal to the `getKeyFunc` that you passed when initially registering the
         *                   hotkey.
         * @public
         */
        unsetConditionalHotkey(getKeyFunc) {
          if (!this.dynamicHotkeyFunctionMap.has(getKeyFunc)) {
            error("Failed to unregister a hotkey since there is no existing hotkey defined for the submitted function.");
          }
          this.dynamicHotkeyFunctionMap.delete(getKeyFunc);
        }
        /**
         * Helper function to remove a hotkey created with the `setHotkey` function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_HOTKEYS`.
         *
         * @param keyboard Equal to the keyboard value that you passed when initially registering the
         *                 hotkey.
         * @public
         */
        unsetHotkey(keyboard) {
          if (!this.staticHotkeyFunctionMap.has(keyboard)) {
            error(`Failed to unregister a hotkey since there is no existing hotkey defined for: Keyboard.${isaac_typescript_definitions_1.Keyboard[keyboard]} (${keyboard})`);
          }
          this.staticHotkeyFunctionMap.delete(keyboard);
        }
      };
      exports2.CustomHotkeys = CustomHotkeys;
      __decorate([
        decorators_1.Exported
      ], CustomHotkeys.prototype, "setConditionalHotkey", null);
      __decorate([
        decorators_1.Exported
      ], CustomHotkeys.prototype, "setHotkey", null);
      __decorate([
        decorators_1.Exported
      ], CustomHotkeys.prototype, "unsetConditionalHotkey", null);
      __decorate([
        decorators_1.Exported
      ], CustomHotkeys.prototype, "unsetHotkey", null);
    }
  });

  // node_modules/isaacscript-common/dist/functions/map.js
  var require_map = __commonJS({
    "node_modules/isaacscript-common/dist/functions/map.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.sumMap = exports2.objectToReadonlyMap = exports2.objectToMap = exports2.mapSetHash = exports2.getReversedMap = exports2.defaultMapSetHash = exports2.defaultMapGetHash = exports2.copyMap = void 0;
      var array_1 = require_array();
      function copyMap(oldMap) {
        const newMap = /* @__PURE__ */ new Map();
        for (const [key, value] of oldMap) {
          newMap.set(key, value);
        }
        return newMap;
      }
      exports2.copyMap = copyMap;
      function defaultMapGetHash(map, entity, ...extraArgs) {
        const ptrHash = GetPtrHash(entity);
        return map.getAndSetDefault(ptrHash, ...extraArgs);
      }
      exports2.defaultMapGetHash = defaultMapGetHash;
      function defaultMapSetHash(map, entity, value) {
        mapSetHash(map, entity, value);
      }
      exports2.defaultMapSetHash = defaultMapSetHash;
      function getReversedMap(map) {
        const reverseMap = /* @__PURE__ */ new Map();
        for (const [key, value] of map) {
          reverseMap.set(value, key);
        }
        return reverseMap;
      }
      exports2.getReversedMap = getReversedMap;
      function mapSetHash(map, entity, value) {
        const hash = GetPtrHash(entity);
        map.set(hash, value);
      }
      exports2.mapSetHash = mapSetHash;
      function objectToMap(object) {
        const map = /* @__PURE__ */ new Map();
        for (const [key, value] of Object.entries(object)) {
          map.set(key, value);
        }
        return map;
      }
      exports2.objectToMap = objectToMap;
      function objectToReadonlyMap(object) {
        return objectToMap(object);
      }
      exports2.objectToReadonlyMap = objectToReadonlyMap;
      function sumMap(map) {
        const values = [...map.values()];
        return (0, array_1.sumArray)(values);
      }
      exports2.sumMap = sumMap;
    }
  });

  // node_modules/isaacscript-common/dist/functions/weighted.js
  var require_weighted = __commonJS({
    "node_modules/isaacscript-common/dist/functions/weighted.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getRandomIndexFromWeightedArray = exports2.getRandomFromWeightedArray = void 0;
      var array_1 = require_array();
      var random_1 = require_random();
      var utils_1 = require_utils();
      function getRandomFromWeightedArray(weightedArray, seedOrRNG) {
        const randomIndex = getRandomIndexFromWeightedArray(weightedArray, seedOrRNG);
        const randomElement = weightedArray[randomIndex];
        (0, utils_1.assertDefined)(randomElement, `Failed to get an element from a weighted array using a random index of: ${randomIndex}`);
        return randomElement[0];
      }
      exports2.getRandomFromWeightedArray = getRandomFromWeightedArray;
      function getRandomIndexFromWeightedArray(weightedArray, seedOrRNG) {
        if (weightedArray.length === 0) {
          error("Failed to get a random index from a weighted array since the provided array was empty.");
        }
        const weights = weightedArray.map((tuple) => tuple[1]);
        const totalWeight = (0, array_1.sumArray)(weights);
        const randomWeight = (0, random_1.getRandomFloat)(0, totalWeight, seedOrRNG);
        let weightAccumulator = 0;
        for (const [i, tuple] of weightedArray.entries()) {
          const [_element, weight] = tuple;
          weightAccumulator += weight;
          if (weightAccumulator >= randomWeight) {
            return i;
          }
        }
        error("Failed to get a random index from a weighted array.");
      }
      exports2.getRandomIndexFromWeightedArray = getRandomIndexFromWeightedArray;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CustomItemPools.js
  var require_CustomItemPools = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CustomItemPools.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomItemPools = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var map_1 = require_map();
      var utils_1 = require_utils();
      var weighted_1 = require_weighted();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          customItemPools: new ReadonlyMap_1.ReadonlyMap()
        }
      };
      var customItemPoolMap = /* @__PURE__ */ new Map();
      var CustomItemPools = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED,
              this.postGameStartedReorderedFalse,
              [false]
            ]
          ];
        }
        // ModCallbackCustom.POST_GAME_STARTED_REORDERED
        // false
        postGameStartedReorderedFalse = () => {
          v.run.customItemPools = (0, map_1.copyMap)(customItemPoolMap);
        };
        /**
         * Helper function to register a custom item pool. Use this function once when your mod first
         * loads to declare the items that you want to be in the item pools. Then, in the middle of a run,
         * you can use `getCustomItemPoolCollectible`.
         *
         * For example:
         *
         * ```ts
         * const ItemPoolTypeCustom = {
         *   FOO = 0 as ItemPoolType,
         * } as const;
         *
         * const FOO_ITEM_POOL = [
         *   [CollectibleType.SAD_ONION, 1],
         *   [CollectibleType.INNER_EYE, 0.5],
         * ];
         *
         * registerCustomItemPool(ItemPoolTypeCustom.FOO, FOO_ITEM_POOL);
         * ```
         *
         * Note that custom item pools do not currently support partial weight decrementation on sight.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_ITEM_POOLS`.
         *
         * @param itemPoolTypeCustom An integer that identifies what kind of item pool you are creating.
         *                           It should correspond to a local `ItemPoolTypeCustom` enum in your
         *                           mod. The integer can be any unique value and can safely overlap with
         *                           the vanilla item pool type values (or values chosen by other mods).
         * @param collectibles An array of weighted collectible tuples that represent the item pool that
         *                     you are creating. The first element in he tuple is the `CollectibleType`,
         *                     and the second element in the tuple is the float that represents the weight
         *                     of the collectible.
         * @public
         */
        registerCustomItemPool(itemPoolTypeCustom, collectibles) {
          if (customItemPoolMap.has(itemPoolTypeCustom)) {
            error(`Failed to register a custom item pool since the provided type of ${itemPoolTypeCustom} was already registered.`);
          }
          customItemPoolMap.set(itemPoolTypeCustom, collectibles);
        }
        /**
         * Helper function to get a new collectible from a custom item pool created with the
         * `registerCustomItemPool` function. This function has the same format as the
         * `ItemPool.GetCollectible` method.
         *
         * By default, a collectible will not be removed from the pool once it is selected, unless the
         * `decrease` argument is set to true (similar to how a vanilla item pool works).
         *
         * If you want to get an unseeded collectible type, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_ITEM_POOLS`.
         *
         * @param itemPoolTypeCustom An integer representing the custom item pool to use.
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param decrease Optional. Whether to remove the selected collectible from the item pool.
         *                 Default is true.
         * @param defaultItem Optional. The collectible to return if the item pool is depleted. Default is
         *                    `CollectibleType.NULL`.
         * @public
         */
        getCustomItemPoolCollectible(itemPoolTypeCustom, seedOrRNG, decrease = false, defaultItem = isaac_typescript_definitions_1.CollectibleType.NULL) {
          const customItemPool = v.run.customItemPools.get(itemPoolTypeCustom);
          (0, utils_1.assertDefined)(customItemPool, `Failed to find the custom item pool of: ${itemPoolTypeCustom}`);
          if (customItemPool.length === 0) {
            return defaultItem;
          }
          const randomIndex = (0, weighted_1.getRandomIndexFromWeightedArray)(customItemPool, seedOrRNG);
          const tuple = customItemPool[randomIndex];
          (0, utils_1.assertDefined)(tuple, `Failed to get an element from a custom item pool using a random index of: ${randomIndex}`);
          if (decrease) {
            (0, array_1.arrayRemoveIndexInPlace)(customItemPool, randomIndex);
          }
          return tuple[0];
        }
      };
      exports2.CustomItemPools = CustomItemPools;
      __decorate([
        decorators_1.Exported
      ], CustomItemPools.prototype, "registerCustomItemPool", null);
      __decorate([
        decorators_1.Exported
      ], CustomItemPools.prototype, "getCustomItemPoolCollectible", null);
    }
  });

  // node_modules/isaacscript-common/dist/enums/LadderSubTypeCustom.js
  var require_LadderSubTypeCustom = __commonJS({
    "node_modules/isaacscript-common/dist/enums/LadderSubTypeCustom.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LadderSubTypeCustom = void 0;
      var LadderSubTypeCustom;
      (function(LadderSubTypeCustom2) {
        LadderSubTypeCustom2[LadderSubTypeCustom2["LADDER"] = 0] = "LADDER";
        LadderSubTypeCustom2[LadderSubTypeCustom2["CUSTOM_BACKDROP"] = 101] = "CUSTOM_BACKDROP";
        LadderSubTypeCustom2[LadderSubTypeCustom2["CUSTOM_SHADOW"] = 102] = "CUSTOM_SHADOW";
        LadderSubTypeCustom2[LadderSubTypeCustom2["CUSTOM_PICKUP"] = 103] = "CUSTOM_PICKUP";
      })(LadderSubTypeCustom || (exports2.LadderSubTypeCustom = LadderSubTypeCustom = {}));
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CustomPickups.js
  var require_CustomPickups = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CustomPickups.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomPickups = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var LadderSubTypeCustom_1 = require_LadderSubTypeCustom();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var Feature_1 = require_Feature();
      var PICKUP_EFFECT_VARIANT = isaac_typescript_definitions_1.EffectVariant.LADDER;
      var PICKUP_EFFECT_SUB_TYPE = LadderSubTypeCustom_1.LadderSubTypeCustom.CUSTOM_PICKUP;
      var CustomPickups = class extends Feature_1.Feature {
        /** Indexed by entity ID. */
        customPickupFunctionsMap = /* @__PURE__ */ new Map();
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 38
            [isaac_typescript_definitions_1.ModCallback.PRE_PICKUP_COLLISION, this.prePickupCollision],
            // 56
            [
              isaac_typescript_definitions_1.ModCallback.POST_EFFECT_RENDER,
              this.postEffectRenderPickupEffect,
              [PICKUP_EFFECT_VARIANT]
            ]
          ];
        }
        // ModCallback.PRE_PICKUP_COLLISION (38)
        prePickupCollision = (pickup, collider) => {
          const entityID = (0, entities_1.getEntityID)(pickup);
          const customPickupFunctions = this.customPickupFunctionsMap.get(entityID);
          if (customPickupFunctions === void 0) {
            return void 0;
          }
          const player = collider.ToPlayer();
          if (player === void 0) {
            return void 0;
          }
          const shouldPickup = customPickupFunctions.collisionFunc(player);
          if (!shouldPickup) {
            return void 0;
          }
          pickup.Remove();
          const pickupSprite = pickup.GetSprite();
          const fileName = pickupSprite.GetFilename();
          const effect = (0, entitiesSpecific_1.spawnEffect)(PICKUP_EFFECT_VARIANT, PICKUP_EFFECT_SUB_TYPE, pickup.Position);
          const effectSprite = effect.GetSprite();
          effectSprite.Load(fileName, true);
          effectSprite.Play("Collect", true);
          customPickupFunctions.collectFunc(player);
          return void 0;
        };
        // ModCallback.POST_EFFECT_RENDER (56)
        // PICKUP_EFFECT_VARIANT
        postEffectRenderPickupEffect = (effect) => {
          if (effect.SubType !== PICKUP_EFFECT_SUB_TYPE) {
            return;
          }
          const sprite = effect.GetSprite();
          if (sprite.IsFinished("Collect")) {
            effect.Remove();
          }
        };
        /**
         * Helper function to register a custom pickup with the IsaacScript standard library. Use this
         * feature for custom pickups that are intended to be picked up by the player, like bombs and
         * keys.
         *
         * When IsaacScript detects that a player should be collecting the custom pickup, then the pickup
         * will be immediately removed, and an effect showing the pickup's respective `Collect` animation
         * will be spawned. (This emulates how a normal vanilla pickup would work.) After that, the
         * provided `collectFunc` will be fired. In this function, you will probably want to play a sound
         * corresponding to what kind of pickup it is (e.g. `SoundEffect.KEY_PICKUP_GAUNTLET`), as well as
         * do things like adding something to the player's inventory.
         *
         * Note that when you specify your custom pickup in the "entities2.xml" file, it should have a
         * type of "5" and be associated with an anm2 file that has a "Collect" animation.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_PICKUPS`.
         *
         * @param pickupVariantCustom The variant for the corresponding custom pickup.
         * @param subType The sub-type for the corresponding custom pickup.
         * @param collectFunc The function to run when the player collects this pickup.
         * @param collisionFunc Optional. The function to run when a player collides with the pickup.
         *                      Default is a function that always returns true, meaning that the player
         *                      will always immediately collect the pickup when they collide with it.
         *                      Specify this function if your pickup should only be able to be collected
         *                      under certain conditions.
         * @public
         */
        registerCustomPickup(pickupVariantCustom, subType, collectFunc, collisionFunc = () => true) {
          const entityID = (0, entities_1.getEntityIDFromConstituents)(isaac_typescript_definitions_1.EntityType.PICKUP, pickupVariantCustom, subType);
          const customPickupFunctions = {
            collectFunc,
            collisionFunc
          };
          this.customPickupFunctionsMap.set(entityID, customPickupFunctions);
        }
      };
      exports2.CustomPickups = CustomPickups;
      __decorate([
        decorators_1.Exported
      ], CustomPickups.prototype, "registerCustomPickup", null);
    }
  });

  // node_modules/isaacscript-common/dist/customStageMetadata.json
  var require_customStageMetadata = __commonJS({
    "node_modules/isaacscript-common/dist/customStageMetadata.json"(exports2, module2) {
      module2.exports = [];
    }
  });

  // node_modules/isaacscript-common/dist/enums/RockAltType.js
  var require_RockAltType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/RockAltType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RockAltType = void 0;
      var RockAltType;
      (function(RockAltType2) {
        RockAltType2[RockAltType2["URN"] = 0] = "URN";
        RockAltType2[RockAltType2["MUSHROOM"] = 1] = "MUSHROOM";
        RockAltType2[RockAltType2["SKULL"] = 2] = "SKULL";
        RockAltType2[RockAltType2["POLYP"] = 3] = "POLYP";
        RockAltType2[RockAltType2["BUCKET_DOWNPOUR"] = 4] = "BUCKET_DOWNPOUR";
        RockAltType2[RockAltType2["BUCKET_DROSS"] = 5] = "BUCKET_DROSS";
      })(RockAltType || (exports2.RockAltType = RockAltType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/objects/backdropTypeToRockAltType.js
  var require_backdropTypeToRockAltType = __commonJS({
    "node_modules/isaacscript-common/dist/objects/backdropTypeToRockAltType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BACKDROP_TYPE_TO_ROCK_ALT_TYPE = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var RockAltType_1 = require_RockAltType();
      exports2.BACKDROP_TYPE_TO_ROCK_ALT_TYPE = {
        [isaac_typescript_definitions_1.BackdropType.BASEMENT]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.CELLAR]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.BURNING_BASEMENT]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.CAVES]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.CATACOMBS]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.FLOODED_CAVES]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.DEPTHS]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.NECROPOLIS]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.DANK_DEPTHS]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.WOMB]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.UTERO]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.SCARRED_WOMB]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.BLUE_WOMB]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.SHEOL]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.CATHEDRAL]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DARK_ROOM]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.CHEST]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.MEGA_SATAN]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.LIBRARY]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.SHOP]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.CLEAN_BEDROOM]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DIRTY_BEDROOM]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.SECRET]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.DICE]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.ARCADE]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.ERROR_ROOM]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.BLUE_WOMB_PASS]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.GREED_SHOP]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DUNGEON]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.SACRIFICE]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.DOWNPOUR]: RockAltType_1.RockAltType.BUCKET_DOWNPOUR,
        [isaac_typescript_definitions_1.BackdropType.MINES]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.MAUSOLEUM]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.CORPSE]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.PLANETARIUM]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DOWNPOUR_ENTRANCE]: RockAltType_1.RockAltType.BUCKET_DOWNPOUR,
        [isaac_typescript_definitions_1.BackdropType.MINES_ENTRANCE]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_ENTRANCE]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.CORPSE_ENTRANCE]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_2]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_3]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.MAUSOLEUM_4]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.CORPSE_2]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.CORPSE_3]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.DROSS]: RockAltType_1.RockAltType.BUCKET_DROSS,
        [isaac_typescript_definitions_1.BackdropType.ASHPIT]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.GEHENNA]: RockAltType_1.RockAltType.SKULL,
        [isaac_typescript_definitions_1.BackdropType.MORTIS]: RockAltType_1.RockAltType.POLYP,
        [isaac_typescript_definitions_1.BackdropType.ISAACS_BEDROOM]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.HALLWAY]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.MOMS_BEDROOM]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.CLOSET]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.CLOSET_B]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DOGMA]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DUNGEON_GIDEON]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DUNGEON_ROTGUT]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.DUNGEON_BEAST]: RockAltType_1.RockAltType.URN,
        [isaac_typescript_definitions_1.BackdropType.MINES_SHAFT]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.ASHPIT_SHAFT]: RockAltType_1.RockAltType.MUSHROOM,
        [isaac_typescript_definitions_1.BackdropType.DARK_CLOSET]: RockAltType_1.RockAltType.SKULL
        // 60
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/rockAlt.js
  var require_rockAlt = __commonJS({
    "node_modules/isaacscript-common/dist/functions/rockAlt.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.removeUrnRewards = exports2.getRockAltType = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var backdropTypeToRockAltType_1 = require_backdropTypeToRockAltType();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var gridEntities_1 = require_gridEntities();
      var pickupsSpecific_1 = require_pickupsSpecific();
      function getRockAltType() {
        const room = cachedClasses_1.game.GetRoom();
        const backdropType = room.GetBackdropType();
        return backdropTypeToRockAltType_1.BACKDROP_TYPE_TO_ROCK_ALT_TYPE[backdropType];
      }
      exports2.getRockAltType = getRockAltType;
      function removeUrnRewards(gridEntity) {
        const coins = (0, pickupsSpecific_1.getCoins)();
        (0, gridEntities_1.removeEntitiesSpawnedFromGridEntity)(coins, gridEntity);
        const quarters = (0, pickupsSpecific_1.getCollectibles)(isaac_typescript_definitions_1.CollectibleType.QUARTER);
        (0, gridEntities_1.removeEntitiesSpawnedFromGridEntity)(quarters, gridEntity);
        const swallowedPennies = (0, pickupsSpecific_1.getTrinkets)(isaac_typescript_definitions_1.TrinketType.SWALLOWED_PENNY);
        (0, gridEntities_1.removeEntitiesSpawnedFromGridEntity)(swallowedPennies, gridEntity);
        const spiders = (0, entitiesSpecific_1.getNPCs)(isaac_typescript_definitions_1.EntityType.SPIDER);
        (0, gridEntities_1.removeEntitiesSpawnedFromGridEntity)(spiders, gridEntity);
      }
      exports2.removeUrnRewards = removeUrnRewards;
    }
  });

  // node_modules/isaacscript-common/dist/objects/stageToMusic.js
  var require_stageToMusic = __commonJS({
    "node_modules/isaacscript-common/dist/objects/stageToMusic.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.STAGE_TO_MUSIC = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var BASEMENT_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.BASEMENT,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.CELLAR,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.BURNING_BASEMENT,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.BASEMENT,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.DOWNPOUR,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.DROSS
        // 5
      };
      var CAVES_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.CAVES,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.CATACOMBS,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.FLOODED_CAVES,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.CAVES,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.MINES,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.ASHPIT
        // 5
      };
      var DEPTHS_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.DEPTHS,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.NECROPOLIS,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.DANK_DEPTHS,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.DEPTHS,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.MAUSOLEUM,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.GEHENNA
        // 5
      };
      var WOMB_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.WOMB,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.UTERO,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.SCARRED_WOMB,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.WOMB,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.CORPSE,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.MORTIS
        // 5
      };
      var BLUE_WOMB_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.BLUE_WOMB,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.BLUE_WOMB
        // 5
      };
      var SHEOL_CATHEDRAL_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.SHEOL,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.CATHEDRAL,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.SHEOL,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.SHEOL,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.SHEOL,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.SHEOL
        // 5
      };
      var DARK_ROOM_CHEST_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.CHEST,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.DARK_ROOM,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.DARK_ROOM
        // 5
      };
      var VOID_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.VOID,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.VOID,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.VOID,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.VOID,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.VOID,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.VOID
        // 5
      };
      var HOME_TO_MUSIC = {
        [isaac_typescript_definitions_1.StageType.ORIGINAL]: isaac_typescript_definitions_1.Music.ISAACS_HOUSE,
        [isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB]: isaac_typescript_definitions_1.Music.ISAACS_HOUSE,
        [isaac_typescript_definitions_1.StageType.AFTERBIRTH]: isaac_typescript_definitions_1.Music.ISAACS_HOUSE,
        [isaac_typescript_definitions_1.StageType.GREED_MODE]: isaac_typescript_definitions_1.Music.ISAACS_HOUSE,
        [isaac_typescript_definitions_1.StageType.REPENTANCE]: isaac_typescript_definitions_1.Music.ISAACS_HOUSE,
        [isaac_typescript_definitions_1.StageType.REPENTANCE_B]: isaac_typescript_definitions_1.Music.ISAACS_HOUSE
        // 5
      };
      exports2.STAGE_TO_MUSIC = {
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_1]: BASEMENT_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_2]: BASEMENT_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.CAVES_1]: CAVES_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.CAVES_2]: CAVES_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_1]: DEPTHS_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_2]: DEPTHS_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.WOMB_1]: WOMB_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.WOMB_2]: WOMB_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.BLUE_WOMB]: BLUE_WOMB_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL]: SHEOL_CATHEDRAL_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST]: DARK_ROOM_CHEST_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.VOID]: VOID_TO_MUSIC,
        [isaac_typescript_definitions_1.LevelStage.HOME]: HOME_TO_MUSIC
        // 13
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/sound.js
  var require_sound = __commonJS({
    "node_modules/isaacscript-common/dist/functions/sound.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.stopAllSoundEffects = exports2.getMusicForStage = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var stageToMusic_1 = require_stageToMusic();
      var enums_1 = require_enums();
      function getMusicForStage(stage, stageType) {
        const level = cachedClasses_1.game.GetLevel();
        if (stage === void 0) {
          stage = level.GetStage();
        }
        if (stageType === void 0) {
          stageType = level.GetStageType();
        }
        const stageTypeToMusic = stageToMusic_1.STAGE_TO_MUSIC[stage];
        return stageTypeToMusic[stageType];
      }
      exports2.getMusicForStage = getMusicForStage;
      function stopAllSoundEffects(soundEffectCustom) {
        for (const soundEffect of cachedEnumValues_1.SOUND_EFFECT_VALUES) {
          cachedClasses_1.sfxManager.Stop(soundEffect);
        }
        if (soundEffectCustom !== void 0) {
          for (const soundEffect of (0, enums_1.getEnumValues)(soundEffectCustom)) {
            cachedClasses_1.sfxManager.Stop(soundEffect);
          }
        }
      }
      exports2.stopAllSoundEffects = stopAllSoundEffects;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/constants.js
  var require_constants2 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/constants.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CUSTOM_FLOOR_STAGE_TYPE = exports2.CUSTOM_FLOOR_STAGE = exports2.DEFAULT_BASE_STAGE_TYPE = exports2.DEFAULT_BASE_STAGE = exports2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH = exports2.CUSTOM_STAGE_FEATURE_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CUSTOM_STAGE_FEATURE_NAME = "CustomStage";
      exports2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH = "gfx/isaacscript-custom-stage";
      exports2.DEFAULT_BASE_STAGE = isaac_typescript_definitions_1.LevelStage.BASEMENT_2;
      exports2.DEFAULT_BASE_STAGE_TYPE = isaac_typescript_definitions_1.StageType.ORIGINAL;
      exports2.CUSTOM_FLOOR_STAGE = -1;
      exports2.CUSTOM_FLOOR_STAGE_TYPE = isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/backdrop.js
  var require_backdrop = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/backdrop.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setCustomStageBackdrop = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var LadderSubTypeCustom_1 = require_LadderSubTypeCustom();
      var array_1 = require_array();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var rng_1 = require_rng();
      var roomShape_1 = require_roomShape();
      var string_1 = require_string();
      var utils_1 = require_utils();
      var ReadonlySet_1 = require_ReadonlySet();
      var constants_2 = require_constants2();
      var BackdropKind;
      (function(BackdropKind2) {
        BackdropKind2["N_FLOOR"] = "nFloors";
        BackdropKind2["L_FLOOR"] = "lFloors";
        BackdropKind2["WALL"] = "walls";
        BackdropKind2["CORNER"] = "corners";
      })(BackdropKind || (BackdropKind = {}));
      var DEFAULT_BACKDROP = {
        nFloors: [`${constants_2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/backdrop/nfloor.png`],
        lFloors: [`${constants_2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/backdrop/lfloor.png`],
        walls: [`${constants_2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/backdrop/wall.png`],
        corners: [`${constants_2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/backdrop/corner.png`]
      };
      var ROOM_SHAPE_WALL_ANM2_LAYERS = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: 44,
        [isaac_typescript_definitions_1.RoomShape.IH]: 36,
        [isaac_typescript_definitions_1.RoomShape.IV]: 28,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: 58,
        [isaac_typescript_definitions_1.RoomShape.IIV]: 42,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: 63,
        [isaac_typescript_definitions_1.RoomShape.IIH]: 62,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: 63,
        [isaac_typescript_definitions_1.RoomShape.LTL]: 63,
        [isaac_typescript_definitions_1.RoomShape.LTR]: 63,
        [isaac_typescript_definitions_1.RoomShape.LBL]: 63,
        [isaac_typescript_definitions_1.RoomShape.LBR]: 63
        // 12
      };
      var ROOM_SHAPE_WALL_EXTRA_ANM2_LAYERS = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: 7,
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: 21,
        [isaac_typescript_definitions_1.RoomShape.LTL]: 19,
        [isaac_typescript_definitions_1.RoomShape.LTR]: 19,
        [isaac_typescript_definitions_1.RoomShape.LBL]: 19,
        [isaac_typescript_definitions_1.RoomShape.LBR]: 19
        // 12
      };
      var WALL_OFFSET = Vector(-80, -80);
      var L_FLOOR_ANM2_LAYERS = [16, 17];
      var N_FLOOR_ANM2_LAYERS = [18, 19];
      var BACKDROP_EFFECT_VARIANT = isaac_typescript_definitions_1.EffectVariant.LADDER;
      var BACKDROP_EFFECT_SUB_TYPE = LadderSubTypeCustom_1.LadderSubTypeCustom.CUSTOM_BACKDROP;
      var BACKDROP_ROOM_TYPE_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.RoomType.DEFAULT,
        isaac_typescript_definitions_1.RoomType.BOSS,
        isaac_typescript_definitions_1.RoomType.MINI_BOSS
      ]);
      function setCustomStageBackdrop(customStage) {
        const room = cachedClasses_1.game.GetRoom();
        const roomType = room.GetType();
        const decorationSeed = room.GetDecorationSeed();
        const rng = (0, rng_1.newRNG)(decorationSeed);
        if (!BACKDROP_ROOM_TYPE_SET.has(roomType)) {
          return;
        }
        spawnWallEntity(customStage, rng, false);
        spawnSecondWallEntity(customStage, rng);
        spawnFloorEntity(customStage, rng);
      }
      exports2.setCustomStageBackdrop = setCustomStageBackdrop;
      function getBackdropPNGPath(customStage, backdropKind, rng) {
        const backdrop = customStage.backdropPNGPaths ?? DEFAULT_BACKDROP;
        const pathArray = backdrop[backdropKind];
        const randomPath = (0, array_1.getRandomArrayElement)(pathArray, rng);
        return (0, string_1.removeCharactersBefore)(randomPath, "gfx/");
      }
      function spawnWallEntity(customStage, rng, isExtraWall) {
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        const seed = 1;
        const wallEffect = (0, entitiesSpecific_1.spawnEffectWithSeed)(BACKDROP_EFFECT_VARIANT, BACKDROP_EFFECT_SUB_TYPE, constants_1.VectorZero, seed);
        wallEffect.AddEntityFlags(isaac_typescript_definitions_1.EntityFlag.RENDER_WALL);
        const sprite = wallEffect.GetSprite();
        sprite.Load(`${constants_2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/wall-backdrop.anm2`, false);
        const wallLayersArray = isExtraWall ? ROOM_SHAPE_WALL_EXTRA_ANM2_LAYERS : ROOM_SHAPE_WALL_ANM2_LAYERS;
        const numWallLayers = wallLayersArray[roomShape];
        (0, utils_1.assertDefined)(numWallLayers, `Failed to get the layers when creating the backdrop for custom stage: ${customStage.name}`);
        if ((0, roomShape_1.isLRoomShape)(roomShape)) {
          const cornerPNGPath = getBackdropPNGPath(customStage, BackdropKind.CORNER, rng);
          sprite.ReplaceSpritesheet(0, cornerPNGPath);
        }
        for (const layerID of (0, utils_1.iRange)(1, numWallLayers)) {
          const wallPNGPath = getBackdropPNGPath(customStage, BackdropKind.WALL, rng);
          sprite.ReplaceSpritesheet(layerID, wallPNGPath);
        }
        const topLeftPos = room.GetTopLeftPos();
        const renderPos = topLeftPos.add(WALL_OFFSET);
        const modifiedOffset = renderPos.div(40).mul(26);
        wallEffect.SpriteOffset = modifiedOffset;
        sprite.LoadGraphics();
        const roomShapeName = isaac_typescript_definitions_1.RoomShape[roomShape];
        const animation = (0, string_1.trimPrefix)(roomShapeName, "SHAPE_");
        const modifiedAnimation = isExtraWall ? `${animation}X` : animation;
        sprite.Play(modifiedAnimation, true);
      }
      function spawnSecondWallEntity(customStage, rng) {
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        const extraLayers = ROOM_SHAPE_WALL_EXTRA_ANM2_LAYERS[roomShape];
        const roomShapeHasExtraLayers = extraLayers !== void 0;
        if (roomShapeHasExtraLayers) {
          spawnWallEntity(customStage, rng, true);
        }
      }
      function spawnFloorEntity(customStage, rng) {
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        const seed = 1;
        const floorEffect = (0, entitiesSpecific_1.spawnEffectWithSeed)(BACKDROP_EFFECT_VARIANT, 0, constants_1.VectorZero, seed);
        floorEffect.AddEntityFlags(isaac_typescript_definitions_1.EntityFlag.RENDER_FLOOR);
        const sprite = floorEffect.GetSprite();
        sprite.Load(`${constants_2.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/floor-backdrop.anm2`, false);
        const numFloorLayers = getNumFloorLayers(roomShape);
        if (numFloorLayers !== void 0) {
          for (const layerID of (0, utils_1.eRange)(numFloorLayers)) {
            const wallPNGPath = getBackdropPNGPath(customStage, BackdropKind.WALL, rng);
            sprite.ReplaceSpritesheet(layerID, wallPNGPath);
          }
        } else if ((0, roomShape_1.isLRoomShape)(roomShape)) {
          for (const layerID of L_FLOOR_ANM2_LAYERS) {
            const LFloorPNGPath = getBackdropPNGPath(customStage, BackdropKind.L_FLOOR, rng);
            sprite.ReplaceSpritesheet(layerID, LFloorPNGPath);
          }
        } else if ((0, roomShape_1.isNarrowRoom)(roomShape)) {
          for (const layerID of N_FLOOR_ANM2_LAYERS) {
            const NFloorPNGPath = getBackdropPNGPath(customStage, BackdropKind.N_FLOOR, rng);
            sprite.ReplaceSpritesheet(layerID, NFloorPNGPath);
          }
        }
        const topLeftPos = room.GetTopLeftPos();
        const renderPos = topLeftPos;
        const modifiedOffset = renderPos.div(40).mul(26);
        floorEffect.SpriteOffset = modifiedOffset;
        sprite.LoadGraphics();
        const roomShapeName = isaac_typescript_definitions_1.RoomShape[roomShape];
        const animation = (0, string_1.trimPrefix)(roomShapeName, "SHAPE_");
        sprite.Play(animation, true);
      }
      function getNumFloorLayers(roomShape) {
        switch (roomShape) {
          case isaac_typescript_definitions_1.RoomShape.SHAPE_1x1: {
            return 4;
          }
          case isaac_typescript_definitions_1.RoomShape.SHAPE_1x2:
          case isaac_typescript_definitions_1.RoomShape.SHAPE_2x1: {
            return 8;
          }
          case isaac_typescript_definitions_1.RoomShape.SHAPE_2x2: {
            return 16;
          }
          default: {
            return void 0;
          }
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/gridEntities.js
  var require_gridEntities2 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/gridEntities.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.convertVanillaTrapdoors = exports2.setCustomDoorGraphics = exports2.setCustomPitGraphics = exports2.setCustomRockGraphics = exports2.setCustomDecorationGraphics = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var gridEntities_1 = require_gridEntities();
      var stage_1 = require_stage();
      var string_1 = require_string();
      var constants_1 = require_constants2();
      function setCustomDecorationGraphics(customStage, gridEntity) {
        if (customStage.decorationsPNGPath === void 0 && customStage.decorationsANM2Path === void 0) {
          return;
        }
        const gridEntityType = gridEntity.GetType();
        if (gridEntityType !== isaac_typescript_definitions_1.GridEntityType.DECORATION) {
          return;
        }
        const sprite = gridEntity.GetSprite();
        const fileName = sprite.GetFilename();
        if (fileName.toLowerCase() !== "gfx/grid/props_01_basement.anm2") {
          return;
        }
        if (customStage.decorationsANM2Path !== void 0) {
          const anm2Path = (0, string_1.removeCharactersBefore)(customStage.decorationsANM2Path, "gfx/");
          sprite.Load(anm2Path, true);
        } else if (customStage.decorationsPNGPath !== void 0) {
          const pngPath = (0, string_1.removeCharactersBefore)(customStage.decorationsPNGPath, "gfx/");
          sprite.ReplaceSpritesheet(0, pngPath);
          sprite.LoadGraphics();
        }
      }
      exports2.setCustomDecorationGraphics = setCustomDecorationGraphics;
      function setCustomRockGraphics(customStage, gridEntity) {
        if (customStage.rocksPNGPath === void 0 && customStage.rocksANM2Path === void 0) {
          return;
        }
        const gridEntityRock = gridEntity.ToRock();
        if (gridEntityRock === void 0) {
          return;
        }
        const sprite = gridEntity.GetSprite();
        const fileName = sprite.GetFilename();
        switch (fileName) {
          case "gfx/grid/grid_rock.anm2": {
            if (customStage.rocksANM2Path !== void 0) {
              const anm2Path = (0, string_1.removeCharactersBefore)(customStage.rocksANM2Path, "gfx/");
              sprite.Load(anm2Path, true);
            } else if (customStage.rocksPNGPath !== void 0) {
              const pngPath = (0, string_1.removeCharactersBefore)(customStage.rocksPNGPath, "gfx/");
              sprite.ReplaceSpritesheet(0, pngPath);
              sprite.LoadGraphics();
            }
            break;
          }
          case "gfx/grid/grid_pit.anm2": {
            if (customStage.rocksPNGPath !== void 0) {
              const pngPath = (0, string_1.removeCharactersBefore)(customStage.rocksPNGPath, "gfx/");
              sprite.ReplaceSpritesheet(1, pngPath);
              sprite.LoadGraphics();
            }
            break;
          }
        }
      }
      exports2.setCustomRockGraphics = setCustomRockGraphics;
      function setCustomPitGraphics(customStage, gridEntity) {
        if (customStage.pitsPNGPath === void 0) {
          return;
        }
        const pngPath = (0, string_1.removeCharactersBefore)(customStage.pitsPNGPath, "gfx/");
        const gridEntityPit = gridEntity.ToPit();
        if (gridEntityPit === void 0) {
          return;
        }
        const sprite = gridEntity.GetSprite();
        const fileName = sprite.GetFilename();
        if (fileName === "gfx/grid/grid_pit.anm2") {
          sprite.ReplaceSpritesheet(0, pngPath);
          sprite.LoadGraphics();
        }
      }
      exports2.setCustomPitGraphics = setCustomPitGraphics;
      function setCustomDoorGraphics(customStage, gridEntity) {
        if (customStage.doorPNGPaths === void 0) {
          return;
        }
        const gridEntityDoor = gridEntity.ToDoor();
        if (gridEntityDoor === void 0) {
          return;
        }
        const sprite = gridEntity.GetSprite();
        const fileName = sprite.GetFilename();
        const doorPNGPath = getNewDoorPNGPath(customStage, fileName);
        if (doorPNGPath !== void 0) {
          const fixedPath = (0, string_1.removeCharactersBefore)(doorPNGPath, "gfx/");
          sprite.ReplaceSpritesheet(0, fixedPath);
          sprite.LoadGraphics();
        }
      }
      exports2.setCustomDoorGraphics = setCustomDoorGraphics;
      function getNewDoorPNGPath(customStage, fileName) {
        switch (fileName) {
          case "gfx/grid/door_01_normaldoor.anm2": {
            return customStage.doorPNGPaths?.normal;
          }
          case "gfx/grid/door_02_treasureroomdoor.anm2": {
            return customStage.doorPNGPaths?.treasureRoom;
          }
          case "gfx/grid/door_03_ambushroomdoor.anm2": {
            return customStage.doorPNGPaths?.normalChallengeRoom;
          }
          case "gfx/grid/door_04_selfsacrificeroomdoor.anm2": {
            return customStage.doorPNGPaths?.curseRoom;
          }
          case "gfx/grid/door_05_arcaderoomdoor.anm2": {
            return customStage.doorPNGPaths?.arcade;
          }
          case "gfx/grid/door_07_devilroomdoor.anm2": {
            return customStage.doorPNGPaths?.devilRoom;
          }
          case "gfx/grid/door_07_holyroomdoor.anm2": {
            return customStage.doorPNGPaths?.angelRoom;
          }
          case "gfx/grid/door_08_holeinwall.anm2": {
            return customStage.doorPNGPaths?.secretRoom;
          }
          case "gfx/grid/door_09_bossambushroomdoor.anm2": {
            return customStage.doorPNGPaths?.bossChallengeRoom;
          }
          case "gfx/grid/door_10_bossroomdoor.anm2": {
            return customStage.doorPNGPaths?.bossRoom;
          }
          case "gfx/grid/door_15_bossrushdoor.anm2": {
            return customStage.doorPNGPaths?.bossRush;
          }
        }
        return void 0;
      }
      function convertVanillaTrapdoors(customStage, gridEntity, isFirstFloor, customTrapdoors) {
        const gridEntityType = gridEntity.GetType();
        if (gridEntityType !== isaac_typescript_definitions_1.GridEntityType.TRAPDOOR) {
          return;
        }
        (0, gridEntities_1.removeGridEntity)(gridEntity, true);
        if (isFirstFloor) {
          customTrapdoors.spawnCustomTrapdoor(gridEntity.Position, customStage.name, isaac_typescript_definitions_1.LevelStage.BASEMENT_2);
        } else {
          const baseStage = customStage.baseStage ?? constants_1.DEFAULT_BASE_STAGE;
          const destinationStage = baseStage + 2;
          const destinationStageType = (0, stage_1.calculateStageType)(destinationStage);
          customTrapdoors.spawnCustomTrapdoor(gridEntity.Position, void 0, destinationStage, destinationStageType);
        }
      }
      exports2.convertVanillaTrapdoors = convertVanillaTrapdoors;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/shadows.js
  var require_shadows = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/shadows.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setShadows = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var LadderSubTypeCustom_1 = require_LadderSubTypeCustom();
      var array_1 = require_array();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var string_1 = require_string();
      var constants_1 = require_constants2();
      var SHADOW_EFFECT_VARIANT = isaac_typescript_definitions_1.EffectVariant.LADDER;
      var SHADOW_EFFECT_SUB_TYPE = LadderSubTypeCustom_1.LadderSubTypeCustom.CUSTOM_SHADOW;
      var ROOM_SHAPE_TO_SHADOW_ANIMATION = {
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x1]: "1x1",
        [isaac_typescript_definitions_1.RoomShape.IH]: "1x1",
        [isaac_typescript_definitions_1.RoomShape.IV]: "1x1",
        [isaac_typescript_definitions_1.RoomShape.SHAPE_1x2]: "1x2",
        [isaac_typescript_definitions_1.RoomShape.IIV]: "1x2",
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x1]: "2x1",
        [isaac_typescript_definitions_1.RoomShape.IIH]: "2x1",
        [isaac_typescript_definitions_1.RoomShape.SHAPE_2x2]: "2x2",
        [isaac_typescript_definitions_1.RoomShape.LTL]: "2x2",
        [isaac_typescript_definitions_1.RoomShape.LTR]: "2x2",
        [isaac_typescript_definitions_1.RoomShape.LBL]: "2x2",
        [isaac_typescript_definitions_1.RoomShape.LBR]: "2x2"
        // 12
      };
      var FADED_BLACK = Color(0, 0, 0, 0.25);
      function setShadows(customStage) {
        if (customStage.shadows === void 0) {
          return;
        }
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        const centerPos = room.GetCenterPos();
        const animation = ROOM_SHAPE_TO_SHADOW_ANIMATION[roomShape];
        const shadows = customStage.shadows[animation];
        if (shadows === void 0) {
          return;
        }
        const seed = 1;
        const shadowEffect = (0, entitiesSpecific_1.spawnEffectWithSeed)(SHADOW_EFFECT_VARIANT, SHADOW_EFFECT_SUB_TYPE, centerPos, seed);
        const sprite = shadowEffect.GetSprite();
        sprite.Load(`${constants_1.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/stage-shadow.anm2`, false);
        const decorationSeed = room.GetDecorationSeed();
        const shadow = (0, array_1.getRandomArrayElement)(shadows, decorationSeed);
        const pngPath = (0, string_1.removeCharactersBefore)(shadow.pngPath, "gfx/");
        sprite.ReplaceSpritesheet(0, pngPath);
        sprite.LoadGraphics();
        sprite.SetFrame(animation, 0);
        sprite.Color = shadow.color === void 0 ? FADED_BLACK : Color(shadow.color.r, shadow.color.g, shadow.color.b, shadow.color.a);
      }
      exports2.setShadows = setShadows;
    }
  });

  // node_modules/isaacscript-common/dist/enums/private/UIStreakAnimation.js
  var require_UIStreakAnimation = __commonJS({
    "node_modules/isaacscript-common/dist/enums/private/UIStreakAnimation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.UIStreakAnimation = void 0;
      var UIStreakAnimation;
      (function(UIStreakAnimation2) {
        UIStreakAnimation2[UIStreakAnimation2["NONE"] = 0] = "NONE";
        UIStreakAnimation2[UIStreakAnimation2["TEXT"] = 1] = "TEXT";
        UIStreakAnimation2[UIStreakAnimation2["TEXT_STAY"] = 2] = "TEXT_STAY";
      })(UIStreakAnimation || (exports2.UIStreakAnimation = UIStreakAnimation = {}));
    }
  });

  // node_modules/isaacscript-common/dist/functions/ui.js
  var require_ui = __commonJS({
    "node_modules/isaacscript-common/dist/functions/ui.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getVisibleHearts = exports2.getScreenTopRightPos = exports2.getScreenTopLeftPos = exports2.getScreenTopCenterPos = exports2.getScreenRightX = exports2.getScreenCenterPos = exports2.getScreenBottomY = exports2.getScreenBottomRightPos = exports2.getScreenBottomLeftPos = exports2.getScreenBottomCenterPos = exports2.getHeartsUIWidth = exports2.getHeartRowLength = exports2.getHUDOffsetVector = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var vector_1 = require_vector();
      function getHUDOffsetVector() {
        const hudOffset = Math.floor(Options.HUDOffset * 10);
        if (hudOffset < 1 || hudOffset > 10) {
          return (0, vector_1.copyVector)(constants_1.VectorZero);
        }
        const x = hudOffset * 2;
        let y = hudOffset;
        if (y >= 4) {
          y++;
        }
        if (y >= 9) {
          y++;
        }
        return Vector(x, y);
      }
      exports2.getHUDOffsetVector = getHUDOffsetVector;
      function getHeartRowLength(player) {
        const maxHearts = player.GetMaxHearts();
        const soulHearts = player.GetSoulHearts();
        const boneHearts = player.GetBoneHearts();
        const brokenHearts = player.GetBrokenHearts();
        const combinedHearts = maxHearts + soulHearts + boneHearts * 2 + brokenHearts * 2;
        const heartRowLength = combinedHearts / 2;
        return Math.min(heartRowLength, 6);
      }
      exports2.getHeartRowLength = getHeartRowLength;
      function getHeartsUIWidth() {
        const level = cachedClasses_1.game.GetLevel();
        const curses = level.GetCurses();
        const player = Isaac.GetPlayer();
        const extraLives = player.GetExtraLives();
        const effects = player.GetEffects();
        const hasHolyMantleEffect = effects.HasCollectibleEffect(isaac_typescript_definitions_1.CollectibleType.HOLY_MANTLE);
        let heartRowLength = getHeartRowLength(player);
        if (hasHolyMantleEffect) {
          heartRowLength++;
        }
        if (curses === isaac_typescript_definitions_1.LevelCurse.UNKNOWN) {
          heartRowLength = 1;
        }
        let width = heartRowLength * constants_1.UI_HEART_WIDTH;
        if (extraLives > 9) {
          width += 20;
          if (player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.GUPPYS_COLLAR)) {
            width += 6;
          }
        } else if (extraLives > 0) {
          width += 16;
          if (player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.GUPPYS_COLLAR)) {
            width += 4;
          }
        }
        return width;
      }
      exports2.getHeartsUIWidth = getHeartsUIWidth;
      function getScreenBottomCenterPos() {
        const bottomRightPos = getScreenBottomRightPos();
        return Vector(bottomRightPos.X / 2, bottomRightPos.Y);
      }
      exports2.getScreenBottomCenterPos = getScreenBottomCenterPos;
      function getScreenBottomLeftPos() {
        const bottomRightPos = getScreenBottomRightPos();
        return Vector(0, bottomRightPos.Y);
      }
      exports2.getScreenBottomLeftPos = getScreenBottomLeftPos;
      function getScreenBottomRightPos() {
        const screenWidth = Isaac.GetScreenWidth();
        const screenHeight = Isaac.GetScreenHeight();
        return Vector(screenWidth, screenHeight);
      }
      exports2.getScreenBottomRightPos = getScreenBottomRightPos;
      function getScreenBottomY() {
        const bottomRightPos = getScreenBottomRightPos();
        return bottomRightPos.Y;
      }
      exports2.getScreenBottomY = getScreenBottomY;
      function getScreenCenterPos() {
        const bottomRightPos = getScreenBottomRightPos();
        return bottomRightPos.div(2);
      }
      exports2.getScreenCenterPos = getScreenCenterPos;
      function getScreenRightX() {
        const bottomRightPos = getScreenBottomRightPos();
        return bottomRightPos.X;
      }
      exports2.getScreenRightX = getScreenRightX;
      function getScreenTopCenterPos() {
        const bottomRightPos = getScreenBottomRightPos();
        return Vector(bottomRightPos.X / 2, 0);
      }
      exports2.getScreenTopCenterPos = getScreenTopCenterPos;
      function getScreenTopLeftPos() {
        return (0, vector_1.copyVector)(constants_1.VectorZero);
      }
      exports2.getScreenTopLeftPos = getScreenTopLeftPos;
      function getScreenTopRightPos() {
        const bottomRightPos = getScreenBottomRightPos();
        return Vector(bottomRightPos.X, 0);
      }
      exports2.getScreenTopRightPos = getScreenTopRightPos;
      function getVisibleHearts(player) {
        const effectiveMaxHearts = player.GetEffectiveMaxHearts();
        const soulHearts = player.GetSoulHearts();
        const boneHearts = player.GetBoneHearts();
        const maxHearts = Math.max(effectiveMaxHearts, boneHearts * 2);
        let visibleHearts = Math.ceil((maxHearts + soulHearts) / 2);
        if (visibleHearts < 1) {
          visibleHearts = 1;
        }
        return visibleHearts;
      }
      exports2.getVisibleHearts = getVisibleHearts;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/v.js
  var require_v = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/v.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.v = void 0;
      var UIStreakAnimation_1 = require_UIStreakAnimation();
      exports2.v = {
        run: {
          currentCustomStage: null,
          /** Whether we are on e.g. Caves 1 or Caves 2. */
          firstFloor: true,
          showingBossVersusScreen: false,
          /** Values are the render frame that the controller first pressed the map button. */
          controllerIndexPushingMapRenderFrame: /* @__PURE__ */ new Map(),
          topStreakTextStartedRenderFrame: null,
          topStreakText: {
            animation: UIStreakAnimation_1.UIStreakAnimation.NONE,
            frame: 0,
            pauseFrame: false
          },
          bottomStreakText: {
            animation: UIStreakAnimation_1.UIStreakAnimation.NONE,
            frame: 0,
            pauseFrame: false
          }
        }
      };
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/streakText.js
  var require_streakText = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/streakText.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.topStreakTextStart = exports2.streakTextGetShaderParams = exports2.streakTextPostRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var UIStreakAnimation_1 = require_UIStreakAnimation();
      var frames_1 = require_frames();
      var ui_1 = require_ui();
      var v_1 = require_v();
      var UI_STREAK_ANIMATION_END_FRAMES = {
        [UIStreakAnimation_1.UIStreakAnimation.NONE]: 0,
        [UIStreakAnimation_1.UIStreakAnimation.TEXT]: 69,
        [UIStreakAnimation_1.UIStreakAnimation.TEXT_STAY]: 1
      };
      var EMPTY_SHADER_NAME = "IsaacScript-RenderAboveHUD";
      var TEXT_STAY_FRAME = 8;
      var TEXT_OUT_FRAME = 60;
      var STREAK_SPRITE_TOP_OFFSET = Vector(0, 47);
      var STREAK_SPRITE_BOTTOM_OFFSET = Vector(0, -48.25);
      var STREAK_TEXT_BOTTOM_Y_OFFSET = -9;
      var NUM_RENDER_FRAMES_MAP_HELD_BEFORE_STREAK_TEXT = 11;
      var TEXT_IN_ADJUSTMENTS = [-800, -639, -450, -250, -70, 10, 6, 3];
      var TEXT_OUT_ADJUSTMENTS = [
        0,
        -5,
        -10,
        -15,
        -20,
        144,
        308,
        472,
        636,
        800
      ];
      var TEXT_IN_SCALES = [
        Vector(3, 0.2),
        Vector(2.6, 0.36),
        Vector(2.2, 0.52),
        Vector(1.8, 0.68),
        Vector(1.4, 0.84),
        Vector(0.95, 1.05),
        Vector(0.97, 1.03),
        Vector(0.98, 1.02)
      ];
      var TEXT_OUT_SCALES = [
        Vector(1, 1),
        Vector(0.99, 1.03),
        Vector(0.98, 1.05),
        Vector(0.96, 1.08),
        Vector(0.95, 1.1),
        Vector(1.36, 0.92),
        Vector(1.77, 0.74),
        Vector(2.18, 0.56),
        Vector(2.59, 0.38),
        Vector(3, 0.2)
      ];
      function streakTextPostRender() {
        checkEndTopStreakText();
        trackMapInputPressed();
        checkStartBottomStreakText();
        checkEndBottomStreakText();
      }
      exports2.streakTextPostRender = streakTextPostRender;
      function checkEndTopStreakText() {
        if (v_1.v.run.topStreakTextStartedRenderFrame === null || v_1.v.run.topStreakText.animation !== UIStreakAnimation_1.UIStreakAnimation.TEXT_STAY) {
          return;
        }
        const elapsedFrames = (0, frames_1.getElapsedRenderFramesSince)(v_1.v.run.topStreakTextStartedRenderFrame);
        if (elapsedFrames >= 115) {
          v_1.v.run.topStreakText.animation = UIStreakAnimation_1.UIStreakAnimation.TEXT;
          v_1.v.run.topStreakText.frame = TEXT_OUT_FRAME - 2;
        }
      }
      function trackMapInputPressed() {
        const gameFrameCount = cachedClasses_1.game.GetFrameCount();
        for (const controllerIndex of cachedEnumValues_1.CONTROLLER_INDEX_VALUES) {
          const oldPushedMapFrame = v_1.v.run.controllerIndexPushingMapRenderFrame.get(controllerIndex);
          const isPushingMap = Input.IsActionPressed(isaac_typescript_definitions_1.ButtonAction.MAP, controllerIndex);
          if (isPushingMap) {
            if (oldPushedMapFrame === void 0) {
              v_1.v.run.controllerIndexPushingMapRenderFrame.set(controllerIndex, gameFrameCount);
            }
          } else {
            v_1.v.run.controllerIndexPushingMapRenderFrame.delete(controllerIndex);
          }
        }
      }
      function checkStartBottomStreakText() {
        if (v_1.v.run.bottomStreakText.animation !== UIStreakAnimation_1.UIStreakAnimation.NONE) {
          return;
        }
        const pushedMapFrames = [
          ...v_1.v.run.controllerIndexPushingMapRenderFrame.values()
        ];
        if (pushedMapFrames.length === 0) {
          return;
        }
        const earliestFrame = Math.min(...pushedMapFrames);
        const elapsedFrames = (0, frames_1.getElapsedGameFramesSince)(earliestFrame);
        if (elapsedFrames >= NUM_RENDER_FRAMES_MAP_HELD_BEFORE_STREAK_TEXT) {
          v_1.v.run.bottomStreakText.animation = UIStreakAnimation_1.UIStreakAnimation.TEXT;
          v_1.v.run.bottomStreakText.frame = 0;
        }
      }
      function checkEndBottomStreakText() {
        if (v_1.v.run.bottomStreakText.animation !== UIStreakAnimation_1.UIStreakAnimation.TEXT_STAY) {
          return;
        }
        const pushedMapFrames = [
          ...v_1.v.run.controllerIndexPushingMapRenderFrame.values()
        ];
        if (pushedMapFrames.length === 0) {
          v_1.v.run.bottomStreakText.animation = UIStreakAnimation_1.UIStreakAnimation.TEXT;
          v_1.v.run.bottomStreakText.frame = TEXT_OUT_FRAME - 2;
        }
      }
      function streakTextGetShaderParams(customStage, shaderName) {
        if (shaderName !== EMPTY_SHADER_NAME) {
          return;
        }
        const topCenterPos = (0, ui_1.getScreenTopCenterPos)();
        const topStreakPosition = topCenterPos.add(STREAK_SPRITE_TOP_OFFSET);
        renderStreakText(customStage, v_1.v.run.topStreakText, topStreakPosition);
        const bottomCenterPos = (0, ui_1.getScreenBottomCenterPos)();
        const bottomStreakPosition = bottomCenterPos.add(STREAK_SPRITE_BOTTOM_OFFSET);
        renderStreakText(customStage, v_1.v.run.bottomStreakText, bottomStreakPosition);
      }
      exports2.streakTextGetShaderParams = streakTextGetShaderParams;
      function renderStreakText(customStage, streakText, position) {
        if (streakText.animation === UIStreakAnimation_1.UIStreakAnimation.NONE) {
          return;
        }
        if (streakText.animation !== UIStreakAnimation_1.UIStreakAnimation.TEXT_STAY) {
          const { pauseFrame } = streakText;
          streakText.pauseFrame = !streakText.pauseFrame;
          if (!pauseFrame) {
            streakText.frame++;
          }
        }
        const endFrame = UI_STREAK_ANIMATION_END_FRAMES[streakText.animation];
        if (streakText.frame > endFrame) {
          streakText.animation = UIStreakAnimation_1.UIStreakAnimation.NONE;
          streakText.frame = 0;
          return;
        }
        if (streakText.animation === UIStreakAnimation_1.UIStreakAnimation.TEXT && streakText.frame === TEXT_STAY_FRAME) {
          streakText.animation = UIStreakAnimation_1.UIStreakAnimation.TEXT_STAY;
          streakText.frame = 0;
        }
        const isPaused = cachedClasses_1.game.IsPaused();
        if (isPaused) {
          return;
        }
        const font = cachedClasses_1.fonts.upheaval;
        const { name } = customStage;
        const numberSuffix = v_1.v.run.firstFloor ? "I" : "II";
        const nameWithNumberSuffix = `${name} ${numberSuffix}`;
        const length = font.GetStringWidthUTF8(nameWithNumberSuffix);
        const centeredX = position.X - length / 2;
        let adjustment = 0;
        let scale = constants_1.VectorOne;
        if (streakText.animation === UIStreakAnimation_1.UIStreakAnimation.TEXT) {
          if (streakText.frame < TEXT_STAY_FRAME) {
            adjustment = TEXT_IN_ADJUSTMENTS[streakText.frame] ?? 0;
            scale = TEXT_IN_SCALES[streakText.frame] ?? constants_1.VectorOne;
          } else {
            const adjustedFrame = streakText.frame - TEXT_OUT_FRAME;
            adjustment = TEXT_OUT_ADJUSTMENTS[adjustedFrame] ?? 0;
            scale = TEXT_OUT_SCALES[adjustedFrame] ?? constants_1.VectorOne;
          }
        }
        const adjustedX = centeredX + adjustment;
        const adjustedY = position.Y + STREAK_TEXT_BOTTOM_Y_OFFSET;
        font.DrawStringScaled(nameWithNumberSuffix, adjustedX, adjustedY, scale.X, scale.Y, constants_1.KColorDefault);
      }
      function topStreakTextStart() {
        const level = cachedClasses_1.game.GetLevel();
        const renderFrameCount = Isaac.GetFrameCount();
        level.ShowName(false);
        v_1.v.run.topStreakText.animation = UIStreakAnimation_1.UIStreakAnimation.TEXT;
        v_1.v.run.topStreakText.frame = 0;
        v_1.v.run.topStreakTextStartedRenderFrame = renderFrameCount;
      }
      exports2.topStreakTextStart = topStreakTextStart;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/utils.js
  var require_utils2 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/utils.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getRandomBossRoomFromPool = exports2.getRandomCustomStageRoom = void 0;
      var array_1 = require_array();
      var log_1 = require_log();
      var random_1 = require_random();
      function getRandomCustomStageRoom(roomsMetadata, seedOrRNG, verbose = false) {
        const totalWeight = getTotalWeightOfCustomStageRooms(roomsMetadata);
        if (verbose) {
          (0, log_1.log)(`Total weight of the custom stage rooms provided: ${totalWeight}`);
        }
        const chosenWeight = (0, random_1.getRandomFloat)(0, totalWeight, seedOrRNG);
        if (verbose) {
          (0, log_1.log)(`Randomly chose weight for custom stage room: ${chosenWeight}`);
        }
        return getCustomStageRoomWithChosenWeight(roomsMetadata, chosenWeight);
      }
      exports2.getRandomCustomStageRoom = getRandomCustomStageRoom;
      function getTotalWeightOfCustomStageRooms(roomsMetadata) {
        const weights = roomsMetadata.map((roomMetadata) => roomMetadata.weight);
        return (0, array_1.sumArray)(weights);
      }
      function getCustomStageRoomWithChosenWeight(roomsMetadata, chosenWeight) {
        for (const roomMetadata of roomsMetadata) {
          if (chosenWeight < roomMetadata.weight) {
            return roomMetadata;
          }
          chosenWeight -= roomMetadata.weight;
        }
        error(`Failed to get a custom stage room with chosen weight: ${chosenWeight}`);
      }
      function getRandomBossRoomFromPool(roomsMetadata, bossPool, seedOrRNG, verbose = false) {
        const totalWeight = getTotalWeightOfBossPool(bossPool);
        if (verbose) {
          (0, log_1.log)(`Total weight of the custom stage boss pool provided: ${totalWeight}`);
        }
        const chosenWeight = (0, random_1.getRandomFloat)(0, totalWeight, seedOrRNG);
        if (verbose) {
          (0, log_1.log)(`Randomly chose weight for custom stage boss pool: ${chosenWeight}`);
        }
        const bossEntry = getBossEntryWithChosenWeight(bossPool, chosenWeight);
        const roomsMetadataForBoss = roomsMetadata.filter((roomMetadata) => roomMetadata.subType === bossEntry.subType);
        return getRandomCustomStageRoom(roomsMetadataForBoss, seedOrRNG, verbose);
      }
      exports2.getRandomBossRoomFromPool = getRandomBossRoomFromPool;
      function getTotalWeightOfBossPool(bossPool) {
        const weights = bossPool.map((bossEntry) => bossEntry.weight);
        return (0, array_1.sumArray)(weights);
      }
      function getBossEntryWithChosenWeight(bossPool, chosenWeight) {
        for (const bossEntry of bossPool) {
          if (chosenWeight < bossEntry.weight) {
            return bossEntry;
          }
          chosenWeight -= bossEntry.weight;
        }
        error(`Failed to get a custom stage boss entry with chosen weight: ${chosenWeight}`);
      }
    }
  });

  // node_modules/isaacscript-common/dist/objects/bossIDToEntityTypeVariant.js
  var require_bossIDToEntityTypeVariant = __commonJS({
    "node_modules/isaacscript-common/dist/objects/bossIDToEntityTypeVariant.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BOSS_ID_TO_ENTITY_TYPE_VARIANT = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.BOSS_ID_TO_ENTITY_TYPE_VARIANT = {
        // 1
        [isaac_typescript_definitions_1.BossID.MONSTRO]: [isaac_typescript_definitions_1.EntityType.MONSTRO, 0],
        // 2
        [isaac_typescript_definitions_1.BossID.LARRY_JR]: [isaac_typescript_definitions_1.EntityType.LARRY_JR, isaac_typescript_definitions_1.LarryJrVariant.LARRY_JR],
        // 3
        [isaac_typescript_definitions_1.BossID.CHUB]: [isaac_typescript_definitions_1.EntityType.CHUB, isaac_typescript_definitions_1.ChubVariant.CHUB],
        // 4
        [isaac_typescript_definitions_1.BossID.GURDY]: [isaac_typescript_definitions_1.EntityType.GURDY, 0],
        // 5
        [isaac_typescript_definitions_1.BossID.MONSTRO_2]: [isaac_typescript_definitions_1.EntityType.MONSTRO_2, isaac_typescript_definitions_1.Monstro2Variant.MONSTRO_2],
        // 6
        [isaac_typescript_definitions_1.BossID.MOM]: [isaac_typescript_definitions_1.EntityType.MOM, isaac_typescript_definitions_1.MomVariant.MOM],
        // 7
        [isaac_typescript_definitions_1.BossID.SCOLEX]: [isaac_typescript_definitions_1.EntityType.PIN, isaac_typescript_definitions_1.PinVariant.SCOLEX],
        // 8
        [isaac_typescript_definitions_1.BossID.MOMS_HEART]: [isaac_typescript_definitions_1.EntityType.MOMS_HEART, isaac_typescript_definitions_1.MomsHeartVariant.MOMS_HEART],
        // 9
        [isaac_typescript_definitions_1.BossID.FAMINE]: [isaac_typescript_definitions_1.EntityType.FAMINE, 0],
        // 10
        [isaac_typescript_definitions_1.BossID.PESTILENCE]: [isaac_typescript_definitions_1.EntityType.PESTILENCE, 0],
        // 11
        [isaac_typescript_definitions_1.BossID.WAR]: [isaac_typescript_definitions_1.EntityType.WAR, isaac_typescript_definitions_1.WarVariant.WAR],
        // 12
        [isaac_typescript_definitions_1.BossID.DEATH]: [isaac_typescript_definitions_1.EntityType.DEATH, 0],
        // 13
        [isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES]: [
          isaac_typescript_definitions_1.EntityType.DUKE_OF_FLIES,
          isaac_typescript_definitions_1.DukeOfFliesVariant.DUKE_OF_FLIES
        ],
        // 14
        [isaac_typescript_definitions_1.BossID.PEEP]: [isaac_typescript_definitions_1.EntityType.PEEP, isaac_typescript_definitions_1.PeepVariant.PEEP],
        // 15
        [isaac_typescript_definitions_1.BossID.LOKI]: [isaac_typescript_definitions_1.EntityType.LOKI, isaac_typescript_definitions_1.LokiVariant.LOKI],
        // 16
        [isaac_typescript_definitions_1.BossID.BLASTOCYST]: [isaac_typescript_definitions_1.EntityType.BLASTOCYST_BIG, 0],
        // 17
        [isaac_typescript_definitions_1.BossID.GEMINI]: [isaac_typescript_definitions_1.EntityType.GEMINI, isaac_typescript_definitions_1.GeminiVariant.GEMINI],
        // 18
        [isaac_typescript_definitions_1.BossID.FISTULA]: [isaac_typescript_definitions_1.EntityType.FISTULA_BIG, isaac_typescript_definitions_1.FistulaVariant.FISTULA],
        // 19
        [isaac_typescript_definitions_1.BossID.GISH]: [isaac_typescript_definitions_1.EntityType.MONSTRO_2, isaac_typescript_definitions_1.Monstro2Variant.GISH],
        // 20
        [isaac_typescript_definitions_1.BossID.STEVEN]: [isaac_typescript_definitions_1.EntityType.GEMINI, isaac_typescript_definitions_1.GeminiVariant.STEVEN],
        // 21
        [isaac_typescript_definitions_1.BossID.CHAD]: [isaac_typescript_definitions_1.EntityType.CHUB, isaac_typescript_definitions_1.ChubVariant.CHAD],
        // 22
        [isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN]: [isaac_typescript_definitions_1.EntityType.HEADLESS_HORSEMAN, 0],
        // 23
        [isaac_typescript_definitions_1.BossID.FALLEN]: [isaac_typescript_definitions_1.EntityType.FALLEN, isaac_typescript_definitions_1.FallenVariant.FALLEN],
        // 24
        [isaac_typescript_definitions_1.BossID.SATAN]: [isaac_typescript_definitions_1.EntityType.SATAN, isaac_typescript_definitions_1.SatanVariant.SATAN],
        // 25
        [isaac_typescript_definitions_1.BossID.IT_LIVES]: [isaac_typescript_definitions_1.EntityType.MOMS_HEART, isaac_typescript_definitions_1.MomsHeartVariant.IT_LIVES],
        // 26
        [isaac_typescript_definitions_1.BossID.HOLLOW]: [isaac_typescript_definitions_1.EntityType.LARRY_JR, isaac_typescript_definitions_1.LarryJrVariant.HOLLOW],
        // 27
        [isaac_typescript_definitions_1.BossID.CARRION_QUEEN]: [isaac_typescript_definitions_1.EntityType.CHUB, isaac_typescript_definitions_1.ChubVariant.CARRION_QUEEN],
        // 28
        [isaac_typescript_definitions_1.BossID.GURDY_JR]: [isaac_typescript_definitions_1.EntityType.GURDY_JR, 0],
        // 29
        [isaac_typescript_definitions_1.BossID.HUSK]: [isaac_typescript_definitions_1.EntityType.DUKE_OF_FLIES, isaac_typescript_definitions_1.DukeOfFliesVariant.HUSK],
        // 30
        [isaac_typescript_definitions_1.BossID.BLOAT]: [isaac_typescript_definitions_1.EntityType.PEEP, isaac_typescript_definitions_1.PeepVariant.BLOAT],
        // 31
        [isaac_typescript_definitions_1.BossID.LOKII]: [isaac_typescript_definitions_1.EntityType.LOKI, isaac_typescript_definitions_1.LokiVariant.LOKII],
        // 32
        [isaac_typescript_definitions_1.BossID.BLIGHTED_OVUM]: [isaac_typescript_definitions_1.EntityType.GEMINI, isaac_typescript_definitions_1.GeminiVariant.BLIGHTED_OVUM],
        // 33
        [isaac_typescript_definitions_1.BossID.TERATOMA]: [isaac_typescript_definitions_1.EntityType.FISTULA_BIG, isaac_typescript_definitions_1.FistulaVariant.TERATOMA],
        // 34
        [isaac_typescript_definitions_1.BossID.WIDOW]: [isaac_typescript_definitions_1.EntityType.WIDOW, isaac_typescript_definitions_1.WidowVariant.WIDOW],
        // 35
        [isaac_typescript_definitions_1.BossID.MASK_OF_INFAMY]: [isaac_typescript_definitions_1.EntityType.MASK_OF_INFAMY, 0],
        // 36
        [isaac_typescript_definitions_1.BossID.WRETCHED]: [isaac_typescript_definitions_1.EntityType.WIDOW, isaac_typescript_definitions_1.WidowVariant.WRETCHED],
        // 37
        [isaac_typescript_definitions_1.BossID.PIN]: [isaac_typescript_definitions_1.EntityType.PIN, isaac_typescript_definitions_1.PinVariant.PIN],
        // 38
        [isaac_typescript_definitions_1.BossID.CONQUEST]: [isaac_typescript_definitions_1.EntityType.WAR, isaac_typescript_definitions_1.WarVariant.CONQUEST],
        // 39
        [isaac_typescript_definitions_1.BossID.ISAAC]: [isaac_typescript_definitions_1.EntityType.ISAAC, isaac_typescript_definitions_1.IsaacVariant.ISAAC],
        // 40
        [isaac_typescript_definitions_1.BossID.BLUE_BABY]: [isaac_typescript_definitions_1.EntityType.ISAAC, isaac_typescript_definitions_1.IsaacVariant.BLUE_BABY],
        // 41
        [isaac_typescript_definitions_1.BossID.DADDY_LONG_LEGS]: [
          isaac_typescript_definitions_1.EntityType.DADDY_LONG_LEGS,
          isaac_typescript_definitions_1.DaddyLongLegsVariant.DADDY_LONG_LEGS
        ],
        // 42
        [isaac_typescript_definitions_1.BossID.TRIACHNID]: [
          isaac_typescript_definitions_1.EntityType.DADDY_LONG_LEGS,
          isaac_typescript_definitions_1.DaddyLongLegsVariant.TRIACHNID
        ],
        // 43
        [isaac_typescript_definitions_1.BossID.HAUNT]: [isaac_typescript_definitions_1.EntityType.HAUNT, isaac_typescript_definitions_1.HauntVariant.HAUNT],
        // 44
        [isaac_typescript_definitions_1.BossID.DINGLE]: [isaac_typescript_definitions_1.EntityType.DINGLE, isaac_typescript_definitions_1.DingleVariant.DINGLE],
        // 45
        [isaac_typescript_definitions_1.BossID.MEGA_MAW]: [isaac_typescript_definitions_1.EntityType.MEGA_MAW, 0],
        // 46
        [isaac_typescript_definitions_1.BossID.GATE]: [isaac_typescript_definitions_1.EntityType.GATE, 0],
        // 47
        [isaac_typescript_definitions_1.BossID.MEGA_FATTY]: [isaac_typescript_definitions_1.EntityType.MEGA_FATTY, 0],
        // 48
        [isaac_typescript_definitions_1.BossID.CAGE]: [isaac_typescript_definitions_1.EntityType.CAGE, 0],
        // 49
        [isaac_typescript_definitions_1.BossID.MAMA_GURDY]: [isaac_typescript_definitions_1.EntityType.MAMA_GURDY, isaac_typescript_definitions_1.MamaGurdyVariant.MAMA_GURDY],
        // 50
        [isaac_typescript_definitions_1.BossID.DARK_ONE]: [isaac_typescript_definitions_1.EntityType.DARK_ONE, 0],
        // 51
        [isaac_typescript_definitions_1.BossID.ADVERSARY]: [isaac_typescript_definitions_1.EntityType.ADVERSARY, 0],
        // 52
        [isaac_typescript_definitions_1.BossID.POLYCEPHALUS]: [
          isaac_typescript_definitions_1.EntityType.POLYCEPHALUS,
          isaac_typescript_definitions_1.PolycephalusVariant.POLYCEPHALUS
        ],
        // 53
        [isaac_typescript_definitions_1.BossID.MR_FRED]: [isaac_typescript_definitions_1.EntityType.MR_FRED, 0],
        // 54
        [isaac_typescript_definitions_1.BossID.LAMB]: [isaac_typescript_definitions_1.EntityType.LAMB, isaac_typescript_definitions_1.LambVariant.LAMB],
        // 55
        [isaac_typescript_definitions_1.BossID.MEGA_SATAN]: [isaac_typescript_definitions_1.EntityType.MEGA_SATAN, isaac_typescript_definitions_1.MegaSatanVariant.MEGA_SATAN],
        // 56
        [isaac_typescript_definitions_1.BossID.GURGLING]: [isaac_typescript_definitions_1.EntityType.GURGLING, isaac_typescript_definitions_1.GurglingVariant.GURGLING_BOSS],
        // 57
        [isaac_typescript_definitions_1.BossID.STAIN]: [isaac_typescript_definitions_1.EntityType.STAIN, 0],
        // 58
        [isaac_typescript_definitions_1.BossID.BROWNIE]: [isaac_typescript_definitions_1.EntityType.BROWNIE, 0],
        // 59
        [isaac_typescript_definitions_1.BossID.FORSAKEN]: [isaac_typescript_definitions_1.EntityType.FORSAKEN, 0],
        // 60
        [isaac_typescript_definitions_1.BossID.LITTLE_HORN]: [isaac_typescript_definitions_1.EntityType.LITTLE_HORN, isaac_typescript_definitions_1.LittleHornVariant.LITTLE_HORN],
        // 61
        [isaac_typescript_definitions_1.BossID.RAG_MAN]: [isaac_typescript_definitions_1.EntityType.RAG_MAN, isaac_typescript_definitions_1.RagManVariant.RAG_MAN],
        // 62
        [isaac_typescript_definitions_1.BossID.ULTRA_GREED]: [isaac_typescript_definitions_1.EntityType.ULTRA_GREED, isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREED],
        // 63
        [isaac_typescript_definitions_1.BossID.HUSH]: [isaac_typescript_definitions_1.EntityType.HUSH, 0],
        // 64
        [isaac_typescript_definitions_1.BossID.DANGLE]: [isaac_typescript_definitions_1.EntityType.DINGLE, isaac_typescript_definitions_1.DingleVariant.DANGLE],
        // 65
        [isaac_typescript_definitions_1.BossID.TURDLING]: [isaac_typescript_definitions_1.EntityType.GURGLING, isaac_typescript_definitions_1.GurglingVariant.TURDLING],
        // 66
        [isaac_typescript_definitions_1.BossID.FRAIL]: [isaac_typescript_definitions_1.EntityType.PIN, isaac_typescript_definitions_1.PinVariant.FRAIL],
        // 67
        [isaac_typescript_definitions_1.BossID.RAG_MEGA]: [isaac_typescript_definitions_1.EntityType.RAG_MEGA, isaac_typescript_definitions_1.RagMegaVariant.RAG_MEGA],
        // 68
        [isaac_typescript_definitions_1.BossID.SISTERS_VIS]: [isaac_typescript_definitions_1.EntityType.SISTERS_VIS, 0],
        // 69
        [isaac_typescript_definitions_1.BossID.BIG_HORN]: [isaac_typescript_definitions_1.EntityType.BIG_HORN, isaac_typescript_definitions_1.BigHornVariant.BIG_HORN],
        // 70
        [isaac_typescript_definitions_1.BossID.DELIRIUM]: [isaac_typescript_definitions_1.EntityType.DELIRIUM, 0],
        // 71
        [isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER]: [
          isaac_typescript_definitions_1.EntityType.ULTRA_GREED,
          isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREEDIER
        ],
        // 72
        [isaac_typescript_definitions_1.BossID.MATRIARCH]: [isaac_typescript_definitions_1.EntityType.MATRIARCH, 0],
        // 73
        [isaac_typescript_definitions_1.BossID.PILE]: [isaac_typescript_definitions_1.EntityType.POLYCEPHALUS, isaac_typescript_definitions_1.PolycephalusVariant.PILE],
        // 74
        [isaac_typescript_definitions_1.BossID.REAP_CREEP]: [isaac_typescript_definitions_1.EntityType.REAP_CREEP, 0],
        // 75
        [isaac_typescript_definitions_1.BossID.LIL_BLUB]: [isaac_typescript_definitions_1.EntityType.LIL_BLUB, 0],
        // 76
        [isaac_typescript_definitions_1.BossID.WORMWOOD]: [isaac_typescript_definitions_1.EntityType.PIN, isaac_typescript_definitions_1.PinVariant.WORMWOOD],
        // 77
        [isaac_typescript_definitions_1.BossID.RAINMAKER]: [isaac_typescript_definitions_1.EntityType.RAINMAKER, 0],
        // 78
        [isaac_typescript_definitions_1.BossID.VISAGE]: [isaac_typescript_definitions_1.EntityType.VISAGE, 0],
        // 79
        [isaac_typescript_definitions_1.BossID.SIREN]: [isaac_typescript_definitions_1.EntityType.SIREN, 0],
        // 80
        [isaac_typescript_definitions_1.BossID.TUFF_TWINS]: [isaac_typescript_definitions_1.EntityType.LARRY_JR, isaac_typescript_definitions_1.LarryJrVariant.TUFF_TWIN],
        // 81
        [isaac_typescript_definitions_1.BossID.HERETIC]: [isaac_typescript_definitions_1.EntityType.HERETIC, 0],
        // 82
        [isaac_typescript_definitions_1.BossID.HORNFEL]: [isaac_typescript_definitions_1.EntityType.HORNFEL, 0],
        // 83
        [isaac_typescript_definitions_1.BossID.GREAT_GIDEON]: [isaac_typescript_definitions_1.EntityType.GREAT_GIDEON, 0],
        // 84
        [isaac_typescript_definitions_1.BossID.BABY_PLUM]: [isaac_typescript_definitions_1.EntityType.BABY_PLUM, 0],
        // 85
        [isaac_typescript_definitions_1.BossID.SCOURGE]: [isaac_typescript_definitions_1.EntityType.SCOURGE, 0],
        // 86
        [isaac_typescript_definitions_1.BossID.CHIMERA]: [isaac_typescript_definitions_1.EntityType.CHIMERA, 0],
        // 87
        [isaac_typescript_definitions_1.BossID.ROTGUT]: [isaac_typescript_definitions_1.EntityType.ROTGUT, 0],
        // 88
        [isaac_typescript_definitions_1.BossID.MOTHER]: [isaac_typescript_definitions_1.EntityType.MOTHER, isaac_typescript_definitions_1.MotherVariant.MOTHER_1],
        // 89
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM]: [isaac_typescript_definitions_1.EntityType.MOM, isaac_typescript_definitions_1.MomVariant.MOM],
        // 90
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART]: [
          isaac_typescript_definitions_1.EntityType.MOMS_HEART,
          isaac_typescript_definitions_1.MomsHeartVariant.MOMS_HEART
        ],
        // 91
        [isaac_typescript_definitions_1.BossID.MIN_MIN]: [isaac_typescript_definitions_1.EntityType.MIN_MIN, 0],
        // 92
        [isaac_typescript_definitions_1.BossID.CLOG]: [isaac_typescript_definitions_1.EntityType.CLOG, 0],
        // 93
        [isaac_typescript_definitions_1.BossID.SINGE]: [isaac_typescript_definitions_1.EntityType.SINGE, 0],
        // 94
        [isaac_typescript_definitions_1.BossID.BUMBINO]: [isaac_typescript_definitions_1.EntityType.BUMBINO, 0],
        // 95
        [isaac_typescript_definitions_1.BossID.COLOSTOMIA]: [isaac_typescript_definitions_1.EntityType.COLOSTOMIA, 0],
        // 96
        [isaac_typescript_definitions_1.BossID.SHELL]: [isaac_typescript_definitions_1.EntityType.LARRY_JR, isaac_typescript_definitions_1.LarryJrVariant.SHELL],
        // 97
        [isaac_typescript_definitions_1.BossID.TURDLET]: [isaac_typescript_definitions_1.EntityType.TURDLET, 0],
        // 98
        [isaac_typescript_definitions_1.BossID.RAGLICH]: [isaac_typescript_definitions_1.EntityType.RAGLICH, isaac_typescript_definitions_1.RaglichVariant.RAGLICH],
        // 99
        [isaac_typescript_definitions_1.BossID.DOGMA]: [isaac_typescript_definitions_1.EntityType.DOGMA, isaac_typescript_definitions_1.DogmaVariant.DOGMA_PHASE_1],
        // 100
        [isaac_typescript_definitions_1.BossID.BEAST]: [isaac_typescript_definitions_1.EntityType.BEAST, isaac_typescript_definitions_1.BeastVariant.BEAST],
        // 101
        [isaac_typescript_definitions_1.BossID.HORNY_BOYS]: [isaac_typescript_definitions_1.EntityType.HORNY_BOYS, 0],
        // 102
        [isaac_typescript_definitions_1.BossID.CLUTCH]: [isaac_typescript_definitions_1.EntityType.CLUTCH, 0]
      };
    }
  });

  // node_modules/isaacscript-common/dist/maps/entityTypeVariantToBossIDMap.js
  var require_entityTypeVariantToBossIDMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/entityTypeVariantToBossIDMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ENTITY_TYPE_VARIANT_TO_BOSS_ID_MAP = void 0;
      var bossIDToEntityTypeVariant_1 = require_bossIDToEntityTypeVariant();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.ENTITY_TYPE_VARIANT_TO_BOSS_ID_MAP = new ReadonlyMap_1.ReadonlyMap([...Object.entries(bossIDToEntityTypeVariant_1.BOSS_ID_TO_ENTITY_TYPE_VARIANT)].map(([bossIDRaw, entityTypeVariant]) => {
        const bossID = bossIDRaw;
        const [entityType, variant] = entityTypeVariant;
        const entityTypeVariantString = `${entityType}.${variant}`;
        return [entityTypeVariantString, bossID];
      }));
    }
  });

  // node_modules/isaacscript-common/dist/objects/bossNames.js
  var require_bossNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/bossNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BOSS_NAMES = exports2.DEFAULT_BOSS_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_BOSS_NAME = "Unknown";
      exports2.BOSS_NAMES = {
        [isaac_typescript_definitions_1.BossID.MONSTRO]: "Monstro",
        [isaac_typescript_definitions_1.BossID.LARRY_JR]: "Larry Jr.",
        [isaac_typescript_definitions_1.BossID.CHUB]: "Chub",
        [isaac_typescript_definitions_1.BossID.GURDY]: "Gurdy",
        [isaac_typescript_definitions_1.BossID.MONSTRO_2]: "Monstro II",
        [isaac_typescript_definitions_1.BossID.MOM]: "Mom",
        [isaac_typescript_definitions_1.BossID.SCOLEX]: "Scolex",
        [isaac_typescript_definitions_1.BossID.MOMS_HEART]: "Mom's Heart",
        [isaac_typescript_definitions_1.BossID.FAMINE]: "Famine",
        [isaac_typescript_definitions_1.BossID.PESTILENCE]: "Pestilence",
        [isaac_typescript_definitions_1.BossID.WAR]: "War",
        [isaac_typescript_definitions_1.BossID.DEATH]: "Death",
        [isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES]: "Duke of Flies",
        [isaac_typescript_definitions_1.BossID.PEEP]: "Peep",
        [isaac_typescript_definitions_1.BossID.LOKI]: "Loki",
        [isaac_typescript_definitions_1.BossID.BLASTOCYST]: "Blastocyst",
        [isaac_typescript_definitions_1.BossID.GEMINI]: "Gemini",
        [isaac_typescript_definitions_1.BossID.FISTULA]: "Fistula",
        [isaac_typescript_definitions_1.BossID.GISH]: "Gish",
        [isaac_typescript_definitions_1.BossID.STEVEN]: "Steven",
        [isaac_typescript_definitions_1.BossID.CHAD]: "C.H.A.D.",
        [isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN]: "Headless Horseman",
        [isaac_typescript_definitions_1.BossID.FALLEN]: "The Fallen",
        [isaac_typescript_definitions_1.BossID.SATAN]: "Satan",
        [isaac_typescript_definitions_1.BossID.IT_LIVES]: "It Lives!",
        [isaac_typescript_definitions_1.BossID.HOLLOW]: "The Hollow",
        [isaac_typescript_definitions_1.BossID.CARRION_QUEEN]: "The Carrion Queen",
        [isaac_typescript_definitions_1.BossID.GURDY_JR]: "Gurdy Jr.",
        [isaac_typescript_definitions_1.BossID.HUSK]: "The Husk",
        [isaac_typescript_definitions_1.BossID.BLOAT]: "The Bloat",
        [isaac_typescript_definitions_1.BossID.LOKII]: "Lokii",
        [isaac_typescript_definitions_1.BossID.BLIGHTED_OVUM]: "The Blighted Ovum",
        [isaac_typescript_definitions_1.BossID.TERATOMA]: "Teratoma",
        [isaac_typescript_definitions_1.BossID.WIDOW]: "The Widow",
        [isaac_typescript_definitions_1.BossID.MASK_OF_INFAMY]: "Mask of Infamy",
        [isaac_typescript_definitions_1.BossID.WRETCHED]: "The Wretched",
        [isaac_typescript_definitions_1.BossID.PIN]: "Pin",
        [isaac_typescript_definitions_1.BossID.CONQUEST]: "Conquest",
        [isaac_typescript_definitions_1.BossID.ISAAC]: "Isaac",
        [isaac_typescript_definitions_1.BossID.BLUE_BABY]: "Blue Baby",
        [isaac_typescript_definitions_1.BossID.DADDY_LONG_LEGS]: "Daddy Long Legs",
        [isaac_typescript_definitions_1.BossID.TRIACHNID]: "Triachnid",
        [isaac_typescript_definitions_1.BossID.HAUNT]: "The Haunt",
        [isaac_typescript_definitions_1.BossID.DINGLE]: "Dingle",
        [isaac_typescript_definitions_1.BossID.MEGA_MAW]: "Mega Maw",
        // "Mega Maw II" is changed to "The Gate".
        [isaac_typescript_definitions_1.BossID.GATE]: "The Gate",
        [isaac_typescript_definitions_1.BossID.MEGA_FATTY]: "Mega Fatty",
        // "Mega Fatty II" is changed to "The Cage".
        [isaac_typescript_definitions_1.BossID.CAGE]: "The Cage",
        [isaac_typescript_definitions_1.BossID.MAMA_GURDY]: "Mega Gurdy",
        [isaac_typescript_definitions_1.BossID.DARK_ONE]: "Dark One",
        // "Dark One II" is changed to "The Adversary".
        [isaac_typescript_definitions_1.BossID.ADVERSARY]: "The Adversary",
        [isaac_typescript_definitions_1.BossID.POLYCEPHALUS]: "Polycephalus",
        // "Mega Fred" is changed to "Mr. Fred".
        [isaac_typescript_definitions_1.BossID.MR_FRED]: "Mr. Fred",
        [isaac_typescript_definitions_1.BossID.LAMB]: "The Lamb",
        [isaac_typescript_definitions_1.BossID.MEGA_SATAN]: "Mega Satan",
        [isaac_typescript_definitions_1.BossID.GURGLING]: "Gurglings",
        [isaac_typescript_definitions_1.BossID.STAIN]: "The Stain",
        [isaac_typescript_definitions_1.BossID.BROWNIE]: "Brownie",
        [isaac_typescript_definitions_1.BossID.FORSAKEN]: "The Forsaken",
        [isaac_typescript_definitions_1.BossID.LITTLE_HORN]: "Little Horn",
        [isaac_typescript_definitions_1.BossID.RAG_MAN]: "Rag Man",
        [isaac_typescript_definitions_1.BossID.ULTRA_GREED]: "Ultra Greed",
        [isaac_typescript_definitions_1.BossID.HUSH]: "Hush",
        [isaac_typescript_definitions_1.BossID.DANGLE]: "Dangle",
        [isaac_typescript_definitions_1.BossID.TURDLING]: "Turdling",
        [isaac_typescript_definitions_1.BossID.FRAIL]: "The Frail",
        [isaac_typescript_definitions_1.BossID.RAG_MEGA]: "Rag Mega",
        [isaac_typescript_definitions_1.BossID.SISTERS_VIS]: "Sisters Vis",
        [isaac_typescript_definitions_1.BossID.BIG_HORN]: "Big Horn",
        [isaac_typescript_definitions_1.BossID.DELIRIUM]: "Delirium",
        [isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER]: "Ultra Greedier",
        [isaac_typescript_definitions_1.BossID.MATRIARCH]: "The Matriarch",
        [isaac_typescript_definitions_1.BossID.PILE]: "The Pile",
        [isaac_typescript_definitions_1.BossID.REAP_CREEP]: "Reap Creep",
        // "Beelzeblub" is changed to "Lil Blub".
        [isaac_typescript_definitions_1.BossID.LIL_BLUB]: "Lil Blub",
        [isaac_typescript_definitions_1.BossID.WORMWOOD]: "Wormwood",
        [isaac_typescript_definitions_1.BossID.RAINMAKER]: "The Rainmaker",
        [isaac_typescript_definitions_1.BossID.VISAGE]: "The Visage",
        [isaac_typescript_definitions_1.BossID.SIREN]: "The Siren",
        [isaac_typescript_definitions_1.BossID.TUFF_TWINS]: "Tuff Twins",
        [isaac_typescript_definitions_1.BossID.HERETIC]: "The Heretic",
        [isaac_typescript_definitions_1.BossID.HORNFEL]: "Hornfel",
        [isaac_typescript_definitions_1.BossID.GREAT_GIDEON]: "Great Gideon",
        [isaac_typescript_definitions_1.BossID.BABY_PLUM]: "Baby Plum",
        [isaac_typescript_definitions_1.BossID.SCOURGE]: "The Scourge",
        [isaac_typescript_definitions_1.BossID.CHIMERA]: "Chimera",
        [isaac_typescript_definitions_1.BossID.ROTGUT]: "Rotgut",
        [isaac_typescript_definitions_1.BossID.MOTHER]: "Mother",
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM]: "Mom (Mausoleum)",
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART]: "Mom's Heart (Mausoleum)",
        [isaac_typescript_definitions_1.BossID.MIN_MIN]: "Min-Min",
        [isaac_typescript_definitions_1.BossID.CLOG]: "Clog",
        [isaac_typescript_definitions_1.BossID.SINGE]: "Singe",
        [isaac_typescript_definitions_1.BossID.BUMBINO]: "Bumbino",
        [isaac_typescript_definitions_1.BossID.COLOSTOMIA]: "Colostomia",
        [isaac_typescript_definitions_1.BossID.SHELL]: "The Shell",
        [isaac_typescript_definitions_1.BossID.TURDLET]: "Turdlet",
        [isaac_typescript_definitions_1.BossID.RAGLICH]: "Raglich",
        [isaac_typescript_definitions_1.BossID.DOGMA]: "Dogma",
        [isaac_typescript_definitions_1.BossID.BEAST]: "The Beast",
        [isaac_typescript_definitions_1.BossID.HORNY_BOYS]: "Horny Boys",
        [isaac_typescript_definitions_1.BossID.CLUTCH]: "Clutch"
        // 102
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/storyBosses.js
  var require_storyBosses = __commonJS({
    "node_modules/isaacscript-common/dist/functions/storyBosses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isStoryBossID = exports2.isStoryBoss = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      var STORY_BOSS_IDS = [
        isaac_typescript_definitions_1.BossID.MOM,
        isaac_typescript_definitions_1.BossID.MOMS_HEART,
        isaac_typescript_definitions_1.BossID.SATAN,
        isaac_typescript_definitions_1.BossID.IT_LIVES,
        isaac_typescript_definitions_1.BossID.ISAAC,
        isaac_typescript_definitions_1.BossID.BLUE_BABY,
        isaac_typescript_definitions_1.BossID.LAMB,
        isaac_typescript_definitions_1.BossID.MEGA_SATAN,
        isaac_typescript_definitions_1.BossID.ULTRA_GREED,
        isaac_typescript_definitions_1.BossID.HUSH,
        isaac_typescript_definitions_1.BossID.DELIRIUM,
        isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER,
        isaac_typescript_definitions_1.BossID.MOTHER,
        isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM,
        isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART,
        isaac_typescript_definitions_1.BossID.DOGMA,
        isaac_typescript_definitions_1.BossID.BEAST
        // 100
      ];
      var STORY_BOSS_ENTITY_TYPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.EntityType.MOM,
        isaac_typescript_definitions_1.EntityType.MOMS_HEART,
        isaac_typescript_definitions_1.EntityType.SATAN,
        // - It Lives is a variant of Mom's Heart.
        isaac_typescript_definitions_1.EntityType.ISAAC,
        // - Blue Baby is a variant of Isaac.
        isaac_typescript_definitions_1.EntityType.LAMB,
        isaac_typescript_definitions_1.EntityType.MEGA_SATAN,
        isaac_typescript_definitions_1.EntityType.MEGA_SATAN_2,
        isaac_typescript_definitions_1.EntityType.ULTRA_GREED,
        isaac_typescript_definitions_1.EntityType.HUSH,
        isaac_typescript_definitions_1.EntityType.DELIRIUM,
        // - Ultra Greedier is a variant of Ultra Greed.
        isaac_typescript_definitions_1.EntityType.MOTHER,
        // - Mausoleum Mom is a sub-type of Mom.
        // - Mausoleum Mom's Heart is a sub-type of Mom's Heart.
        isaac_typescript_definitions_1.EntityType.DOGMA,
        isaac_typescript_definitions_1.EntityType.BEAST
        // 951
      ]);
      var STORY_BOSS_IDS_SET = new ReadonlySet_1.ReadonlySet(STORY_BOSS_IDS);
      function isStoryBoss(entityType) {
        return STORY_BOSS_ENTITY_TYPES_SET.has(entityType);
      }
      exports2.isStoryBoss = isStoryBoss;
      function isStoryBossID2(bossID) {
        return STORY_BOSS_IDS_SET.has(bossID);
      }
      exports2.isStoryBossID = isStoryBossID2;
    }
  });

  // node_modules/isaacscript-common/dist/sets/bossSets.js
  var require_bossSets = __commonJS({
    "node_modules/isaacscript-common/dist/sets/bossSets.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BOSS_ID_TO_STAGE_IDS = exports2.NON_STORY_BOSSES = exports2.ALL_BOSSES = exports2.STAGE_TO_COMBINED_BOSS_SET_MAP = exports2.STAGE_ID_TO_BOSS_IDS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var storyBosses_1 = require_storyBosses();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var ReadonlySet_1 = require_ReadonlySet();
      var BASEMENT_BOSSES = [
        isaac_typescript_definitions_1.BossID.MONSTRO,
        isaac_typescript_definitions_1.BossID.LARRY_JR,
        isaac_typescript_definitions_1.BossID.FAMINE,
        isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES,
        isaac_typescript_definitions_1.BossID.GEMINI,
        isaac_typescript_definitions_1.BossID.STEVEN,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.DINGLE,
        isaac_typescript_definitions_1.BossID.GURGLING,
        isaac_typescript_definitions_1.BossID.LITTLE_HORN,
        // - `BossID.RAG_MAN` (61) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.DANGLE,
        isaac_typescript_definitions_1.BossID.TURDLING,
        isaac_typescript_definitions_1.BossID.BABY_PLUM
        // 84 (added in Repentance)
      ];
      var CELLAR_BOSSES = [
        isaac_typescript_definitions_1.BossID.FAMINE,
        isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES,
        // - `BossID.FISTULA` (18) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.BLIGHTED_OVUM,
        isaac_typescript_definitions_1.BossID.WIDOW,
        isaac_typescript_definitions_1.BossID.PIN,
        isaac_typescript_definitions_1.BossID.HAUNT,
        isaac_typescript_definitions_1.BossID.LITTLE_HORN,
        isaac_typescript_definitions_1.BossID.RAG_MAN,
        isaac_typescript_definitions_1.BossID.BABY_PLUM
        // 84 (added in Repentance)
      ];
      var BURNING_BASEMENT_BOSSES = [
        isaac_typescript_definitions_1.BossID.MONSTRO,
        isaac_typescript_definitions_1.BossID.LARRY_JR,
        isaac_typescript_definitions_1.BossID.FAMINE,
        isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES,
        isaac_typescript_definitions_1.BossID.GEMINI,
        isaac_typescript_definitions_1.BossID.STEVEN,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        // - `BossID.HAUNT` (43) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.DINGLE,
        isaac_typescript_definitions_1.BossID.GURGLING,
        isaac_typescript_definitions_1.BossID.LITTLE_HORN,
        isaac_typescript_definitions_1.BossID.RAG_MAN,
        isaac_typescript_definitions_1.BossID.DANGLE,
        isaac_typescript_definitions_1.BossID.TURDLING,
        isaac_typescript_definitions_1.BossID.BABY_PLUM
        // 84 (added in Repentance)
      ];
      var DOWNPOUR_BOSSES = [
        isaac_typescript_definitions_1.BossID.LIL_BLUB,
        isaac_typescript_definitions_1.BossID.WORMWOOD,
        isaac_typescript_definitions_1.BossID.RAINMAKER,
        isaac_typescript_definitions_1.BossID.MIN_MIN
        // 91
      ];
      var DROSS_BOSSES = [
        isaac_typescript_definitions_1.BossID.LIL_BLUB,
        isaac_typescript_definitions_1.BossID.WORMWOOD,
        isaac_typescript_definitions_1.BossID.CLOG,
        isaac_typescript_definitions_1.BossID.COLOSTOMIA,
        isaac_typescript_definitions_1.BossID.TURDLET
        // 97
      ];
      var ALL_BASEMENT_BOSSES_SET = new ReadonlySet_1.ReadonlySet([
        ...BASEMENT_BOSSES,
        ...CELLAR_BOSSES,
        ...BURNING_BASEMENT_BOSSES,
        ...DOWNPOUR_BOSSES,
        ...DROSS_BOSSES
      ]);
      var CAVES_BOSSES = [
        isaac_typescript_definitions_1.BossID.CHUB,
        isaac_typescript_definitions_1.BossID.GURDY,
        isaac_typescript_definitions_1.BossID.PESTILENCE,
        isaac_typescript_definitions_1.BossID.PEEP,
        isaac_typescript_definitions_1.BossID.FISTULA,
        isaac_typescript_definitions_1.BossID.CHAD,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.GURDY_JR,
        isaac_typescript_definitions_1.BossID.MEGA_FATTY,
        isaac_typescript_definitions_1.BossID.MEGA_MAW,
        // - `BossID.DARK_ONE` (50) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.STAIN,
        // - `BossID.FORSAKEN` (59) was removed in Repentance.
        // - `BossID.FRAIL` (66) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.RAG_MEGA,
        isaac_typescript_definitions_1.BossID.BIG_HORN,
        isaac_typescript_definitions_1.BossID.BUMBINO
        // 94 (added in Repentance)
      ];
      var CATACOMBS_BOSSES = [
        isaac_typescript_definitions_1.BossID.PESTILENCE,
        isaac_typescript_definitions_1.BossID.PEEP,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.HOLLOW,
        isaac_typescript_definitions_1.BossID.CARRION_QUEEN,
        isaac_typescript_definitions_1.BossID.GURDY_JR,
        isaac_typescript_definitions_1.BossID.HUSK,
        isaac_typescript_definitions_1.BossID.WRETCHED,
        isaac_typescript_definitions_1.BossID.DARK_ONE,
        isaac_typescript_definitions_1.BossID.POLYCEPHALUS,
        // - `BossID.STAIN` (57) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.FORSAKEN,
        isaac_typescript_definitions_1.BossID.FRAIL,
        isaac_typescript_definitions_1.BossID.RAG_MEGA,
        isaac_typescript_definitions_1.BossID.BIG_HORN,
        isaac_typescript_definitions_1.BossID.BUMBINO
        // 94 (added in Repentance)
      ];
      var FLOODED_CAVES_BOSSES = [
        isaac_typescript_definitions_1.BossID.CHUB,
        isaac_typescript_definitions_1.BossID.GURDY,
        isaac_typescript_definitions_1.BossID.PESTILENCE,
        isaac_typescript_definitions_1.BossID.PEEP,
        isaac_typescript_definitions_1.BossID.FISTULA,
        isaac_typescript_definitions_1.BossID.CHAD,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.GURDY_JR,
        isaac_typescript_definitions_1.BossID.MEGA_MAW,
        isaac_typescript_definitions_1.BossID.MEGA_FATTY,
        // - `BossID.DARK_ONE` (50) was removed in Repentance.
        // - `BossID.POLYCEPHALUS` (52) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.STAIN,
        isaac_typescript_definitions_1.BossID.FORSAKEN,
        isaac_typescript_definitions_1.BossID.FRAIL,
        isaac_typescript_definitions_1.BossID.RAG_MEGA,
        isaac_typescript_definitions_1.BossID.BIG_HORN,
        isaac_typescript_definitions_1.BossID.BUMBINO
        // 94 (added in Repentance)
      ];
      var MINES_BOSSES = [
        isaac_typescript_definitions_1.BossID.REAP_CREEP,
        isaac_typescript_definitions_1.BossID.TUFF_TWINS,
        isaac_typescript_definitions_1.BossID.HORNFEL,
        isaac_typescript_definitions_1.BossID.GREAT_GIDEON
        // 83
      ];
      var ASHPIT_BOSSES = [
        isaac_typescript_definitions_1.BossID.PILE,
        isaac_typescript_definitions_1.BossID.GREAT_GIDEON,
        isaac_typescript_definitions_1.BossID.SINGE,
        isaac_typescript_definitions_1.BossID.SHELL,
        isaac_typescript_definitions_1.BossID.CLUTCH
        // 102
      ];
      var ALL_CAVES_BOSSES_SET = new ReadonlySet_1.ReadonlySet([
        ...CAVES_BOSSES,
        ...CATACOMBS_BOSSES,
        ...FLOODED_CAVES_BOSSES,
        ...MINES_BOSSES,
        ...ASHPIT_BOSSES
      ]);
      var DEPTHS_BOSSES = [
        isaac_typescript_definitions_1.BossID.MONSTRO_2,
        isaac_typescript_definitions_1.BossID.MOM,
        isaac_typescript_definitions_1.BossID.WAR,
        isaac_typescript_definitions_1.BossID.LOKI,
        isaac_typescript_definitions_1.BossID.GISH,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.GATE,
        isaac_typescript_definitions_1.BossID.CAGE,
        // - `BossID.ADVERSARY` (51) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.BROWNIE,
        isaac_typescript_definitions_1.BossID.SISTERS_VIS,
        isaac_typescript_definitions_1.BossID.REAP_CREEP
        // 74 (added in Repentance)
      ];
      var NECROPOLIS_BOSSES = [
        isaac_typescript_definitions_1.BossID.MOM,
        isaac_typescript_definitions_1.BossID.WAR,
        isaac_typescript_definitions_1.BossID.LOKI,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.BLOAT,
        isaac_typescript_definitions_1.BossID.MASK_OF_INFAMY,
        // - `BossID.GATE` (46) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.ADVERSARY,
        isaac_typescript_definitions_1.BossID.BROWNIE,
        isaac_typescript_definitions_1.BossID.SISTERS_VIS,
        isaac_typescript_definitions_1.BossID.PILE
        // 73 (added in Repentance)
      ];
      var DANK_DEPTHS_BOSSES = [
        isaac_typescript_definitions_1.BossID.MONSTRO_2,
        isaac_typescript_definitions_1.BossID.MOM,
        isaac_typescript_definitions_1.BossID.WAR,
        isaac_typescript_definitions_1.BossID.LOKI,
        isaac_typescript_definitions_1.BossID.GISH,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.GATE,
        isaac_typescript_definitions_1.BossID.CAGE,
        // - `BossID.ADVERSARY` (51) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.BROWNIE,
        isaac_typescript_definitions_1.BossID.SISTERS_VIS,
        isaac_typescript_definitions_1.BossID.REAP_CREEP
        // 74 (added in Repentance)
      ];
      var MAUSOLEUM_BOSSES = [
        isaac_typescript_definitions_1.BossID.SIREN,
        isaac_typescript_definitions_1.BossID.HERETIC,
        isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM
        // 89
      ];
      var GEHENNA_BOSSES = [
        isaac_typescript_definitions_1.BossID.VISAGE,
        isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM,
        isaac_typescript_definitions_1.BossID.HORNY_BOYS
        // 101
      ];
      var ALL_DEPTHS_BOSSES_SET = new ReadonlySet_1.ReadonlySet([
        ...DEPTHS_BOSSES,
        ...NECROPOLIS_BOSSES,
        ...DANK_DEPTHS_BOSSES,
        ...MAUSOLEUM_BOSSES,
        ...GEHENNA_BOSSES
      ]);
      var WOMB_BOSSES = [
        isaac_typescript_definitions_1.BossID.SCOLEX,
        isaac_typescript_definitions_1.BossID.MOMS_HEART,
        isaac_typescript_definitions_1.BossID.DEATH,
        isaac_typescript_definitions_1.BossID.BLASTOCYST,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.IT_LIVES,
        // - `BossID.BLOAT` (30) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.LOKII,
        // - `BossID.TERATOMA` (33) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.CONQUEST,
        // - `BossID.DADDY_LONG_LEGS` (41) was removed in Repentance.
        // - `BossID.TRIACHNID` (42) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.MAMA_GURDY,
        isaac_typescript_definitions_1.BossID.MR_FRED,
        // - `BossID.SISTERS_VIS` (68) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.MATRIARCH
        // 72
      ];
      var UTERO_BOSSES = [
        isaac_typescript_definitions_1.BossID.MOMS_HEART,
        isaac_typescript_definitions_1.BossID.DEATH,
        // - `BossID.BLASTOCYST` (16) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.IT_LIVES,
        isaac_typescript_definitions_1.BossID.BLOAT,
        isaac_typescript_definitions_1.BossID.LOKII,
        isaac_typescript_definitions_1.BossID.TERATOMA,
        isaac_typescript_definitions_1.BossID.CONQUEST,
        isaac_typescript_definitions_1.BossID.DADDY_LONG_LEGS,
        isaac_typescript_definitions_1.BossID.TRIACHNID
        // 42
        // - `BossID.MAMA_GURDY` (49) was removed in Repentance.
        // - `BossID.MR_FRED` (52) was removed in Repentance.
        // - `BossID.SISTERS_VIS` (68) was removed in Repentance.
        // - `BossID.MATRIARCH` (72) was removed in Repentance.
      ];
      var SCARRED_WOMB_BOSSES = [
        isaac_typescript_definitions_1.BossID.SCOLEX,
        isaac_typescript_definitions_1.BossID.MOMS_HEART,
        isaac_typescript_definitions_1.BossID.DEATH,
        isaac_typescript_definitions_1.BossID.BLASTOCYST,
        isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN,
        isaac_typescript_definitions_1.BossID.FALLEN,
        isaac_typescript_definitions_1.BossID.IT_LIVES,
        // - `BossID.BLOAT` (30) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.LOKII,
        // - `BossID.TERATOMA` (33) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.CONQUEST,
        // - `BossID.DADDY_LONG_LEGS` (41) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.TRIACHNID,
        isaac_typescript_definitions_1.BossID.MAMA_GURDY,
        isaac_typescript_definitions_1.BossID.MR_FRED,
        // - `BossID.SISTERS_VIS` (68) was removed in Repentance.
        isaac_typescript_definitions_1.BossID.MATRIARCH
        // 72
      ];
      var CORPSE_BOSSES = [
        isaac_typescript_definitions_1.BossID.SCOURGE,
        isaac_typescript_definitions_1.BossID.CHIMERA,
        isaac_typescript_definitions_1.BossID.ROTGUT,
        isaac_typescript_definitions_1.BossID.MOTHER
        // 88
      ];
      var ALL_WOMB_BOSSES_SET = new ReadonlySet_1.ReadonlySet([
        ...WOMB_BOSSES,
        ...UTERO_BOSSES,
        ...SCARRED_WOMB_BOSSES,
        ...CORPSE_BOSSES
      ]);
      var BLUE_WOMB_BOSSES = [
        isaac_typescript_definitions_1.BossID.HUSH
        // 63
      ];
      var ALL_BLUE_WOMB_BOSSES_SET = new ReadonlySet_1.ReadonlySet([...BLUE_WOMB_BOSSES]);
      var SHEOL_BOSSES = [
        isaac_typescript_definitions_1.BossID.SATAN
        // 24
      ];
      var CATHEDRAL_BOSSES = [
        isaac_typescript_definitions_1.BossID.ISAAC
        // 39
      ];
      var ALL_STAGE_10_BOSSES_SET = new ReadonlySet_1.ReadonlySet([
        ...SHEOL_BOSSES,
        ...CATHEDRAL_BOSSES
      ]);
      var DARK_ROOM_BOSSES = [
        isaac_typescript_definitions_1.BossID.LAMB,
        isaac_typescript_definitions_1.BossID.MEGA_SATAN
        // 55
      ];
      var CHEST_BOSSES = [
        isaac_typescript_definitions_1.BossID.BLUE_BABY,
        isaac_typescript_definitions_1.BossID.MEGA_SATAN
        // 55
      ];
      var ALL_STAGE_11_BOSSES_SET = new ReadonlySet_1.ReadonlySet([
        ...DARK_ROOM_BOSSES,
        ...CHEST_BOSSES
      ]);
      var VOID_BOSSES = [
        isaac_typescript_definitions_1.BossID.DELIRIUM
        // 70
      ];
      var ALL_VOID_BOSSES_SET = new ReadonlySet_1.ReadonlySet([...VOID_BOSSES]);
      var HOME_BOSSES = [
        isaac_typescript_definitions_1.BossID.DOGMA,
        isaac_typescript_definitions_1.BossID.BEAST
        // 100
      ];
      var ALL_HOME_BOSSES_SET = new ReadonlySet_1.ReadonlySet([...HOME_BOSSES]);
      exports2.STAGE_ID_TO_BOSS_IDS = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.StageID.BASEMENT, BASEMENT_BOSSES],
        [isaac_typescript_definitions_1.StageID.CELLAR, CELLAR_BOSSES],
        [isaac_typescript_definitions_1.StageID.BURNING_BASEMENT, BURNING_BASEMENT_BOSSES],
        [isaac_typescript_definitions_1.StageID.DOWNPOUR, DOWNPOUR_BOSSES],
        [isaac_typescript_definitions_1.StageID.DROSS, DROSS_BOSSES],
        [isaac_typescript_definitions_1.StageID.CAVES, CAVES_BOSSES],
        [isaac_typescript_definitions_1.StageID.CATACOMBS, CATACOMBS_BOSSES],
        [isaac_typescript_definitions_1.StageID.FLOODED_CAVES, FLOODED_CAVES_BOSSES],
        [isaac_typescript_definitions_1.StageID.MINES, MINES_BOSSES],
        [isaac_typescript_definitions_1.StageID.ASHPIT, ASHPIT_BOSSES],
        [isaac_typescript_definitions_1.StageID.DEPTHS, DEPTHS_BOSSES],
        [isaac_typescript_definitions_1.StageID.NECROPOLIS, NECROPOLIS_BOSSES],
        [isaac_typescript_definitions_1.StageID.DANK_DEPTHS, DANK_DEPTHS_BOSSES],
        [isaac_typescript_definitions_1.StageID.MAUSOLEUM, MAUSOLEUM_BOSSES],
        [isaac_typescript_definitions_1.StageID.GEHENNA, GEHENNA_BOSSES],
        [isaac_typescript_definitions_1.StageID.WOMB, WOMB_BOSSES],
        [isaac_typescript_definitions_1.StageID.UTERO, UTERO_BOSSES],
        [isaac_typescript_definitions_1.StageID.SCARRED_WOMB, SCARRED_WOMB_BOSSES],
        [isaac_typescript_definitions_1.StageID.CORPSE, CORPSE_BOSSES],
        [isaac_typescript_definitions_1.StageID.BLUE_WOMB, BLUE_WOMB_BOSSES],
        [isaac_typescript_definitions_1.StageID.SHEOL, SHEOL_BOSSES],
        [isaac_typescript_definitions_1.StageID.CATHEDRAL, CATHEDRAL_BOSSES],
        [isaac_typescript_definitions_1.StageID.DARK_ROOM, DARK_ROOM_BOSSES],
        [isaac_typescript_definitions_1.StageID.CHEST, CHEST_BOSSES],
        [isaac_typescript_definitions_1.StageID.VOID, VOID_BOSSES],
        [isaac_typescript_definitions_1.StageID.HOME, HOME_BOSSES]
        // 35
      ]);
      exports2.STAGE_TO_COMBINED_BOSS_SET_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_1, ALL_BASEMENT_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.BASEMENT_2, ALL_BASEMENT_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.CAVES_1, ALL_CAVES_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.CAVES_2, ALL_CAVES_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_1, ALL_DEPTHS_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.DEPTHS_2, ALL_DEPTHS_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.WOMB_1, ALL_WOMB_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.WOMB_2, ALL_WOMB_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.BLUE_WOMB, ALL_BLUE_WOMB_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL, ALL_STAGE_10_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST, ALL_STAGE_11_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.VOID, ALL_VOID_BOSSES_SET],
        [isaac_typescript_definitions_1.LevelStage.HOME, ALL_HOME_BOSSES_SET]
        // 13
      ]);
      exports2.ALL_BOSSES = cachedEnumValues_1.BOSS_ID_VALUES.filter((bossID) => bossID !== isaac_typescript_definitions_1.BossID.RAGLICH);
      exports2.NON_STORY_BOSSES = exports2.ALL_BOSSES.filter((bossID) => !(0, storyBosses_1.isStoryBossID)(bossID));
      exports2.BOSS_ID_TO_STAGE_IDS = (() => {
        const partialBossIDsToStageIDs = {};
        for (const bossID of cachedEnumValues_1.BOSS_ID_VALUES) {
          const stageIDs = /* @__PURE__ */ new Set();
          for (const [stageID, bossIDs] of exports2.STAGE_ID_TO_BOSS_IDS) {
            if (bossIDs.includes(bossID)) {
              stageIDs.add(stageID);
            }
          }
          partialBossIDsToStageIDs[bossID] = stageIDs;
        }
        const bossIDsToStageIDs = partialBossIDsToStageIDs;
        bossIDsToStageIDs[isaac_typescript_definitions_1.BossID.ULTRA_GREED].add(isaac_typescript_definitions_1.StageID.ULTRA_GREED);
        bossIDsToStageIDs[isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER].add(isaac_typescript_definitions_1.StageID.ULTRA_GREED);
        bossIDsToStageIDs[isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART].add(isaac_typescript_definitions_1.StageID.MAUSOLEUM);
        bossIDsToStageIDs[isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART].add(isaac_typescript_definitions_1.StageID.GEHENNA);
        return bossIDsToStageIDs;
      })();
    }
  });

  // node_modules/isaacscript-common/dist/sets/repentanceBossIDsSet.js
  var require_repentanceBossIDsSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/repentanceBossIDsSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.REPENTANCE_ONLY_BOSS_IDS_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.REPENTANCE_ONLY_BOSS_IDS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.BossID.LIL_BLUB,
        isaac_typescript_definitions_1.BossID.WORMWOOD,
        isaac_typescript_definitions_1.BossID.RAINMAKER,
        isaac_typescript_definitions_1.BossID.VISAGE,
        isaac_typescript_definitions_1.BossID.SIREN,
        isaac_typescript_definitions_1.BossID.TUFF_TWINS,
        isaac_typescript_definitions_1.BossID.HERETIC,
        isaac_typescript_definitions_1.BossID.HORNFEL,
        isaac_typescript_definitions_1.BossID.GREAT_GIDEON,
        isaac_typescript_definitions_1.BossID.SCOURGE,
        isaac_typescript_definitions_1.BossID.CHIMERA,
        isaac_typescript_definitions_1.BossID.ROTGUT,
        isaac_typescript_definitions_1.BossID.MOTHER,
        isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM,
        isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART,
        isaac_typescript_definitions_1.BossID.MIN_MIN,
        isaac_typescript_definitions_1.BossID.CLOG,
        isaac_typescript_definitions_1.BossID.SINGE,
        isaac_typescript_definitions_1.BossID.COLOSTOMIA,
        isaac_typescript_definitions_1.BossID.SHELL,
        isaac_typescript_definitions_1.BossID.TURDLET,
        isaac_typescript_definitions_1.BossID.HORNY_BOYS,
        isaac_typescript_definitions_1.BossID.CLUTCH
        // 102
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/sets/sinEntityTypesSet.js
  var require_sinEntityTypesSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/sinEntityTypesSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SIN_ENTITY_TYPES_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.SIN_ENTITY_TYPES_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.EntityType.SLOTH,
        isaac_typescript_definitions_1.EntityType.LUST,
        isaac_typescript_definitions_1.EntityType.WRATH,
        isaac_typescript_definitions_1.EntityType.GLUTTONY,
        isaac_typescript_definitions_1.EntityType.GREED,
        isaac_typescript_definitions_1.EntityType.ENVY,
        isaac_typescript_definitions_1.EntityType.PRIDE
        // 52
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/npcs.js
  var require_npcs = __commonJS({
    "node_modules/isaacscript-common/dist/functions/npcs.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isRaglingDeathPatch = exports2.isDyingEggyWithNoSpidersLeft = exports2.isDyingDump = exports2.isDaddyLongLegsChildStompEntity = exports2.isAliveExceptionNPC = exports2.getAliveNPCs = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var ReadonlySet_1 = require_ReadonlySet();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var NON_ALIVE_NPCS_TYPE_VARIANT = new ReadonlySet_1.ReadonlySet([
        `${isaac_typescript_definitions_1.EntityType.VIS}.${isaac_typescript_definitions_1.VisVariant.CHUBBER_PROJECTILE}`,
        `${isaac_typescript_definitions_1.EntityType.DEATH}.${isaac_typescript_definitions_1.DeathVariant.DEATH_SCYTHE}`,
        `${isaac_typescript_definitions_1.EntityType.PEEP}.${isaac_typescript_definitions_1.PeepVariant.PEEP_EYE}`,
        `${isaac_typescript_definitions_1.EntityType.PEEP}.${isaac_typescript_definitions_1.PeepVariant.BLOAT_EYE}`,
        `${isaac_typescript_definitions_1.EntityType.BEGOTTEN}.${isaac_typescript_definitions_1.BegottenVariant.BEGOTTEN_CHAIN}`,
        `${isaac_typescript_definitions_1.EntityType.MAMA_GURDY}.${isaac_typescript_definitions_1.MamaGurdyVariant.LEFT_HAND}`,
        `${isaac_typescript_definitions_1.EntityType.MAMA_GURDY}.${isaac_typescript_definitions_1.MamaGurdyVariant.RIGHT_HAND}`,
        `${isaac_typescript_definitions_1.EntityType.BIG_HORN}.${isaac_typescript_definitions_1.BigHornVariant.SMALL_HOLE}`,
        `${isaac_typescript_definitions_1.EntityType.BIG_HORN}.${isaac_typescript_definitions_1.BigHornVariant.BIG_HOLE}`,
        `${isaac_typescript_definitions_1.EntityType.DARK_ESAU}.${isaac_typescript_definitions_1.DarkEsauVariant.DARK_ESAU}`,
        `${isaac_typescript_definitions_1.EntityType.DARK_ESAU}.${isaac_typescript_definitions_1.DarkEsauVariant.PIT}`
        // 866.1
      ]);
      var NON_ALIVE_NPCS_TYPE_VARIANT_SUB_TYPE = new ReadonlySet_1.ReadonlySet([
        `${isaac_typescript_definitions_1.EntityType.CHARGER}.${isaac_typescript_definitions_1.ChargerVariant.CHARGER}.${isaac_typescript_definitions_1.ChargerSubType.MY_SHADOW}`,
        `${isaac_typescript_definitions_1.EntityType.MOTHER}.${isaac_typescript_definitions_1.MotherVariant.MOTHER_1}.${isaac_typescript_definitions_1.MotherSubType.PHASE_2}`
        // 912
      ]);
      function getAliveNPCs(entityType = -1, variant = -1, subType = -1, ignoreFriendly = false) {
        const npcs = (0, entitiesSpecific_1.getNPCs)(entityType, variant, subType, ignoreFriendly);
        return npcs.filter((npc) => !npc.IsDead() && !isAliveExceptionNPC(npc));
      }
      exports2.getAliveNPCs = getAliveNPCs;
      function isAliveExceptionNPC(npc) {
        const entityTypeVariant = `${npc.Type}.${npc.Variant}`;
        if (NON_ALIVE_NPCS_TYPE_VARIANT.has(entityTypeVariant)) {
          return true;
        }
        const entityTypeVariantSubType = `${npc.Type}.${npc.Variant}.${npc.SubType}`;
        if (NON_ALIVE_NPCS_TYPE_VARIANT_SUB_TYPE.has(entityTypeVariantSubType)) {
          return true;
        }
        if (isDyingEggyWithNoSpidersLeft(npc)) {
          return true;
        }
        if (isDaddyLongLegsChildStompEntity(npc)) {
          return true;
        }
        if (isRaglingDeathPatch(npc)) {
          return true;
        }
        if (isDyingDump(npc)) {
          return true;
        }
        return false;
      }
      exports2.isAliveExceptionNPC = isAliveExceptionNPC;
      function isDaddyLongLegsChildStompEntity(npc) {
        return npc.Type === isaac_typescript_definitions_1.EntityType.DADDY_LONG_LEGS && npc.SpawnerEntity !== void 0;
      }
      exports2.isDaddyLongLegsChildStompEntity = isDaddyLongLegsChildStompEntity;
      function isDyingDump(npc) {
        return npc.Type === isaac_typescript_definitions_1.EntityType.DUMP && npc.Variant === isaac_typescript_definitions_1.DumpVariant.DUMP && npc.State === isaac_typescript_definitions_1.NPCState.SPECIAL;
      }
      exports2.isDyingDump = isDyingDump;
      function isDyingEggyWithNoSpidersLeft(npc) {
        return npc.Type === isaac_typescript_definitions_1.EntityType.HOPPER && npc.Variant === isaac_typescript_definitions_1.HopperVariant.EGGY && npc.State === isaac_typescript_definitions_1.NPCState.SUICIDE && npc.StateFrame >= constants_1.EGGY_STATE_FRAME_OF_FINAL_SPIDER;
      }
      exports2.isDyingEggyWithNoSpidersLeft = isDyingEggyWithNoSpidersLeft;
      function isRaglingDeathPatch(npc) {
        return npc.Type === isaac_typescript_definitions_1.EntityType.RAGLING && npc.Variant === isaac_typescript_definitions_1.RaglingVariant.RAG_MANS_RAGLING && // They go to `STATE_SPECIAL` when they are patches on the ground.
        npc.State === isaac_typescript_definitions_1.NPCState.SPECIAL;
      }
      exports2.isRaglingDeathPatch = isRaglingDeathPatch;
    }
  });

  // node_modules/isaacscript-common/dist/functions/bosses.js
  var require_bosses = __commonJS({
    "node_modules/isaacscript-common/dist/functions/bosses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnBossWithSeed = exports2.spawnBoss = exports2.isSin = exports2.isRepentanceBoss = exports2.getEntityTypeVariantFromBossID = exports2.getBosses = exports2.getBossStageIDs = exports2.getBossName = exports2.getBossIDsForStageID = exports2.getBossIDsForStage = exports2.getBossIDFromEntityTypeVariant = exports2.getBossID = exports2.getAllNonStoryBosses = exports2.getAllBosses = exports2.getAliveBosses = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var entityTypeVariantToBossIDMap_1 = require_entityTypeVariantToBossIDMap();
      var bossIDToEntityTypeVariant_1 = require_bossIDToEntityTypeVariant();
      var bossNames_1 = require_bossNames();
      var bossSets_1 = require_bossSets();
      var repentanceBossIDsSet_1 = require_repentanceBossIDsSet();
      var sinEntityTypesSet_1 = require_sinEntityTypesSet();
      var ReadonlySet_1 = require_ReadonlySet();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var npcs_1 = require_npcs();
      var rng_1 = require_rng();
      var rooms_1 = require_rooms();
      var utils_1 = require_utils();
      var BOSSES_THAT_REQUIRE_MULTIPLE_SPAWNS = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.EntityType.LARRY_JR,
        isaac_typescript_definitions_1.EntityType.CHUB,
        isaac_typescript_definitions_1.EntityType.LOKI,
        isaac_typescript_definitions_1.EntityType.GURGLING,
        isaac_typescript_definitions_1.EntityType.TURDLET
        // 918
      ]);
      var DEFAULT_BOSS_MULTI_SEGMENTS = 4;
      function getAliveBosses(entityType = -1, variant = -1, subType = -1, ignoreFriendly = false) {
        const aliveNPCs = (0, npcs_1.getAliveNPCs)(entityType, variant, subType, ignoreFriendly);
        return aliveNPCs.filter((aliveNPC) => aliveNPC.IsBoss());
      }
      exports2.getAliveBosses = getAliveBosses;
      function getAllBosses() {
        return bossSets_1.ALL_BOSSES;
      }
      exports2.getAllBosses = getAllBosses;
      function getAllNonStoryBosses() {
        return bossSets_1.NON_STORY_BOSSES;
      }
      exports2.getAllNonStoryBosses = getAllNonStoryBosses;
      function getBossID() {
        if ((0, rooms_1.inDogmaRoom)()) {
          return isaac_typescript_definitions_1.BossID.DOGMA;
        }
        if ((0, rooms_1.inBeastRoom)()) {
          return isaac_typescript_definitions_1.BossID.BEAST;
        }
        const room = cachedClasses_1.game.GetRoom();
        const bossID = room.GetBossID();
        if (bossID === 0) {
          return void 0;
        }
        if (bossID === isaac_typescript_definitions_1.BossID.ULTRA_GREED && (0, entities_1.doesEntityExist)(isaac_typescript_definitions_1.EntityType.ULTRA_GREED, isaac_typescript_definitions_1.UltraGreedVariant.ULTRA_GREEDIER)) {
          return isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER;
        }
        return bossID;
      }
      exports2.getBossID = getBossID;
      function getBossIDFromEntityTypeVariant(entityType, variant) {
        const entityTypeVariant = `${entityType}.${variant}`;
        return entityTypeVariantToBossIDMap_1.ENTITY_TYPE_VARIANT_TO_BOSS_ID_MAP.get(entityTypeVariant);
      }
      exports2.getBossIDFromEntityTypeVariant = getBossIDFromEntityTypeVariant;
      function getBossIDsForStage(stage) {
        return bossSets_1.STAGE_TO_COMBINED_BOSS_SET_MAP.get(stage);
      }
      exports2.getBossIDsForStage = getBossIDsForStage;
      function getBossIDsForStageID(stageID) {
        return bossSets_1.STAGE_ID_TO_BOSS_IDS.get(stageID);
      }
      exports2.getBossIDsForStageID = getBossIDsForStageID;
      function getBossName2(bossID) {
        return bossNames_1.BOSS_NAMES[bossID] ?? bossNames_1.DEFAULT_BOSS_NAME;
      }
      exports2.getBossName = getBossName2;
      function getBossStageIDs(bossID) {
        return bossSets_1.BOSS_ID_TO_STAGE_IDS[bossID];
      }
      exports2.getBossStageIDs = getBossStageIDs;
      function getBosses(entityType, variant, subType, ignoreFriendly = false) {
        const npcs = (0, entitiesSpecific_1.getNPCs)(entityType, variant, subType, ignoreFriendly);
        return npcs.filter((npc) => npc.IsBoss());
      }
      exports2.getBosses = getBosses;
      function getEntityTypeVariantFromBossID(bossID) {
        return bossIDToEntityTypeVariant_1.BOSS_ID_TO_ENTITY_TYPE_VARIANT[bossID];
      }
      exports2.getEntityTypeVariantFromBossID = getEntityTypeVariantFromBossID;
      function isRepentanceBoss(bossID) {
        return repentanceBossIDsSet_1.REPENTANCE_ONLY_BOSS_IDS_SET.has(bossID);
      }
      exports2.isRepentanceBoss = isRepentanceBoss;
      function isSin(npc) {
        return sinEntityTypesSet_1.SIN_ENTITY_TYPES_SET.has(npc.Type);
      }
      exports2.isSin = isSin;
      function getNumBossSegments(entityType, variant, numSegments) {
        if (numSegments !== void 0) {
          return numSegments;
        }
        switch (entityType) {
          case isaac_typescript_definitions_1.EntityType.CHUB: {
            return 3;
          }
          case isaac_typescript_definitions_1.EntityType.LOKI: {
            return variant === isaac_typescript_definitions_1.LokiVariant.LOKII ? 2 : 1;
          }
          case isaac_typescript_definitions_1.EntityType.GURGLING: {
            return 2;
          }
          default: {
            return DEFAULT_BOSS_MULTI_SEGMENTS;
          }
        }
      }
      function spawnBoss(entityType, variant, subType, positionOrGridIndex, velocity = constants_1.VectorZero, spawner = void 0, seedOrRNG = void 0, numSegments) {
        const seed = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG.Next() : seedOrRNG;
        const npc = (0, entitiesSpecific_1.spawnNPC)(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seed);
        if (BOSSES_THAT_REQUIRE_MULTIPLE_SPAWNS.has(entityType)) {
          const numBossSegments = getNumBossSegments(entityType, variant, numSegments);
          const remainingSegmentsToSpawn = numBossSegments - 1;
          (0, utils_1.repeat)(remainingSegmentsToSpawn, () => {
            (0, entitiesSpecific_1.spawnNPC)(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seed);
          });
        }
        return npc;
      }
      exports2.spawnBoss = spawnBoss;
      function spawnBossWithSeed(entityType, variant, subType, positionOrGridIndex, seedOrRNG, velocity = constants_1.VectorZero, spawner = void 0, numSegments) {
        const seed = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG.Next() : seedOrRNG;
        return spawnBoss(entityType, variant, subType, positionOrGridIndex, velocity, spawner, seed, numSegments);
      }
      exports2.spawnBossWithSeed = spawnBossWithSeed;
    }
  });

  // node_modules/isaacscript-common/dist/objects/bossNamePNGFileNames.js
  var require_bossNamePNGFileNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/bossNamePNGFileNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BOSS_NAME_PNG_FILE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.BOSS_NAME_PNG_FILE_NAMES = {
        [isaac_typescript_definitions_1.BossID.MONSTRO]: "BossName_20.0_Monstro.png",
        [isaac_typescript_definitions_1.BossID.LARRY_JR]: "BossName_19.0_LarryJr.png",
        [isaac_typescript_definitions_1.BossID.CHUB]: "BossName_28.0_Chub.png",
        [isaac_typescript_definitions_1.BossID.GURDY]: "BossName_36.0_Gurdy.png",
        [isaac_typescript_definitions_1.BossID.MONSTRO_2]: "BossName_43.0_Monstro2.png",
        [isaac_typescript_definitions_1.BossID.MOM]: "BossName_45.0_Mom.png",
        [isaac_typescript_definitions_1.BossID.SCOLEX]: "BossName_62.1_Scolex.png",
        [isaac_typescript_definitions_1.BossID.MOMS_HEART]: "BossName_78.0_MomsHeart.png",
        [isaac_typescript_definitions_1.BossID.FAMINE]: "BossName_63.0_Famine.png",
        [isaac_typescript_definitions_1.BossID.PESTILENCE]: "BossName_64.0_Pestilence.png",
        [isaac_typescript_definitions_1.BossID.WAR]: "BossName_65.0_War.png",
        [isaac_typescript_definitions_1.BossID.DEATH]: "BossName_66.0_Death.png",
        [isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES]: "BossName_67.0_DukeOfFlies.png",
        [isaac_typescript_definitions_1.BossID.PEEP]: "BossName_68.0_Peep.png",
        [isaac_typescript_definitions_1.BossID.LOKI]: "BossName_69.0_Loki.png",
        [isaac_typescript_definitions_1.BossID.BLASTOCYST]: "BossName_74.0_Blastocyst.png",
        [isaac_typescript_definitions_1.BossID.GEMINI]: "BossName_79.0_Gemini.png",
        [isaac_typescript_definitions_1.BossID.FISTULA]: "BossName_71.0_Fistula.png",
        [isaac_typescript_definitions_1.BossID.GISH]: "BossName_43.1_Gish.png",
        [isaac_typescript_definitions_1.BossID.STEVEN]: "BossName_79.1_Steven.png",
        [isaac_typescript_definitions_1.BossID.CHAD]: "BossName_28.1_CHAD.png",
        [isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN]: "BossName_82.0_HeadlessHorseman.png",
        [isaac_typescript_definitions_1.BossID.FALLEN]: "BossName_81.0_TheFallen.png",
        [isaac_typescript_definitions_1.BossID.SATAN]: "BossName_84.0_Satan.png",
        [isaac_typescript_definitions_1.BossID.IT_LIVES]: "BossName_78.1_ItLives.png",
        [isaac_typescript_definitions_1.BossID.HOLLOW]: "BossName_19.1_TheHollow.png",
        [isaac_typescript_definitions_1.BossID.CARRION_QUEEN]: "BossName_28.2_CarrionQueen.png",
        [isaac_typescript_definitions_1.BossID.GURDY_JR]: "BossName_99.0_GurdyJr.png",
        [isaac_typescript_definitions_1.BossID.HUSK]: "BossName_67.1_TheHusk.png",
        [isaac_typescript_definitions_1.BossID.BLOAT]: "BossName_68.1_Bloat.png",
        [isaac_typescript_definitions_1.BossID.LOKII]: "BossName_69.1_Lokii.png",
        [isaac_typescript_definitions_1.BossID.BLIGHTED_OVUM]: "BossName_79.2_BlightedOvum.png",
        [isaac_typescript_definitions_1.BossID.TERATOMA]: "BossName_71.1_Teratoma.png",
        [isaac_typescript_definitions_1.BossID.WIDOW]: "BossName_100.0_Widow.png",
        [isaac_typescript_definitions_1.BossID.MASK_OF_INFAMY]: "BossName_97.0_MaskOfInfamy.png",
        [isaac_typescript_definitions_1.BossID.WRETCHED]: "BossName_100.1_TheWretched.png",
        [isaac_typescript_definitions_1.BossID.PIN]: "BossName_62.0_Pin.png",
        [isaac_typescript_definitions_1.BossID.CONQUEST]: "BossName_65.1_Conquest.png",
        // There is no dedicated "bossname_" PNG file for Isaac.
        [isaac_typescript_definitions_1.BossID.ISAAC]: "PlayerName_01_Isaac.png",
        [isaac_typescript_definitions_1.BossID.BLUE_BABY]: "BossName_102.1_BlueBaby.png",
        [isaac_typescript_definitions_1.BossID.DADDY_LONG_LEGS]: "BossName_101.0_DaddyLongLegs.png",
        [isaac_typescript_definitions_1.BossID.TRIACHNID]: "BossName_101.1_Triachnid.png",
        [isaac_typescript_definitions_1.BossID.HAUNT]: "BossName_260.0_TheHaunt.png",
        [isaac_typescript_definitions_1.BossID.DINGLE]: "BossName_261.0_Dingle.png",
        [isaac_typescript_definitions_1.BossID.MEGA_MAW]: "Portrait_262.0_MegaMaw.png",
        [isaac_typescript_definitions_1.BossID.GATE]: "BossName_263.0_MegaMaw2.png",
        [isaac_typescript_definitions_1.BossID.MEGA_FATTY]: "BossName_264.0_MegaFatty.png",
        [isaac_typescript_definitions_1.BossID.CAGE]: "BossName_265.0_Fatty2.png",
        [isaac_typescript_definitions_1.BossID.MAMA_GURDY]: "BossName_266.0_MamaGurdy.png",
        [isaac_typescript_definitions_1.BossID.DARK_ONE]: "BossName_267.0_DarkOne.png",
        [isaac_typescript_definitions_1.BossID.ADVERSARY]: "BossName_268.0_DarkOne2.png",
        [isaac_typescript_definitions_1.BossID.POLYCEPHALUS]: "BossName_269.0_Polycephalus.png",
        [isaac_typescript_definitions_1.BossID.MR_FRED]: "BossName_270.0_MegaFred.png",
        [isaac_typescript_definitions_1.BossID.LAMB]: "BossName_273.0_TheLamb.png",
        [isaac_typescript_definitions_1.BossID.MEGA_SATAN]: "BossName_274.0_MegaSatan.png",
        [isaac_typescript_definitions_1.BossID.GURGLING]: "BossName_276.0_Gurglings.png",
        [isaac_typescript_definitions_1.BossID.STAIN]: "BossName_401.0_TheStain.png",
        [isaac_typescript_definitions_1.BossID.BROWNIE]: "BossName_402.0_Brownie.png",
        [isaac_typescript_definitions_1.BossID.FORSAKEN]: "BossName_403.0_TheForsaken.png",
        [isaac_typescript_definitions_1.BossID.LITTLE_HORN]: "BossName_404.0_LittleHorn.png",
        [isaac_typescript_definitions_1.BossID.RAG_MAN]: "BossName_405.0_RagMan.png",
        [isaac_typescript_definitions_1.BossID.ULTRA_GREED]: "BossName_406.0_UltraGreed.png",
        [isaac_typescript_definitions_1.BossID.HUSH]: "BossName_407.0_Hush.png",
        [isaac_typescript_definitions_1.BossID.DANGLE]: "BossName_Dangle.png",
        [isaac_typescript_definitions_1.BossID.TURDLING]: "BossName_Turdlings.png",
        [isaac_typescript_definitions_1.BossID.FRAIL]: "BossName_TheFrail.png",
        [isaac_typescript_definitions_1.BossID.RAG_MEGA]: "BossName_RagMega.png",
        [isaac_typescript_definitions_1.BossID.SISTERS_VIS]: "BossName_SisterssVis.png",
        [isaac_typescript_definitions_1.BossID.BIG_HORN]: "BossName_BigHorn.png",
        [isaac_typescript_definitions_1.BossID.DELIRIUM]: "BossName_Delirium.png",
        // Ultra Greedier uses the same file as Ultra Greed.
        [isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER]: "BossName_406.0_UltraGreed.png",
        [isaac_typescript_definitions_1.BossID.MATRIARCH]: "BossName_Matriarch.png",
        [isaac_typescript_definitions_1.BossID.PILE]: "BossName_Polycephalus2.png",
        [isaac_typescript_definitions_1.BossID.REAP_CREEP]: "BossName_ReapCreep.png",
        [isaac_typescript_definitions_1.BossID.LIL_BLUB]: "BossName_Beelzeblub.png",
        [isaac_typescript_definitions_1.BossID.WORMWOOD]: "BossName_Wormwood.png",
        [isaac_typescript_definitions_1.BossID.RAINMAKER]: "BossName_Rainmaker.png",
        [isaac_typescript_definitions_1.BossID.VISAGE]: "BossName_Visage.png",
        [isaac_typescript_definitions_1.BossID.SIREN]: "BossName_Siren.png",
        [isaac_typescript_definitions_1.BossID.TUFF_TWINS]: "BossName_TuffTwins.png",
        [isaac_typescript_definitions_1.BossID.HERETIC]: "BossName_Heretic.png",
        [isaac_typescript_definitions_1.BossID.HORNFEL]: "BossName_Hornfel.png",
        [isaac_typescript_definitions_1.BossID.GREAT_GIDEON]: "BossName_Gideon.png",
        [isaac_typescript_definitions_1.BossID.BABY_PLUM]: "BossName_BabyPlum.png",
        [isaac_typescript_definitions_1.BossID.SCOURGE]: "BossName_Scourge.png",
        [isaac_typescript_definitions_1.BossID.CHIMERA]: "BossName_Chimera.png",
        [isaac_typescript_definitions_1.BossID.ROTGUT]: "BossName_Rotgut.png",
        [isaac_typescript_definitions_1.BossID.MOTHER]: "BossName_Mother.png",
        // Mom (Mausoleum) uses the same file as Mom.
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM]: "BossName_45.0_Mom.png",
        // Mom's Heart (Mausoleum) uses the same file as Mom's Heart.
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART]: "BossName_78.0_MomsHeart.png",
        [isaac_typescript_definitions_1.BossID.MIN_MIN]: "BossName_MinMin.png",
        [isaac_typescript_definitions_1.BossID.CLOG]: "BossName_Clog.png",
        [isaac_typescript_definitions_1.BossID.SINGE]: "BossName_Singe.png",
        [isaac_typescript_definitions_1.BossID.BUMBINO]: "BossName_Bumbino.png",
        [isaac_typescript_definitions_1.BossID.COLOSTOMIA]: "BossName_Colostomia.png",
        [isaac_typescript_definitions_1.BossID.SHELL]: "BossName_Shell.png",
        [isaac_typescript_definitions_1.BossID.TURDLET]: "BossName_Turdlet.png",
        [isaac_typescript_definitions_1.BossID.RAGLICH]: "BossName_Raglich.png",
        [isaac_typescript_definitions_1.BossID.DOGMA]: "BossName_Dogma.png",
        // The file name specified in "bossportraits.xml" for The Beast does not actually exist in the
        // game files.
        [isaac_typescript_definitions_1.BossID.BEAST]: "BossName_TheBeast.png",
        [isaac_typescript_definitions_1.BossID.HORNY_BOYS]: "BossName_HornyBoys.png",
        [isaac_typescript_definitions_1.BossID.CLUTCH]: "BossName_Clutch.png"
        // 102
        // [BossID.CADAVRA]: "BossName_Cadavra.png", // 103
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/bossPortraitPNGFileNames.js
  var require_bossPortraitPNGFileNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/bossPortraitPNGFileNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.BOSS_PORTRAIT_PNG_FILE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.BOSS_PORTRAIT_PNG_FILE_NAMES = {
        [isaac_typescript_definitions_1.BossID.MONSTRO]: "Portrait_20.0_Monstro.png",
        [isaac_typescript_definitions_1.BossID.LARRY_JR]: "Portrait_19.0_LarryJr.png",
        [isaac_typescript_definitions_1.BossID.CHUB]: "Portrait_28.0_Chub.png",
        [isaac_typescript_definitions_1.BossID.GURDY]: "Portrait_36.0_Gurdy.png",
        [isaac_typescript_definitions_1.BossID.MONSTRO_2]: "Portrait_43.0_Monstro2.png",
        [isaac_typescript_definitions_1.BossID.MOM]: "Portrait_45.0_Mom.png",
        [isaac_typescript_definitions_1.BossID.SCOLEX]: "Portrait_62.1_Scolex.png",
        [isaac_typescript_definitions_1.BossID.MOMS_HEART]: "Portrait_78.0_MomsHeart.png",
        [isaac_typescript_definitions_1.BossID.FAMINE]: "Portrait_63.0_Famine.png",
        [isaac_typescript_definitions_1.BossID.PESTILENCE]: "Portrait_64.0_Pestilence.png",
        [isaac_typescript_definitions_1.BossID.WAR]: "Portrait_65.0_War.png",
        [isaac_typescript_definitions_1.BossID.DEATH]: "Portrait_66.0_Death.png",
        [isaac_typescript_definitions_1.BossID.DUKE_OF_FLIES]: "Portrait_67.0_DukeOfFlies.png",
        [isaac_typescript_definitions_1.BossID.PEEP]: "Portrait_68.0_Peep.png",
        [isaac_typescript_definitions_1.BossID.LOKI]: "Portrait_69.0_Loki.png",
        [isaac_typescript_definitions_1.BossID.BLASTOCYST]: "Portrait_74.0_Blastocyst.png",
        [isaac_typescript_definitions_1.BossID.GEMINI]: "Portrait_79.0_Gemini.png",
        [isaac_typescript_definitions_1.BossID.FISTULA]: "Portrait_71.0_Fistula.png",
        [isaac_typescript_definitions_1.BossID.GISH]: "Portrait_43.1_Gish.png",
        [isaac_typescript_definitions_1.BossID.STEVEN]: "Portrait_79.1_Steven.png",
        [isaac_typescript_definitions_1.BossID.CHAD]: "Portrait_28.1_CHAD.png",
        [isaac_typescript_definitions_1.BossID.HEADLESS_HORSEMAN]: "Portrait_82.0_HeadlessHorseman.png",
        [isaac_typescript_definitions_1.BossID.FALLEN]: "Portrait_81.0_TheFallen.png",
        [isaac_typescript_definitions_1.BossID.SATAN]: "Portrait_84.0_Satan.png",
        [isaac_typescript_definitions_1.BossID.IT_LIVES]: "Portrait_78.1_ItLives.png",
        [isaac_typescript_definitions_1.BossID.HOLLOW]: "Portrait_19.1_TheHollow.png",
        [isaac_typescript_definitions_1.BossID.CARRION_QUEEN]: "Portrait_28.2_CarrionQueen.png",
        [isaac_typescript_definitions_1.BossID.GURDY_JR]: "Portrait_99.0_GurdyJr.png",
        [isaac_typescript_definitions_1.BossID.HUSK]: "Portrait_67.1_TheHusk.png",
        [isaac_typescript_definitions_1.BossID.BLOAT]: "Portrait_68.1_Bloat.png",
        [isaac_typescript_definitions_1.BossID.LOKII]: "Portrait_69.1_Lokii.png",
        [isaac_typescript_definitions_1.BossID.BLIGHTED_OVUM]: "Portrait_79.2_BlightedOvum.png",
        [isaac_typescript_definitions_1.BossID.TERATOMA]: "Portrait_71.1_Teratoma.png",
        [isaac_typescript_definitions_1.BossID.WIDOW]: "Portrait_100.0_Widow.png",
        [isaac_typescript_definitions_1.BossID.MASK_OF_INFAMY]: "Portrait_97.0_MaskOfInfamy.png",
        [isaac_typescript_definitions_1.BossID.WRETCHED]: "Portrait_100.1_TheWretched.png",
        [isaac_typescript_definitions_1.BossID.PIN]: "Portrait_62.0_Pin.png",
        [isaac_typescript_definitions_1.BossID.CONQUEST]: "Portrait_65.1_Conquest.png",
        [isaac_typescript_definitions_1.BossID.ISAAC]: "Portrait_102.0_Isaac.png",
        [isaac_typescript_definitions_1.BossID.BLUE_BABY]: "Portrait_102.1_BlueBaby.png",
        [isaac_typescript_definitions_1.BossID.DADDY_LONG_LEGS]: "Portrait_101.0_DaddyLongLegs.png",
        [isaac_typescript_definitions_1.BossID.TRIACHNID]: "Portrait_101.1_Triachnid.png",
        [isaac_typescript_definitions_1.BossID.HAUNT]: "Portrait_260.0_TheHaunt.png",
        [isaac_typescript_definitions_1.BossID.DINGLE]: "Portrait_261.0_Dingle.png",
        [isaac_typescript_definitions_1.BossID.MEGA_MAW]: "Portrait_262.0_MegaMaw.png",
        [isaac_typescript_definitions_1.BossID.GATE]: "Portrait_263.0_MegaMaw2.png",
        [isaac_typescript_definitions_1.BossID.MEGA_FATTY]: "Portrait_264.0_MegaFatty.png",
        [isaac_typescript_definitions_1.BossID.CAGE]: "Portrait_265.0_Fatty2.png",
        [isaac_typescript_definitions_1.BossID.MAMA_GURDY]: "Portrait_266.0_MamaGurdy.png",
        [isaac_typescript_definitions_1.BossID.DARK_ONE]: "Portrait_267.0_DarkOne.png",
        [isaac_typescript_definitions_1.BossID.ADVERSARY]: "Portrait_268.0_DarkOne2.png",
        [isaac_typescript_definitions_1.BossID.POLYCEPHALUS]: "Portrait_269.0_Polycephalus.png",
        [isaac_typescript_definitions_1.BossID.MR_FRED]: "Portrait_270.0_MegaFred.png",
        [isaac_typescript_definitions_1.BossID.LAMB]: "Portrait_273.0_TheLamb.png",
        [isaac_typescript_definitions_1.BossID.MEGA_SATAN]: "Portrait_274.0_MegaSatan.png",
        [isaac_typescript_definitions_1.BossID.GURGLING]: "Portrait_276.0_Gurglings.png",
        [isaac_typescript_definitions_1.BossID.STAIN]: "Portrait_401.0_TheStain.png",
        [isaac_typescript_definitions_1.BossID.BROWNIE]: "Portrait_402.0_Brownie.png",
        [isaac_typescript_definitions_1.BossID.FORSAKEN]: "Portrait_403.0_TheForsaken.png",
        [isaac_typescript_definitions_1.BossID.LITTLE_HORN]: "Portrait_404.0_LittleHorn.png",
        [isaac_typescript_definitions_1.BossID.RAG_MAN]: "Portrait_405.0_Ragman.png",
        [isaac_typescript_definitions_1.BossID.ULTRA_GREED]: "Portrait_406.0_UltraGreed.png",
        [isaac_typescript_definitions_1.BossID.HUSH]: "Portrait_407.0_Hush.png",
        [isaac_typescript_definitions_1.BossID.DANGLE]: "Portrait_Dangle.png",
        [isaac_typescript_definitions_1.BossID.TURDLING]: "Portrait_Turdlings.png",
        [isaac_typescript_definitions_1.BossID.FRAIL]: "Portrait_TheFrail.png",
        [isaac_typescript_definitions_1.BossID.RAG_MEGA]: "Portrait_RagMega.png",
        [isaac_typescript_definitions_1.BossID.SISTERS_VIS]: "Portrait_SistersVis.png",
        [isaac_typescript_definitions_1.BossID.BIG_HORN]: "Portrait_BigHorn.png",
        [isaac_typescript_definitions_1.BossID.DELIRIUM]: "Portrait_Delirium.png",
        // Ultra Greedier uses the same file as Ultra Greed.
        [isaac_typescript_definitions_1.BossID.ULTRA_GREEDIER]: "Portrait_406.0_UltraGreed.png",
        [isaac_typescript_definitions_1.BossID.MATRIARCH]: "Portrait_Matriarch.png",
        [isaac_typescript_definitions_1.BossID.PILE]: "Portrait_269.1_Polycephalus2.png",
        [isaac_typescript_definitions_1.BossID.REAP_CREEP]: "Portrait_900.0_ReapCreep.png",
        [isaac_typescript_definitions_1.BossID.LIL_BLUB]: "Portrait_901.0_Beelzeblub.png",
        // There is also a "Portrait_901.0_Beelzeblub_Dross.png" file.
        [isaac_typescript_definitions_1.BossID.WORMWOOD]: "Portrait_902.0_Wormwood.png",
        // There is also a "Portrait_902.0_Wormwood_Dross.png" file.
        [isaac_typescript_definitions_1.BossID.RAINMAKER]: "Portrait_902.0_Rainmaker.png",
        [isaac_typescript_definitions_1.BossID.VISAGE]: "Portrait_903.0_Visage.png",
        [isaac_typescript_definitions_1.BossID.SIREN]: "Portrait_904.0_Siren.png",
        [isaac_typescript_definitions_1.BossID.TUFF_TWINS]: "Portrait_19.100_TuffTwins.png",
        [isaac_typescript_definitions_1.BossID.HERETIC]: "Portrait_905.0_Heretic.png",
        [isaac_typescript_definitions_1.BossID.HORNFEL]: "Portrait_906.0_Hornfel.png",
        [isaac_typescript_definitions_1.BossID.GREAT_GIDEON]: "Portrait_907.0_Gideon.png",
        [isaac_typescript_definitions_1.BossID.BABY_PLUM]: "Portrait_908.0_BabyPlum.png",
        [isaac_typescript_definitions_1.BossID.SCOURGE]: "Portrait_909.0_Scourge.png",
        [isaac_typescript_definitions_1.BossID.CHIMERA]: "Portrait_910.0_Chimera.png",
        [isaac_typescript_definitions_1.BossID.ROTGUT]: "Portrait_911.0_Rotgut.png",
        [isaac_typescript_definitions_1.BossID.MOTHER]: "Portrait_Mother.png",
        // Mom (Mausoleum) uses the same file as Mom.
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOM]: "Portrait_45.0_Mom.png",
        // Mom's Heart (Mausoleum) uses the same file as Mom's Heart.
        [isaac_typescript_definitions_1.BossID.MAUSOLEUM_MOMS_HEART]: "Portrait_78.0_MomsHeart.png",
        // There also exists a "Portrait_913.0_MaidInTheMist.png" file, but that does not correspond to
        // Min Min.
        [isaac_typescript_definitions_1.BossID.MIN_MIN]: "Portrait_MinMin.png",
        [isaac_typescript_definitions_1.BossID.CLOG]: "Portrait_Clog.png",
        [isaac_typescript_definitions_1.BossID.SINGE]: "Portrait_Singe.png",
        [isaac_typescript_definitions_1.BossID.BUMBINO]: "Portrait_Bumbino.png",
        [isaac_typescript_definitions_1.BossID.COLOSTOMIA]: "Portrait_Colostomia.png",
        [isaac_typescript_definitions_1.BossID.SHELL]: "Portrait_Shell.png",
        [isaac_typescript_definitions_1.BossID.TURDLET]: "Portrait_Turdlet.png",
        [isaac_typescript_definitions_1.BossID.RAGLICH]: "Portrait_Raglich.png",
        [isaac_typescript_definitions_1.BossID.DOGMA]: "Portrait_Dogma.png",
        // The file name specified in "bossportraits.xml" for The Beast does not actually exist in the
        // game files.
        [isaac_typescript_definitions_1.BossID.BEAST]: "Portrait_The Beast.png",
        [isaac_typescript_definitions_1.BossID.HORNY_BOYS]: "Portrait_HornyBoys.png",
        [isaac_typescript_definitions_1.BossID.CLUTCH]: "Portrait_Clutch.png"
        // 102
        // [BossID.CADAVRA]: "Portrait_Cadavra.png", // 103
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/playerNamePNGFileNames.js
  var require_playerNamePNGFileNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/playerNamePNGFileNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PLAYER_NAME_PNG_FILE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.PLAYER_NAME_PNG_FILE_NAMES = {
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: void 0,
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: "playername_01_isaac.png",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: "playername_02_magdalene.png",
        [isaac_typescript_definitions_1.PlayerType.CAIN]: "playername_03_cain.png",
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: "playername_04_judas.png",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: "playername_06_bluebaby.png",
        [isaac_typescript_definitions_1.PlayerType.EVE]: "playername_05_eve.png",
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: "playername_07_samson.png",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: "playername_08_azazel.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: "playername_10_lazarus.png",
        [isaac_typescript_definitions_1.PlayerType.EDEN]: "playername_09_eden.png",
        [isaac_typescript_definitions_1.PlayerType.LOST]: "playername_12_thelost.png",
        // Lazarus 2 uses the same name as Lazarus 1.
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: "playername_10_lazarus.png",
        // Dark Judas uses the same name as Judas.
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: "playername_04_judas.png",
        [isaac_typescript_definitions_1.PlayerType.LILITH]: "playername_13_lilith.png",
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: "playername_14_thekeeper.png",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: "playername_15_apollyon.png",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: "playername_16_theforgotten.png",
        // The Soul the same name as The Forgotten.
        [isaac_typescript_definitions_1.PlayerType.SOUL]: "playername_16_theforgotten.png",
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: "playername_01x_bethany.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB]: "playername_02x_jacob_esau.png",
        // Esau uses the same name as Jacob & Esau.
        [isaac_typescript_definitions_1.PlayerType.ESAU]: "playername_02x_jacob_esau.png",
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: "playername_01_isaac.png",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: "playername_02_magdalene.png",
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: "playername_03_cain.png",
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: "playername_04_judas.png",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: "playername_06_bluebaby.png",
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: "playername_05_eve.png",
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: "playername_07_samson.png",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: "playername_08_azazel.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: "playername_10_lazarus.png",
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: "playername_09_eden.png",
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: "playername_12_thelost.png",
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: "playername_13_lilith.png",
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: "playername_14_thekeeper.png",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: "playername_15_apollyon.png",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: "playername_16_theforgotten.png",
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: "playername_01x_bethany.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: "playername_02x_jacob.png",
        // Dead Tainted Lazarus uses the same name as Tainted Lazarus.
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: "playername_10_lazarus.png",
        // Tainted Jacob in "Lost" form uses the same name as Tainted Jacob.
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: "playername_02x_jacob.png",
        // Tainted The Soul uses the same name as Tainted Forgotten.
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: "playername_16_theforgotten.png"
        // 40
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/playerPortraitPNGFileNames.js
  var require_playerPortraitPNGFileNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/playerPortraitPNGFileNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PLAYER_PORTRAIT_PNG_FILE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.PLAYER_PORTRAIT_PNG_FILE_NAMES = {
        [isaac_typescript_definitions_1.PlayerType.POSSESSOR]: void 0,
        [isaac_typescript_definitions_1.PlayerType.ISAAC]: "playerportrait_isaac.png",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE]: "playerportrait_magdalene.png",
        [isaac_typescript_definitions_1.PlayerType.CAIN]: "playerportrait_cain.png",
        [isaac_typescript_definitions_1.PlayerType.JUDAS]: "playerportrait_judas.png",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY]: "playerportrait_bluebaby.png",
        [isaac_typescript_definitions_1.PlayerType.EVE]: "playerportrait_eve.png",
        [isaac_typescript_definitions_1.PlayerType.SAMSON]: "playerportrait_samson.png",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL]: "playerportrait_azazel.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS]: "playerportrait_lazarus.png",
        [isaac_typescript_definitions_1.PlayerType.EDEN]: "playerportrait_eden.png",
        [isaac_typescript_definitions_1.PlayerType.LOST]: "playerportrait_thelost.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2]: "playerportrait_lazarus2.png",
        [isaac_typescript_definitions_1.PlayerType.DARK_JUDAS]: "playerportrait_darkjudas.png",
        [isaac_typescript_definitions_1.PlayerType.LILITH]: "playerportrait_lilith.png",
        [isaac_typescript_definitions_1.PlayerType.KEEPER]: "playerportrait_keeper.png",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON]: "playerportrait_apollyon.png",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN]: "playerportrait_theforgotten.png",
        // The Soul the same name as The Forgotten.
        [isaac_typescript_definitions_1.PlayerType.SOUL]: "playerportrait_theforgotten.png",
        [isaac_typescript_definitions_1.PlayerType.BETHANY]: "playerportrait_bethany.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB]: "playerportrait_jacob.png",
        // Esau uses the same name as Jacob & Esau.
        [isaac_typescript_definitions_1.PlayerType.ESAU]: "playerportrait_jacob.png",
        [isaac_typescript_definitions_1.PlayerType.ISAAC_B]: "playerportrait_isaac_b.png",
        [isaac_typescript_definitions_1.PlayerType.MAGDALENE_B]: "playerportrait_magdalene_b.png",
        [isaac_typescript_definitions_1.PlayerType.CAIN_B]: "playerportrait_cain_b.png",
        [isaac_typescript_definitions_1.PlayerType.JUDAS_B]: "playerportrait_judas_b.png",
        [isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B]: "playerportrait_bluebaby_b.png",
        [isaac_typescript_definitions_1.PlayerType.EVE_B]: "playerportrait_eve_b.png",
        [isaac_typescript_definitions_1.PlayerType.SAMSON_B]: "playerportrait_samson_b.png",
        [isaac_typescript_definitions_1.PlayerType.AZAZEL_B]: "playerportrait_azazel_b.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_B]: "playerportrait_lazarus_b.png",
        [isaac_typescript_definitions_1.PlayerType.EDEN_B]: "playerportrait_eden_b.png",
        [isaac_typescript_definitions_1.PlayerType.LOST_B]: "playerportrait_thelost_b.png",
        [isaac_typescript_definitions_1.PlayerType.LILITH_B]: "playerportrait_lilith_b.png",
        [isaac_typescript_definitions_1.PlayerType.KEEPER_B]: "playerportrait_keeper_b.png",
        [isaac_typescript_definitions_1.PlayerType.APOLLYON_B]: "playerportrait_apollyon_b.png",
        [isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B]: "playerportrait_theforgotten_b.png",
        [isaac_typescript_definitions_1.PlayerType.BETHANY_B]: "playerportrait_bethany_b.png",
        [isaac_typescript_definitions_1.PlayerType.JACOB_B]: "playerportrait_jacob_b.png",
        [isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B]: "playerportrait_lazarus_b_dead.png",
        // Tainted Jacob in "Lost" form uses the same name as Tainted Jacob.
        [isaac_typescript_definitions_1.PlayerType.JACOB_2_B]: "playerportrait_jacob_b.png",
        // Tainted The Soul uses the same name as Tainted Forgotten.
        [isaac_typescript_definitions_1.PlayerType.SOUL_B]: "playerportrait_theforgotten_b.png"
        // 40
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/versusScreen.js
  var require_versusScreen = __commonJS({
    "node_modules/isaacscript-common/dist/functions/versusScreen.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getCharacterPortraitPNGFilePath = exports2.getCharacterNamePNGFilePath = exports2.getBossPortraitPNGFilePath = exports2.getBossNamePNGFilePath = void 0;
      var bossNamePNGFileNames_1 = require_bossNamePNGFileNames();
      var bossPortraitPNGFileNames_1 = require_bossPortraitPNGFileNames();
      var playerNamePNGFileNames_1 = require_playerNamePNGFileNames();
      var playerPortraitPNGFileNames_1 = require_playerPortraitPNGFileNames();
      var PNG_PATH_PREFIX = "gfx/ui/boss";
      var PLAYER_PORTRAIT_PNG_PATH_PREFIX = "gfx/ui/stage";
      function getBossNamePNGFilePath(bossID) {
        const fileName = bossNamePNGFileNames_1.BOSS_NAME_PNG_FILE_NAMES[bossID];
        return `${PNG_PATH_PREFIX}/${fileName}`;
      }
      exports2.getBossNamePNGFilePath = getBossNamePNGFilePath;
      function getBossPortraitPNGFilePath(bossID) {
        const fileName = bossPortraitPNGFileNames_1.BOSS_PORTRAIT_PNG_FILE_NAMES[bossID];
        return `${PNG_PATH_PREFIX}/${fileName}`;
      }
      exports2.getBossPortraitPNGFilePath = getBossPortraitPNGFilePath;
      function getCharacterNamePNGFilePath(character) {
        const fileName = playerNamePNGFileNames_1.PLAYER_NAME_PNG_FILE_NAMES[character];
        return `${PNG_PATH_PREFIX}/${fileName}`;
      }
      exports2.getCharacterNamePNGFilePath = getCharacterNamePNGFilePath;
      function getCharacterPortraitPNGFilePath(character) {
        const fileName = playerPortraitPNGFileNames_1.PLAYER_PORTRAIT_PNG_FILE_NAMES[character];
        return `${PLAYER_PORTRAIT_PNG_PATH_PREFIX}/${fileName}`;
      }
      exports2.getCharacterPortraitPNGFilePath = getCharacterPortraitPNGFilePath;
    }
  });

  // node_modules/isaacscript-common/dist/objects/versusScreenBackgroundColors.js
  var require_versusScreenBackgroundColors = __commonJS({
    "node_modules/isaacscript-common/dist/objects/versusScreenBackgroundColors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.VERSUS_SCREEN_BACKGROUND_COLORS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var readOnly_1 = require_readOnly();
      var BASEMENT_COLOR = (0, readOnly_1.newReadonlyColor)(26 / 255, 14 / 255, 12 / 255);
      var CAVES_COLOR = (0, readOnly_1.newReadonlyColor)(18 / 255, 13 / 255, 8 / 255);
      var DEPTHS_COLOR = (0, readOnly_1.newReadonlyColor)(8 / 255, 8 / 255, 8 / 255);
      var WOMB_COLOR = (0, readOnly_1.newReadonlyColor)(27 / 255, 3 / 255, 3 / 255);
      var SHEOL_COLOR = (0, readOnly_1.newReadonlyColor)(6 / 255, 6 / 255, 6 / 255);
      var DEFAULT_COLOR = BASEMENT_COLOR;
      exports2.VERSUS_SCREEN_BACKGROUND_COLORS = {
        [isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.BASEMENT]: BASEMENT_COLOR,
        [isaac_typescript_definitions_1.StageID.CELLAR]: (0, readOnly_1.newReadonlyColor)(26 / 255, 17 / 255, 13 / 255),
        [isaac_typescript_definitions_1.StageID.BURNING_BASEMENT]: (0, readOnly_1.newReadonlyColor)(28 / 255, 12 / 255, 10 / 255),
        [isaac_typescript_definitions_1.StageID.CAVES]: CAVES_COLOR,
        [isaac_typescript_definitions_1.StageID.CATACOMBS]: (0, readOnly_1.newReadonlyColor)(15 / 255, 10 / 255, 8 / 255),
        [isaac_typescript_definitions_1.StageID.FLOODED_CAVES]: (0, readOnly_1.newReadonlyColor)(21 / 255, 28 / 255, 35 / 255),
        [isaac_typescript_definitions_1.StageID.DEPTHS]: DEPTHS_COLOR,
        [isaac_typescript_definitions_1.StageID.NECROPOLIS]: (0, readOnly_1.newReadonlyColor)(10 / 255, 6 / 255, 6 / 255),
        [isaac_typescript_definitions_1.StageID.DANK_DEPTHS]: DEPTHS_COLOR,
        [isaac_typescript_definitions_1.StageID.WOMB]: WOMB_COLOR,
        [isaac_typescript_definitions_1.StageID.UTERO]: (0, readOnly_1.newReadonlyColor)(22 / 255, 6 / 255, 5 / 255),
        [isaac_typescript_definitions_1.StageID.SCARRED_WOMB]: (0, readOnly_1.newReadonlyColor)(42 / 255, 19 / 255, 10 / 255),
        [isaac_typescript_definitions_1.StageID.BLUE_WOMB]: (0, readOnly_1.newReadonlyColor)(26 / 255, 32 / 255, 40 / 255),
        [isaac_typescript_definitions_1.StageID.SHEOL]: SHEOL_COLOR,
        [isaac_typescript_definitions_1.StageID.CATHEDRAL]: (0, readOnly_1.newReadonlyColor)(6 / 255, 13 / 255, 17 / 255),
        [isaac_typescript_definitions_1.StageID.DARK_ROOM]: (0, readOnly_1.newReadonlyColor)(9 / 255, 4 / 255, 3 / 255),
        [isaac_typescript_definitions_1.StageID.CHEST]: (0, readOnly_1.newReadonlyColor)(15 / 255, 9 / 255, 6 / 255),
        [isaac_typescript_definitions_1.StageID.SHOP]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.ULTRA_GREED]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.VOID]: (0, readOnly_1.newReadonlyColor)(0, 0, 0),
        [isaac_typescript_definitions_1.StageID.DOWNPOUR]: (0, readOnly_1.newReadonlyColor)(29 / 255, 30 / 255, 32 / 255),
        [isaac_typescript_definitions_1.StageID.DROSS]: (0, readOnly_1.newReadonlyColor)(35 / 255, 35 / 255, 29 / 255),
        [isaac_typescript_definitions_1.StageID.MINES]: (0, readOnly_1.newReadonlyColor)(17 / 255, 15 / 255, 12 / 255),
        [isaac_typescript_definitions_1.StageID.ASHPIT]: (0, readOnly_1.newReadonlyColor)(12 / 255, 10 / 255, 10 / 255),
        [isaac_typescript_definitions_1.StageID.MAUSOLEUM]: (0, readOnly_1.newReadonlyColor)(14 / 255, 10 / 255, 14 / 255),
        [isaac_typescript_definitions_1.StageID.GEHENNA]: (0, readOnly_1.newReadonlyColor)(15 / 255, 4 / 255, 4 / 255),
        [isaac_typescript_definitions_1.StageID.CORPSE]: (0, readOnly_1.newReadonlyColor)(13 / 255, 14 / 255, 12 / 255),
        [isaac_typescript_definitions_1.StageID.MORTIS]: (0, readOnly_1.newReadonlyColor)(13 / 255, 14 / 255, 12 / 255),
        [isaac_typescript_definitions_1.StageID.HOME]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.BACKWARDS]: DEFAULT_COLOR
        // 36
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/versusScreenDirtSpotColors.js
  var require_versusScreenDirtSpotColors = __commonJS({
    "node_modules/isaacscript-common/dist/objects/versusScreenDirtSpotColors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.VERSUS_SCREEN_DIRT_SPOT_COLORS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var readOnly_1 = require_readOnly();
      var BASEMENT_COLOR = (0, readOnly_1.newReadonlyColor)(201 / 255, 114 / 255, 96 / 255);
      var CAVES_COLOR = (0, readOnly_1.newReadonlyColor)(167 / 255, 111 / 255, 75 / 255);
      var DEPTHS_COLOR = (0, readOnly_1.newReadonlyColor)(70 / 255, 70 / 255, 72 / 255);
      var WOMB_COLOR = (0, readOnly_1.newReadonlyColor)(241 / 255, 28 / 255, 28 / 255);
      var SHEOL_COLOR = (0, readOnly_1.newReadonlyColor)(60 / 255, 54 / 255, 54 / 255);
      var DEFAULT_COLOR = BASEMENT_COLOR;
      exports2.VERSUS_SCREEN_DIRT_SPOT_COLORS = {
        [isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.BASEMENT]: BASEMENT_COLOR,
        [isaac_typescript_definitions_1.StageID.CELLAR]: (0, readOnly_1.newReadonlyColor)(229 / 255, 157 / 255, 111 / 255),
        [isaac_typescript_definitions_1.StageID.BURNING_BASEMENT]: (0, readOnly_1.newReadonlyColor)(252 / 255, 108 / 255, 90 / 255),
        [isaac_typescript_definitions_1.StageID.CAVES]: CAVES_COLOR,
        [isaac_typescript_definitions_1.StageID.CATACOMBS]: (0, readOnly_1.newReadonlyColor)(135 / 255, 90 / 255, 80 / 255),
        [isaac_typescript_definitions_1.StageID.FLOODED_CAVES]: (0, readOnly_1.newReadonlyColor)(111 / 255, 147 / 255, 180 / 255),
        [isaac_typescript_definitions_1.StageID.DEPTHS]: DEPTHS_COLOR,
        [isaac_typescript_definitions_1.StageID.NECROPOLIS]: (0, readOnly_1.newReadonlyColor)(88 / 255, 67 / 255, 54 / 255),
        [isaac_typescript_definitions_1.StageID.DANK_DEPTHS]: DEPTHS_COLOR,
        [isaac_typescript_definitions_1.StageID.WOMB]: WOMB_COLOR,
        [isaac_typescript_definitions_1.StageID.UTERO]: (0, readOnly_1.newReadonlyColor)(199 / 255, 60 / 255, 48 / 255),
        [isaac_typescript_definitions_1.StageID.SCARRED_WOMB]: (0, readOnly_1.newReadonlyColor)(247 / 255, 152 / 255, 88 / 255),
        [isaac_typescript_definitions_1.StageID.BLUE_WOMB]: (0, readOnly_1.newReadonlyColor)(157 / 255, 209 / 255, 255 / 255),
        [isaac_typescript_definitions_1.StageID.SHEOL]: SHEOL_COLOR,
        [isaac_typescript_definitions_1.StageID.CATHEDRAL]: (0, readOnly_1.newReadonlyColor)(44 / 255, 100 / 255, 111 / 255),
        [isaac_typescript_definitions_1.StageID.DARK_ROOM]: (0, readOnly_1.newReadonlyColor)(80 / 255, 38 / 255, 20 / 255),
        [isaac_typescript_definitions_1.StageID.CHEST]: (0, readOnly_1.newReadonlyColor)(175 / 255, 108 / 255, 72 / 255),
        [isaac_typescript_definitions_1.StageID.SHOP]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.ULTRA_GREED]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.VOID]: (0, readOnly_1.newReadonlyColor)(70 / 255, 5 / 255, 5 / 255),
        [isaac_typescript_definitions_1.StageID.DOWNPOUR]: (0, readOnly_1.newReadonlyColor)(149 / 255, 157 / 255, 167 / 255),
        [isaac_typescript_definitions_1.StageID.DROSS]: (0, readOnly_1.newReadonlyColor)(179 / 255, 179 / 255, 143 / 255),
        [isaac_typescript_definitions_1.StageID.MINES]: (0, readOnly_1.newReadonlyColor)(93 / 255, 85 / 255, 72 / 255),
        [isaac_typescript_definitions_1.StageID.ASHPIT]: (0, readOnly_1.newReadonlyColor)(106 / 255, 102 / 255, 94 / 255),
        [isaac_typescript_definitions_1.StageID.MAUSOLEUM]: (0, readOnly_1.newReadonlyColor)(70 / 255, 59 / 255, 72 / 255),
        [isaac_typescript_definitions_1.StageID.GEHENNA]: (0, readOnly_1.newReadonlyColor)(59 / 255, 41 / 255, 41 / 255),
        [isaac_typescript_definitions_1.StageID.CORPSE]: (0, readOnly_1.newReadonlyColor)(124 / 255, 134 / 255, 111 / 255),
        [isaac_typescript_definitions_1.StageID.MORTIS]: (0, readOnly_1.newReadonlyColor)(124 / 255, 134 / 255, 111 / 255),
        [isaac_typescript_definitions_1.StageID.HOME]: DEFAULT_COLOR,
        [isaac_typescript_definitions_1.StageID.BACKWARDS]: DEFAULT_COLOR
        // 36
      };
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/customStages/versusScreen.js
  var require_versusScreen2 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/customStages/versusScreen.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.versusScreenPostRender = exports2.playVersusScreenAnimation = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var array_1 = require_array();
      var bosses_1 = require_bosses();
      var roomData_1 = require_roomData();
      var string_1 = require_string();
      var ui_1 = require_ui();
      var utils_1 = require_utils();
      var versusScreen_1 = require_versusScreen();
      var versusScreenBackgroundColors_1 = require_versusScreenBackgroundColors();
      var versusScreenDirtSpotColors_1 = require_versusScreenDirtSpotColors();
      var constants_1 = require_constants2();
      var v_1 = require_v();
      var DEFAULT_STAGE_ID = isaac_typescript_definitions_1.StageID.BASEMENT;
      var VERSUS_SCREEN_ANIMATION_NAME = "Scene";
      var NUM_VERSUS_SCREEN_ANM2_LAYERS = 14;
      var VersusScreenLayer;
      (function(VersusScreenLayer2) {
        VersusScreenLayer2[VersusScreenLayer2["BACKGROUND"] = 0] = "BACKGROUND";
        VersusScreenLayer2[VersusScreenLayer2["FRAME"] = 1] = "FRAME";
        VersusScreenLayer2[VersusScreenLayer2["BOSS_SPOT"] = 2] = "BOSS_SPOT";
        VersusScreenLayer2[VersusScreenLayer2["PLAYER_SPOT"] = 3] = "PLAYER_SPOT";
        VersusScreenLayer2[VersusScreenLayer2["BOSS_PORTRAIT"] = 4] = "BOSS_PORTRAIT";
        VersusScreenLayer2[VersusScreenLayer2["PLAYER_PORTRAIT"] = 5] = "PLAYER_PORTRAIT";
        VersusScreenLayer2[VersusScreenLayer2["PLAYER_NAME"] = 6] = "PLAYER_NAME";
        VersusScreenLayer2[VersusScreenLayer2["BOSS_NAME"] = 7] = "BOSS_NAME";
        VersusScreenLayer2[VersusScreenLayer2["VS_TEXT"] = 8] = "VS_TEXT";
        VersusScreenLayer2[VersusScreenLayer2["BOSS_DOUBLE"] = 9] = "BOSS_DOUBLE";
        VersusScreenLayer2[VersusScreenLayer2["DT_TEXT"] = 10] = "DT_TEXT";
        VersusScreenLayer2[VersusScreenLayer2["OVERLAY"] = 11] = "OVERLAY";
        VersusScreenLayer2[VersusScreenLayer2["PLAYER_PORTRAIT_ALT"] = 12] = "PLAYER_PORTRAIT_ALT";
        VersusScreenLayer2[VersusScreenLayer2["BOSS_PORTRAIT_GROUND"] = 13] = "BOSS_PORTRAIT_GROUND";
        VersusScreenLayer2[VersusScreenLayer2["BOSS_PORTRAIT_2_GROUND"] = 14] = "BOSS_PORTRAIT_2_GROUND";
      })(VersusScreenLayer || (VersusScreenLayer = {}));
      var OTHER_ANM2_LAYERS = (0, array_1.arrayRemove)((0, utils_1.eRange)(NUM_VERSUS_SCREEN_ANM2_LAYERS), VersusScreenLayer.BACKGROUND, VersusScreenLayer.BOSS_SPOT, VersusScreenLayer.PLAYER_SPOT, VersusScreenLayer.OVERLAY, VersusScreenLayer.PLAYER_PORTRAIT_ALT);
      var VANILLA_VERSUS_PLAYBACK_SPEED = 0.5;
      var versusScreenSprite = Sprite();
      var versusScreenBackgroundSprite = Sprite();
      var versusScreenDirtSpotSprite = Sprite();
      function playVersusScreenAnimation(customStage, disableAllSound, pause, runInNFrames) {
        const room = cachedClasses_1.game.GetRoom();
        const roomType = room.GetType();
        const roomCleared = room.IsClear();
        const hud = cachedClasses_1.game.GetHUD();
        if (roomType !== isaac_typescript_definitions_1.RoomType.BOSS) {
          return;
        }
        if (roomCleared) {
          return;
        }
        if (willVanillaVersusScreenPlay()) {
          const level = cachedClasses_1.game.GetLevel();
          level.SetStage(constants_1.DEFAULT_BASE_STAGE, constants_1.DEFAULT_BASE_STAGE_TYPE);
          runInNFrames.runNextGameFrame(() => {
            const futureLevel = cachedClasses_1.game.GetLevel();
            futureLevel.SetStage(constants_1.CUSTOM_FLOOR_STAGE, constants_1.CUSTOM_FLOOR_STAGE_TYPE);
          });
          return;
        }
        v_1.v.run.showingBossVersusScreen = true;
        pause.pause();
        hud.SetVisible(false);
        disableAllSound.disableAllSound(constants_1.CUSTOM_STAGE_FEATURE_NAME);
        if (!versusScreenSprite.IsLoaded()) {
          versusScreenSprite.Load("gfx/ui/boss/versusscreen.anm2", false);
          versusScreenSprite.ReplaceSpritesheet(VersusScreenLayer.OVERLAY, `${constants_1.ISAACSCRIPT_CUSTOM_STAGE_GFX_PATH}/overlay.png`);
        }
        {
          const { namePNGPath, portraitPNGPath } = getPlayerPNGPaths();
          versusScreenSprite.ReplaceSpritesheet(VersusScreenLayer.PLAYER_NAME, namePNGPath);
          versusScreenSprite.ReplaceSpritesheet(VersusScreenLayer.PLAYER_PORTRAIT, portraitPNGPath);
        }
        {
          const { namePNGPath, portraitPNGPath } = getBossPNGPaths(customStage);
          const trimmedNamePNGPath = (0, string_1.removeCharactersBefore)(namePNGPath, "gfx/");
          versusScreenSprite.ReplaceSpritesheet(VersusScreenLayer.BOSS_NAME, trimmedNamePNGPath);
          const trimmedPortraitPNGPath = (0, string_1.removeCharactersBefore)(portraitPNGPath, "gfx/");
          versusScreenSprite.ReplaceSpritesheet(VersusScreenLayer.BOSS_PORTRAIT, trimmedPortraitPNGPath);
        }
        versusScreenSprite.LoadGraphics();
        if (!versusScreenBackgroundSprite.IsLoaded()) {
          versusScreenBackgroundSprite.Load("gfx/ui/boss/versusscreen.anm2", true);
        }
        let backgroundColor = versusScreenBackgroundColors_1.VERSUS_SCREEN_BACKGROUND_COLORS[DEFAULT_STAGE_ID];
        if (customStage.versusScreen?.backgroundColor !== void 0) {
          const { r, g: g2, b: b2, a: a2 } = customStage.versusScreen.backgroundColor;
          backgroundColor = Color(r, g2, b2, a2);
        }
        versusScreenBackgroundSprite.Color = backgroundColor;
        if (!versusScreenDirtSpotSprite.IsLoaded()) {
          versusScreenDirtSpotSprite.Load("gfx/ui/boss/versusscreen.anm2", true);
        }
        let dirtSpotColor = versusScreenDirtSpotColors_1.VERSUS_SCREEN_DIRT_SPOT_COLORS[DEFAULT_STAGE_ID];
        if (customStage.versusScreen?.dirtSpotColor !== void 0) {
          const { r, g: g2, b: b2 } = customStage.versusScreen.dirtSpotColor;
          dirtSpotColor = Color(r, g2, b2);
        }
        versusScreenDirtSpotSprite.Color = dirtSpotColor;
        for (const sprite of [
          versusScreenBackgroundSprite,
          versusScreenDirtSpotSprite,
          versusScreenSprite
        ]) {
          sprite.Play(VERSUS_SCREEN_ANIMATION_NAME, true);
          sprite.PlaybackSpeed = VANILLA_VERSUS_PLAYBACK_SPEED;
        }
      }
      exports2.playVersusScreenAnimation = playVersusScreenAnimation;
      function willVanillaVersusScreenPlay() {
        const bosses = (0, bosses_1.getBosses)();
        return bosses.some((boss) => boss.GetBossID() !== 0);
      }
      function getPlayerPNGPaths() {
        const player = Isaac.GetPlayer();
        const character = player.GetPlayerType();
        if (character === isaac_typescript_definitions_1.PlayerType.POSSESSOR) {
          error("Failed to get the player PNG paths since they are a possessor.");
        }
        const namePNGPath = (0, versusScreen_1.getCharacterNamePNGFilePath)(character);
        const portraitPNGPath = (0, versusScreen_1.getCharacterPortraitPNGFilePath)(character);
        return { namePNGPath, portraitPNGPath };
      }
      function getBossPNGPaths(customStage) {
        const paths = getBossPNGPathsCustom(customStage);
        if (paths !== void 0) {
          return paths;
        }
        const bosses = (0, bosses_1.getBosses)();
        const firstBoss = bosses[0];
        const bossID = firstBoss === void 0 ? 0 : firstBoss.GetBossID();
        if (bossID === 0) {
          const questionMarkPath = (0, versusScreen_1.getBossNamePNGFilePath)(isaac_typescript_definitions_1.BossID.BLUE_BABY);
          const namePNGPath2 = questionMarkPath;
          const portraitPNGPath2 = questionMarkPath;
          return { namePNGPath: namePNGPath2, portraitPNGPath: portraitPNGPath2 };
        }
        const namePNGPath = (0, versusScreen_1.getBossNamePNGFilePath)(bossID);
        const portraitPNGPath = (0, versusScreen_1.getBossPortraitPNGFilePath)(bossID);
        return { namePNGPath, portraitPNGPath };
      }
      function getBossPNGPathsCustom(customStage) {
        if (customStage.bossPool === void 0) {
          return void 0;
        }
        const roomSubType = (0, roomData_1.getRoomSubType)();
        const matchingBossEntry = customStage.bossPool.find((bossEntry) => bossEntry.subType === roomSubType);
        if (matchingBossEntry === void 0) {
          return void 0;
        }
        return matchingBossEntry.versusScreen;
      }
      function finishVersusScreenAnimation(pause, disableAllSound) {
        const hud = cachedClasses_1.game.GetHUD();
        v_1.v.run.showingBossVersusScreen = false;
        pause.unpause();
        hud.SetVisible(true);
        disableAllSound.enableAllSound(constants_1.CUSTOM_STAGE_FEATURE_NAME);
        cachedClasses_1.sfxManager.Play(isaac_typescript_definitions_1.SoundEffect.CASTLE_PORTCULLIS);
      }
      function versusScreenPostRender(pause, disableAllSound) {
        if (!v_1.v.run.showingBossVersusScreen) {
          return;
        }
        if (versusScreenSprite.IsFinished(VERSUS_SCREEN_ANIMATION_NAME)) {
          finishVersusScreenAnimation(pause, disableAllSound);
          return;
        }
        const position = (0, ui_1.getScreenCenterPos)();
        versusScreenBackgroundSprite.RenderLayer(VersusScreenLayer.BACKGROUND, position);
        versusScreenBackgroundSprite.Update();
        versusScreenSprite.RenderLayer(VersusScreenLayer.OVERLAY, position);
        versusScreenDirtSpotSprite.RenderLayer(VersusScreenLayer.BOSS_SPOT, position);
        versusScreenDirtSpotSprite.RenderLayer(VersusScreenLayer.PLAYER_SPOT, position);
        versusScreenDirtSpotSprite.Update();
        for (const layerID of OTHER_ANM2_LAYERS) {
          versusScreenSprite.RenderLayer(layerID, position);
        }
        versusScreenSprite.Update();
      }
      exports2.versusScreenPostRender = versusScreenPostRender;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CustomStages.js
  var require_CustomStages = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CustomStages.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __importStar = exports2 && exports2.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomStages = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var metadataJSON = __importStar(require_customStageMetadata());
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var doors_1 = require_doors();
      var flag_1 = require_flag();
      var log_1 = require_log();
      var rng_1 = require_rng();
      var rockAlt_1 = require_rockAlt();
      var rooms_1 = require_rooms();
      var sound_1 = require_sound();
      var stage_1 = require_stage();
      var utils_1 = require_utils();
      var Feature_1 = require_Feature();
      var backdrop_1 = require_backdrop();
      var constants_1 = require_constants2();
      var gridEntities_1 = require_gridEntities2();
      var shadows_1 = require_shadows();
      var streakText_1 = require_streakText();
      var utils_2 = require_utils2();
      var v_1 = require_v();
      var versusScreen_1 = require_versusScreen2();
      var MUSIC_DELAY_RENDER_FRAMES = 70;
      var CustomStages = class extends Feature_1.Feature {
        /** @internal */
        v = v_1.v;
        /** Indexed by custom stage name. */
        customStagesMap = /* @__PURE__ */ new Map();
        /** Indexed by room variant. */
        customStageCachedRoomData = /* @__PURE__ */ new Map();
        usingRedKey = false;
        customGridEntities;
        customTrapdoors;
        disableAllSound;
        gameReorderedCallbacks;
        pause;
        runInNFrames;
        /** @internal */
        constructor(customGridEntities, customTrapdoors, disableAllSound, gameReorderedCallbacks, pause, runInNFrames) {
          super();
          this.featuresUsed = [
            ISCFeature_1.ISCFeature.CUSTOM_GRID_ENTITIES,
            ISCFeature_1.ISCFeature.CUSTOM_TRAPDOORS,
            ISCFeature_1.ISCFeature.DISABLE_ALL_SOUND,
            ISCFeature_1.ISCFeature.GAME_REORDERED_CALLBACKS,
            ISCFeature_1.ISCFeature.PAUSE,
            ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES
          ];
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender],
            // 3
            [
              isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM,
              this.postUseItemRedKey,
              [isaac_typescript_definitions_1.CollectibleType.RED_KEY]
            ],
            // 12
            [isaac_typescript_definitions_1.ModCallback.POST_CURSE_EVAL, this.postCurseEval],
            // 21
            [isaac_typescript_definitions_1.ModCallback.GET_SHADER_PARAMS, this.getShaderParams],
            // 23
            [
              isaac_typescript_definitions_1.ModCallback.PRE_USE_ITEM,
              this.preUseItemRedKey,
              [isaac_typescript_definitions_1.CollectibleType.RED_KEY]
            ]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_BROKEN,
              this.postGridEntityBrokenRockAlt,
              [isaac_typescript_definitions_1.GridEntityType.ROCK_ALT]
            ],
            [ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_INIT, this.postGridEntityInit],
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
          this.customGridEntities = customGridEntities;
          this.customTrapdoors = customTrapdoors;
          this.disableAllSound = disableAllSound;
          this.gameReorderedCallbacks = gameReorderedCallbacks;
          this.pause = pause;
          this.runInNFrames = runInNFrames;
          this.initCustomStageMetadata();
        }
        initCustomStageMetadata() {
          if (!(0, array_1.isArray)(metadataJSON)) {
            error('The IsaacScript standard library attempted to read the custom stage metadata from the "customStageMetadata.lua" file, but it was not an array.');
          }
          const customStagesLua = metadataJSON;
          for (const customStageLua of customStagesLua) {
            this.initRoomTypeMap(customStageLua);
            this.initCustomTrapdoorDestination(customStageLua);
          }
        }
        initRoomTypeMap(customStageLua) {
          const roomTypeMap = getRoomTypeMap(customStageLua);
          const customStage = {
            ...customStageLua,
            roomTypeMap
          };
          this.customStagesMap.set(customStage.name, customStage);
        }
        initCustomTrapdoorDestination(customStageLua) {
          this.customTrapdoors.registerCustomTrapdoorDestination(customStageLua.name, this.goToCustomStage);
        }
        goToCustomStage = (destinationName, destinationStage, _destinationStageType) => {
          (0, utils_1.assertDefined)(destinationName, "Failed to go to a custom stage since the custom trapdoors feature did not pass a destination name to the logic function.");
          const firstFloor = destinationStage === isaac_typescript_definitions_1.LevelStage.BASEMENT_1;
          this.setCustomStage(destinationName, firstFloor);
        };
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return;
          }
          (0, streakText_1.streakTextPostRender)();
          (0, versusScreen_1.versusScreenPostRender)(this.pause, this.disableAllSound);
          if (customStage.music !== void 0) {
            const currentMusic = cachedClasses_1.musicManager.GetCurrentMusicID();
            const music = Isaac.GetMusicIdByName(customStage.music);
            if (currentMusic === music) {
              cachedClasses_1.musicManager.Resume();
              cachedClasses_1.musicManager.UpdateVolume();
            }
          }
        };
        /**
         * Fix the bug where Red Key will not work on custom floors (due to the stage being a bugged
         * value).
         */
        // ModCallback.POST_USE_ITEM (3)
        postUseItemRedKey = () => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return void 0;
          }
          if (!this.usingRedKey) {
            return void 0;
          }
          this.usingRedKey = false;
          const level = cachedClasses_1.game.GetLevel();
          level.SetStage(constants_1.CUSTOM_FLOOR_STAGE, constants_1.CUSTOM_FLOOR_STAGE_TYPE);
          return void 0;
        };
        // ModCallback.POST_CURSE_EVAL (12)
        postCurseEval = (curses) => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return void 0;
          }
          if ((0, flag_1.hasFlag)(curses, isaac_typescript_definitions_1.LevelCurse.LABYRINTH)) {
            return (0, flag_1.removeFlag)(curses, isaac_typescript_definitions_1.LevelCurse.LABYRINTH);
          }
          return void 0;
        };
        // ModCallback.GET_SHADER_PARAMS (22)
        getShaderParams = (shaderName) => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return void 0;
          }
          (0, streakText_1.streakTextGetShaderParams)(customStage, shaderName);
          return void 0;
        };
        /**
         * Fix the bug where Red Key will not work on custom floors (due to the stage being a bugged
         * value).
         */
        // ModCallback.PRE_USE_ITEM (23)
        preUseItemRedKey = () => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return void 0;
          }
          this.usingRedKey = true;
          const level = cachedClasses_1.game.GetLevel();
          const stage = customStage.baseStage ?? constants_1.DEFAULT_BASE_STAGE;
          const stageType = customStage.baseStageType ?? constants_1.DEFAULT_BASE_STAGE_TYPE;
          level.SetStage(stage, stageType);
          return void 0;
        };
        // ModCallbackCustom.POST_GRID_ENTITY_BROKEN
        // GridEntityType.ROCK_ALT
        postGridEntityBrokenRockAlt = (gridEntity) => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return;
          }
          if (customStage.rocksPNGPath === void 0) {
            return;
          }
          (0, rockAlt_1.removeUrnRewards)(gridEntity);
        };
        // ModCallbackCustom.POST_GRID_ENTITY_INIT
        postGridEntityInit = (gridEntity) => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return;
          }
          if (this.customGridEntities.isCustomGridEntity(gridEntity)) {
            return;
          }
          (0, gridEntities_1.setCustomDecorationGraphics)(customStage, gridEntity);
          (0, gridEntities_1.setCustomRockGraphics)(customStage, gridEntity);
          (0, gridEntities_1.setCustomPitGraphics)(customStage, gridEntity);
          (0, gridEntities_1.setCustomDoorGraphics)(customStage, gridEntity);
          (0, gridEntities_1.convertVanillaTrapdoors)(customStage, gridEntity, v_1.v.run.firstFloor, this.customTrapdoors);
        };
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          const customStage = v_1.v.run.currentCustomStage;
          if (customStage === null) {
            return;
          }
          (0, backdrop_1.setCustomStageBackdrop)(customStage);
          (0, shadows_1.setShadows)(customStage);
          (0, versusScreen_1.playVersusScreenAnimation)(customStage, this.disableAllSound, this.pause, this.runInNFrames);
          if (customStage.music !== void 0 && (0, rooms_1.inRoomType)(isaac_typescript_definitions_1.RoomType.DEFAULT)) {
            const music = Isaac.GetMusicIdByName(customStage.music);
            const currentMusic = cachedClasses_1.musicManager.GetCurrentMusicID();
            if (currentMusic !== music) {
              cachedClasses_1.musicManager.Fadein(music);
            }
          }
        };
        /** Pick a custom room for each vanilla room. */
        setStageRoomsData(customStage, rng, verbose) {
          const level = cachedClasses_1.game.GetLevel();
          const startingRoomGridIndex = level.GetStartingRoomIndex();
          for (const room of (0, rooms_1.getRoomsInsideGrid)()) {
            if (room.SafeGridIndex === startingRoomGridIndex) {
              continue;
            }
            if (room.Data === void 0) {
              continue;
            }
            const roomType = room.Data.Type;
            const roomShapeMap = customStage.roomTypeMap.get(roomType);
            if (roomShapeMap === void 0) {
              if (roomType === isaac_typescript_definitions_1.RoomType.DEFAULT) {
                (0, log_1.logError)(`Failed to find any custom rooms for RoomType.${isaac_typescript_definitions_1.RoomType[roomType]} (${roomType}) for custom stage: ${customStage.name}`);
              }
              continue;
            }
            const roomShape = room.Data.Shape;
            const roomDoorSlotFlagMap = roomShapeMap.get(roomShape);
            if (roomDoorSlotFlagMap === void 0) {
              (0, log_1.logError)(`Failed to find any custom rooms for RoomType.${isaac_typescript_definitions_1.RoomType[roomType]} (${roomType}) + RoomShape.${isaac_typescript_definitions_1.RoomShape[roomShape]} (${roomShape}) for custom stage: ${customStage.name}`);
              continue;
            }
            const doorSlotFlags = room.Data.Doors;
            let roomsMetadata = roomDoorSlotFlagMap.get(doorSlotFlags);
            if (roomsMetadata === void 0) {
              const allDoorSlots = (0, doors_1.getDoorSlotsForRoomShape)(roomShape);
              const allDoorSlotFlags = (0, doors_1.doorSlotsToDoorSlotFlags)(allDoorSlots);
              roomsMetadata = roomDoorSlotFlagMap.get(allDoorSlotFlags);
              if (roomsMetadata === void 0) {
                (0, log_1.logError)(`Failed to find any custom rooms for RoomType.${isaac_typescript_definitions_1.RoomType[roomType]} (${roomType}) + RoomShape.${isaac_typescript_definitions_1.RoomShape[roomShape]} (${roomShape}) + all doors enabled for custom stage: ${customStage.name}`);
                continue;
              }
            }
            let randomRoom;
            if (roomType === isaac_typescript_definitions_1.RoomType.BOSS) {
              if (customStage.bossPool === void 0) {
                continue;
              }
              randomRoom = (0, utils_2.getRandomBossRoomFromPool)(roomsMetadata, customStage.bossPool, rng, verbose);
            } else {
              randomRoom = (0, utils_2.getRandomCustomStageRoom)(roomsMetadata, rng, verbose);
            }
            let newRoomData = this.customStageCachedRoomData.get(randomRoom.variant);
            if (newRoomData === void 0) {
              newRoomData = (0, rooms_1.getRoomDataForTypeVariant)(
                roomType,
                randomRoom.variant,
                false,
                // Since we are going to multiple rooms, we cancel the transition.
                true
              );
              if (newRoomData === void 0) {
                (0, log_1.logError)(`Failed to get the room data for room variant ${randomRoom.variant} for custom stage: ${customStage.name}`);
                continue;
              }
              this.customStageCachedRoomData.set(randomRoom.variant, newRoomData);
            }
            room.Data = newRoomData;
          }
        }
        /**
         * Helper function to warp to a custom stage/level.
         *
         * Custom stages/levels must first be defined in the "tsconfig.json" file. See the documentation
         * for more details: https://isaacscript.github.io/main/custom-stages/
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_STAGES`.
         *
         * @param name The name of the custom stage, corresponding to what is in the "tsconfig.json" file.
         * @param firstFloor Optional. Whether to go to the first floor or the second floor. For example,
         *                   if you have a custom stage emulating Caves, then the first floor would be
         *                   Caves 1, and the second floor would be Caves 2. Default is true.
         * @param streakText Optional. Whether to show the streak text at the top of the screen that
         *                   announces the name of the level. Default is true.
         * @param verbose Optional. Whether to log additional information about the rooms that are chosen.
         *                Default is false.
         * @public
         */
        setCustomStage(name, firstFloor = true, streakText = true, verbose = false) {
          const customStage = this.customStagesMap.get(name);
          (0, utils_1.assertDefined)(customStage, `Failed to set the custom stage of "${name}" because it was not found in the custom stages map. (Try restarting IsaacScript / recompiling the mod / restarting the game, and try again. If that does not work, you probably forgot to define it in your "tsconfig.json" file.) See the website for more details on how to set up custom stages.`);
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const seeds = cachedClasses_1.game.GetSeeds();
          const startSeed = seeds.GetStartSeed();
          const rng = (0, rng_1.newRNG)(startSeed);
          v_1.v.run.currentCustomStage = customStage;
          v_1.v.run.firstFloor = firstFloor;
          if (stage === constants_1.CUSTOM_FLOOR_STAGE) {
            level.SetStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_1, isaac_typescript_definitions_1.StageType.ORIGINAL);
          }
          let baseStage = customStage.baseStage === void 0 ? constants_1.DEFAULT_BASE_STAGE : customStage.baseStage;
          if (!firstFloor) {
            baseStage++;
          }
          const baseStageType = customStage.baseStageType === void 0 ? constants_1.DEFAULT_BASE_STAGE_TYPE : customStage.baseStageType;
          const reseed = stage >= baseStage;
          (0, stage_1.setStage)(baseStage, baseStageType, reseed);
          cachedClasses_1.musicManager.Disable();
          this.setStageRoomsData(customStage, rng, verbose);
          const targetStage = constants_1.CUSTOM_FLOOR_STAGE;
          const targetStageType = constants_1.CUSTOM_FLOOR_STAGE_TYPE;
          level.SetStage(targetStage, targetStageType);
          this.gameReorderedCallbacks.reorderedCallbacksSetStage(targetStage, targetStageType);
          if (streakText) {
            this.runInNFrames.runNextGameFrame(() => {
              (0, streakText_1.topStreakTextStart)();
            });
          }
          let customStageMusic;
          if (customStage.music !== void 0) {
            customStageMusic = Isaac.GetMusicIdByName(customStage.music);
            if (customStageMusic === -1) {
              (0, log_1.logError)(`Failed to get the music ID associated with the name of: ${customStage.music}`);
            }
          }
          const music = customStageMusic === void 0 || customStageMusic === -1 ? (0, sound_1.getMusicForStage)(baseStage, baseStageType) : customStageMusic;
          this.runInNFrames.runInNRenderFrames(() => {
            cachedClasses_1.musicManager.Enable();
            cachedClasses_1.musicManager.Play(music);
            cachedClasses_1.musicManager.UpdateVolume();
          }, MUSIC_DELAY_RENDER_FRAMES);
        }
        /**
         * Helper function to disable the custom stage. This is typically called before taking the player
         * to a vanilla floor.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_STAGES`.
         *
         * @public
         */
        disableCustomStage() {
          v_1.v.run.currentCustomStage = null;
        }
      };
      exports2.CustomStages = CustomStages;
      __decorate([
        decorators_1.Exported
      ], CustomStages.prototype, "setCustomStage", null);
      __decorate([
        decorators_1.Exported
      ], CustomStages.prototype, "disableCustomStage", null);
      function getRoomTypeMap(customStageLua) {
        const roomTypeMap = /* @__PURE__ */ new Map();
        for (const roomMetadata of customStageLua.roomsMetadata) {
          const roomType = roomMetadata.type;
          let roomShapeMap = roomTypeMap.get(roomType);
          if (roomShapeMap === void 0) {
            roomShapeMap = /* @__PURE__ */ new Map();
            roomTypeMap.set(roomType, roomShapeMap);
          }
          const roomShape = roomMetadata.shape;
          let roomDoorSlotFlagMap = roomShapeMap.get(roomShape);
          if (roomDoorSlotFlagMap === void 0) {
            roomDoorSlotFlagMap = /* @__PURE__ */ new Map();
            roomShapeMap.set(roomShape, roomDoorSlotFlagMap);
          }
          const doorSlotFlags = roomMetadata.doorSlotFlags;
          let rooms = roomDoorSlotFlagMap.get(doorSlotFlags);
          if (rooms === void 0) {
            rooms = [];
            roomDoorSlotFlagMap.set(doorSlotFlags, rooms);
          }
          rooms.push(roomMetadata);
        }
        return roomTypeMap;
      }
    }
  });

  // node_modules/isaacscript-common/dist/enums/private/GridEntityTypeCustom.js
  var require_GridEntityTypeCustom = __commonJS({
    "node_modules/isaacscript-common/dist/enums/private/GridEntityTypeCustom.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.GridEntityTypeCustom = void 0;
      exports2.GridEntityTypeCustom = {
        /**
         * We arbitrarily choose 1000 as to not conflict with end-user mods. (The expectation is that
         * end-user mods will begin their enums with values of 0 and increment upwards.)
         */
        TRAPDOOR_CUSTOM: 1e3
      };
    }
  });

  // node_modules/isaacscript-common/dist/enums/private/StageTravelState.js
  var require_StageTravelState = __commonJS({
    "node_modules/isaacscript-common/dist/enums/private/StageTravelState.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StageTravelState = void 0;
      var StageTravelState;
      (function(StageTravelState2) {
        StageTravelState2[StageTravelState2["NONE"] = 0] = "NONE";
        StageTravelState2[StageTravelState2["PLAYERS_JUMPING_DOWN"] = 1] = "PLAYERS_JUMPING_DOWN";
        StageTravelState2[StageTravelState2["PIXELATION_TO_BLACK"] = 2] = "PIXELATION_TO_BLACK";
        StageTravelState2[StageTravelState2["WAITING_FOR_FIRST_PIXELATION_TO_END"] = 3] = "WAITING_FOR_FIRST_PIXELATION_TO_END";
        StageTravelState2[StageTravelState2["WAITING_FOR_SECOND_PIXELATION_TO_GET_HALF_WAY"] = 4] = "WAITING_FOR_SECOND_PIXELATION_TO_GET_HALF_WAY";
        StageTravelState2[StageTravelState2["PIXELATION_TO_ROOM"] = 5] = "PIXELATION_TO_ROOM";
        StageTravelState2[StageTravelState2["PLAYERS_LAYING_DOWN"] = 6] = "PLAYERS_LAYING_DOWN";
      })(StageTravelState || (exports2.StageTravelState = StageTravelState = {}));
    }
  });

  // node_modules/isaacscript-common/dist/enums/private/TrapdoorAnimation.js
  var require_TrapdoorAnimation = __commonJS({
    "node_modules/isaacscript-common/dist/enums/private/TrapdoorAnimation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TrapdoorAnimation = void 0;
      var TrapdoorAnimation;
      (function(TrapdoorAnimation2) {
        TrapdoorAnimation2["OPENED"] = "Opened";
        TrapdoorAnimation2["CLOSED"] = "Closed";
        TrapdoorAnimation2["OPEN_ANIMATION"] = "Open Animation";
      })(TrapdoorAnimation || (exports2.TrapdoorAnimation = TrapdoorAnimation = {}));
    }
  });

  // node_modules/isaacscript-common/dist/functions/easing.js
  var require_easing = __commonJS({
    "node_modules/isaacscript-common/dist/functions/easing.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.easeInOutBounce = exports2.easeOutBounce = exports2.easeInBounce = exports2.easeInOutBack = exports2.easeOutBack = exports2.easeInBack = exports2.easeInOutExpo = exports2.easeOutExpo = exports2.easeInExpo = exports2.easeInOutQuart = exports2.easeOutQuart = exports2.easeInQuart = exports2.easeInOutQuad = exports2.easeOutQuad = exports2.easeInQuad = exports2.easeInOutElastic = exports2.easeOutElastic = exports2.easeInElastic = exports2.easeInOutCirc = exports2.easeOutCirc = exports2.easeInCirc = exports2.easeInOutQuint = exports2.easeOutQuint = exports2.easeInQuint = exports2.easeInOutCubic = exports2.easeOutCubic = exports2.easeInCubic = exports2.easeInOutSine = exports2.easeOutSine = exports2.easeInSine = void 0;
      function easeInSine(time) {
        return 1 - Math.cos(time * Math.PI / 2);
      }
      exports2.easeInSine = easeInSine;
      function easeOutSine(time) {
        return Math.sin(time * Math.PI / 2);
      }
      exports2.easeOutSine = easeOutSine;
      function easeInOutSine(time) {
        return -(Math.cos(Math.PI * time) - 1) / 2;
      }
      exports2.easeInOutSine = easeInOutSine;
      function easeInCubic(time) {
        return time * time * time;
      }
      exports2.easeInCubic = easeInCubic;
      function easeOutCubic(time) {
        return 1 - (1 - time) ** 3;
      }
      exports2.easeOutCubic = easeOutCubic;
      function easeInOutCubic(time) {
        return time < 0.5 ? 4 * time * time * time : 1 - (-2 * time + 2) ** 3 / 2;
      }
      exports2.easeInOutCubic = easeInOutCubic;
      function easeInQuint(time) {
        return time * time * time * time * time;
      }
      exports2.easeInQuint = easeInQuint;
      function easeOutQuint(time) {
        return 1 - (1 - time) ** 5;
      }
      exports2.easeOutQuint = easeOutQuint;
      function easeInOutQuint(time) {
        return time < 0.5 ? 16 * time * time * time * time * time : 1 - (-2 * time + 2) ** 5 / 2;
      }
      exports2.easeInOutQuint = easeInOutQuint;
      function easeInCirc(time) {
        return 1 - Math.sqrt(1 - time ** 2);
      }
      exports2.easeInCirc = easeInCirc;
      function easeOutCirc(time) {
        return Math.sqrt(1 - (time - 1) ** 2);
      }
      exports2.easeOutCirc = easeOutCirc;
      function easeInOutCirc(time) {
        return time < 0.5 ? (1 - Math.sqrt(1 - (2 * time) ** 2)) / 2 : (Math.sqrt(1 - (-2 * time + 2) ** 2) + 1) / 2;
      }
      exports2.easeInOutCirc = easeInOutCirc;
      function easeInElastic(time) {
        const c4 = 2 * Math.PI / 3;
        return time === 0 ? 0 : time === 1 ? 1 : -(2 ** (10 * time - 10)) * Math.sin((time * 10 - 10.75) * c4);
      }
      exports2.easeInElastic = easeInElastic;
      function easeOutElastic(time) {
        const c4 = 2 * Math.PI / 3;
        return time === 0 ? 0 : time === 1 ? 1 : 2 ** (-10 * time) * Math.sin((time * 10 - 0.75) * c4) + 1;
      }
      exports2.easeOutElastic = easeOutElastic;
      function easeInOutElastic(time) {
        const c5 = 2 * Math.PI / 4.5;
        return time === 0 ? 0 : time === 1 ? 1 : time < 0.5 ? -(2 ** (20 * time - 10) * Math.sin((20 * time - 11.125) * c5)) / 2 : 2 ** (-20 * time + 10) * Math.sin((20 * time - 11.125) * c5) / 2 + 1;
      }
      exports2.easeInOutElastic = easeInOutElastic;
      function easeInQuad(time) {
        return time * time;
      }
      exports2.easeInQuad = easeInQuad;
      function easeOutQuad(time) {
        return 1 - (1 - time) * (1 - time);
      }
      exports2.easeOutQuad = easeOutQuad;
      function easeInOutQuad(time) {
        return time < 0.5 ? 2 * time * time : 1 - (-2 * time + 2) ** 2 / 2;
      }
      exports2.easeInOutQuad = easeInOutQuad;
      function easeInQuart(time) {
        return time * time * time * time;
      }
      exports2.easeInQuart = easeInQuart;
      function easeOutQuart(time) {
        return 1 - (1 - time) ** 4;
      }
      exports2.easeOutQuart = easeOutQuart;
      function easeInOutQuart(time) {
        return time < 0.5 ? 8 * time * time * time * time : 1 - (-2 * time + 2) ** 4 / 2;
      }
      exports2.easeInOutQuart = easeInOutQuart;
      function easeInExpo(time) {
        return time === 0 ? 0 : 2 ** (10 * time - 10);
      }
      exports2.easeInExpo = easeInExpo;
      function easeOutExpo(time) {
        return time === 1 ? 1 : 1 - 2 ** (-10 * time);
      }
      exports2.easeOutExpo = easeOutExpo;
      function easeInOutExpo(time) {
        return time === 0 ? 0 : time === 1 ? 1 : time < 0.5 ? 2 ** (20 * time - 10) / 2 : (2 - 2 ** (-20 * time + 10)) / 2;
      }
      exports2.easeInOutExpo = easeInOutExpo;
      function easeInBack(time) {
        const c1 = 1.70158;
        const c3 = c1 + 1;
        return c3 * time * time * time - c1 * time * time;
      }
      exports2.easeInBack = easeInBack;
      function easeOutBack(time) {
        const c1 = 1.70158;
        const c3 = c1 + 1;
        return 1 + c3 * (time - 1) ** 3 + c1 * (time - 1) ** 2;
      }
      exports2.easeOutBack = easeOutBack;
      function easeInOutBack(time) {
        const c1 = 1.70158;
        const c2 = c1 * 1.525;
        return time < 0.5 ? (2 * time) ** 2 * ((c2 + 1) * 2 * time - c2) / 2 : ((2 * time - 2) ** 2 * ((c2 + 1) * (time * 2 - 2) + c2) + 2) / 2;
      }
      exports2.easeInOutBack = easeInOutBack;
      function easeInBounce(time) {
        return 1 - easeOutBounce(1 - time);
      }
      exports2.easeInBounce = easeInBounce;
      function easeOutBounce(time) {
        const n1 = 7.5625;
        const d1 = 2.75;
        if (time < 1 / d1) {
          return n1 * time * time;
        }
        if (time < 2 / d1) {
          return n1 * (time -= 1.5 / d1) * time + 0.75;
        }
        if (time < 2.5 / d1) {
          return n1 * (time -= 2.25 / d1) * time + 0.9375;
        }
        return n1 * (time -= 2.625 / d1) * time + 0.984375;
      }
      exports2.easeOutBounce = easeOutBounce;
      function easeInOutBounce(time) {
        return time < 0.5 ? (1 - easeOutBounce(1 - 2 * time)) / 2 : (1 + easeOutBounce(2 * time - 1)) / 2;
      }
      exports2.easeInOutBounce = easeInOutBounce;
    }
  });

  // node_modules/isaacscript-common/dist/sets/familiarsThatShootPlayerTearsSet.js
  var require_familiarsThatShootPlayerTearsSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/familiarsThatShootPlayerTearsSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.FamiliarVariant.SCISSORS,
        isaac_typescript_definitions_1.FamiliarVariant.INCUBUS,
        isaac_typescript_definitions_1.FamiliarVariant.FATES_REWARD,
        isaac_typescript_definitions_1.FamiliarVariant.SPRINKLER,
        isaac_typescript_definitions_1.FamiliarVariant.LOST_SOUL,
        isaac_typescript_definitions_1.FamiliarVariant.TWISTED_BABY,
        isaac_typescript_definitions_1.FamiliarVariant.BLOOD_BABY,
        isaac_typescript_definitions_1.FamiliarVariant.DECAP_ATTACK
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/familiars.js
  var require_familiars = __commonJS({
    "node_modules/isaacscript-common/dist/functions/familiars.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isFamiliarThatShootsPlayerTears = exports2.isFamiliarStolenBySiren = exports2.getSirenHelper = exports2.getPlayerFamiliars = exports2.checkFamiliarFromCollectibles = exports2.checkFamiliar = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var familiarsThatShootPlayerTearsSet_1 = require_familiarsThatShootPlayerTearsSet();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var rng_1 = require_rng();
      var familiarGenerationRNG = (0, rng_1.newRNG)();
      function checkFamiliar(player, collectibleType, targetCount, familiarVariant, familiarSubType) {
        familiarGenerationRNG.Next();
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        player.CheckFamiliar(familiarVariant, targetCount, familiarGenerationRNG, itemConfigItem, familiarSubType);
      }
      exports2.checkFamiliar = checkFamiliar;
      function checkFamiliarFromCollectibles(player, collectibleType, familiarVariant, familiarSubType) {
        const numCollectibles = player.GetCollectibleNum(collectibleType);
        const effects = player.GetEffects();
        const numCollectibleEffects = effects.GetCollectibleEffectNum(collectibleType);
        const targetCount = numCollectibles + numCollectibleEffects;
        checkFamiliar(player, collectibleType, targetCount, familiarVariant, familiarSubType);
      }
      exports2.checkFamiliarFromCollectibles = checkFamiliarFromCollectibles;
      function getPlayerFamiliars(player) {
        const playerPtrHash = GetPtrHash(player);
        const familiars = (0, entitiesSpecific_1.getFamiliars)();
        return familiars.filter((familiar) => {
          const familiarPlayerPtrHash = GetPtrHash(familiar.Player);
          return familiarPlayerPtrHash === playerPtrHash;
        });
      }
      exports2.getPlayerFamiliars = getPlayerFamiliars;
      function getSirenHelper(familiar) {
        const familiarPtrHash = GetPtrHash(familiar);
        const sirenHelpers = (0, entities_1.getEntities)(isaac_typescript_definitions_1.EntityType.SIREN_HELPER);
        return sirenHelpers.find((sirenHelper) => sirenHelper.Target !== void 0 && GetPtrHash(sirenHelper.Target) === familiarPtrHash);
      }
      exports2.getSirenHelper = getSirenHelper;
      function isFamiliarStolenBySiren(familiar) {
        const sirenHelper = getSirenHelper(familiar);
        return sirenHelper !== void 0;
      }
      exports2.isFamiliarStolenBySiren = isFamiliarStolenBySiren;
      function isFamiliarThatShootsPlayerTears(familiar) {
        return familiarsThatShootPlayerTearsSet_1.FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET.has(familiar.Variant);
      }
      exports2.isFamiliarThatShootsPlayerTears = isFamiliarThatShootsPlayerTears;
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerCenter.js
  var require_playerCenter = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerCenter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.movePlayersToCenter = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var familiars_1 = require_familiars();
      var math_1 = require_math();
      var playerIndex_1 = require_playerIndex();
      function movePlayersToCenter(radius = 10) {
        const isGreedMode = cachedClasses_1.game.IsGreedMode();
        const startingPosition = isGreedMode ? constants_1.NEW_FLOOR_STARTING_POSITION_GREED_MODE : constants_1.NEW_FLOOR_STARTING_POSITION_NORMAL_MODE;
        const players = (0, playerIndex_1.getAllPlayers)();
        const firstPlayer = players[0];
        if (firstPlayer === void 0) {
          return;
        }
        if (players.length === 1) {
          movePlayerAndTheirFamiliars(firstPlayer, startingPosition);
          return;
        }
        const circlePoints = (0, math_1.getCircleDiscretizedPoints)(startingPosition, radius, players.length, 1, 1, isaac_typescript_definitions_1.Direction.LEFT);
        for (const [i, player] of players.entries()) {
          const circlePosition = circlePoints[i];
          if (circlePosition !== void 0) {
            player.Position = circlePosition;
          }
        }
      }
      exports2.movePlayersToCenter = movePlayersToCenter;
      function movePlayerAndTheirFamiliars(player, position) {
        player.Position = position;
        const familiars = (0, familiars_1.getPlayerFamiliars)(player);
        for (const familiar of familiars) {
          familiar.Position = position;
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/CustomTrapdoors.js
  var require_CustomTrapdoors = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/CustomTrapdoors.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CustomTrapdoors = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var GridEntityTypeCustom_1 = require_GridEntityTypeCustom();
      var StageTravelState_1 = require_StageTravelState();
      var TrapdoorAnimation_1 = require_TrapdoorAnimation();
      var easing_1 = require_easing();
      var frames_1 = require_frames();
      var log_1 = require_log();
      var playerCenter_1 = require_playerCenter();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      var positionVelocity_1 = require_positionVelocity();
      var roomData_1 = require_roomData();
      var roomTransition_1 = require_roomTransition();
      var stage_1 = require_stage();
      var tstlClass_1 = require_tstlClass();
      var utils_1 = require_utils();
      var vector_1 = require_vector();
      var ReadonlySet_1 = require_ReadonlySet();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var constants_2 = require_constants2();
      var DEBUG = false;
      var TRAPDOOR_OPEN_DISTANCE = 60;
      var TRAPDOOR_OPEN_DISTANCE_AFTER_BOSS = TRAPDOOR_OPEN_DISTANCE * 2.5;
      var TRAPDOOR_BOSS_REACTION_FRAMES = 30;
      var TRAPDOOR_TOUCH_DISTANCE = 16.5;
      var ANIMATIONS_THAT_PREVENT_STAGE_TRAVEL = new ReadonlySet_1.ReadonlySet([
        "Death",
        "Happy",
        "Sad",
        "Jump"
      ]);
      var PIXELATION_TO_BLACK_FRAMES = 60;
      var OTHER_PLAYER_TRAPDOOR_JUMP_DELAY_GAME_FRAMES = 6;
      var OTHER_PLAYER_TRAPDOOR_JUMP_DURATION_GAME_FRAMES = 5;
      var v = {
        run: {
          state: StageTravelState_1.StageTravelState.NONE,
          /** The render frame that this state was reached. */
          stateRenderFrame: null,
          customTrapdoorActivated: null
        },
        level: {
          /** Indexed by room list index and grid index. */
          trapdoors: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        }
      };
      var CustomTrapdoors = class extends Feature_1.Feature {
        /** Indexed by custom trapdoor ID. */
        destinationFuncMap = /* @__PURE__ */ new Map();
        /** @internal */
        v = v;
        /**
         * In order to represent a black sprite, we just use the first frame of the boss versus screen
         * animation. However, we must lazy load the sprite in order to prevent issues with mods that
         * replace the vanilla files. (For some reason, loading the sprites will cause the overwrite to no
         * longer apply on the second and subsequent runs.)
         */
        blackSprite = Sprite();
        customGridEntities;
        disableInputs;
        ponyDetection;
        roomClearFrame;
        runInNFrames;
        runNextRoom;
        stageHistory;
        /** @internal */
        constructor(customGridEntities, disableInputs, ponyDetection, roomClearFrame, runInNFrames, runNextRoom, stageHistory) {
          super();
          this.featuresUsed = [
            ISCFeature_1.ISCFeature.CUSTOM_GRID_ENTITIES,
            ISCFeature_1.ISCFeature.DISABLE_INPUTS,
            ISCFeature_1.ISCFeature.PONY_DETECTION,
            ISCFeature_1.ISCFeature.ROOM_CLEAR_FRAME,
            ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES,
            ISCFeature_1.ISCFeature.RUN_NEXT_ROOM,
            ISCFeature_1.ISCFeature.STAGE_HISTORY
          ];
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_UPDATE,
              this.postGridEntityCustomUpdateTrapdoor,
              [GridEntityTypeCustom_1.GridEntityTypeCustom.TRAPDOOR_CUSTOM]
            ],
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
          this.customGridEntities = customGridEntities;
          this.disableInputs = disableInputs;
          this.ponyDetection = ponyDetection;
          this.roomClearFrame = roomClearFrame;
          this.runInNFrames = runInNFrames;
          this.runNextRoom = runNextRoom;
          this.stageHistory = stageHistory;
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          this.checkAllPlayersJumpComplete();
          this.checkPixelationToBlackComplete();
          this.checkSecondPixelationHalfWay();
          this.checkAllPlayersLayingDownComplete();
          this.drawBlackSprite();
        };
        checkAllPlayersJumpComplete() {
          if (v.run.state !== StageTravelState_1.StageTravelState.PLAYERS_JUMPING_DOWN) {
            return;
          }
          if (anyPlayerPlayingExtraAnimation()) {
            return;
          }
          const renderFrameCount = Isaac.GetFrameCount();
          const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
          v.run.state = StageTravelState_1.StageTravelState.PIXELATION_TO_BLACK;
          v.run.stateRenderFrame = renderFrameCount;
          this.logStateChanged();
          (0, roomTransition_1.teleport)(roomGridIndex, isaac_typescript_definitions_1.Direction.NO_DIRECTION, isaac_typescript_definitions_1.RoomTransitionAnim.PIXELATION);
        }
        checkPixelationToBlackComplete() {
          if (v.run.state !== StageTravelState_1.StageTravelState.PIXELATION_TO_BLACK || v.run.stateRenderFrame === null) {
            return;
          }
          const renderFrameScreenBlack = v.run.stateRenderFrame + PIXELATION_TO_BLACK_FRAMES;
          if ((0, frames_1.isBeforeRenderFrame)(renderFrameScreenBlack)) {
            return;
          }
          v.run.state = StageTravelState_1.StageTravelState.WAITING_FOR_FIRST_PIXELATION_TO_END;
          this.logStateChanged();
          const hud = cachedClasses_1.game.GetHUD();
          hud.SetVisible(false);
          this.runInNFrames.runNextGameFrame(() => {
            const level = cachedClasses_1.game.GetLevel();
            const startingRoomIndex = level.GetStartingRoomIndex();
            const futureRenderFrameCount = Isaac.GetFrameCount();
            v.run.state = StageTravelState_1.StageTravelState.WAITING_FOR_SECOND_PIXELATION_TO_GET_HALF_WAY;
            v.run.stateRenderFrame = futureRenderFrameCount;
            this.goToCustomTrapdoorDestination();
            (0, roomTransition_1.teleport)(startingRoomIndex, isaac_typescript_definitions_1.Direction.NO_DIRECTION, isaac_typescript_definitions_1.RoomTransitionAnim.PIXELATION);
          });
        }
        goToCustomTrapdoorDestination() {
          if (v.run.customTrapdoorActivated === null) {
            v.run.customTrapdoorActivated = {
              destinationName: void 0,
              destinationStage: isaac_typescript_definitions_1.LevelStage.BASEMENT_1,
              destinationStageType: isaac_typescript_definitions_1.StageType.ORIGINAL,
              open: true,
              firstSpawn: true
            };
          }
          const destinationFunc = this.getDestinationFunc(v.run.customTrapdoorActivated);
          destinationFunc(v.run.customTrapdoorActivated.destinationName, v.run.customTrapdoorActivated.destinationStage, v.run.customTrapdoorActivated.destinationStageType);
        }
        getDestinationFunc(customTrapdoorDescription) {
          if (customTrapdoorDescription.destinationName === void 0) {
            return goToVanillaStage;
          }
          const destinationFunc = this.destinationFuncMap.get(customTrapdoorDescription.destinationName);
          if (destinationFunc === void 0) {
            return goToVanillaStage;
          }
          return destinationFunc;
        }
        checkSecondPixelationHalfWay() {
          if (v.run.state !== StageTravelState_1.StageTravelState.WAITING_FOR_SECOND_PIXELATION_TO_GET_HALF_WAY || v.run.stateRenderFrame === null) {
            return;
          }
          const renderFrameScreenBlack = v.run.stateRenderFrame + PIXELATION_TO_BLACK_FRAMES;
          if ((0, frames_1.isBeforeRenderFrame)(renderFrameScreenBlack)) {
            return;
          }
          v.run.state = StageTravelState_1.StageTravelState.PIXELATION_TO_ROOM;
          this.logStateChanged();
          const hud = cachedClasses_1.game.GetHUD();
          hud.SetVisible(true);
          this.runNextRoom.runNextRoom(() => {
            v.run.state = StageTravelState_1.StageTravelState.PLAYERS_LAYING_DOWN;
            this.logStateChanged();
            (0, playerCenter_1.movePlayersToCenter)();
            for (const player of (0, playerIndex_1.getAllPlayers)()) {
              player.AnimateAppear();
              player.EntityCollisionClass = isaac_typescript_definitions_1.EntityCollisionClass.ALL;
              player.GridCollisionClass = isaac_typescript_definitions_1.EntityGridCollisionClass.GROUND;
            }
            const level = cachedClasses_1.game.GetLevel();
            const stage = level.GetStage();
            if (stage !== constants_2.CUSTOM_FLOOR_STAGE) {
              level.ShowName(false);
            }
          });
        }
        checkAllPlayersLayingDownComplete() {
          if (v.run.state !== StageTravelState_1.StageTravelState.PLAYERS_LAYING_DOWN) {
            return;
          }
          if (anyPlayerPlayingExtraAnimation()) {
            return;
          }
          v.run.state = StageTravelState_1.StageTravelState.NONE;
          this.logStateChanged();
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(this);
          (0, utils_1.assertDefined)(tstlClassName, "Failed to find get the class name for the custom trapdoor feature.");
          this.disableInputs.enableAllInputs(tstlClassName);
        }
        drawBlackSprite() {
          if (v.run.state !== StageTravelState_1.StageTravelState.WAITING_FOR_FIRST_PIXELATION_TO_END && v.run.state !== StageTravelState_1.StageTravelState.WAITING_FOR_SECOND_PIXELATION_TO_GET_HALF_WAY) {
            return;
          }
          if (!this.blackSprite.IsLoaded()) {
            this.blackSprite.Load("gfx/ui/boss/versusscreen.anm2", true);
            this.blackSprite.SetFrame("Scene", 0);
            this.blackSprite.Scale = Vector(100, 100);
          }
          this.blackSprite.RenderLayer(0, constants_1.VectorZero);
        }
        // ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_UPDATE
        // GridEntityTypeCustom.TRAPDOOR_CUSTOM
        postGridEntityCustomUpdateTrapdoor = (gridEntity) => {
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const gridIndex = gridEntity.GetGridIndex();
          const roomTrapdoorMap = v.level.trapdoors.getAndSetDefault(roomListIndex);
          const trapdoorDescription = roomTrapdoorMap.get(gridIndex);
          if (trapdoorDescription === void 0) {
            return;
          }
          this.checkCustomTrapdoorOpenClose(gridEntity, trapdoorDescription);
          this.checkCustomTrapdoorPlayerTouched(gridEntity, trapdoorDescription);
        };
        checkCustomTrapdoorOpenClose(gridEntity, trapdoorDescription) {
          if (trapdoorDescription.open) {
            return;
          }
          if (this.shouldTrapdoorOpen(gridEntity, trapdoorDescription.firstSpawn)) {
            openCustomTrapdoor(gridEntity, trapdoorDescription);
          }
        }
        shouldTrapdoorOpen(gridEntity, firstSpawn) {
          const room = cachedClasses_1.game.GetRoom();
          const roomClear = room.IsClear();
          return !(0, positionVelocity_1.anyPlayerCloserThan)(gridEntity.Position, TRAPDOOR_OPEN_DISTANCE) && !this.isPlayerCloseAfterBoss(gridEntity.Position) && !shouldBeClosedFromStartingInRoomWithEnemies(firstSpawn, roomClear);
        }
        isPlayerCloseAfterBoss(position) {
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const roomClearGameFrame = this.roomClearFrame.getRoomClearGameFrame();
          if (roomType !== isaac_typescript_definitions_1.RoomType.BOSS || roomClearGameFrame === void 0 || (0, frames_1.onOrAfterRenderFrame)(roomClearGameFrame + TRAPDOOR_BOSS_REACTION_FRAMES)) {
            return false;
          }
          return (0, positionVelocity_1.anyPlayerCloserThan)(position, TRAPDOOR_OPEN_DISTANCE_AFTER_BOSS);
        }
        checkCustomTrapdoorPlayerTouched(gridEntity, trapdoorDescription) {
          if (v.run.state !== StageTravelState_1.StageTravelState.NONE) {
            return;
          }
          if (!trapdoorDescription.open) {
            return;
          }
          const playersTouching = Isaac.FindInRadius(gridEntity.Position, TRAPDOOR_TOUCH_DISTANCE, isaac_typescript_definitions_1.EntityPartition.PLAYER);
          for (const playerEntity of playersTouching) {
            const player = playerEntity.ToPlayer();
            if (player === void 0) {
              continue;
            }
            if (
              // We don't want a Pony dash to transition to a new floor or a crawl space.
              !this.ponyDetection.isPlayerUsingPony(player) && !(0, playerIndex_1.isChildPlayer)(player) && canPlayerInteractWithTrapdoor(player)
            ) {
              this.playerTouchedCustomTrapdoor(gridEntity, trapdoorDescription, player);
              return;
            }
          }
        }
        playerTouchedCustomTrapdoor(gridEntity, trapdoorDescription, player) {
          v.run.state = StageTravelState_1.StageTravelState.PLAYERS_JUMPING_DOWN;
          v.run.customTrapdoorActivated = trapdoorDescription;
          this.logStateChanged();
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(this);
          (0, utils_1.assertDefined)(tstlClassName, "Failed to find get the class name for the custom trapdoor feature.");
          const whitelist = new ReadonlySet_1.ReadonlySet([isaac_typescript_definitions_1.ButtonAction.CONSOLE]);
          this.disableInputs.disableAllInputsExceptFor(tstlClassName, whitelist);
          setPlayerAttributes(player, gridEntity.Position);
          dropTaintedForgotten(player);
          player.PlayExtraAnimation("Trapdoor");
          const otherPlayers = (0, playerIndex_1.getOtherPlayers)(player);
          for (const [i, otherPlayer] of otherPlayers.entries()) {
            const gameFramesToWaitBeforeJumping = OTHER_PLAYER_TRAPDOOR_JUMP_DELAY_GAME_FRAMES * (i + 1);
            const otherPlayerPtr = EntityPtr(otherPlayer);
            this.runInNFrames.runInNGameFrames(() => {
              this.startDelayedJump(otherPlayerPtr, gridEntity.Position);
            }, gameFramesToWaitBeforeJumping);
          }
        }
        startDelayedJump(entityPtr, trapdoorPosition) {
          const entity = entityPtr.Ref;
          if (entity === void 0) {
            return;
          }
          const player = entity.ToPlayer();
          if (player === void 0) {
            return;
          }
          player.PlayExtraAnimation("Trapdoor");
          this.adjustPlayerPositionToTrapdoor(entityPtr, player.Position, trapdoorPosition);
        }
        adjustPlayerPositionToTrapdoor(entityPtr, startPos, endPos) {
          if (v.run.state !== StageTravelState_1.StageTravelState.PLAYERS_JUMPING_DOWN) {
            return;
          }
          const entity = entityPtr.Ref;
          if (entity === void 0) {
            return;
          }
          const player = entity.ToPlayer();
          if (player === void 0) {
            return;
          }
          this.runInNFrames.runNextRenderFrame(() => {
            this.adjustPlayerPositionToTrapdoor(entityPtr, startPos, endPos);
          });
          const sprite = player.GetSprite();
          if (sprite.IsFinished("Trapdoor")) {
            player.Position = endPos;
            player.Velocity = constants_1.VectorZero;
            return;
          }
          const frame = sprite.GetFrame();
          if (frame >= OTHER_PLAYER_TRAPDOOR_JUMP_DURATION_GAME_FRAMES) {
            player.Position = endPos;
            player.Velocity = constants_1.VectorZero;
            return;
          }
          const totalDifference = endPos.sub(startPos);
          const progress = frame / OTHER_PLAYER_TRAPDOOR_JUMP_DURATION_GAME_FRAMES;
          const easeProgress = (0, easing_1.easeOutSine)(progress);
          const differenceForThisFrame = totalDifference.mul(easeProgress);
          const targetPosition = startPos.add(differenceForThisFrame);
          player.Position = targetPosition;
          player.Velocity = constants_1.VectorZero;
        }
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          this.checkJumpComplete(player);
        };
        checkJumpComplete(player) {
          if (v.run.state !== StageTravelState_1.StageTravelState.PLAYERS_JUMPING_DOWN) {
            return;
          }
          const sprite = player.GetSprite();
          if (sprite.IsFinished("Trapdoor")) {
            player.Visible = false;
          }
        }
        shouldTrapdoorSpawnOpen(gridEntity, firstSpawn) {
          const room = cachedClasses_1.game.GetRoom();
          const roomClear = room.IsClear();
          if ((0, frames_1.isAfterRoomFrame)(0)) {
            return false;
          }
          if (!roomClear) {
            return false;
          }
          return this.shouldTrapdoorOpen(gridEntity, firstSpawn);
        }
        logStateChanged() {
          if (DEBUG) {
            (0, log_1.log)(`Custom trapdoors state changed: ${StageTravelState_1.StageTravelState[v.run.state]} (${v.run.state})`);
          }
        }
        /**
         * Helper function to specify where your custom trapdoor should take the player. Call this once at
         * the beginning of your mod for each kind of custom trapdoor that you want to have. The provided
         * `destinationFunc` will be executed when the player jumps into the trapdoor and the pixelation
         * effect fades to black.
         *
         * Registration is needed so that custom trapdoors can be serializable when the player saves and
         * quits.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_TRAPDOORS`.
         *
         * @param destinationName The integer that identifies the type of custom trapdoor. It should
         *                        correspond to a local `CustomTrapdoorType` enum in your mod. The integer
         *                        can be any unique value and can safely overlap with values chosen by
         *                        other mods.
         * @param destinationFunc A function that takes the player to the destination that you want.
         *                        Inside this function, use the `setStage` or `setCustomStage` helper
         *                        functions, or do something completely custom.
         */
        registerCustomTrapdoorDestination(destinationName, destinationFunc) {
          if (this.destinationFuncMap.has(destinationName)) {
            error(`Failed to register a custom trapdoor type of ${destinationName} since this custom trapdoor type has already been registered.`);
          }
          this.destinationFuncMap.set(destinationName, destinationFunc);
        }
        /**
         * Helper function to spawn a trapdoor grid entity that will take a player to a vanilla stage or
         * custom location.
         *
         * - If you want to create a custom trapdoor that goes to a vanilla stage, pass `undefined` for
         *   the `destinationName` parameter.
         * - If you want to create a custom trapdoor that takes the player to a custom location, you must
         *   have registered the corresponding `destinationName` at the beginning of your mod with the
         *   `registerCustomTrapdoorDestination` function. (This is necessary so that custom trapdoors can
         *   be serializable when the player saves and quits.)
         *
         * Under the hood, the custom trapdoor is represented by a decoration grid entity and is manually
         * respawned every time the player re-enters the room.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.CUSTOM_TRAPDOORS`.
         *
         * @param gridIndexOrPosition The location in the room to spawn the trapdoor.
         * @param destinationName Optional. A string representing the name of the of destination that the
         *                        custom trapdoor will take the player to. Default is undefined, which
         *                        will take the player to a vanilla stage.
         * @param destinationStage Optional. The first argument that will be passed to the
         *                         `destinationFunc` corresponding to this custom trapdoor. This is
         *                         essentially metadata for the custom trapdoor. Leave this undefined if
         *                         your corresponding custom trapdoor function does not care what the
         *                         destination stage should be. Default is the "normal" next vanilla
         *                         stage.
         * @param destinationStageType Optional. The second argument that will be passed to the
         *                             `destinationFunc` corresponding to this custom trapdoor. This is
         *                             essentially metadata for the custom trapdoor. Leave this undefined
         *                             if your corresponding custom trapdoor function does not care what
         *                             the destination stage type should be. Default is the "normal" next
         *                             vanilla stage type.
         * @param anm2Path Optional. The path to the anm2 file to use. By default, the vanilla trapdoor
         *                 anm2 of "gfx/grid/door_11_trapdoor.anm2" will be used. The specified anm2 file
         *                 must have animations called "Opened", "Closed", and "Open Animation".
         * @param spawnOpen Optional. Whether to spawn the trapdoor in an open state. By default, behavior
         *                  will be used that emulates a vanilla trapdoor.
         */
        spawnCustomTrapdoor(gridIndexOrPosition, destinationName, destinationStage, destinationStageType, anm2Path = "gfx/grid/door_11_trapdoor.anm2", spawnOpen) {
          if (destinationName !== void 0 && !this.destinationFuncMap.has(destinationName)) {
            error(`Failed to spawn a custom trapdoor with a destination of "${destinationName}" since a destination with that name has not been registered with the "registerCustomTrapdoorDestination" function. (If you are trying to go to a custom stage, the custom stage library should automatically do this for you when your mod first boots.)`);
          }
          if (destinationStage === void 0) {
            destinationStage = this.stageHistory.getNextStageWithHistory();
          }
          if (destinationStageType === void 0) {
            destinationStageType = this.stageHistory.getNextStageTypeWithHistory();
          }
          const room = cachedClasses_1.game.GetRoom();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const gridIndex = (0, vector_1.isVector)(gridIndexOrPosition) ? room.GetGridIndex(gridIndexOrPosition) : gridIndexOrPosition;
          const gridEntity = this.customGridEntities.spawnCustomGridEntity(GridEntityTypeCustom_1.GridEntityTypeCustom.TRAPDOOR_CUSTOM, gridIndexOrPosition, isaac_typescript_definitions_1.GridCollisionClass.NONE, anm2Path, TrapdoorAnimation_1.TrapdoorAnimation.OPENED);
          const firstSpawn = (0, frames_1.isAfterRoomFrame)(0);
          const open = spawnOpen ?? this.shouldTrapdoorSpawnOpen(gridEntity, firstSpawn);
          const roomTrapdoorMap = v.level.trapdoors.getAndSetDefault(roomListIndex);
          const customTrapdoorDescription = {
            destinationName,
            destinationStage,
            destinationStageType,
            open,
            firstSpawn
          };
          roomTrapdoorMap.set(gridIndex, customTrapdoorDescription);
          const sprite = gridEntity.GetSprite();
          const animation = open ? TrapdoorAnimation_1.TrapdoorAnimation.OPENED : TrapdoorAnimation_1.TrapdoorAnimation.CLOSED;
          sprite.Play(animation, true);
          return gridEntity;
        }
      };
      exports2.CustomTrapdoors = CustomTrapdoors;
      __decorate([
        decorators_1.Exported
      ], CustomTrapdoors.prototype, "registerCustomTrapdoorDestination", null);
      __decorate([
        decorators_1.Exported
      ], CustomTrapdoors.prototype, "spawnCustomTrapdoor", null);
      function anyPlayerPlayingExtraAnimation() {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => !player.IsExtraAnimationFinished());
      }
      function shouldBeClosedFromStartingInRoomWithEnemies(firstSpawn, roomClear) {
        return firstSpawn && !roomClear;
      }
      function openCustomTrapdoor(gridEntity, trapdoorDescription) {
        trapdoorDescription.open = true;
        const sprite = gridEntity.GetSprite();
        sprite.Play(TrapdoorAnimation_1.TrapdoorAnimation.OPEN_ANIMATION, true);
      }
      function canPlayerInteractWithTrapdoor(player) {
        const sprite = player.GetSprite();
        const animation = sprite.GetAnimation();
        return !player.IsHoldingItem() && !ANIMATIONS_THAT_PREVENT_STAGE_TRAVEL.has(animation);
      }
      function setPlayerAttributes(trapdoorPlayer, position) {
        trapdoorPlayer.Position = position;
        for (const player of (0, playerIndex_1.getAllPlayers)()) {
          player.ControlsEnabled = false;
          player.Velocity = constants_1.VectorZero;
          player.EntityCollisionClass = isaac_typescript_definitions_1.EntityCollisionClass.NONE;
          player.GridCollisionClass = isaac_typescript_definitions_1.EntityGridCollisionClass.NONE;
          player.StopExtraAnimation();
        }
      }
      function dropTaintedForgotten(player) {
        if ((0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B)) {
          const taintedSoul = player.GetOtherTwin();
          if (taintedSoul !== void 0) {
            taintedSoul.ThrowHeldEntity(constants_1.VectorZero);
          }
        }
      }
      function goToVanillaStage(_destinationName, destinationStage, destinationStageType) {
        (0, stage_1.setStage)(destinationStage, destinationStageType);
      }
    }
  });

  // node_modules/isaacscript-common/dist/sets/consoleCommandsSet.js
  var require_consoleCommandsSet = __commonJS({
    "node_modules/isaacscript-common/dist/sets/consoleCommandsSet.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CONSOLE_COMMANDS_SET = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.CONSOLE_COMMANDS_SET = new ReadonlySet_1.ReadonlySet([
        // Listed commands
        "achievement",
        "challenge",
        "clear",
        "clearcache",
        "clearseeds",
        "combo",
        "copy",
        "costumetest",
        "curse",
        "cutscene",
        "debug",
        "delirious",
        "eggs",
        "giveitem",
        "g",
        "goto",
        "gridspawn",
        "listcollectibles",
        "lua",
        "l",
        "luamem",
        "luamod",
        "luarun",
        "macro",
        "m",
        "metro",
        "playsfx",
        "prof",
        "profstop",
        "remove",
        "r",
        "reloadfx",
        "reloadshaders",
        "repeat",
        "reseed",
        "restart",
        "seed",
        "spawn",
        "stage",
        "time",
        // Unlisted commands
        "addplayer",
        "forceroom",
        "giveitem2",
        "g2",
        "netdelay",
        "netstart",
        "remove2",
        "r2",
        "reloadwisps",
        "restock",
        "rewind",
        "testbosspool"
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/console.js
  var require_console = __commonJS({
    "node_modules/isaacscript-common/dist/functions/console.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.printEnabled = exports2.isVanillaConsoleCommand = void 0;
      var consoleCommandsSet_1 = require_consoleCommandsSet();
      function isVanillaConsoleCommand(commandName) {
        return consoleCommandsSet_1.CONSOLE_COMMANDS_SET.has(commandName);
      }
      exports2.isVanillaConsoleCommand = isVanillaConsoleCommand;
      function printEnabled(enabled, description) {
        const enabledText = enabled ? "Enabled" : "Disabled";
        print(`${enabledText} ${description}.`);
      }
      exports2.printEnabled = printEnabled;
    }
  });

  // node_modules/isaacscript-common/dist/functions/render.js
  var require_render = __commonJS({
    "node_modules/isaacscript-common/dist/functions/render.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.renderTextOnEntity = exports2.renderScaledTextOnEntity = exports2.isReflectionRender = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      function isReflectionRender() {
        const room = cachedClasses_1.game.GetRoom();
        const renderMode = room.GetRenderMode();
        return renderMode === isaac_typescript_definitions_1.RenderMode.WATER_REFLECT;
      }
      exports2.isReflectionRender = isReflectionRender;
      function renderScaledTextOnEntity(entity, text, scaleX, scaleY) {
        if (isReflectionRender()) {
          return;
        }
        const position = Isaac.WorldToScreen(entity.Position);
        Isaac.RenderScaledText(text, position.X, position.Y, scaleX, scaleY, 1, 1, 1, 1);
      }
      exports2.renderScaledTextOnEntity = renderScaledTextOnEntity;
      function renderTextOnEntity(entity, text) {
        if (isReflectionRender()) {
          return;
        }
        const position = Isaac.WorldToScreen(entity.Position);
        Isaac.RenderText(text, position.X, position.Y, 1, 1, 1, 1);
      }
      exports2.renderTextOnEntity = renderTextOnEntity;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/utils.js
  var require_utils3 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/utils.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.defaultGridEntityDisplayCallback = exports2.defaultEntityDisplayCallback = void 0;
      var entities_1 = require_entities();
      var gridEntities_1 = require_gridEntities();
      function defaultEntityDisplayCallback(entity) {
        return (0, entities_1.getEntityID)(entity);
      }
      exports2.defaultEntityDisplayCallback = defaultEntityDisplayCallback;
      function defaultGridEntityDisplayCallback(gridEntity) {
        return (0, gridEntities_1.getGridEntityID)(gridEntity);
      }
      exports2.defaultGridEntityDisplayCallback = defaultGridEntityDisplayCallback;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayBomb.js
  var require_DebugDisplayBomb = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayBomb.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayBomb = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayBomb = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 59
            [isaac_typescript_definitions_1.ModCallback.POST_BOMB_RENDER, this.postBombRender]
          ];
        }
        // ModCallback.POST_BOMB_RENDER (59)
        postBombRender = (bomb) => {
          const text = this.textCallback(bomb);
          (0, render_1.renderTextOnEntity)(bomb, text);
        };
      };
      exports2.DebugDisplayBomb = DebugDisplayBomb;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayDoor.js
  var require_DebugDisplayDoor = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayDoor.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayDoor = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayDoor = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_DOOR_RENDER, this.postDoorRender]
          ];
        }
        // ModCallbackCustom.POST_DOOR_RENDER
        postDoorRender = (door) => {
          const text = this.textCallback(door);
          (0, render_1.renderTextOnEntity)(door, text);
        };
      };
      exports2.DebugDisplayDoor = DebugDisplayDoor;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayEffect.js
  var require_DebugDisplayEffect = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayEffect.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayEffect = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayEffect = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 56
            [isaac_typescript_definitions_1.ModCallback.POST_EFFECT_RENDER, this.postEffectRender]
          ];
        }
        // ModCallback.POST_EFFECT_RENDER (56)
        postEffectRender = (effect) => {
          const text = this.textCallback(effect);
          (0, render_1.renderTextOnEntity)(effect, text);
        };
      };
      exports2.DebugDisplayEffect = DebugDisplayEffect;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayFamiliar.js
  var require_DebugDisplayFamiliar = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayFamiliar.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayFamiliar = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayFamiliar = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 25
            [isaac_typescript_definitions_1.ModCallback.POST_FAMILIAR_RENDER, this.postFamiliarRender]
          ];
        }
        // ModCallback.POST_FAMILIAR_RENDER (25)
        postFamiliarRender = (familiar) => {
          const text = this.textCallback(familiar);
          (0, render_1.renderTextOnEntity)(familiar, text);
        };
      };
      exports2.DebugDisplayFamiliar = DebugDisplayFamiliar;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayKnife.js
  var require_DebugDisplayKnife = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayKnife.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayKnife = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayKnife = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 52
            [isaac_typescript_definitions_1.ModCallback.POST_KNIFE_RENDER, this.postKnifeRender]
          ];
        }
        // ModCallback.POST_KNIFE_RENDER (52)
        postKnifeRender = (knife) => {
          const text = this.textCallback(knife);
          (0, render_1.renderTextOnEntity)(knife, text);
        };
      };
      exports2.DebugDisplayKnife = DebugDisplayKnife;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayLaser.js
  var require_DebugDisplayLaser = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayLaser.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayLaser = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayLaser = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 49
            [isaac_typescript_definitions_1.ModCallback.POST_LASER_RENDER, this.postLaserRender]
          ];
        }
        // ModCallback.POST_LASER_RENDER (49)
        postLaserRender = (laser) => {
          const text = this.textCallback(laser);
          (0, render_1.renderTextOnEntity)(laser, text);
        };
      };
      exports2.DebugDisplayLaser = DebugDisplayLaser;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayNPC.js
  var require_DebugDisplayNPC = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayNPC.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayNPC = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayNPC = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 28
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_RENDER, this.postNPCRender]
          ];
        }
        // ModCallback.POST_NPC_RENDER (28)
        postNPCRender = (npc) => {
          const text = this.textCallback(npc);
          (0, render_1.renderTextOnEntity)(npc, text);
        };
      };
      exports2.DebugDisplayNPC = DebugDisplayNPC;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPickup.js
  var require_DebugDisplayPickup = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPickup.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayPickup = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayPickup = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 36
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_RENDER, this.postPickupRender]
          ];
        }
        // ModCallback.POST_PICKUP_RENDER (36)
        postPickupRender = (pickup) => {
          const text = this.textCallback(pickup);
          (0, render_1.renderTextOnEntity)(pickup, text);
        };
      };
      exports2.DebugDisplayPickup = DebugDisplayPickup;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPit.js
  var require_DebugDisplayPit = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPit.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayPit = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayPit = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_PIT_RENDER, this.postPitRender]
          ];
        }
        // ModCallbackCustom.POST_PIT_RENDER
        postPitRender = (pit) => {
          const text = this.textCallback(pit);
          (0, render_1.renderTextOnEntity)(pit, text);
        };
      };
      exports2.DebugDisplayPit = DebugDisplayPit;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPlayer.js
  var require_DebugDisplayPlayer = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPlayer.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayPlayer = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayPlayer = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED,
              this.postPlayerRenderReordered
            ]
          ];
        }
        // ModCallbackCustom.POST_PLAYER_RENDER_REORDERED
        postPlayerRenderReordered = (player) => {
          const text = this.textCallback(player);
          (0, render_1.renderTextOnEntity)(player, text);
        };
      };
      exports2.DebugDisplayPlayer = DebugDisplayPlayer;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPoop.js
  var require_DebugDisplayPoop = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPoop.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayPoop = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayPoop = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_POOP_RENDER, this.postPoopRender]
          ];
        }
        // ModCallbackCustom.POST_POOP_RENDER
        postPoopRender = (poop) => {
          const text = this.textCallback(poop);
          (0, render_1.renderTextOnEntity)(poop, text);
        };
      };
      exports2.DebugDisplayPoop = DebugDisplayPoop;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPressurePlate.js
  var require_DebugDisplayPressurePlate = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayPressurePlate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayPressurePlate = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayPressurePlate = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PRESSURE_PLATE_RENDER,
              this.postPressurePlateRender
            ]
          ];
        }
        // ModCallbackCustom.POST_PRESSURE_PLATE_RENDER
        postPressurePlateRender = (pressurePlate) => {
          const text = this.textCallback(pressurePlate);
          (0, render_1.renderTextOnEntity)(pressurePlate, text);
        };
      };
      exports2.DebugDisplayPressurePlate = DebugDisplayPressurePlate;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayProjectile.js
  var require_DebugDisplayProjectile = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayProjectile.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayProjectile = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayProjectile = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 45
            [isaac_typescript_definitions_1.ModCallback.POST_PROJECTILE_RENDER, this.postProjectileRender]
          ];
        }
        // ModCallback.POST_PROJECTILE_RENDER (45)
        postProjectileRender = (projectile) => {
          const text = this.textCallback(projectile);
          (0, render_1.renderTextOnEntity)(projectile, text);
        };
      };
      exports2.DebugDisplayProjectile = DebugDisplayProjectile;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayRock.js
  var require_DebugDisplayRock = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayRock.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayRock = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayRock = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_ROCK_RENDER, this.postRockRender]
          ];
        }
        // ModCallbackCustom.POST_ROCK_RENDER
        postRockRender = (rock) => {
          const text = this.textCallback(rock);
          (0, render_1.renderTextOnEntity)(rock, text);
        };
      };
      exports2.DebugDisplayRock = DebugDisplayRock;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplaySlot.js
  var require_DebugDisplaySlot = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplaySlot.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplaySlot = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplaySlot = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_RENDER, this.postSlotRender]
          ];
        }
        // ModCallbackCustom.POST_SLOT_RENDER
        postSlotRender = (slot) => {
          const text = this.textCallback(slot);
          (0, render_1.renderTextOnEntity)(slot, text);
        };
      };
      exports2.DebugDisplaySlot = DebugDisplaySlot;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplaySpikes.js
  var require_DebugDisplaySpikes = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplaySpikes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplaySpikes = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplaySpikes = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_SPIKES_RENDER, this.postSpikesRender]
          ];
        }
        // ModCallbackCustom.POST_SPIKES_RENDER
        postSpikesRender = (spikes) => {
          const text = this.textCallback(spikes);
          (0, render_1.renderTextOnEntity)(spikes, text);
        };
      };
      exports2.DebugDisplaySpikes = DebugDisplaySpikes;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayTear.js
  var require_DebugDisplayTear = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayTear.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayTear = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayTear = class extends Feature_1.Feature {
        textCallback = utils_1.defaultEntityDisplayCallback;
        constructor() {
          super();
          this.callbacksUsed = [
            // 41
            [isaac_typescript_definitions_1.ModCallback.POST_TEAR_RENDER, this.postTearRender]
          ];
        }
        // ModCallback.POST_TEAR_RENDER (41)
        postTearRender = (tear) => {
          const text = this.textCallback(tear);
          (0, render_1.renderTextOnEntity)(tear, text);
        };
      };
      exports2.DebugDisplayTear = DebugDisplayTear;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayTNT.js
  var require_DebugDisplayTNT = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/debugDisplay/DebugDisplayTNT.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplayTNT = void 0;
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var render_1 = require_render();
      var Feature_1 = require_Feature();
      var utils_1 = require_utils3();
      var DebugDisplayTNT = class extends Feature_1.Feature {
        textCallback = utils_1.defaultGridEntityDisplayCallback;
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_TNT_RENDER, this.postTNTRender]
          ];
        }
        // ModCallbackCustom.POST_TNT_RENDER
        postTNTRender = (tnt) => {
          const text = this.textCallback(tnt);
          (0, render_1.renderTextOnEntity)(tnt, text);
        };
      };
      exports2.DebugDisplayTNT = DebugDisplayTNT;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/DebugDisplay.js
  var require_DebugDisplay = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/DebugDisplay.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DebugDisplay = void 0;
      var decorators_1 = require_decorators();
      var console_1 = require_console();
      var Feature_1 = require_Feature();
      var DebugDisplayBomb_1 = require_DebugDisplayBomb();
      var DebugDisplayDoor_1 = require_DebugDisplayDoor();
      var DebugDisplayEffect_1 = require_DebugDisplayEffect();
      var DebugDisplayFamiliar_1 = require_DebugDisplayFamiliar();
      var DebugDisplayKnife_1 = require_DebugDisplayKnife();
      var DebugDisplayLaser_1 = require_DebugDisplayLaser();
      var DebugDisplayNPC_1 = require_DebugDisplayNPC();
      var DebugDisplayPickup_1 = require_DebugDisplayPickup();
      var DebugDisplayPit_1 = require_DebugDisplayPit();
      var DebugDisplayPlayer_1 = require_DebugDisplayPlayer();
      var DebugDisplayPoop_1 = require_DebugDisplayPoop();
      var DebugDisplayPressurePlate_1 = require_DebugDisplayPressurePlate();
      var DebugDisplayProjectile_1 = require_DebugDisplayProjectile();
      var DebugDisplayRock_1 = require_DebugDisplayRock();
      var DebugDisplaySlot_1 = require_DebugDisplaySlot();
      var DebugDisplaySpikes_1 = require_DebugDisplaySpikes();
      var DebugDisplayTear_1 = require_DebugDisplayTear();
      var DebugDisplayTNT_1 = require_DebugDisplayTNT();
      var DebugDisplay = class extends Feature_1.Feature {
        mod;
        player = new DebugDisplayPlayer_1.DebugDisplayPlayer();
        // 1
        tear = new DebugDisplayTear_1.DebugDisplayTear();
        // 2
        familiar = new DebugDisplayFamiliar_1.DebugDisplayFamiliar();
        // 3
        bomb = new DebugDisplayBomb_1.DebugDisplayBomb();
        // 4
        pickup = new DebugDisplayPickup_1.DebugDisplayPickup();
        // 5
        slot = new DebugDisplaySlot_1.DebugDisplaySlot();
        // 6
        laser = new DebugDisplayLaser_1.DebugDisplayLaser();
        // 7
        knife = new DebugDisplayKnife_1.DebugDisplayKnife();
        // 8
        projectile = new DebugDisplayProjectile_1.DebugDisplayProjectile();
        // 9
        effect = new DebugDisplayEffect_1.DebugDisplayEffect();
        // 1000
        npc = new DebugDisplayNPC_1.DebugDisplayNPC();
        rock = new DebugDisplayRock_1.DebugDisplayRock();
        // 2, 3, 4, 5, 6, 22, 24, 25, 26, 27
        pit = new DebugDisplayPit_1.DebugDisplayPit();
        // 7
        spikes = new DebugDisplaySpikes_1.DebugDisplaySpikes();
        // 8, 9
        tnt = new DebugDisplayTNT_1.DebugDisplayTNT();
        // 12
        poop = new DebugDisplayPoop_1.DebugDisplayPoop();
        // 14
        door = new DebugDisplayDoor_1.DebugDisplayDoor();
        // 16
        pressurePlate = new DebugDisplayPressurePlate_1.DebugDisplayPressurePlate();
        // 20
        /** @internal */
        constructor(mod) {
          super();
          this.mod = mod;
        }
        // -------------
        // Set Functions
        // -------------
        /**
         * If the "togglePlayerDisplay" function is called, text will be drawn on the screen next to each
         * player. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * For example, this would draw the number of the player's collectibles next to their head:
         *
         * ```ts
         * setPlayerDisplay((player) => {
         *   return `collectible count: ${player.GetCollectibleCount()}`;
         * });
         * ```
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setPlayerDisplay(textCallback) {
          this.player.textCallback = textCallback;
        }
        /**
         * If the "toggleTearDisplay" function is called, text will be drawn on the screen next to each
         * tear. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setTearDisplay(textCallback) {
          this.tear.textCallback = textCallback;
        }
        /**
         * If the "toggleFamiliarDisplay" function is called, text will be drawn on the screen next to
         * each familiar. Use this function to specify a callback function that returns the string that
         * should be drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setFamiliarDisplay(textCallback) {
          this.familiar.textCallback = textCallback;
        }
        /**
         * If the "toggleBombDisplay" function is called, text will be drawn on the screen next to each
         * bomb. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setBombDisplay(textCallback) {
          this.bomb.textCallback = textCallback;
        }
        /**
         * If the "togglePickupDisplay" function is called, text will be drawn on the screen next to each
         * pickup. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setPickupDisplay(textCallback) {
          this.pickup.textCallback = textCallback;
        }
        /**
         * If the "toggleSlotDisplay" function is called, text will be drawn on the screen next to each
         * slot. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setSlotDisplay(textCallback) {
          this.slot.textCallback = textCallback;
        }
        /**
         * If the "toggleLaserDisplay" function is called, text will be drawn on the screen next to each
         * laser. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setLaserDisplay(textCallback) {
          this.laser.textCallback = textCallback;
        }
        /**
         * If the "toggleKnifeDisplay" function is called, text will be drawn on the screen next to each
         * knife. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setKnifeDisplay(textCallback) {
          this.knife.textCallback = textCallback;
        }
        /**
         * If the "toggleProjectileDisplay" function is called, text will be drawn on the screen next to
         * each projectile. Use this function to specify a callback function that returns the string that
         * should be drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setProjectileDisplay(textCallback) {
          this.projectile.textCallback = textCallback;
        }
        /**
         * If the "extra console commands" feature is specified, the "effectDisplay" console command will
         * draw text on the screen next to each effect. Use this function to specify a callback function
         * that returns the string that should be drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setEffectDisplay(textCallback) {
          this.effect.textCallback = textCallback;
        }
        /**
         * If the "toggleNPCDisplay" function is called, text will be drawn on the screen next to each
         * NPC. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setNPCDisplay(textCallback) {
          this.npc.textCallback = textCallback;
        }
        /**
         * If the "toggleRockDisplay" function is called, text will be drawn on the screen next to each
         * rock. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setRockDisplay(textCallback) {
          this.rock.textCallback = textCallback;
        }
        /**
         * If the "togglePitDisplay" function is called, text will be drawn on the screen next to each
         * pit. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setPitDisplay(textCallback) {
          this.pit.textCallback = textCallback;
        }
        /**
         * If the "toggleSpikesDisplay" function is called, text will be drawn on the screen next to each
         * spikes. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setSpikesDisplay(textCallback) {
          this.spikes.textCallback = textCallback;
        }
        /**
         * If the "toggleTNTDisplay" function is called, text will be drawn on the screen next to each
         * TNT. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setTNTDisplay(textCallback) {
          this.tnt.textCallback = textCallback;
        }
        /**
         * If the "togglePoopDisplay" function is called, text will be drawn on the screen next to each
         * poop. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setPoopDisplay(textCallback) {
          this.poop.textCallback = textCallback;
        }
        /**
         * If the "toggleDoorDisplay" function is called, text will be drawn on the screen next to each
         * door. Use this function to specify a callback function that returns the string that should be
         * drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setDoorDisplay(textCallback) {
          this.door.textCallback = textCallback;
        }
        /**
         * If the "togglePressurePlateDisplay" function is called, text will be drawn on the screen next
         * to each pressure plate. Use this function to specify a callback function that returns the
         * string that should be drawn.
         *
         * Once the function is set, the library will call it automatically on every frame. For this
         * reason, you typically only need to set the function once at the beginning of your mod.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @public
         */
        setPressurePlateDisplay(textCallback) {
          this.pressurePlate.textCallback = textCallback;
        }
        // ----------------
        // Toggle Functions
        // ----------------
        toggleFeature(feature, featureName, force) {
          let shouldInit = !feature.initialized;
          if (force !== void 0) {
            shouldInit = force;
          }
          if (shouldInit) {
            this.mod.initFeature(feature);
          } else {
            this.mod.uninitFeature(feature);
          }
          (0, console_1.printEnabled)(feature.initialized, `${featureName} display`);
        }
        /**
         * Toggles the debug display for players, which will draw text on the screen next to each player.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        togglePlayerDisplay(force) {
          this.toggleFeature(this.player, "player", force);
        }
        /**
         * Toggles the debug display for tears, which will draw text on the screen next to each tear.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`. *
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleTearDisplay(force) {
          this.toggleFeature(this.tear, "tear", force);
        }
        /**
         * Toggles the debug display for familiars, which will draw text on the screen next to each
         * familiar.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleFamiliarDisplay(force) {
          this.toggleFeature(this.familiar, "familiar", force);
        }
        /**
         * Toggles the debug display for bombs, which will draw text on the screen next to each bomb.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleBombDisplay(force) {
          this.toggleFeature(this.bomb, "bomb", force);
        }
        /**
         * Toggles the debug display for pickups, which will draw text on the screen next to each pickup.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        togglePickupDisplay(force) {
          this.toggleFeature(this.pickup, "pickup", force);
        }
        /**
         * Toggles the debug display for slots, which will draw text on the screen next to each slot.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleSlotDisplay(force) {
          this.toggleFeature(this.slot, "slot", force);
        }
        /**
         * Toggles the debug display for lasers, which will draw text on the screen next to each laser.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleLaserDisplay(force) {
          this.toggleFeature(this.laser, "laser", force);
        }
        /**
         * Toggles the debug display for knives, which will draw text on the screen next to each knife.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleKnifeDisplay(force) {
          this.toggleFeature(this.knife, "knife", force);
        }
        /**
         * Toggles the debug display for projectiles, which will draw text on the screen next to each
         * projectile.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleProjectileDisplay(force) {
          this.toggleFeature(this.projectile, "projectile", force);
        }
        /**
         * Toggles the debug display for effects, which will draw text on the screen next to each effect.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleEffectDisplay(force) {
          this.toggleFeature(this.effect, "effect", force);
        }
        /**
         * Toggles the debug display for NPCs, which will draw text on the screen next to each NPC.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleNPCDisplay(force) {
          this.toggleFeature(this.npc, "NPC", force);
        }
        /**
         * Toggles the debug display for rocks, which will draw text on the screen next to each rock.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleRockDisplay(force) {
          this.toggleFeature(this.rock, "rock", force);
        }
        /**
         * Toggles the debug display for pits, which will draw text on the screen next to each pit.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        togglePitDisplay(force) {
          this.toggleFeature(this.pit, "pit", force);
        }
        /**
         * Toggles the debug display for spikes, which will draw text on the screen next to each spike.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleSpikesDisplay(force) {
          this.toggleFeature(this.spikes, "spikes", force);
        }
        /**
         * Toggles the debug display for TNT, which will draw text on the screen next to each TNT.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleTNTDisplay(force) {
          this.toggleFeature(this.tnt, "tnt", force);
        }
        /**
         * Toggles the debug display for poops, which will draw text on the screen next to each poop.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        togglePoopDisplay(force) {
          this.toggleFeature(this.poop, "poop", force);
        }
        /**
         * Toggles the debug display for doors, which will draw text on the screen next to each door.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        toggleDoorDisplay(force) {
          this.toggleFeature(this.door, "door", force);
        }
        /**
         * Toggles the debug display for pressure plates, which will draw text on the screen next to each
         * pressure plate.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEBUG_DISPLAY`.
         *
         * @param force Optional. A boolean that represents the value to force the display to. For
         *              example, you can specify true to always make the display turn on, regardless of
         *              whether it is already on.
         * @public
         */
        togglePressurePlateDisplay(force) {
          this.toggleFeature(this.pressurePlate, "pressure plate", force);
        }
      };
      exports2.DebugDisplay = DebugDisplay;
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setPlayerDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setTearDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setFamiliarDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setBombDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setPickupDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setSlotDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setLaserDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setKnifeDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setProjectileDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setEffectDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setNPCDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setRockDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setPitDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setSpikesDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setTNTDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setPoopDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setDoorDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "setPressurePlateDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "togglePlayerDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleTearDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleFamiliarDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleBombDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "togglePickupDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleSlotDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleLaserDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleKnifeDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleProjectileDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleEffectDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleNPCDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleRockDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "togglePitDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleSpikesDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleTNTDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "togglePoopDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "toggleDoorDisplay", null);
      __decorate([
        decorators_1.Exported
      ], DebugDisplay.prototype, "togglePressurePlateDisplay", null);
    }
  });

  // node_modules/isaacscript-common/dist/functions/gridIndex.js
  var require_gridIndex = __commonJS({
    "node_modules/isaacscript-common/dist/functions/gridIndex.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getGridIndexesBetween = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var roomShape_1 = require_roomShape();
      var utils_1 = require_utils();
      function getGridIndexesBetween(gridIndex1, gridIndex2, roomShape) {
        if (gridIndex1 > gridIndex2) {
          const oldGridIndex1 = gridIndex1;
          const oldGridIndex2 = gridIndex2;
          gridIndex1 = oldGridIndex2;
          gridIndex2 = oldGridIndex1;
        }
        const delta = gridIndex2 - gridIndex1;
        const gridWidth = (0, roomShape_1.getRoomShapeWidth)(roomShape);
        const isOnHorizontalLine = delta <= gridWidth;
        if (isOnHorizontalLine) {
          return (0, utils_1.iRange)(gridIndex1, gridIndex2);
        }
        const isOnVerticalLine = delta % gridWidth === 0;
        if (isOnVerticalLine) {
          return (0, utils_1.iRange)(gridIndex1, gridIndex2, gridWidth);
        }
        error(`Failed to get the grid indexes between ${gridIndex1} and ${gridIndex2} for RoomShape.${isaac_typescript_definitions_1.RoomShape[roomShape]} (${roomShape}) since they are not on the same horizontal or vertical line.`);
      }
      exports2.getGridIndexesBetween = getGridIndexesBetween;
    }
  });

  // node_modules/isaacscript-common/dist/functions/roomShapeWalls.js
  var require_roomShapeWalls = __commonJS({
    "node_modules/isaacscript-common/dist/functions/roomShapeWalls.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isVanillaWallGridIndex = exports2.getVanillaWallGridIndexSetForRoomShape = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var CornerType_1 = require_CornerType();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var ReadonlySet_1 = require_ReadonlySet();
      var gridIndex_1 = require_gridIndex();
      var roomShape_1 = require_roomShape();
      var rooms_1 = require_rooms();
      var utils_1 = require_utils();
      var ROOM_SHAPE_TO_WALL_GRID_INDEX_MAP = new ReadonlyMap_1.ReadonlyMap(cachedEnumValues_1.ROOM_SHAPE_VALUES.map((roomShape) => [
        roomShape,
        getVanillaWallGridIndexSetForRoomShape(roomShape)
      ]));
      var HOME_CLOSET_CORNERS = [
        {
          type: CornerType_1.CornerType.TOP_LEFT,
          gridIndex: 30,
          position: Vector(60, 220)
        },
        {
          type: CornerType_1.CornerType.TOP_RIGHT,
          gridIndex: 38,
          position: Vector(340, 220)
        },
        {
          type: CornerType_1.CornerType.BOTTOM_LEFT,
          gridIndex: 90,
          position: Vector(60, 340)
        },
        {
          type: CornerType_1.CornerType.BOTTOM_RIGHT,
          gridIndex: 98,
          position: Vector(340, 340)
        }
      ];
      var HOME_CLOSET_CORNERS_SET = getVanillaWallGridIndexSetForRectangleRoomShape(isaac_typescript_definitions_1.RoomShape.IH, HOME_CLOSET_CORNERS);
      var MOTHER_ROOM_CORNERS = [
        {
          type: CornerType_1.CornerType.TOP_LEFT,
          gridIndex: 0,
          position: Vector(60, 140)
        },
        {
          type: CornerType_1.CornerType.TOP_RIGHT,
          gridIndex: 14,
          position: Vector(580, 140)
        },
        {
          type: CornerType_1.CornerType.BOTTOM_LEFT,
          gridIndex: 150,
          position: Vector(60, 500)
        },
        {
          type: CornerType_1.CornerType.BOTTOM_RIGHT,
          gridIndex: 164,
          position: Vector(580, 500)
        }
      ];
      var MOTHER_ROOM_CORNERS_SET = getVanillaWallGridIndexSetForRectangleRoomShape(isaac_typescript_definitions_1.RoomShape.SHAPE_1x2, MOTHER_ROOM_CORNERS);
      function getVanillaWallGridIndexSetForRoomShape(roomShape) {
        const corners = (0, roomShape_1.getRoomShapeCorners)(roomShape);
        const lRoom = (0, roomShape_1.isLRoomShape)(roomShape);
        if (lRoom && corners.length !== 6) {
          error(`Failed to get the correct amount of corners for: RoomShape.${isaac_typescript_definitions_1.RoomShape[roomShape]} (${roomShape})`);
        }
        switch (roomShape) {
          case isaac_typescript_definitions_1.RoomShape.LTL: {
            const [topMiddle, topRight, middleLeft, middle, bottomLeft, bottomRight] = corners;
            return new ReadonlySet_1.ReadonlySet([
              // Horizontal
              ...(0, gridIndex_1.getGridIndexesBetween)(topMiddle.gridIndex, topRight.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middleLeft.gridIndex, middle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(bottomLeft.gridIndex, bottomRight.gridIndex, roomShape),
              // Vertical
              ...(0, gridIndex_1.getGridIndexesBetween)(middleLeft.gridIndex, bottomLeft.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(topMiddle.gridIndex, middle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(topRight.gridIndex, bottomRight.gridIndex, roomShape)
            ]);
          }
          case isaac_typescript_definitions_1.RoomShape.LTR: {
            const [topLeft, topMiddle, middle, middleRight, bottomLeft, bottomRight] = corners;
            return new ReadonlySet_1.ReadonlySet([
              // Horizontal
              ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, topMiddle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middle.gridIndex, middleRight.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(bottomLeft.gridIndex, bottomRight.gridIndex, roomShape),
              // Vertical
              ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, bottomLeft.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(topMiddle.gridIndex, middle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middleRight.gridIndex, bottomRight.gridIndex, roomShape)
            ]);
          }
          case isaac_typescript_definitions_1.RoomShape.LBL: {
            const [topLeft, topRight, middleLeft, middle, bottomMiddle, bottomRight] = corners;
            return new ReadonlySet_1.ReadonlySet([
              // Horizontal
              ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, topRight.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middleLeft.gridIndex, middle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(bottomMiddle.gridIndex, bottomRight.gridIndex, roomShape),
              // Vertical
              ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, middleLeft.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middle.gridIndex, bottomMiddle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(topRight.gridIndex, bottomRight.gridIndex, roomShape)
            ]);
          }
          case isaac_typescript_definitions_1.RoomShape.LBR: {
            const [topLeft, topRight, middle, middleRight, bottomLeft, bottomMiddle] = corners;
            return new ReadonlySet_1.ReadonlySet([
              // Horizontal
              ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, topRight.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middle.gridIndex, middleRight.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(bottomLeft.gridIndex, bottomMiddle.gridIndex, roomShape),
              // Vertical
              ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, bottomLeft.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(middle.gridIndex, bottomMiddle.gridIndex, roomShape),
              ...(0, gridIndex_1.getGridIndexesBetween)(topRight.gridIndex, middleRight.gridIndex, roomShape)
            ]);
          }
          default: {
            return getVanillaWallGridIndexSetForRectangleRoomShape(roomShape, corners);
          }
        }
      }
      exports2.getVanillaWallGridIndexSetForRoomShape = getVanillaWallGridIndexSetForRoomShape;
      function getVanillaWallGridIndexSetForRectangleRoomShape(roomShape, corners) {
        if (corners.length !== 4) {
          error("Failed to get the correct amount of corners for rectangular room shape.");
        }
        const [topLeft, topRight, bottomLeft, bottomRight] = corners;
        return new ReadonlySet_1.ReadonlySet([
          // Horizontal
          ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, topRight.gridIndex, roomShape),
          ...(0, gridIndex_1.getGridIndexesBetween)(bottomLeft.gridIndex, bottomRight.gridIndex, roomShape),
          // Vertical
          ...(0, gridIndex_1.getGridIndexesBetween)(topLeft.gridIndex, bottomLeft.gridIndex, roomShape),
          ...(0, gridIndex_1.getGridIndexesBetween)(topRight.gridIndex, bottomRight.gridIndex, roomShape)
        ]);
      }
      function isVanillaWallGridIndex(gridIndex) {
        const room = cachedClasses_1.game.GetRoom();
        const roomShape = room.GetRoomShape();
        let wallGridIndexSet;
        if ((0, rooms_1.inHomeCloset)()) {
          wallGridIndexSet = HOME_CLOSET_CORNERS_SET;
        } else if ((0, rooms_1.inBossRoomOf)(isaac_typescript_definitions_1.BossID.MOTHER)) {
          wallGridIndexSet = MOTHER_ROOM_CORNERS_SET;
        } else {
          wallGridIndexSet = ROOM_SHAPE_TO_WALL_GRID_INDEX_MAP.get(roomShape);
          (0, utils_1.assertDefined)(wallGridIndexSet, `Failed to find the wall grid index set for: RoomShape.${isaac_typescript_definitions_1.RoomShape[roomShape]} (${roomShape})`);
        }
        return wallGridIndexSet.has(gridIndex);
      }
      exports2.isVanillaWallGridIndex = isVanillaWallGridIndex;
    }
  });

  // node_modules/isaacscript-common/dist/functions/emptyRoom.js
  var require_emptyRoom = __commonJS({
    "node_modules/isaacscript-common/dist/functions/emptyRoom.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.emptyRoomGridEntities = exports2.emptyRoom = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ReadonlySet_1 = require_ReadonlySet();
      var entities_1 = require_entities();
      var gridEntities_1 = require_gridEntities();
      var roomShapeWalls_1 = require_roomShapeWalls();
      var rooms_1 = require_rooms();
      var EMPTY_ROOM_BLACKLIST_ENTITY_SET = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.EntityType.PLAYER,
        isaac_typescript_definitions_1.EntityType.TEAR,
        isaac_typescript_definitions_1.EntityType.FAMILIAR,
        isaac_typescript_definitions_1.EntityType.LASER,
        isaac_typescript_definitions_1.EntityType.KNIFE,
        isaac_typescript_definitions_1.EntityType.PROJECTILE,
        isaac_typescript_definitions_1.EntityType.DARK_ESAU
        // 866
      ]);
      function emptyRoom() {
        emptyRoomEntities();
        emptyRoomGridEntities();
      }
      exports2.emptyRoom = emptyRoom;
      function emptyRoomEntities() {
        const room = cachedClasses_1.game.GetRoom();
        for (const entity of (0, entities_1.getEntities)()) {
          if (EMPTY_ROOM_BLACKLIST_ENTITY_SET.has(entity.Type)) {
            continue;
          }
          if (entity.HasEntityFlags(isaac_typescript_definitions_1.EntityFlag.CHARM) || entity.HasEntityFlags(isaac_typescript_definitions_1.EntityFlag.FRIENDLY) || entity.HasEntityFlags(isaac_typescript_definitions_1.EntityFlag.PERSISTENT)) {
            continue;
          }
          entity.ClearEntityFlags(isaac_typescript_definitions_1.EntityFlag.APPEAR);
          entity.Remove();
          if (entity.Type === isaac_typescript_definitions_1.EntityType.FIREPLACE) {
            const gridIndex = room.GetGridIndex(entity.Position);
            room.SetGridPath(gridIndex, 0);
          }
        }
      }
      function emptyRoomGridEntities() {
        let removedOneOrMoreGridEntities = false;
        for (const gridEntity of (0, gridEntities_1.getGridEntities)()) {
          const gridEntityType = gridEntity.GetType();
          const gridIndex = gridEntity.GetGridIndex();
          if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.WALL && (0, roomShapeWalls_1.isVanillaWallGridIndex)(gridIndex)) {
            continue;
          }
          if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.DOOR) {
            continue;
          }
          (0, gridEntities_1.removeGridEntity)(gridEntity, false);
          removedOneOrMoreGridEntities = true;
        }
        if (removedOneOrMoreGridEntities) {
          (0, rooms_1.roomUpdateSafe)();
        }
      }
      exports2.emptyRoomGridEntities = emptyRoomGridEntities;
    }
  });

  // node_modules/isaacscript-common/dist/functions/jsonRoom.js
  var require_jsonRoom = __commonJS({
    "node_modules/isaacscript-common/dist/functions/jsonRoom.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getRandomJSONRoom = exports2.getRandomJSONEntity = exports2.getJSONRoomsOfSubType = exports2.getJSONRoomOfVariant = exports2.getJSONRoomDoorSlotFlags = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var array_1 = require_array();
      var doors_1 = require_doors();
      var enums_1 = require_enums();
      var flag_1 = require_flag();
      var log_1 = require_log();
      var random_1 = require_random();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function getJSONRoomDoorSlotFlags(jsonRoom) {
        const roomShapeString = jsonRoom.$.shape;
        const roomShape = (0, types_1.parseIntSafe)(roomShapeString);
        (0, utils_1.assertDefined)(roomShape, `Failed to parse the "shape" field of a JSON room: ${roomShapeString}`);
        if (!(0, enums_1.isEnumValue)(roomShape, isaac_typescript_definitions_1.RoomShape)) {
          error(`Failed to parse the "shape" field of a JSON room since it was an invalid number: ${roomShape}`);
        }
        let doorSlotFlags = isaac_typescript_definitions_1.DoorSlotFlagZero;
        for (const door of jsonRoom.door) {
          const existsString = door.$.exists;
          if (existsString !== "True" && existsString !== "False") {
            error(`Failed to parse the "exists" field of a JSON room door: ${existsString}`);
          }
          if (existsString === "False") {
            continue;
          }
          const xString = door.$.x;
          const x = (0, types_1.parseIntSafe)(xString);
          (0, utils_1.assertDefined)(x, `Failed to parse the "x" field of a JSON room door: ${xString}`);
          const yString = door.$.y;
          const y = (0, types_1.parseIntSafe)(yString);
          (0, utils_1.assertDefined)(y, `Failed to parse the "y" field of a JSON room door: ${yString}`);
          const doorSlot = (0, doors_1.getRoomShapeDoorSlot)(roomShape, x, y);
          (0, utils_1.assertDefined)(doorSlot, `Failed to retrieve the door slot for a JSON room door at coordinates: [${x}, ${y}]`);
          const doorSlotFlag = (0, doors_1.doorSlotToDoorSlotFlag)(doorSlot);
          doorSlotFlags = (0, flag_1.addFlag)(doorSlotFlags, doorSlotFlag);
        }
        return doorSlotFlags;
      }
      exports2.getJSONRoomDoorSlotFlags = getJSONRoomDoorSlotFlags;
      function getJSONRoomOfVariant(jsonRooms, variant) {
        const jsonRoomsOfVariant = jsonRooms.filter((jsonRoom) => {
          const roomVariantString = jsonRoom.$.variant;
          const roomVariant = (0, types_1.parseIntSafe)(roomVariantString);
          if (roomVariant === void 0) {
            error(`Failed to convert a JSON room variant to an integer: ${roomVariantString}`);
          }
          return roomVariant === variant;
        });
        if (jsonRoomsOfVariant.length === 0) {
          return void 0;
        }
        if (jsonRoomsOfVariant.length === 1) {
          return jsonRoomsOfVariant[0];
        }
        error(`Found ${jsonRoomsOfVariant.length} JSON rooms with a variant of ${variant}, when there should only be 1.`);
      }
      exports2.getJSONRoomOfVariant = getJSONRoomOfVariant;
      function getJSONRoomsOfSubType(jsonRooms, subType) {
        return jsonRooms.filter((jsonRoom) => {
          const roomSubTypeString = jsonRoom.$.subtype;
          const roomSubType = (0, types_1.parseIntSafe)(roomSubTypeString);
          if (roomSubType === void 0) {
            error(`Failed to convert a JSON room sub-type to an integer: ${roomSubTypeString}`);
          }
          return roomSubType === subType;
        });
      }
      exports2.getJSONRoomsOfSubType = getJSONRoomsOfSubType;
      function getRandomJSONEntity(jsonEntities, seedOrRNG, verbose = false) {
        const totalWeight = getTotalWeightOfJSONObject(jsonEntities);
        if (verbose) {
          (0, log_1.log)(`Total weight of the JSON entities provided: ${totalWeight}`);
        }
        const chosenWeight = (0, random_1.getRandomFloat)(0, totalWeight, seedOrRNG);
        if (verbose) {
          (0, log_1.log)(`Randomly chose weight for JSON entity: ${chosenWeight}`);
        }
        const randomJSONEntity = getJSONObjectWithChosenWeight(jsonEntities, chosenWeight);
        (0, utils_1.assertDefined)(randomJSONEntity, `Failed to get a JSON entity with chosen weight: ${chosenWeight}`);
        return randomJSONEntity;
      }
      exports2.getRandomJSONEntity = getRandomJSONEntity;
      function getRandomJSONRoom(jsonRooms, seedOrRNG, verbose = false) {
        const totalWeight = getTotalWeightOfJSONObject(jsonRooms);
        if (verbose) {
          (0, log_1.log)(`Total weight of the JSON rooms provided: ${totalWeight}`);
        }
        const chosenWeight = (0, random_1.getRandomFloat)(0, totalWeight, seedOrRNG);
        if (verbose) {
          (0, log_1.log)(`Randomly chose weight for JSON room: ${chosenWeight}`);
        }
        const randomJSONRoom = getJSONObjectWithChosenWeight(jsonRooms, chosenWeight);
        (0, utils_1.assertDefined)(randomJSONRoom, `Failed to get a JSON room with chosen weight: ${chosenWeight}`);
        return randomJSONRoom;
      }
      exports2.getRandomJSONRoom = getRandomJSONRoom;
      function getTotalWeightOfJSONObject(jsonOjectArray) {
        const weights = jsonOjectArray.map((jsonObject) => {
          const weightString = jsonObject.$.weight;
          const weight = tonumber(weightString);
          (0, utils_1.assertDefined)(weight, `Failed to parse the weight of a JSON object: ${weightString}.`);
          return weight;
        });
        return (0, array_1.sumArray)(weights);
      }
      function getJSONObjectWithChosenWeight(jsonOjectArray, chosenWeight) {
        let weightAccumulator = 0;
        for (const jsonObject of jsonOjectArray) {
          const weightString = jsonObject.$.weight;
          const weight = tonumber(weightString);
          (0, utils_1.assertDefined)(weight, `Failed to parse the weight of a JSON object: ${weightString}`);
          weightAccumulator += weight;
          if (weightAccumulator >= chosenWeight) {
            return jsonObject;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/isaacscript-common/dist/objects/LRoomShapeToRectangles.js
  var require_LRoomShapeToRectangles = __commonJS({
    "node_modules/isaacscript-common/dist/objects/LRoomShapeToRectangles.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.L_ROOM_SHAPE_TO_RECTANGLES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var readOnly_1 = require_readOnly();
      var TWO_BY_TWO_BOTTOM_RIGHT = (0, readOnly_1.newReadonlyVector)(25, 13);
      exports2.L_ROOM_SHAPE_TO_RECTANGLES = {
        // 9
        [isaac_typescript_definitions_1.RoomShape.LTL]: {
          verticalTopLeft: (0, readOnly_1.newReadonlyVector)(13, 0),
          verticalBottomRight: (0, readOnly_1.newReadonlyVector)(25, 13),
          horizontalTopLeft: (0, readOnly_1.newReadonlyVector)(0, 7),
          horizontalBottomRight: TWO_BY_TWO_BOTTOM_RIGHT
        },
        // 10
        [isaac_typescript_definitions_1.RoomShape.LTR]: {
          verticalTopLeft: constants_1.VectorZero,
          verticalBottomRight: (0, readOnly_1.newReadonlyVector)(12, 13),
          horizontalTopLeft: (0, readOnly_1.newReadonlyVector)(0, 7),
          horizontalBottomRight: TWO_BY_TWO_BOTTOM_RIGHT
        },
        // 11
        [isaac_typescript_definitions_1.RoomShape.LBL]: {
          verticalTopLeft: constants_1.VectorZero,
          verticalBottomRight: (0, readOnly_1.newReadonlyVector)(25, 6),
          horizontalTopLeft: (0, readOnly_1.newReadonlyVector)(13, 0),
          horizontalBottomRight: TWO_BY_TWO_BOTTOM_RIGHT
        },
        // 12
        [isaac_typescript_definitions_1.RoomShape.LBR]: {
          verticalTopLeft: constants_1.VectorZero,
          verticalBottomRight: (0, readOnly_1.newReadonlyVector)(25, 6),
          horizontalTopLeft: constants_1.VectorZero,
          horizontalBottomRight: (0, readOnly_1.newReadonlyVector)(12, 13)
        }
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/roomGrid.js
  var require_roomGrid = __commonJS({
    "node_modules/isaacscript-common/dist/functions/roomGrid.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.worldPositionToGridPositionFast = exports2.worldPositionToGridPosition = exports2.isValidGridPosition = exports2.gridPositionToWorldPosition = exports2.gridIndexToGridPosition = exports2.gridCoordinatesToWorldPosition = void 0;
      var LRoomShapeToRectangles_1 = require_LRoomShapeToRectangles();
      var math_1 = require_math();
      var roomShape_1 = require_roomShape();
      function gridCoordinatesToWorldPosition(x, y) {
        const gridPosition = Vector(x, y);
        return gridPositionToWorldPosition(gridPosition);
      }
      exports2.gridCoordinatesToWorldPosition = gridCoordinatesToWorldPosition;
      function gridIndexToGridPosition(gridIndex, roomShape) {
        const gridWidth = (0, roomShape_1.getRoomShapeWidth)(roomShape);
        const x = gridIndex % gridWidth - 1;
        const y = Math.floor(gridIndex / gridWidth) - 1;
        return Vector(x, y);
      }
      exports2.gridIndexToGridPosition = gridIndexToGridPosition;
      function gridPositionToWorldPosition(gridPosition) {
        const x = (gridPosition.X + 2) * 40;
        const y = (gridPosition.Y + 4) * 40;
        return Vector(x, y);
      }
      exports2.gridPositionToWorldPosition = gridPositionToWorldPosition;
      function isValidGridPosition(gridPosition, roomShape) {
        return (0, roomShape_1.isLRoomShape)(roomShape) ? isValidGridPositionLRoom(gridPosition, roomShape) : isValidGridPositionNormal(gridPosition, roomShape);
      }
      exports2.isValidGridPosition = isValidGridPosition;
      function isValidGridPositionNormal(gridPosition, roomShape) {
        const topLeft = (0, roomShape_1.getRoomShapeTopLeftPosition)(roomShape);
        const bottomRight = (0, roomShape_1.getRoomShapeBottomRightPosition)(roomShape);
        return (0, math_1.inRectangle)(gridPosition, topLeft, bottomRight);
      }
      function isValidGridPositionLRoom(gridPosition, roomShape) {
        const rectangles = LRoomShapeToRectangles_1.L_ROOM_SHAPE_TO_RECTANGLES[roomShape];
        if (rectangles === void 0) {
          return false;
        }
        const { verticalTopLeft, verticalBottomRight, horizontalTopLeft, horizontalBottomRight } = rectangles;
        return (0, math_1.inRectangle)(gridPosition, verticalTopLeft, verticalBottomRight) || (0, math_1.inRectangle)(gridPosition, horizontalTopLeft, horizontalBottomRight);
      }
      function worldPositionToGridPosition(worldPos) {
        const x = Math.round(worldPos.X / 40 - 2);
        const y = Math.round(worldPos.Y / 40 - 4);
        return Vector(x, y);
      }
      exports2.worldPositionToGridPosition = worldPositionToGridPosition;
      function worldPositionToGridPositionFast(worldPos) {
        const x = worldPos.X / 40 - 2;
        const y = worldPos.Y / 40 - 4;
        return Vector(x, y);
      }
      exports2.worldPositionToGridPositionFast = worldPositionToGridPositionFast;
    }
  });

  // node_modules/isaacscript-common/dist/functions/collectibleTag.js
  var require_collectibleTag = __commonJS({
    "node_modules/isaacscript-common/dist/functions/collectibleTag.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isQuestCollectible = exports2.collectibleHasTag = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var types_1 = require_types();
      function collectibleHasTag(collectibleOrCollectibleType, tag) {
        const collectibleType = (0, types_1.isInteger)(collectibleOrCollectibleType) ? collectibleOrCollectibleType : collectibleOrCollectibleType.SubType;
        const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
        if (itemConfigItem === void 0) {
          return false;
        }
        return itemConfigItem.HasTags(tag);
      }
      exports2.collectibleHasTag = collectibleHasTag;
      function isQuestCollectible(collectibleOrCollectibleType) {
        const collectibleType = (0, types_1.isInteger)(collectibleOrCollectibleType) ? collectibleOrCollectibleType : collectibleOrCollectibleType.SubType;
        return collectibleHasTag(collectibleType, isaac_typescript_definitions_1.ItemConfigTag.QUEST);
      }
      exports2.isQuestCollectible = isQuestCollectible;
    }
  });

  // node_modules/isaacscript-common/dist/functions/spawnCollectible.js
  var require_spawnCollectible = __commonJS({
    "node_modules/isaacscript-common/dist/functions/spawnCollectible.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.spawnEmptyCollectible = exports2.spawnCollectibleFromPool = exports2.spawnCollectible = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var collectibleTag_1 = require_collectibleTag();
      var collectibles_1 = require_collectibles();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var players_1 = require_players();
      var rng_1 = require_rng();
      function spawnCollectible(collectibleType, positionOrGridIndex, seedOrRNG, options = false, forceFreeItem = false, spawner) {
        if (seedOrRNG === void 0) {
          seedOrRNG = (0, rng_1.getRandomSeed)();
        }
        const seed = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG.Next() : seedOrRNG;
        const collectible = (0, entitiesSpecific_1.spawnPickupWithSeed)(isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE, collectibleType, positionOrGridIndex, seed, constants_1.VectorZero, spawner);
        if ((0, collectibleTag_1.isQuestCollectible)(collectible)) {
          (0, collectibles_1.preventCollectibleRotation)(collectible);
        }
        if (options) {
          collectible.OptionsPickupIndex = 1;
        }
        if ((0, players_1.anyPlayerIs)(isaac_typescript_definitions_1.PlayerType.KEEPER_B) && !(0, collectibleTag_1.isQuestCollectible)(collectibleType) && !forceFreeItem) {
          collectible.ShopItemId = -1;
          collectible.Price = 15;
        }
        return collectible;
      }
      exports2.spawnCollectible = spawnCollectible;
      function spawnCollectibleFromPool(itemPoolType, positionOrGridIndex, seedOrRNG, options = false, forceFreeItem = false, spawner) {
        const itemPool = cachedClasses_1.game.GetItemPool();
        const collectibleType = itemPool.GetCollectible(itemPoolType);
        return spawnCollectible(collectibleType, positionOrGridIndex, seedOrRNG, options, forceFreeItem, spawner);
      }
      exports2.spawnCollectibleFromPool = spawnCollectibleFromPool;
      function spawnEmptyCollectible(positionOrGridIndex, seedOrRNG) {
        const collectible = spawnCollectible(isaac_typescript_definitions_1.CollectibleType.BROKEN_SHOVEL_1, positionOrGridIndex, seedOrRNG, false, true);
        (0, collectibles_1.setCollectibleEmpty)(collectible);
        return collectible;
      }
      exports2.spawnEmptyCollectible = spawnEmptyCollectible;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/DeployJSONRoom.js
  var require_DeployJSONRoom = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/DeployJSONRoom.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DeployJSONRoom = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var emptyRoom_1 = require_emptyRoom();
      var entities_1 = require_entities();
      var gridEntities_1 = require_gridEntities();
      var jsonRoom_1 = require_jsonRoom();
      var log_1 = require_log();
      var rng_1 = require_rng();
      var roomGrid_1 = require_roomGrid();
      var rooms_1 = require_rooms();
      var spawnCollectible_1 = require_spawnCollectible();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var ReadonlySet_1 = require_ReadonlySet();
      var Feature_1 = require_Feature();
      var GRID_ENTITY_XML_TYPE_SET = new ReadonlySet_1.ReadonlySet(cachedEnumValues_1.GRID_ENTITY_XML_TYPE_VALUES);
      var DeployJSONRoom = class extends Feature_1.Feature {
        preventGridEntityRespawn;
        /** @internal */
        constructor(preventGridEntityRespawn) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PREVENT_GRID_ENTITY_RESPAWN];
          this.preventGridEntityRespawn = preventGridEntityRespawn;
        }
        spawnAllEntities(jsonRoom, rng, verbose = false) {
          let shouldUnclearRoom = false;
          for (const jsonSpawn of jsonRoom.spawn) {
            const xString = jsonSpawn.$.x;
            const x = (0, types_1.parseIntSafe)(xString);
            (0, utils_1.assertDefined)(x, `Failed to convert the following x coordinate to an integer (for a spawn): ${xString}`);
            const yString = jsonSpawn.$.y;
            const y = (0, types_1.parseIntSafe)(yString);
            (0, utils_1.assertDefined)(y, `Failed to convert the following y coordinate to an integer (for a spawn): ${yString}`);
            const jsonEntity = (0, jsonRoom_1.getRandomJSONEntity)(jsonSpawn.entity, rng);
            const entityTypeString = jsonEntity.$.type;
            const entityTypeNumber = (0, types_1.parseIntSafe)(entityTypeString);
            (0, utils_1.assertDefined)(entityTypeNumber, `Failed to convert the entity type to an integer: ${entityTypeString}`);
            const variantString = jsonEntity.$.variant;
            const variant = (0, types_1.parseIntSafe)(variantString);
            (0, utils_1.assertDefined)(variant, `Failed to convert the entity variant to an integer: ${variant}`);
            const subTypeString = jsonEntity.$.subtype;
            const subType = (0, types_1.parseIntSafe)(subTypeString);
            (0, utils_1.assertDefined)(subType, `Failed to convert the entity sub-type to an integer: ${subType}`);
            const isGridEntity = GRID_ENTITY_XML_TYPE_SET.has(entityTypeNumber);
            if (isGridEntity) {
              const gridEntityXMLType = entityTypeNumber;
              if (verbose) {
                (0, log_1.log)(`Spawning grid entity ${gridEntityXMLType}.${variant} at: (${x}, ${y})`);
              }
              spawnGridEntityForJSONRoom(gridEntityXMLType, variant, x, y);
            } else {
              const entityType = entityTypeNumber;
              if (verbose) {
                const entityID = (0, entities_1.getEntityIDFromConstituents)(entityType, variant, subType);
                (0, log_1.log)(`Spawning normal entity ${entityID} at: (${x}, ${y})`);
              }
              const entity = this.spawnNormalEntityForJSONRoom(entityType, variant, subType, x, y, rng);
              const npc = entity.ToNPC();
              if (npc !== void 0 && npc.CanShutDoors) {
                shouldUnclearRoom = true;
              }
            }
          }
          if (shouldUnclearRoom) {
            if (verbose) {
              (0, log_1.log)("Setting the room to be uncleared since there were one or more battle NPCs spawned.");
            }
            (0, rooms_1.setRoomUncleared)();
          } else if (verbose) {
            (0, log_1.log)("Leaving the room cleared since there were no battle NPCs spawned.");
          }
        }
        spawnNormalEntityForJSONRoom(entityType, variant, subType, x, y, rng) {
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const position = (0, roomGrid_1.gridCoordinatesToWorldPosition)(x, y);
          const seed = rng.Next();
          let entity;
          if (entityType === isaac_typescript_definitions_1.EntityType.PICKUP && variant === isaac_typescript_definitions_1.PickupVariant.COLLECTIBLE) {
            const collectibleType = (0, types_1.asCollectibleType)(subType);
            const options = roomType === isaac_typescript_definitions_1.RoomType.ANGEL;
            entity = (0, spawnCollectible_1.spawnCollectible)(collectibleType, position, seed, options);
          } else {
            entity = (0, entities_1.spawnWithSeed)(entityType, variant, subType, position, seed);
          }
          if (entityType === isaac_typescript_definitions_1.EntityType.PITFALL && variant === isaac_typescript_definitions_1.PitfallVariant.PITFALL) {
            entity.EntityCollisionClass = isaac_typescript_definitions_1.EntityCollisionClass.ENEMIES;
            entity.GridCollisionClass = isaac_typescript_definitions_1.EntityGridCollisionClass.WALLS;
          }
          return entity;
        }
        /**
         * Helper function to deconstruct a vanilla room and set up a custom room in its place.
         * Specifically, this will clear the current room of all entities and grid entities, and then
         * spawn all of the entries and grid entities in the provided JSON room. For this reason, you must
         * be in the actual room in order to use this function.
         *
         * A JSON room is simply an XML file converted to JSON. You can create JSON rooms by using the
         * Basement Renovator room editor to create an XML file, and then convert it to JSON using the
         * `convert-xml-to-json` tool (e.g. `npx convert-xml-to-json my-rooms.xml`).
         *
         * This function is meant to be used in the `POST_NEW_ROOM` callback.
         *
         * For example:
         *
         * ```ts
         *
         * import customRooms from "./customRooms.json";
         *
         * export function postNewRoom(): void {
         *   const firstJSONRoom = customRooms.rooms.room[0];
         *   deployJSONRoom(firstJSONRoom);
         * }
         * ```
         *
         * If you want to deploy an unseeded room, you must explicitly pass `undefined` to the `seedOrRNG`
         * parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DEPLOY_JSON_ROOM`.
         *
         * @param jsonRoom The JSON room to deploy.
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param verbose Optional. If specified, will write entries to the "log.txt" file that describe
         *                what the function is doing. Default is false.
         * @public
         */
        deployJSONRoom(jsonRoom, seedOrRNG, verbose = false) {
          const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
          if (verbose) {
            (0, log_1.log)("Starting to empty the room of entities and grid entities.");
          }
          (0, emptyRoom_1.emptyRoom)();
          if (verbose) {
            (0, log_1.log)("Finished emptying the room of entities and grid entities.");
          }
          (0, rooms_1.setRoomCleared)();
          if (verbose) {
            (0, log_1.log)("Starting to spawn all of the new entities and grid entities.");
          }
          this.spawnAllEntities(jsonRoom, rng, verbose);
          if (verbose) {
            (0, log_1.log)("Finished spawning all of the new entities and grid entities.");
          }
          fixPitGraphics();
          this.preventGridEntityRespawn.preventGridEntityRespawn();
        }
      };
      exports2.DeployJSONRoom = DeployJSONRoom;
      __decorate([
        decorators_1.Exported
      ], DeployJSONRoom.prototype, "deployJSONRoom", null);
      function spawnGridEntityForJSONRoom(gridEntityXMLType, gridEntityXMLVariant, x, y) {
        const room = cachedClasses_1.game.GetRoom();
        const gridEntityTuple = (0, gridEntities_1.convertXMLGridEntityType)(gridEntityXMLType, gridEntityXMLVariant);
        if (gridEntityTuple === void 0) {
          return void 0;
        }
        const [gridEntityType, variant] = gridEntityTuple;
        const position = (0, roomGrid_1.gridCoordinatesToWorldPosition)(x, y);
        const gridIndex = room.GetGridIndex(position);
        const gridEntity = (0, gridEntities_1.spawnGridEntityWithVariant)(gridEntityType, variant, gridIndex);
        if (gridEntity === void 0) {
          return gridEntity;
        }
        if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.POOP) {
          const sprite = gridEntity.GetSprite();
          sprite.Play("State1", true);
          sprite.SetLastFrame();
        }
        return gridEntity;
      }
      function fixPitGraphics() {
        const room = cachedClasses_1.game.GetRoom();
        const gridWidth = room.GetGridWidth();
        const pitMap = getPitMap();
        for (const [gridIndex, gridEntity] of pitMap) {
          const gridIndexLeft = gridIndex - 1;
          const L = pitMap.has(gridIndexLeft);
          const gridIndexRight = gridIndex + 1;
          const R = pitMap.has(gridIndexRight);
          const gridIndexUp = gridIndex - gridWidth;
          const U = pitMap.has(gridIndexUp);
          const gridIndexDown = gridIndex + gridWidth;
          const D = pitMap.has(gridIndexDown);
          const gridIndexUpLeft = gridIndex - gridWidth - 1;
          const UL = pitMap.has(gridIndexUpLeft);
          const gridIndexUpRight = gridIndex - gridWidth + 1;
          const UR = pitMap.has(gridIndexUpRight);
          const gridIndexDownLeft = gridIndex + gridWidth - 1;
          const DL = pitMap.has(gridIndexDownLeft);
          const gridIndexDownRight = gridIndex + gridWidth + 1;
          const DR = pitMap.has(gridIndexDownRight);
          const pitFrame = getPitFrame(L, R, U, D, UL, UR, DL, DR);
          const sprite = gridEntity.GetSprite();
          sprite.SetFrame(pitFrame);
        }
      }
      function getPitMap() {
        const pitMap = /* @__PURE__ */ new Map();
        for (const gridEntity of (0, gridEntities_1.getGridEntities)(isaac_typescript_definitions_1.GridEntityType.PIT)) {
          const gridIndex = gridEntity.GetGridIndex();
          pitMap.set(gridIndex, gridEntity);
        }
        return pitMap;
      }
      function getPitFrame(L, R, U, D, UL, UR, DL, DR) {
        let F = 0;
        if (L) {
          F |= 1;
        }
        if (U) {
          F |= 2;
        }
        if (R) {
          F |= 4;
        }
        if (D) {
          F |= 8;
        }
        if (U && L && !UL && !R && !D) {
          F = 17;
        }
        if (U && R && !UR && !L && !D) {
          F = 18;
        }
        if (L && D && !DL && !U && !R) {
          F = 19;
        }
        if (R && D && !DR && !L && !U) {
          F = 20;
        }
        if (L && U && R && D && !UL) {
          F = 21;
        }
        if (L && U && R && D && !UR) {
          F = 22;
        }
        if (U && R && D && !L && !UR) {
          F = 25;
        }
        if (L && U && D && !R && !UL) {
          F = 26;
        }
        if (L && U && R && D && !DL && !DR) {
          F = 24;
        }
        if (L && U && R && D && !UR && !UL) {
          F = 23;
        }
        if (L && U && R && UL && !UR && !D) {
          F = 27;
        }
        if (L && U && R && UR && !UL && !D) {
          F = 28;
        }
        if (L && U && R && !D && !UR && !UL) {
          F = 29;
        }
        if (L && R && D && DL && !U && !DR) {
          F = 30;
        }
        if (L && R && D && DR && !U && !DL) {
          F = 31;
        }
        if (L && R && D && !U && !DL && !DR) {
          F = 32;
        }
        return F;
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/DisableAllSound.js
  var require_DisableAllSound = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/DisableAllSound.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DisableAllSound = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var sound_1 = require_sound();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          disableSoundSet: /* @__PURE__ */ new Set()
        }
      };
      var DisableAllSound = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        musicWasEnabled = false;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          if (v.run.disableSoundSet.size === 0) {
            return;
          }
          (0, sound_1.stopAllSoundEffects)();
        };
        /**
         * Helper function to stop muting all sound effects and music.
         *
         * Use this function to set things back to normal after having used `disableAllSounds`.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_ALL_SOUND`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         */
        enableAllSound(key) {
          if (!v.run.disableSoundSet.has(key)) {
            return;
          }
          v.run.disableSoundSet.delete(key);
          if (v.run.disableSoundSet.size === 0 && this.musicWasEnabled) {
            cachedClasses_1.musicManager.Enable();
          }
          (0, sound_1.stopAllSoundEffects)();
        }
        /**
         * Helper function to disable all sound effects and music (by constantly musting them).
         *
         * Use the `enableAllSounds` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_ALL_SOUND`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         */
        disableAllSound(key) {
          if (v.run.disableSoundSet.size === 0) {
            this.musicWasEnabled = cachedClasses_1.musicManager.IsEnabled();
          }
          v.run.disableSoundSet.add(key);
          (0, sound_1.stopAllSoundEffects)();
        }
      };
      exports2.DisableAllSound = DisableAllSound;
      __decorate([
        decorators_1.Exported
      ], DisableAllSound.prototype, "enableAllSound", null);
      __decorate([
        decorators_1.Exported
      ], DisableAllSound.prototype, "disableAllSound", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/DisableInputs.js
  var require_DisableInputs = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/DisableInputs.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.DisableInputs = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var input_1 = require_input();
      var ReadonlySet_1 = require_ReadonlySet();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          /**
           * Glowing Hour Glass support is disabled by default since it can cause bugs with extra-gameplay
           * features. (For example, whether the player should be able to move is not something that
           * should be reset by the Glowing Hour Glass.)
           */
          __ignoreGlowingHourGlass: true,
          /** Indexed by the requesting feature key. */
          disableInputs: /* @__PURE__ */ new Map(),
          /** Indexed by the requesting feature key. */
          enableAllInputsWithBlacklistMap: /* @__PURE__ */ new Map(),
          /** Indexed by the requesting feature key. */
          disableAllInputsWithWhitelistMap: /* @__PURE__ */ new Map()
        }
      };
      var DisableInputs = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 13
            [
              isaac_typescript_definitions_1.ModCallback.INPUT_ACTION,
              this.isActionPressed,
              [isaac_typescript_definitions_1.InputHook.IS_ACTION_PRESSED]
              // 0
            ],
            // 13
            [
              isaac_typescript_definitions_1.ModCallback.INPUT_ACTION,
              this.isActionTriggered,
              [isaac_typescript_definitions_1.InputHook.IS_ACTION_TRIGGERED]
              // 1
            ],
            // 13
            [
              isaac_typescript_definitions_1.ModCallback.INPUT_ACTION,
              this.getActionValue,
              [isaac_typescript_definitions_1.InputHook.GET_ACTION_VALUE]
              // 2
            ]
          ];
        }
        // InputHook.IS_ACTION_PRESSED (0)
        isActionPressed = (_entity, _inputHook, buttonAction) => this.getReturnValue(buttonAction, true);
        // InputHook.IS_ACTION_TRIGGERED (1)
        isActionTriggered = (_entity, _inputHook, buttonAction) => this.getReturnValue(buttonAction, true);
        // InputHook.GET_ACTION_VALUE (2)
        getActionValue = (_entity, _inputHook, buttonAction) => this.getReturnValue(buttonAction, false);
        getReturnValue(buttonAction, booleanCallback) {
          const disableValue = booleanCallback ? false : 0;
          for (const blacklist of v.run.disableInputs.values()) {
            if (blacklist.has(buttonAction)) {
              return disableValue;
            }
          }
          for (const whitelist of v.run.disableAllInputsWithWhitelistMap.values()) {
            if (!whitelist.has(buttonAction)) {
              return disableValue;
            }
          }
          for (const blacklist of v.run.enableAllInputsWithBlacklistMap.values()) {
            if (blacklist.has(buttonAction)) {
              return disableValue;
            }
          }
          return void 0;
        }
        /**
         * Helper function to check if the `ISCFeature.DISABLE_INPUTS` feature is turned on in some
         * capacity.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @public
         */
        areInputsEnabled() {
          return v.run.disableInputs.size === 0 && v.run.enableAllInputsWithBlacklistMap.size === 0 && v.run.disableAllInputsWithWhitelistMap.size === 0;
        }
        /**
         * Helper function to enable all inputs. Use this function to set things back to normal after
         * having used one of the other helper functions to disable inputs.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @public
         */
        enableAllInputs(key) {
          v.run.disableAllInputsWithWhitelistMap.delete(key);
          v.run.enableAllInputsWithBlacklistMap.delete(key);
        }
        /**
         * Helper function to disable specific inputs, like opening the console.
         *
         * This function is variadic, meaning that you can specify as many inputs as you want to disable.
         * (To disable all inputs, see the `disableAllInputs` function.
         *
         * Use the `enableAllInputs` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @param buttonActions An array of the actions to action.
         * @public
         */
        disableInputs(key, ...buttonActions) {
          const buttonActionsSet = new ReadonlySet_1.ReadonlySet(buttonActions);
          v.run.disableInputs.set(key, buttonActionsSet);
        }
        /**
         * Helper function to disable all inputs. This is useful because `EntityPlayer.ControlsEnabled`
         * can be changed by the game under certain conditions.
         *
         * Use the `enableAllInputs` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @public
         */
        disableAllInputs(key) {
          v.run.disableAllInputsWithWhitelistMap.set(key, new ReadonlySet_1.ReadonlySet());
          v.run.enableAllInputsWithBlacklistMap.delete(key);
        }
        /**
         * Helper function to enable all inputs besides the ones provided. This is useful because
         * `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.
         *
         * Use the `enableAllInputs` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @param blacklist A set of ButtonActions to disallow.
         * @public
         */
        enableAllInputsExceptFor(key, blacklist) {
          v.run.disableAllInputsWithWhitelistMap.delete(key);
          v.run.enableAllInputsWithBlacklistMap.set(key, blacklist);
        }
        /**
         * Helper function to disable all inputs besides the ones provided. This is useful because
         * `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.
         *
         * Use the `enableAllInputs` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @param whitelist A set of ButtonActions to allow.
         * @public
         */
        disableAllInputsExceptFor(key, whitelist) {
          v.run.disableAllInputsWithWhitelistMap.set(key, whitelist);
          v.run.enableAllInputsWithBlacklistMap.delete(key);
        }
        /**
         * Helper function to disable only the inputs used for moving the character (or moving the cursor
         * in the UI). This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game
         * under certain conditions.
         *
         * Use the `enableAllInputs` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @public
         */
        disableMovementInputs(key) {
          this.enableAllInputsExceptFor(key, input_1.MOVEMENT_BUTTON_ACTIONS_SET);
        }
        /**
         * Helper function to disable only the inputs used for shooting tears. This is useful because
         * `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.
         *
         * Use the `enableAllInputs` helper function to set things back to normal.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.DISABLE_INPUTS`.
         *
         * @param key The name of the mod feature that is requesting the enable/disable. For example, if
         *            this was part of the code for a custom enemy called "Super Gaper", then you could
         *            use a key of "SuperGaper". The name is necessary so that multiple mod features can
         *            work in tandem.
         * @public
         */
        disableShootingInputs(key) {
          this.enableAllInputsExceptFor(key, input_1.SHOOTING_BUTTON_ACTIONS_SET);
        }
      };
      exports2.DisableInputs = DisableInputs;
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "areInputsEnabled", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "enableAllInputs", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "disableInputs", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "disableAllInputs", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "enableAllInputsExceptFor", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "disableAllInputsExceptFor", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "disableMovementInputs", null);
      __decorate([
        decorators_1.Exported
      ], DisableInputs.prototype, "disableShootingInputs", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/EdenStartingStatsHealth.js
  var require_EdenStartingStatsHealth = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/EdenStartingStatsHealth.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.EdenStartingStatsHealth = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var collectibles_1 = require_collectibles();
      var playerDataStructures_1 = require_playerDataStructures();
      var playerHealth_1 = require_playerHealth();
      var players_1 = require_players();
      var stats_1 = require_stats();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          edenActiveCollectibles: /* @__PURE__ */ new Map(),
          edenPassiveCollectibles: /* @__PURE__ */ new Map(),
          edenPlayerStats: /* @__PURE__ */ new Map(),
          edenPlayerHealth: /* @__PURE__ */ new Map()
        }
      };
      var EdenStartingStatsHealth = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 9
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_INIT, this.postPlayerInit]
          ];
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED,
              this.postPlayerCollectibleAdded
            ]
          ];
        }
        /**
         * We must use the `POST_PLAYER_INIT` callback since the two random collectibles have not been
         * granted yet.
         */
        postPlayerInit = (player) => {
          if (!(0, players_1.isEden)(player)) {
            return;
          }
          this.getEdenStats(player);
          this.getEdenHealth(player);
        };
        getEdenStats(player) {
          const existingStatMap = (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPlayerStats, player);
          if (existingStatMap !== void 0) {
            return;
          }
          const playerStats = (0, stats_1.getPlayerStats)(player);
          (0, playerDataStructures_1.mapSetPlayer)(v.run.edenPlayerStats, player, playerStats);
        }
        getEdenHealth(player) {
          const existingHealthMap = (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPlayerHealth, player);
          if (existingHealthMap !== void 0) {
            return;
          }
          const playerHealth = (0, playerHealth_1.getPlayerHealth)(player);
          (0, playerDataStructures_1.mapSetPlayer)(v.run.edenPlayerHealth, player, playerHealth);
        }
        /**
         * We must use the `POST_PLAYER_COLLECTIBLE_ADDED` callback since the collectibles are not yet
         * granted in the `POST_PLAYER_INIT` callback.
         */
        postPlayerCollectibleAdded = (player, collectibleType) => {
          if (!(0, players_1.isEden)(player)) {
            return;
          }
          const map = (0, collectibles_1.isActiveCollectible)(collectibleType) ? v.run.edenActiveCollectibles : v.run.edenPassiveCollectibles;
          if (!(0, playerDataStructures_1.mapHasPlayer)(map, player)) {
            (0, playerDataStructures_1.mapSetPlayer)(map, player, collectibleType);
          }
        };
        /**
         * Helper function to get the active collectible that Eden started with at the beginning of the
         * run.
         *
         * Returns undefined if passed a player that is not Eden or if the starting collectibles are not
         * yet added. (Eden's starting collectibles are added after the `POST_PLAYER_INIT` callback has
         * fired.)
         *
         * @public
         */
        getEdenStartingActiveCollectible(player) {
          return (0, playerDataStructures_1.mapGetPlayer)(v.run.edenActiveCollectibles, player);
        }
        /**
         * Helper function to get an array containing the active collectible and the passive collectible
         * that Eden started with at the beginning of the run. The active collectible will be the first
         * element and the passive collectible will be the second element.
         *
         * Returns an empty array if passed a player that is not Eden or if the starting collectibles are
         * not yet added. (Eden's starting collectibles are added after the `POST_PLAYER_INIT` callback
         * has fired.)
         *
         * @public
         */
        getEdenStartingCollectibles(player) {
          const collectibleTypes = [];
          const activeCollectibleType = (0, playerDataStructures_1.mapGetPlayer)(v.run.edenActiveCollectibles, player);
          if (activeCollectibleType !== void 0) {
            collectibleTypes.push(activeCollectibleType);
          }
          const passiveCollectibleType = (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPassiveCollectibles, player);
          if (passiveCollectibleType !== void 0) {
            collectibleTypes.push(passiveCollectibleType);
          }
          return collectibleTypes;
        }
        /**
         * Helper function to get the health that Eden started with at the beginning of the run before any
         * of the random collectibles were added.
         *
         * Returns undefined if passed a player that is not Eden.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.EDEN_STARTING_STATS`.
         *
         * @public
         */
        getEdenStartingHealth(player) {
          return (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPlayerHealth, player);
        }
        /**
         * Helper function to get the passive collectible that Eden started with at the beginning of the
         * run.
         *
         * Returns undefined if passed a player that is not Eden or if the starting collectibles are not
         * yet added. (Eden's starting collectibles are added after the `POST_PLAYER_INIT` callback has
         * fired.)
         *
         * @public
         */
        getEdenStartingPassiveCollectible(player) {
          return (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPassiveCollectibles, player);
        }
        /**
         * Helper function to get the value of the randomized starting stat for Eden that was assigned at
         * the beginning of the run before any of the random collectibles were added.
         *
         * Returns undefined if passed a player that is not Eden.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.EDEN_STARTING_STATS`.
         *
         * @public
         */
        getEdenStartingStat(player, playerStat) {
          const playerStats = (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPlayerStats, player);
          if (playerStats === void 0) {
            return void 0;
          }
          return playerStats[playerStat];
        }
        /**
         * Helper function to get all of the stat values that Eden started with at the beginning of the
         * run before any of the random collectibles were added.
         *
         * Returns undefined if passed a player that is not Eden.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.EDEN_STARTING_STATS`.
         *
         * @public
         */
        getEdenStartingStats(player) {
          return (0, playerDataStructures_1.mapGetPlayer)(v.run.edenPlayerStats, player);
        }
      };
      exports2.EdenStartingStatsHealth = EdenStartingStatsHealth;
      __decorate([
        decorators_1.Exported
      ], EdenStartingStatsHealth.prototype, "getEdenStartingActiveCollectible", null);
      __decorate([
        decorators_1.Exported
      ], EdenStartingStatsHealth.prototype, "getEdenStartingCollectibles", null);
      __decorate([
        decorators_1.Exported
      ], EdenStartingStatsHealth.prototype, "getEdenStartingHealth", null);
      __decorate([
        decorators_1.Exported
      ], EdenStartingStatsHealth.prototype, "getEdenStartingPassiveCollectible", null);
      __decorate([
        decorators_1.Exported
      ], EdenStartingStatsHealth.prototype, "getEdenStartingStat", null);
      __decorate([
        decorators_1.Exported
      ], EdenStartingStatsHealth.prototype, "getEdenStartingStats", null);
    }
  });

  // node_modules/isaacscript-common/dist/objects/cardDescriptions.js
  var require_cardDescriptions = __commonJS({
    "node_modules/isaacscript-common/dist/objects/cardDescriptions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CARD_DESCRIPTIONS = exports2.DEFAULT_CARD_DESCRIPTION = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_CARD_DESCRIPTION = "Unknown";
      exports2.CARD_DESCRIPTIONS = {
        [isaac_typescript_definitions_1.CardType.NULL]: exports2.DEFAULT_CARD_DESCRIPTION,
        [isaac_typescript_definitions_1.CardType.FOOL]: "Where journey begins",
        [isaac_typescript_definitions_1.CardType.MAGICIAN]: "May you never miss your goal",
        [isaac_typescript_definitions_1.CardType.HIGH_PRIESTESS]: "Mother is watching you",
        [isaac_typescript_definitions_1.CardType.EMPRESS]: "May your rage bring power",
        [isaac_typescript_definitions_1.CardType.EMPEROR]: "Challenge me!",
        [isaac_typescript_definitions_1.CardType.HIEROPHANT]: "Two prayers for the lost",
        [isaac_typescript_definitions_1.CardType.LOVERS]: "May you prosper and be in good health",
        [isaac_typescript_definitions_1.CardType.CHARIOT]: "May nothing stand before you",
        [isaac_typescript_definitions_1.CardType.JUSTICE]: "May your future become balanced",
        [isaac_typescript_definitions_1.CardType.HERMIT]: "May you see what life has to offer",
        [isaac_typescript_definitions_1.CardType.WHEEL_OF_FORTUNE]: "Spin the wheel of destiny",
        [isaac_typescript_definitions_1.CardType.STRENGTH]: "May your power bring rage",
        [isaac_typescript_definitions_1.CardType.HANGED_MAN]: "May you find enlightenment ",
        [isaac_typescript_definitions_1.CardType.DEATH]: "Lay waste to all that oppose you ",
        [isaac_typescript_definitions_1.CardType.TEMPERANCE]: "May you be pure in heart",
        [isaac_typescript_definitions_1.CardType.DEVIL]: "Revel in the power of darkness",
        [isaac_typescript_definitions_1.CardType.TOWER]: "Destruction brings creation",
        [isaac_typescript_definitions_1.CardType.STARS]: "May you find what you desire ",
        [isaac_typescript_definitions_1.CardType.MOON]: "May you find all you have lost",
        [isaac_typescript_definitions_1.CardType.SUN]: "May the light heal and enlighten you",
        [isaac_typescript_definitions_1.CardType.JUDGEMENT]: "Judge lest ye be judged",
        [isaac_typescript_definitions_1.CardType.WORLD]: "Open your eyes and see",
        [isaac_typescript_definitions_1.CardType.TWO_OF_CLUBS]: "Item multiplier",
        [isaac_typescript_definitions_1.CardType.TWO_OF_DIAMONDS]: "Item multiplier",
        [isaac_typescript_definitions_1.CardType.TWO_OF_SPADES]: "Item multiplier",
        [isaac_typescript_definitions_1.CardType.TWO_OF_HEARTS]: "Item multiplier",
        [isaac_typescript_definitions_1.CardType.ACE_OF_CLUBS]: "Convert all",
        [isaac_typescript_definitions_1.CardType.ACE_OF_DIAMONDS]: "Convert all",
        [isaac_typescript_definitions_1.CardType.ACE_OF_SPADES]: "Convert all",
        [isaac_typescript_definitions_1.CardType.ACE_OF_HEARTS]: "Convert all",
        [isaac_typescript_definitions_1.CardType.JOKER]: "???",
        [isaac_typescript_definitions_1.CardType.RUNE_HAGALAZ]: "Destruction",
        [isaac_typescript_definitions_1.CardType.RUNE_JERA]: "Abundance",
        [isaac_typescript_definitions_1.CardType.RUNE_EHWAZ]: "Passage",
        [isaac_typescript_definitions_1.CardType.RUNE_DAGAZ]: "Purity",
        [isaac_typescript_definitions_1.CardType.RUNE_ANSUZ]: "Vision",
        [isaac_typescript_definitions_1.CardType.RUNE_PERTHRO]: "Change",
        [isaac_typescript_definitions_1.CardType.RUNE_BERKANO]: "Companionship",
        [isaac_typescript_definitions_1.CardType.RUNE_ALGIZ]: "Resistance",
        [isaac_typescript_definitions_1.CardType.RUNE_BLANK]: "???",
        [isaac_typescript_definitions_1.CardType.RUNE_BLACK]: "Void",
        [isaac_typescript_definitions_1.CardType.CHAOS]: "???",
        [isaac_typescript_definitions_1.CardType.CREDIT]: "Charge it!",
        [isaac_typescript_definitions_1.CardType.RULES]: "???",
        [isaac_typescript_definitions_1.CardType.AGAINST_HUMANITY]: "Something stinks...",
        [isaac_typescript_definitions_1.CardType.SUICIDE_KING]: "A true ending?",
        [isaac_typescript_definitions_1.CardType.GET_OUT_OF_JAIL_FREE]: "Open Sesame",
        [isaac_typescript_definitions_1.CardType.QUESTION_MARK]: "Double active",
        [isaac_typescript_definitions_1.CardType.DICE_SHARD]: "D6 + D20",
        [isaac_typescript_definitions_1.CardType.EMERGENCY_CONTACT]: "Help from above",
        [isaac_typescript_definitions_1.CardType.HOLY]: "You feel protected",
        [isaac_typescript_definitions_1.CardType.HUGE_GROWTH]: "Become immense!",
        [isaac_typescript_definitions_1.CardType.ANCIENT_RECALL]: "Draw 3 cards",
        [isaac_typescript_definitions_1.CardType.ERA_WALK]: "Savor the moment",
        [isaac_typescript_definitions_1.CardType.RUNE_SHARD]: "It still glows faintly",
        [isaac_typescript_definitions_1.CardType.REVERSE_FOOL]: "Let go and move on",
        [isaac_typescript_definitions_1.CardType.REVERSE_MAGICIAN]: "May no harm come to you",
        [isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS]: "Run",
        [isaac_typescript_definitions_1.CardType.REVERSE_EMPRESS]: "May your love bring protection",
        [isaac_typescript_definitions_1.CardType.REVERSE_EMPEROR]: "May you find a worthy opponent",
        [isaac_typescript_definitions_1.CardType.REVERSE_HIEROPHANT]: "Two prayers for the forgotten",
        [isaac_typescript_definitions_1.CardType.REVERSE_LOVERS]: "May your heart shatter into pieces",
        [isaac_typescript_definitions_1.CardType.REVERSE_CHARIOT]: "May nothing walk past you",
        [isaac_typescript_definitions_1.CardType.REVERSE_JUSTICE]: "May your sins come back to torment you",
        [isaac_typescript_definitions_1.CardType.REVERSE_HERMIT]: "May you see the value of all things in life",
        [isaac_typescript_definitions_1.CardType.REVERSE_WHEEL_OF_FORTUNE]: "Throw the dice of fate",
        [isaac_typescript_definitions_1.CardType.REVERSE_STRENGTH]: "May you break their resolve",
        [isaac_typescript_definitions_1.CardType.REVERSE_HANGED_MAN]: "May your greed know no bounds",
        [isaac_typescript_definitions_1.CardType.REVERSE_DEATH]: "May life spring forth from the fallen",
        [isaac_typescript_definitions_1.CardType.REVERSE_TEMPERANCE]: "May your hunger be satiated",
        [isaac_typescript_definitions_1.CardType.REVERSE_DEVIL]: "Bask in the light of your mercy",
        [isaac_typescript_definitions_1.CardType.REVERSE_TOWER]: "Creation brings destruction",
        [isaac_typescript_definitions_1.CardType.REVERSE_STARS]: "May your loss bring fortune",
        [isaac_typescript_definitions_1.CardType.REVERSE_MOON]: "May you remember lost memories",
        [isaac_typescript_definitions_1.CardType.REVERSE_SUN]: "May the darkness swallow all around you",
        [isaac_typescript_definitions_1.CardType.REVERSE_JUDGEMENT]: "May you redeem those found wanting",
        [isaac_typescript_definitions_1.CardType.REVERSE_WORLD]: "Step into the abyss",
        [isaac_typescript_definitions_1.CardType.CRACKED_KEY]: "???",
        [isaac_typescript_definitions_1.CardType.QUEEN_OF_HEARTS]: "<3",
        [isaac_typescript_definitions_1.CardType.WILD]: "Again",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_ISAAC]: "Reroll... or not",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_MAGDALENE]: "Give me your love!",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_CAIN]: "Opens the unopenable",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_JUDAS]: "Right behind you",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY]: "Chemical warfare",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_EVE]: "Your very own murder",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_SAMSON]: "Slay a thousand",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_AZAZEL]: "Demon rage!",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_LAZARUS]: "Life after death",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_EDEN]: "Embrace chaos",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_LOST]: "Leave your body behind",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_LILITH]: "Motherhood",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER]: "$$$",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_APOLLYON]: "Bringer of calamity",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN]: "Skeletal protector",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_BETHANY]: "Friends from beyond",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU]: "Bound by blood"
        // 97
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/cardNames.js
  var require_cardNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/cardNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CARD_NAMES = exports2.DEFAULT_CARD_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_CARD_NAME = "Unknown";
      exports2.CARD_NAMES = {
        [isaac_typescript_definitions_1.CardType.NULL]: exports2.DEFAULT_CARD_NAME,
        [isaac_typescript_definitions_1.CardType.FOOL]: "0 - The Fool",
        [isaac_typescript_definitions_1.CardType.MAGICIAN]: "I - The Magician",
        [isaac_typescript_definitions_1.CardType.HIGH_PRIESTESS]: "II - The High Priestess",
        [isaac_typescript_definitions_1.CardType.EMPRESS]: "III - The Empress",
        [isaac_typescript_definitions_1.CardType.EMPEROR]: "IV - The Emperor",
        [isaac_typescript_definitions_1.CardType.HIEROPHANT]: "V - The Hierophant",
        [isaac_typescript_definitions_1.CardType.LOVERS]: "VI - The Lovers",
        [isaac_typescript_definitions_1.CardType.CHARIOT]: "VII - The Chariot",
        [isaac_typescript_definitions_1.CardType.JUSTICE]: "VIII - Justice",
        [isaac_typescript_definitions_1.CardType.HERMIT]: "IX - The Hermit",
        [isaac_typescript_definitions_1.CardType.WHEEL_OF_FORTUNE]: "X - Wheel of Fortune",
        [isaac_typescript_definitions_1.CardType.STRENGTH]: "XI - Strength",
        [isaac_typescript_definitions_1.CardType.HANGED_MAN]: "XII - The Hanged Man",
        [isaac_typescript_definitions_1.CardType.DEATH]: "XIII - Death",
        [isaac_typescript_definitions_1.CardType.TEMPERANCE]: "XIV - Temperance",
        [isaac_typescript_definitions_1.CardType.DEVIL]: "XV - The Devil",
        [isaac_typescript_definitions_1.CardType.TOWER]: "XVI - The Tower",
        [isaac_typescript_definitions_1.CardType.STARS]: "XVII - The Stars",
        [isaac_typescript_definitions_1.CardType.MOON]: "XVIII - The Moon",
        [isaac_typescript_definitions_1.CardType.SUN]: "XIX - The Sun",
        [isaac_typescript_definitions_1.CardType.JUDGEMENT]: "XX - Judgement",
        [isaac_typescript_definitions_1.CardType.WORLD]: "XXI - The World",
        [isaac_typescript_definitions_1.CardType.TWO_OF_CLUBS]: "2 of Clubs",
        [isaac_typescript_definitions_1.CardType.TWO_OF_DIAMONDS]: "2 of Diamonds",
        [isaac_typescript_definitions_1.CardType.TWO_OF_SPADES]: "2 of Spades",
        [isaac_typescript_definitions_1.CardType.TWO_OF_HEARTS]: "2 of Hearts",
        [isaac_typescript_definitions_1.CardType.ACE_OF_CLUBS]: "Ace of Clubs",
        [isaac_typescript_definitions_1.CardType.ACE_OF_DIAMONDS]: "Ace of Diamonds",
        [isaac_typescript_definitions_1.CardType.ACE_OF_SPADES]: "Ace of Spades",
        [isaac_typescript_definitions_1.CardType.ACE_OF_HEARTS]: "Ace of Hearts",
        [isaac_typescript_definitions_1.CardType.JOKER]: "Joker",
        [isaac_typescript_definitions_1.CardType.RUNE_HAGALAZ]: "Hagalaz",
        [isaac_typescript_definitions_1.CardType.RUNE_JERA]: "Jera",
        [isaac_typescript_definitions_1.CardType.RUNE_EHWAZ]: "Ehwaz",
        [isaac_typescript_definitions_1.CardType.RUNE_DAGAZ]: "Dagaz",
        [isaac_typescript_definitions_1.CardType.RUNE_ANSUZ]: "Ansuz",
        [isaac_typescript_definitions_1.CardType.RUNE_PERTHRO]: "Perthro",
        [isaac_typescript_definitions_1.CardType.RUNE_BERKANO]: "Berkano",
        [isaac_typescript_definitions_1.CardType.RUNE_ALGIZ]: "Algiz",
        [isaac_typescript_definitions_1.CardType.RUNE_BLANK]: "Blank Rune",
        [isaac_typescript_definitions_1.CardType.RUNE_BLACK]: "Black Rune",
        [isaac_typescript_definitions_1.CardType.CHAOS]: "Chaos Card",
        [isaac_typescript_definitions_1.CardType.CREDIT]: "Credit Card",
        [isaac_typescript_definitions_1.CardType.RULES]: "Rules Card",
        [isaac_typescript_definitions_1.CardType.AGAINST_HUMANITY]: "A Card Against Humanity",
        [isaac_typescript_definitions_1.CardType.SUICIDE_KING]: "Suicide King",
        [isaac_typescript_definitions_1.CardType.GET_OUT_OF_JAIL_FREE]: "Get Out Of Jail Free Card",
        [isaac_typescript_definitions_1.CardType.QUESTION_MARK]: "? Card",
        [isaac_typescript_definitions_1.CardType.DICE_SHARD]: "Dice Shard",
        [isaac_typescript_definitions_1.CardType.EMERGENCY_CONTACT]: "Emergency Contact",
        [isaac_typescript_definitions_1.CardType.HOLY]: "Holy Card",
        [isaac_typescript_definitions_1.CardType.HUGE_GROWTH]: "Huge Growth",
        [isaac_typescript_definitions_1.CardType.ANCIENT_RECALL]: "Ancient Recall",
        [isaac_typescript_definitions_1.CardType.ERA_WALK]: "Era Walk",
        [isaac_typescript_definitions_1.CardType.RUNE_SHARD]: "Rune Shard",
        [isaac_typescript_definitions_1.CardType.REVERSE_FOOL]: "0 - The Fool?",
        [isaac_typescript_definitions_1.CardType.REVERSE_MAGICIAN]: "I - The Magician?",
        [isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS]: "II - The High Priestess?",
        [isaac_typescript_definitions_1.CardType.REVERSE_EMPRESS]: "III - The Empress?",
        [isaac_typescript_definitions_1.CardType.REVERSE_EMPEROR]: "IV - The Emperor?",
        [isaac_typescript_definitions_1.CardType.REVERSE_HIEROPHANT]: "V - The Hierophant?",
        [isaac_typescript_definitions_1.CardType.REVERSE_LOVERS]: "VI - The Lovers?",
        [isaac_typescript_definitions_1.CardType.REVERSE_CHARIOT]: "VII - The Chariot?",
        [isaac_typescript_definitions_1.CardType.REVERSE_JUSTICE]: "VIII - Justice?",
        [isaac_typescript_definitions_1.CardType.REVERSE_HERMIT]: "IX - The Hermit?",
        [isaac_typescript_definitions_1.CardType.REVERSE_WHEEL_OF_FORTUNE]: "X - Wheel of Fortune?",
        [isaac_typescript_definitions_1.CardType.REVERSE_STRENGTH]: "XI - Strength?",
        [isaac_typescript_definitions_1.CardType.REVERSE_HANGED_MAN]: "XII - The Hanged Man?",
        [isaac_typescript_definitions_1.CardType.REVERSE_DEATH]: "XIII - Death?",
        [isaac_typescript_definitions_1.CardType.REVERSE_TEMPERANCE]: "XIV - Temperance?",
        [isaac_typescript_definitions_1.CardType.REVERSE_DEVIL]: "XV - The Devil?",
        [isaac_typescript_definitions_1.CardType.REVERSE_TOWER]: "XVI - The Tower?",
        [isaac_typescript_definitions_1.CardType.REVERSE_STARS]: "XVII - The Stars?",
        [isaac_typescript_definitions_1.CardType.REVERSE_MOON]: "XVIII - The Moon?",
        [isaac_typescript_definitions_1.CardType.REVERSE_SUN]: "XIX - The Sun?",
        [isaac_typescript_definitions_1.CardType.REVERSE_JUDGEMENT]: "XX - Judgement?",
        [isaac_typescript_definitions_1.CardType.REVERSE_WORLD]: "XXI - The World?",
        [isaac_typescript_definitions_1.CardType.CRACKED_KEY]: "Cracked Key",
        [isaac_typescript_definitions_1.CardType.QUEEN_OF_HEARTS]: "Queen of Hearts",
        [isaac_typescript_definitions_1.CardType.WILD]: "Wild Card",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_ISAAC]: "Soul of Isaac",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_MAGDALENE]: "Soul of Magdalene",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_CAIN]: "Soul of Cain",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_JUDAS]: "Soul of Judas",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY]: "Soul of ???",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_EVE]: "Soul of Eve",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_SAMSON]: "Soul of Samson",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_AZAZEL]: "Soul of Azazel",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_LAZARUS]: "Soul of Lazarus",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_EDEN]: "Soul of Eden",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_LOST]: "Soul of the Lost",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_LILITH]: "Soul of Lilith",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER]: "Soul of the Keeper",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_APOLLYON]: "Soul of Apollyon",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN]: "Soul of the Forgotten",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_BETHANY]: "Soul of Bethany",
        [isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU]: "Soul of Jacob and Esau"
        // 97
      };
    }
  });

  // node_modules/isaacscript-common/dist/sets/itemConfigCardTypesForCards.js
  var require_itemConfigCardTypesForCards = __commonJS({
    "node_modules/isaacscript-common/dist/sets/itemConfigCardTypesForCards.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ITEM_CONFIG_CARD_TYPES_FOR_CARDS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      exports2.ITEM_CONFIG_CARD_TYPES_FOR_CARDS = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.ItemConfigCardType.TAROT,
        isaac_typescript_definitions_1.ItemConfigCardType.SUIT,
        // - ItemConfigCardType.RUNE (2)
        isaac_typescript_definitions_1.ItemConfigCardType.SPECIAL,
        // - ItemConfigCardType.SPECIAL_OBJECT (4)
        isaac_typescript_definitions_1.ItemConfigCardType.TAROT_REVERSE
        // 5
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/functions/cards.js
  var require_cards = __commonJS({
    "node_modules/isaacscript-common/dist/functions/cards.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.useCardTemp = exports2.isVanillaCardType = exports2.isValidCardType = exports2.isTarotCard = exports2.isSuitCard = exports2.isSpecialCard = exports2.isRune = exports2.isReverseTarotCard = exports2.isPocketItemObject = exports2.isModdedCardType = exports2.isCardType = exports2.isCard = exports2.hasCard = exports2.getItemConfigCardType = exports2.getCardName = exports2.getCardDescription = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var cardDescriptions_1 = require_cardDescriptions();
      var cardNames_1 = require_cardNames();
      var itemConfigCardTypesForCards_1 = require_itemConfigCardTypesForCards();
      var flag_1 = require_flag();
      var types_1 = require_types();
      function getCardDescription(cardType) {
        const cardDescription = cardDescriptions_1.CARD_DESCRIPTIONS[cardType];
        if (cardDescription !== void 0) {
          return cardDescription;
        }
        const itemConfigCard = cachedClasses_1.itemConfig.GetCard(cardType);
        if (itemConfigCard !== void 0) {
          return itemConfigCard.Description;
        }
        return cardDescriptions_1.DEFAULT_CARD_DESCRIPTION;
      }
      exports2.getCardDescription = getCardDescription;
      function getCardName(cardType) {
        const cardName = cardNames_1.CARD_NAMES[cardType];
        if (cardName !== void 0) {
          return cardName;
        }
        const itemConfigCard = cachedClasses_1.itemConfig.GetCard(cardType);
        if (itemConfigCard !== void 0) {
          return itemConfigCard.Name;
        }
        return cardNames_1.DEFAULT_CARD_NAME;
      }
      exports2.getCardName = getCardName;
      function getItemConfigCardType(cardType) {
        const itemConfigCard = cachedClasses_1.itemConfig.GetCard(cardType);
        if (itemConfigCard === void 0) {
          return void 0;
        }
        return itemConfigCard.CardType;
      }
      exports2.getItemConfigCardType = getItemConfigCardType;
      function hasCard(player, ...cardTypes) {
        const cardTypesSet = new Set(cardTypes);
        return cachedEnumValues_1.POCKET_ITEM_SLOT_VALUES.some((pocketItemSlot) => {
          const cardType = player.GetCard(pocketItemSlot);
          return cardTypesSet.has(cardType);
        });
      }
      exports2.hasCard = hasCard;
      function isCard(cardType) {
        const itemConfigCardType = getItemConfigCardType(cardType);
        if (itemConfigCardType === void 0) {
          return false;
        }
        return itemConfigCardTypesForCards_1.ITEM_CONFIG_CARD_TYPES_FOR_CARDS.has(itemConfigCardType);
      }
      exports2.isCard = isCard;
      function isCardType(cardType, itemConfigCardType) {
        return itemConfigCardType === getItemConfigCardType(cardType);
      }
      exports2.isCardType = isCardType;
      function isModdedCardType(cardType) {
        return !isVanillaCardType(cardType);
      }
      exports2.isModdedCardType = isModdedCardType;
      function isPocketItemObject(cardType) {
        return isCardType(cardType, isaac_typescript_definitions_1.ItemConfigCardType.SPECIAL_OBJECT);
      }
      exports2.isPocketItemObject = isPocketItemObject;
      function isReverseTarotCard(cardType) {
        return isCardType(cardType, isaac_typescript_definitions_1.ItemConfigCardType.TAROT_REVERSE);
      }
      exports2.isReverseTarotCard = isReverseTarotCard;
      function isRune(cardType) {
        return isCardType(cardType, isaac_typescript_definitions_1.ItemConfigCardType.RUNE);
      }
      exports2.isRune = isRune;
      function isSpecialCard(cardType) {
        return isCardType(cardType, isaac_typescript_definitions_1.ItemConfigCardType.SPECIAL);
      }
      exports2.isSpecialCard = isSpecialCard;
      function isSuitCard(cardType) {
        return isCardType(cardType, isaac_typescript_definitions_1.ItemConfigCardType.SUIT);
      }
      exports2.isSuitCard = isSuitCard;
      function isTarotCard(cardType) {
        return isCardType(cardType, isaac_typescript_definitions_1.ItemConfigCardType.TAROT);
      }
      exports2.isTarotCard = isTarotCard;
      function isValidCardType(cardType) {
        const potentialCardType = (0, types_1.asCardType)(cardType);
        const itemConfigCard = cachedClasses_1.itemConfig.GetCard(potentialCardType);
        return itemConfigCard !== void 0;
      }
      exports2.isValidCardType = isValidCardType;
      function isVanillaCardType(cardType) {
        return cardType <= constantsFirstLast_1.LAST_VANILLA_CARD_TYPE;
      }
      exports2.isVanillaCardType = isVanillaCardType;
      function useCardTemp(player, cardType) {
        const useFlags = (0, flag_1.addFlag)(isaac_typescript_definitions_1.UseFlag.NO_ANIMATION, isaac_typescript_definitions_1.UseFlag.NO_ANNOUNCER_VOICE);
        player.UseCard(cardType, useFlags);
      }
      exports2.useCardTemp = useCardTemp;
    }
  });

  // node_modules/isaacscript-common/dist/enums/SerializationType.js
  var require_SerializationType = __commonJS({
    "node_modules/isaacscript-common/dist/enums/SerializationType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SerializationType = void 0;
      var SerializationType;
      (function(SerializationType2) {
        SerializationType2[SerializationType2["NONE"] = 0] = "NONE";
        SerializationType2[SerializationType2["SERIALIZE"] = 1] = "SERIALIZE";
        SerializationType2[SerializationType2["DESERIALIZE"] = 2] = "DESERIALIZE";
      })(SerializationType || (exports2.SerializationType = SerializationType = {}));
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/constants.js
  var require_constants3 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/constants.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SAVE_DATA_MANAGER_DEBUG = void 0;
      exports2.SAVE_DATA_MANAGER_DEBUG = false;
    }
  });

  // node_modules/isaacscript-common/dist/serialization.js
  var require_serialization = __commonJS({
    "node_modules/isaacscript-common/dist/serialization.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isSerializationBrand = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var types_1 = require_types();
      var ReadonlySet_1 = require_ReadonlySet();
      var SERIALIZATION_BRAND_SET = new ReadonlySet_1.ReadonlySet(cachedEnumValues_1.SERIALIZATION_BRAND_VALUES);
      function isSerializationBrand(key) {
        if (!(0, types_1.isString)(key)) {
          return false;
        }
        return SERIALIZATION_BRAND_SET.has(key);
      }
      exports2.isSerializationBrand = isSerializationBrand;
    }
  });

  // node_modules/isaacscript-common/dist/objects/isaacAPIClassTypeToBrand.js
  var require_isaacAPIClassTypeToBrand = __commonJS({
    "node_modules/isaacscript-common/dist/objects/isaacAPIClassTypeToBrand.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ISAAC_API_CLASS_TYPE_TO_BRAND = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var SerializationBrand_1 = require_SerializationBrand();
      exports2.ISAAC_API_CLASS_TYPE_TO_BRAND = {
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.BIT_SET_128]: SerializationBrand_1.SerializationBrand.BIT_SET_128,
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.COLOR]: SerializationBrand_1.SerializationBrand.COLOR,
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.K_COLOR]: SerializationBrand_1.SerializationBrand.K_COLOR,
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.RNG]: SerializationBrand_1.SerializationBrand.RNG,
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.VECTOR]: SerializationBrand_1.SerializationBrand.VECTOR
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/isaacAPIClassTypeToFunctions.js
  var require_isaacAPIClassTypeToFunctions = __commonJS({
    "node_modules/isaacscript-common/dist/objects/isaacAPIClassTypeToFunctions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var bitSet128_1 = require_bitSet128();
      var color_1 = require_color();
      var kColor_1 = require_kColor();
      var rng_1 = require_rng();
      var vector_1 = require_vector();
      exports2.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS = {
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.BIT_SET_128]: {
          is: bitSet128_1.isBitSet128,
          isSerialized: bitSet128_1.isSerializedBitSet128,
          copy: bitSet128_1.copyBitSet128,
          serialize: bitSet128_1.serializeBitSet128,
          deserialize: bitSet128_1.deserializeBitSet128
        },
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.COLOR]: {
          is: color_1.isColor,
          isSerialized: color_1.isSerializedColor,
          copy: color_1.copyColor,
          serialize: color_1.serializeColor,
          deserialize: color_1.deserializeColor
        },
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.K_COLOR]: {
          is: kColor_1.isKColor,
          isSerialized: kColor_1.isSerializedKColor,
          copy: kColor_1.copyKColor,
          serialize: kColor_1.serializeKColor,
          deserialize: kColor_1.deserializeKColor
        },
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.RNG]: {
          is: rng_1.isRNG,
          isSerialized: rng_1.isSerializedRNG,
          copy: rng_1.copyRNG,
          serialize: rng_1.serializeRNG,
          deserialize: rng_1.deserializeRNG
        },
        [isaac_typescript_definitions_1.CopyableIsaacAPIClassType.VECTOR]: {
          is: vector_1.isVector,
          isSerialized: vector_1.isSerializedVector,
          copy: vector_1.copyVector,
          serialize: vector_1.serializeVector,
          deserialize: vector_1.deserializeVector
        }
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/serialization.js
  var require_serialization2 = __commonJS({
    "node_modules/isaacscript-common/dist/functions/serialization.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.serializeIsaacAPIClass = exports2.isSerializedIsaacAPIClass = exports2.isCopyableIsaacAPIClass = exports2.deserializeIsaacAPIClass = exports2.copyIsaacAPIClass = void 0;
      var isaacAPIClassTypeToBrand_1 = require_isaacAPIClassTypeToBrand();
      var isaacAPIClassTypeToFunctions_1 = require_isaacAPIClassTypeToFunctions();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function copyIsaacAPIClass(isaacAPIClass) {
        if (!(0, types_1.isUserdata)(isaacAPIClass)) {
          error(`Failed to copy an Isaac API class since the provided object was of type: ${typeof isaacAPIClass}`);
        }
        const isaacAPIClassType = (0, isaacAPIClass_1.getIsaacAPIClassName)(isaacAPIClass);
        (0, utils_1.assertDefined)(isaacAPIClassType, "Failed to copy an Isaac API class since it does not have a class type.");
        const copyableIsaacAPIClassType = isaacAPIClassType;
        const functions = isaacAPIClassTypeToFunctions_1.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS[copyableIsaacAPIClassType];
        (0, utils_1.assertDefined)(functions, `Failed to copy an Isaac API class since the associated functions were not found for Isaac API class type: ${copyableIsaacAPIClassType}`);
        return functions.copy(isaacAPIClass);
      }
      exports2.copyIsaacAPIClass = copyIsaacAPIClass;
      function deserializeIsaacAPIClass(serializedIsaacAPIClass) {
        if (!(0, types_1.isTable)(serializedIsaacAPIClass)) {
          error(`Failed to deserialize an Isaac API class since the provided object was of type: ${typeof serializedIsaacAPIClass}`);
        }
        const copyableIsaacAPIClassType = getSerializedTableType(serializedIsaacAPIClass);
        (0, utils_1.assertDefined)(copyableIsaacAPIClassType, "Failed to deserialize an Isaac API class since a valid class type brand was not found.");
        const functions = isaacAPIClassTypeToFunctions_1.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS[copyableIsaacAPIClassType];
        (0, utils_1.assertDefined)(functions, `Failed to deserialize an Isaac API class since the associated functions were not found for class type: ${copyableIsaacAPIClassType}`);
        return functions.deserialize(serializedIsaacAPIClass);
      }
      exports2.deserializeIsaacAPIClass = deserializeIsaacAPIClass;
      function getSerializedTableType(serializedIsaacAPIClass) {
        for (const [copyableIsaacAPIClassType, serializationBrand] of Object.entries(isaacAPIClassTypeToBrand_1.ISAAC_API_CLASS_TYPE_TO_BRAND)) {
          if (serializedIsaacAPIClass.has(serializationBrand)) {
            return copyableIsaacAPIClassType;
          }
        }
        return void 0;
      }
      function isCopyableIsaacAPIClass(object) {
        const allFunctions = Object.values(isaacAPIClassTypeToFunctions_1.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS);
        const isFunctions = allFunctions.map((functions) => functions.is);
        return isFunctions.some((identityFunction) => identityFunction(object));
      }
      exports2.isCopyableIsaacAPIClass = isCopyableIsaacAPIClass;
      function isSerializedIsaacAPIClass(object) {
        const allFunctions = Object.values(isaacAPIClassTypeToFunctions_1.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS);
        const isSerializedFunctions = allFunctions.map((functions) => functions.isSerialized);
        return isSerializedFunctions.some((identityFunction) => identityFunction(object));
      }
      exports2.isSerializedIsaacAPIClass = isSerializedIsaacAPIClass;
      function serializeIsaacAPIClass(isaacAPIClass) {
        if (!(0, types_1.isUserdata)(isaacAPIClass)) {
          error(`Failed to serialize an Isaac API class since the provided object was of type: ${typeof isaacAPIClass}`);
        }
        const isaacAPIClassType = (0, isaacAPIClass_1.getIsaacAPIClassName)(isaacAPIClass);
        (0, utils_1.assertDefined)(isaacAPIClassType, "Failed to serialize an Isaac API class since it does not have a class name.");
        const copyableIsaacAPIClassType = isaacAPIClassType;
        const functions = isaacAPIClassTypeToFunctions_1.ISAAC_API_CLASS_TYPE_TO_FUNCTIONS[copyableIsaacAPIClassType];
        (0, utils_1.assertDefined)(functions, `Failed to serialize an Isaac API class since the associated functions were not found for class type: ${copyableIsaacAPIClassType}`);
        return functions.serialize(isaacAPIClass);
      }
      exports2.serializeIsaacAPIClass = serializeIsaacAPIClass;
    }
  });

  // node_modules/isaacscript-common/dist/functions/deepCopy.js
  var require_deepCopy = __commonJS({
    "node_modules/isaacscript-common/dist/functions/deepCopy.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.deepCopy = void 0;
      var DefaultMap_1 = require_DefaultMap();
      var constants_1 = require_constants3();
      var SerializationBrand_1 = require_SerializationBrand();
      var SerializationType_1 = require_SerializationType();
      var serialization_1 = require_serialization();
      var array_1 = require_array();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var log_1 = require_log();
      var serialization_2 = require_serialization2();
      var sort_1 = require_sort();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function deepCopy(value, serializationType = SerializationType_1.SerializationType.NONE, traversalDescription = "", classConstructors = new LuaMap(), insideMap = false) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          let logString = `deepCopy is operating on: ${traversalDescription}`;
          if (serializationType === SerializationType_1.SerializationType.SERIALIZE) {
            logString += " (serializing)";
          } else if (serializationType === SerializationType_1.SerializationType.DESERIALIZE) {
            logString += " (deserializing)";
          }
          logString += `: ${value}`;
          (0, log_1.log)(logString);
        }
        const valueType = type(value);
        switch (valueType) {
          case "nil":
          case "boolean":
          case "number":
          case "string": {
            return value;
          }
          case "function":
          case "thread": {
            if (serializationType === SerializationType_1.SerializationType.SERIALIZE) {
              error(`The deep copy function does not support serialization of "${traversalDescription}", since it is type: ${valueType}`);
            }
            if (serializationType === SerializationType_1.SerializationType.DESERIALIZE) {
              error(`The deep copy function does not support deserialization of "${traversalDescription}", since it is type: ${valueType}`);
            }
            return value;
          }
          case "table": {
            const luaMap = value;
            return deepCopyTable(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
          }
          case "userdata": {
            return deepCopyUserdata(value, serializationType, traversalDescription);
          }
        }
      }
      exports2.deepCopy = deepCopy;
      function deepCopyTable(luaMap, serializationType, traversalDescription, classConstructors, insideMap) {
        if ((0, tstlClass_1.isDefaultMap)(luaMap) || luaMap.has(SerializationBrand_1.SerializationBrand.DEFAULT_MAP)) {
          return deepCopyDefaultMap(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
        }
        if ((0, tstlClass_1.isTSTLMap)(luaMap) || luaMap.has(SerializationBrand_1.SerializationBrand.MAP)) {
          return deepCopyMap(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
        }
        if ((0, tstlClass_1.isTSTLSet)(luaMap) || luaMap.has(SerializationBrand_1.SerializationBrand.SET)) {
          return deepCopySet(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
        }
        const className = (0, tstlClass_1.getTSTLClassName)(luaMap);
        if (className === "WeakMap") {
          error(`The deep copy function does not support copying the "WeakMap" class for: ${traversalDescription}`);
        }
        if (className === "WeakSet") {
          error(`The deep copy function does not support copying the "WeakSet" class for: ${traversalDescription}`);
        }
        if (className !== void 0 || luaMap.has(SerializationBrand_1.SerializationBrand.TSTL_CLASS)) {
          return deepCopyTSTLClass(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
        }
        checkMetatable(luaMap, traversalDescription);
        if ((0, serialization_2.isSerializedIsaacAPIClass)(luaMap) && serializationType === SerializationType_1.SerializationType.DESERIALIZE) {
          return (0, serialization_2.deserializeIsaacAPIClass)(luaMap);
        }
        if ((0, array_1.isArray)(luaMap)) {
          return deepCopyArray(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
        }
        return deepCopyNormalLuaTable(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
      }
      function deepCopyDefaultMap(defaultMap, serializationType, traversalDescription, classConstructors, insideMap) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)("deepCopy is copying a DefaultMap.");
        }
        const constructorArg = (0, tstlClass_1.isDefaultMap)(defaultMap) ? defaultMap.getConstructorArg() : void 0;
        if (serializationType === SerializationType_1.SerializationType.SERIALIZE && !(0, types_1.isPrimitive)(constructorArg)) {
          if (insideMap) {
            error("Failed to deep copy a DefaultMap because it was instantiated with a factory function and was also inside of an array, map, or set. For more information, see: https://isaacscript.github.io/main/gotchas#failed-to-deep-copy-a-defaultmap");
          } else {
            return deepCopyMap(defaultMap, serializationType, traversalDescription, classConstructors, insideMap);
          }
        }
        const newDefaultMap = getNewDefaultMap(defaultMap, serializationType, traversalDescription, constructorArg);
        insideMap = true;
        const { entries, convertedNumberKeysToStrings } = getCopiedEntries(defaultMap, serializationType, traversalDescription, classConstructors, insideMap);
        if (convertedNumberKeysToStrings) {
          if ((0, tstlClass_1.isDefaultMap)(newDefaultMap)) {
            newDefaultMap.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
          } else {
            newDefaultMap.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
          }
        }
        for (const [key, value] of entries) {
          if ((0, tstlClass_1.isDefaultMap)(newDefaultMap)) {
            newDefaultMap.set(key, value);
          } else {
            newDefaultMap.set(key, value);
          }
        }
        insideMap = false;
        return newDefaultMap;
      }
      function getNewDefaultMap(defaultMap, serializationType, traversalDescription, constructorArg) {
        switch (serializationType) {
          case SerializationType_1.SerializationType.NONE: {
            return new DefaultMap_1.DefaultMap(constructorArg);
          }
          case SerializationType_1.SerializationType.SERIALIZE: {
            const newDefaultMap = new LuaMap();
            newDefaultMap.set(SerializationBrand_1.SerializationBrand.DEFAULT_MAP, "");
            newDefaultMap.set(SerializationBrand_1.SerializationBrand.DEFAULT_MAP_VALUE, constructorArg);
            return newDefaultMap;
          }
          case SerializationType_1.SerializationType.DESERIALIZE: {
            if ((0, tstlClass_1.isDefaultMap)(defaultMap)) {
              error(`Failed to deserialize a default map of "${traversalDescription}", since it was not a Lua table.`);
            }
            const defaultMapValue = defaultMap.get(SerializationBrand_1.SerializationBrand.DEFAULT_MAP_VALUE);
            (0, utils_1.assertDefined)(defaultMapValue, `Failed to deserialize a default map of "${traversalDescription}", since there was no serialization brand of: ${SerializationBrand_1.SerializationBrand.DEFAULT_MAP_VALUE}`);
            return new DefaultMap_1.DefaultMap(defaultMapValue);
          }
        }
      }
      function deepCopyMap(map, serializationType, traversalDescription, classConstructors, insideMap) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)("deepCopy is copying a Map.");
        }
        let newMap;
        if (serializationType === SerializationType_1.SerializationType.SERIALIZE) {
          newMap = new LuaMap();
          newMap.set(SerializationBrand_1.SerializationBrand.MAP, "");
        } else {
          newMap = /* @__PURE__ */ new Map();
        }
        insideMap = true;
        const { entries, convertedNumberKeysToStrings } = getCopiedEntries(map, serializationType, traversalDescription, classConstructors, insideMap);
        if (convertedNumberKeysToStrings) {
          if ((0, tstlClass_1.isTSTLMap)(newMap)) {
            newMap.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
          } else {
            newMap.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
          }
        }
        for (const [key, value] of entries) {
          if ((0, tstlClass_1.isTSTLMap)(newMap)) {
            newMap.set(key, value);
          } else {
            newMap.set(key, value);
          }
        }
        insideMap = false;
        return newMap;
      }
      function deepCopySet(set, serializationType, traversalDescription, classConstructors, insideMap) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)("deepCopy is copying a Set.");
        }
        let newSet;
        if (serializationType === SerializationType_1.SerializationType.SERIALIZE) {
          newSet = new LuaMap();
          newSet.set(SerializationBrand_1.SerializationBrand.SET, "");
        } else {
          newSet = /* @__PURE__ */ new Set();
        }
        const { entries, convertedNumberKeysToStrings } = getCopiedEntries(set, serializationType, traversalDescription, classConstructors, insideMap);
        if (convertedNumberKeysToStrings) {
          if ((0, tstlClass_1.isTSTLSet)(newSet)) {
            error("The deep copy function cannot convert number keys to strings for a Set.");
          } else {
            newSet.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
          }
        }
        for (const [key] of entries) {
          if ((0, tstlClass_1.isTSTLSet)(newSet)) {
            newSet.add(key);
          } else {
            newSet.set(key, "");
          }
        }
        return newSet;
      }
      function deepCopyTSTLClass(tstlClass, serializationType, traversalDescription, classConstructors, insideMap) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)("deepCopy is copying a TSTL class.");
        }
        let newClass;
        switch (serializationType) {
          case SerializationType_1.SerializationType.NONE: {
            newClass = (0, tstlClass_1.newTSTLClass)(tstlClass);
            break;
          }
          case SerializationType_1.SerializationType.SERIALIZE: {
            newClass = new LuaMap();
            const tstlClassName = (0, tstlClass_1.getTSTLClassName)(tstlClass);
            if (tstlClassName !== void 0) {
              newClass.set(SerializationBrand_1.SerializationBrand.TSTL_CLASS, tstlClassName);
            }
            break;
          }
          case SerializationType_1.SerializationType.DESERIALIZE: {
            const tstlClassName = tstlClass.get(SerializationBrand_1.SerializationBrand.TSTL_CLASS);
            (0, utils_1.assertDefined)(tstlClassName, "Failed to deserialize a TSTL class since the brand did not contain the class name.");
            const classConstructor = classConstructors.get(tstlClassName);
            (0, utils_1.assertDefined)(classConstructor, `Failed to deserialize a TSTL class since there was no constructor registered for a class name of "${tstlClassName}". If this mod is using the save data manager, it must register the class constructor with the "saveDataManagerRegisterClass" method.`);
            newClass = new classConstructor();
            break;
          }
        }
        const { entries, convertedNumberKeysToStrings } = getCopiedEntries(tstlClass, serializationType, traversalDescription, classConstructors, insideMap);
        if (convertedNumberKeysToStrings) {
          newClass.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
        }
        for (const [key, value] of entries) {
          newClass.set(key, value);
        }
        return newClass;
      }
      function deepCopyArray(array, serializationType, traversalDescription, classConstructors, insideMap) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)("deepCopy is copying an array.");
        }
        const newArray = [];
        for (const value of array) {
          const newValue = deepCopy(value, serializationType, traversalDescription, classConstructors, insideMap);
          newArray.push(newValue);
        }
        return newArray;
      }
      function deepCopyNormalLuaTable(luaMap, serializationType, traversalDescription, classConstructors, insideMap) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)("deepCopy is copying a normal Lua table.");
        }
        const newTable = new LuaMap();
        const { entries, convertedNumberKeysToStrings } = getCopiedEntries(luaMap, serializationType, traversalDescription, classConstructors, insideMap);
        if (convertedNumberKeysToStrings) {
          newTable.set(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "");
        }
        for (const [key, value] of entries) {
          newTable.set(key, value);
        }
        return newTable;
      }
      function getCopiedEntries(object, serializationType, traversalDescription, classConstructors, insideMap) {
        const entries = [];
        if ((0, tstlClass_1.isTSTLMap)(object) || (0, tstlClass_1.isTSTLSet)(object) || (0, tstlClass_1.isDefaultMap)(object)) {
          for (const [key, value] of object.entries()) {
            entries.push([key, value]);
          }
        } else {
          for (const [key, value] of pairs(object)) {
            entries.push([key, value]);
          }
        }
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          entries.sort(sort_1.sortTwoDimensionalArray);
        }
        const convertStringKeysToNumbers = serializationType === SerializationType_1.SerializationType.DESERIALIZE && entries.some(([key]) => key === (0, types_1.asString)(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS));
        const hasNumberKeys = entries.some(([key]) => (0, types_1.isNumber)(key));
        const convertNumberKeysToStrings = serializationType === SerializationType_1.SerializationType.SERIALIZE && hasNumberKeys;
        const copiedEntries = [];
        for (const [key, value] of entries) {
          if ((0, serialization_1.isSerializationBrand)(key)) {
            continue;
          }
          traversalDescription = (0, utils_1.getTraversalDescription)(key, traversalDescription);
          const newValue = deepCopy(value, serializationType, traversalDescription, classConstructors, insideMap);
          let keyToUse = key;
          if (convertStringKeysToNumbers) {
            const numberKey = tonumber(key);
            if (numberKey !== void 0) {
              keyToUse = numberKey;
            }
          }
          if (convertNumberKeysToStrings) {
            keyToUse = tostring(key);
          }
          copiedEntries.push([keyToUse, newValue]);
        }
        return {
          entries: copiedEntries,
          convertedNumberKeysToStrings: convertNumberKeysToStrings
        };
      }
      function checkMetatable(luaMap, traversalDescription) {
        const metatable = getmetatable(luaMap);
        if (metatable === void 0) {
          return;
        }
        const tableDescription = traversalDescription === "" ? "the table to copy" : `"${traversalDescription}"`;
        error(`The deepCopy function detected that ${tableDescription} has a metatable. Copying tables with metatables is not supported, unless they are explicitly handled by the save data manager. (e.g. TypeScriptToLua Maps, TypeScriptToLua Sets, etc.)`);
      }
      function deepCopyUserdata(value, serializationType, traversalDescription) {
        if (!(0, serialization_2.isCopyableIsaacAPIClass)(value)) {
          const className = (0, isaacAPIClass_1.getIsaacAPIClassName)(value) ?? "Unknown";
          error(`The deep copy function does not support serializing "${traversalDescription}", since it is an Isaac API class of type: ${className}`);
        }
        switch (serializationType) {
          case SerializationType_1.SerializationType.NONE: {
            return (0, serialization_2.copyIsaacAPIClass)(value);
          }
          case SerializationType_1.SerializationType.SERIALIZE: {
            return (0, serialization_2.serializeIsaacAPIClass)(value);
          }
          case SerializationType_1.SerializationType.DESERIALIZE: {
            return error(`The deep copy function can not deserialize "${traversalDescription}", since it is userdata.`);
          }
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/deepCopyTests.js
  var require_deepCopyTests = __commonJS({
    "node_modules/isaacscript-common/dist/functions/deepCopyTests.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.runDeepCopyTests = void 0;
      var DefaultMap_1 = require_DefaultMap();
      var SerializationBrand_1 = require_SerializationBrand();
      var SerializationType_1 = require_SerializationType();
      var array_1 = require_array();
      var deepCopy_1 = require_deepCopy();
      var log_1 = require_log();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      function runDeepCopyTests() {
        copiedObjectIsTable();
        copiedObjectHasKeyAndValueString();
        copiedTableHasKeyAndValueNumber();
        copiedTableDoesNotCoerceTypes();
        copiedObjectHasNoReferencesForPrimitivesForward();
        copiedObjectHasNoReferencesForPrimitivesBackward();
        copiedObjectHasNoReferencesForArray();
        copiedObjectHasChildObject();
        copiedMapIsMap();
        copiedMapHasValue();
        copiedSetIsSet();
        copiedSetHasValue();
        copiedMapHasChildMap();
        copiedDefaultMapHasChildDefaultMap();
        copiedDefaultMapHasBrand();
        copiedSerializedMapHasStringKey();
        copiedSerializedMapHasNumberKey();
        copiedSerializedDefaultMapHasStringKey();
        copiedSerializedDefaultMapHasNumberKey();
        const successText = "All deep copy tests passed!";
        (0, log_1.log)(successText);
        print(successText);
      }
      exports2.runDeepCopyTests = runDeepCopyTests;
      function copiedObjectIsTable() {
        const oldObject = {
          abc: "def"
        };
        const newObject = (0, deepCopy_1.deepCopy)(oldObject, SerializationType_1.SerializationType.NONE, "copiedObjectIsTable");
        if (!(0, types_1.isTable)(newObject)) {
          error(`The copied object had a type of: ${typeof newObject}`);
        }
      }
      function copiedObjectHasKeyAndValueString() {
        const keyToLookFor = "abc";
        const valueToLookFor = "def";
        const oldObject = {
          abc: valueToLookFor
        };
        const newObject = (0, deepCopy_1.deepCopy)(oldObject, SerializationType_1.SerializationType.NONE, "copiedObjectHasKeyAndValueString");
        const value = newObject[keyToLookFor];
        if (value === void 0) {
          error(`The copied object did not have a key of: ${keyToLookFor}`);
        }
        if (!(0, types_1.isString)(value)) {
          error(`The copied object had a value type of: ${typeof value}`);
        }
        if (value !== valueToLookFor) {
          error(`The copied object had a value of: ${value}`);
        }
      }
      function copiedTableHasKeyAndValueNumber() {
        const keyToLookFor = 123;
        const valueToLookFor = 456;
        const oldTable = new LuaMap();
        oldTable.set(keyToLookFor, valueToLookFor);
        const newTable = (0, deepCopy_1.deepCopy)(oldTable, SerializationType_1.SerializationType.NONE, "copiedTableHasKeyAndValueNumber");
        const value = newTable.get(keyToLookFor);
        if (value === void 0) {
          error(`The copied object did not have a key of: ${keyToLookFor}`);
        }
        if (!(0, types_1.isNumber)(value)) {
          error(`The copied object had a value type of: ${typeof value}`);
        }
        if (value !== valueToLookFor) {
          error(`The copied object had a value of: ${value}`);
        }
      }
      function copiedTableDoesNotCoerceTypes() {
        const keyToLookFor = 123;
        const valueToLookFor = 456;
        const oldTable = new LuaMap();
        oldTable.set(keyToLookFor, valueToLookFor);
        const newTable = (0, deepCopy_1.deepCopy)(oldTable, SerializationType_1.SerializationType.NONE, "copiedTableDoesNotCoerceTypes");
        const keyString = tostring(keyToLookFor);
        const valueString = tostring(valueToLookFor);
        const valueFromString = newTable.get(keyString);
        if (valueFromString !== void 0) {
          error(`The copied object had a string key of: ${keyString}`);
        }
        const value = newTable.get(keyToLookFor);
        if (value === valueString) {
          error(`The copied object had a value that incorrectly matched the string of: ${valueString}`);
        }
      }
      function copiedObjectHasNoReferencesForPrimitivesForward() {
        const originalStringValue = "abcdef";
        const originalNumberValue = 123;
        const oldObject = {
          abc: originalStringValue,
          def: originalNumberValue
        };
        const newObject = (0, deepCopy_1.deepCopy)(oldObject, SerializationType_1.SerializationType.NONE, "copiedObjectHasNoReferencesForPrimitivesForward");
        oldObject.abc = "newValue";
        if (oldObject.abc === newObject.abc) {
          error("The copied object has a string reference going forward.");
        }
        oldObject.def = 456;
        if (oldObject.def === newObject.def) {
          error("The copied object has a number reference going forward.");
        }
      }
      function copiedObjectHasNoReferencesForPrimitivesBackward() {
        const originalStringValue = "abcdef";
        const originalNumberValue = 123;
        const oldObject = {
          abc: originalStringValue,
          def: originalNumberValue
        };
        const newObject = (0, deepCopy_1.deepCopy)(oldObject, SerializationType_1.SerializationType.NONE, "copiedObjectHasNoReferencesForPrimitivesBackward");
        newObject.abc = "newValue";
        if (newObject.abc === oldObject.abc) {
          error("The copied object has a string reference going backward.");
        }
        newObject.def = 456;
        if (newObject.def === oldObject.def) {
          error("The copied object has a number reference going backward.");
        }
      }
      function copiedObjectHasNoReferencesForArray() {
        const oldObject = {
          abc: [1, 2, 3]
        };
        const newObject = (0, deepCopy_1.deepCopy)(oldObject, SerializationType_1.SerializationType.NONE, "copiedObjectHasNoReferencesForArray");
        if (oldObject.abc === newObject.abc) {
          error("The copied object has the same point to the child array.");
        }
        if (!(0, array_1.arrayEquals)(oldObject.abc, newObject.abc)) {
          error("The copied object does not have an equal array.");
        }
        oldObject.abc[0]++;
        if ((0, array_1.arrayEquals)(oldObject.abc, newObject.abc)) {
          error("The copied object has an equal array after a modification to the old array.");
        }
        oldObject.abc[0]--;
        newObject.abc[0]++;
        if ((0, array_1.arrayEquals)(oldObject.abc, newObject.abc)) {
          error("The copied object has an equal array after a modification to the new array.");
        }
        newObject.abc[0]--;
      }
      function copiedObjectHasChildObject() {
        const childObjectIndex = "abc";
        const keyToLookFor = "def";
        const valueToLookFor = "ghi";
        const oldObject = {
          abc: {
            def: valueToLookFor
          }
        };
        const newObject = (0, deepCopy_1.deepCopy)(oldObject, SerializationType_1.SerializationType.NONE, "copiedObjectHasChildObject");
        const childObject = newObject[childObjectIndex];
        if (childObject === void 0) {
          error(`Failed to find the child object at index: ${childObjectIndex}`);
        }
        if (!(0, types_1.isTable)(childObject)) {
          error(`The copied child object had a type of: ${typeof childObject}`);
        }
        const value = childObject[keyToLookFor];
        if (value === void 0) {
          error(`The child object did not have a key of: ${keyToLookFor}`);
        }
        if (!(0, types_1.isString)(value)) {
          error(`The child object value had a type of: ${typeof value}`);
        }
        if (value !== valueToLookFor) {
          error(`The child object value was: ${valueToLookFor}`);
        }
      }
      function copiedMapIsMap() {
        const keyToLookFor = "abc";
        const valueToLookFor = "def";
        const oldMap = /* @__PURE__ */ new Map();
        oldMap.set(keyToLookFor, valueToLookFor);
        const newMap = (0, deepCopy_1.deepCopy)(oldMap, SerializationType_1.SerializationType.NONE, "copiedMapIsMap");
        if (!(0, tstlClass_1.isTSTLMap)(newMap)) {
          error(`The copied Map was not a Map and has a type of: ${typeof newMap}`);
        }
      }
      function copiedMapHasValue() {
        const keyToLookFor = "abc";
        const valueToLookFor = "def";
        const oldMap = /* @__PURE__ */ new Map();
        oldMap.set(keyToLookFor, valueToLookFor);
        const newMap = (0, deepCopy_1.deepCopy)(oldMap, SerializationType_1.SerializationType.NONE, "copiedMapHasValue");
        if (!(0, tstlClass_1.isTSTLMap)(newMap)) {
          error(`The copied Map was not a Map and has a type of: ${typeof newMap}`);
        }
        const value = newMap.get(keyToLookFor);
        if (value === void 0) {
          error(`The copied Map did not have a key of: ${keyToLookFor}`);
        }
        if (value !== valueToLookFor) {
          error(`The copied Map did not have a value of: ${valueToLookFor}`);
        }
      }
      function copiedSetIsSet() {
        const valueToLookFor = "abc";
        const oldSet = /* @__PURE__ */ new Set();
        oldSet.add(valueToLookFor);
        const newSet = (0, deepCopy_1.deepCopy)(oldSet, SerializationType_1.SerializationType.NONE, "copiedSetIsSet");
        if (!(0, tstlClass_1.isTSTLSet)(newSet)) {
          error(`The copied Set was not a Set and has a type of: ${typeof newSet}`);
        }
      }
      function copiedSetHasValue() {
        const valueToLookFor = "abc";
        const oldSet = /* @__PURE__ */ new Set();
        oldSet.add(valueToLookFor);
        const newSet = (0, deepCopy_1.deepCopy)(oldSet, SerializationType_1.SerializationType.NONE, "copiedSetHasValue");
        if (!(0, tstlClass_1.isTSTLSet)(newSet)) {
          error(`The copied Set was not a Set and has a type of: ${typeof newSet}`);
        }
        const hasValue = newSet.has(valueToLookFor);
        if (!hasValue) {
          error(`The copied Set did not have a value of: ${valueToLookFor}`);
        }
      }
      function copiedMapHasChildMap() {
        const childMapKey = 123;
        const childMapValue = 456;
        const oldChildMap = /* @__PURE__ */ new Map();
        oldChildMap.set(childMapKey, childMapValue);
        const keyToLookFor = "childMap";
        const oldMap = /* @__PURE__ */ new Map();
        oldMap.set(keyToLookFor, oldChildMap);
        const newMap = (0, deepCopy_1.deepCopy)(oldMap, SerializationType_1.SerializationType.NONE, "copiedMapHasChildMap");
        if (!(0, tstlClass_1.isTSTLMap)(newMap)) {
          error(`The copied Map was not a Map and had a type of: ${typeof newMap}`);
        }
        const newChildMap = newMap.get(keyToLookFor);
        if (newChildMap === void 0) {
          error(`The copied Map did not have a child map at key: ${keyToLookFor}`);
        }
        if (!(0, tstlClass_1.isTSTLMap)(newChildMap)) {
          error(`The copied child Map was not a Map and had a type of: ${typeof newChildMap}`);
        }
        const value = newChildMap.get(childMapKey);
        if (value === void 0) {
          error(`The copied child Map did not have a key of: ${childMapKey}`);
        }
        if (value !== childMapValue) {
          error(`The copied child Map did not have a value of: ${childMapValue}`);
        }
      }
      function copiedDefaultMapHasChildDefaultMap() {
        const parentMapKey = "abc";
        const childMapKey1 = 123;
        const childMapKey2 = 456;
        const childMapDefaultValue = 1;
        const childMapCustomValue = 2;
        const oldParentMap = new DefaultMap_1.DefaultMap(() => new DefaultMap_1.DefaultMap(childMapDefaultValue));
        const oldChildMap = oldParentMap.getAndSetDefault(parentMapKey);
        oldChildMap.getAndSetDefault(childMapKey1);
        oldChildMap.set(childMapKey2, childMapCustomValue);
        const newParentMap = (0, deepCopy_1.deepCopy)(oldParentMap, SerializationType_1.SerializationType.NONE, "copiedDefaultMapHasChildDefaultMap");
        if (!(0, tstlClass_1.isDefaultMap)(newParentMap)) {
          error(`The copied parent DefaultMap was not a DefaultMap and had a type of: ${typeof newParentMap}`);
        }
        const newChildMap = newParentMap.get(parentMapKey);
        if (newChildMap === void 0) {
          error(`The copied DefaultMap did not have a child map at key: ${parentMapKey}`);
        }
        if (!(0, tstlClass_1.isDefaultMap)(newChildMap)) {
          error(`The copied child DefaultMap was not a DefaultMap and had a type of: ${typeof newChildMap}`);
        }
        const newChildMapValue1 = newChildMap.get(childMapKey1);
        if (newChildMapValue1 === void 0) {
          error(`The copied child DefaultMap did not have a key of: ${childMapKey1}`);
        }
        if (newChildMapValue1 !== childMapDefaultValue) {
          error(`The copied child Map did not have a default value of: ${childMapDefaultValue}`);
        }
        const newChildMapValue2 = newChildMap.get(childMapKey2);
        if (newChildMapValue2 === void 0) {
          error(`The copied child DefaultMap did not have a key of: ${childMapKey2}`);
        }
        if (newChildMapValue2 !== childMapCustomValue) {
          error(`The copied child Map did not have a custom value of: ${childMapCustomValue}`);
        }
      }
      function copiedDefaultMapHasBrand() {
        const oldDefaultValue = "foo";
        const oldDefaultMap = new DefaultMap_1.DefaultMap(oldDefaultValue);
        const newTable = (0, deepCopy_1.deepCopy)(oldDefaultMap, SerializationType_1.SerializationType.SERIALIZE, "copiedDefaultMapHasBrand");
        if (!(0, types_1.isTable)(newTable)) {
          error(`The copied DefaultMap was not a table and had a type of: ${typeof newTable}`);
        }
        if (!newTable.has(SerializationBrand_1.SerializationBrand.DEFAULT_MAP)) {
          error(`The copied DefaultMap does not have the brand: ${SerializationBrand_1.SerializationBrand.DEFAULT_MAP}`);
        }
      }
      function copiedSerializedMapHasStringKey() {
        const mapKey = "123";
        const mapValue = 456;
        const oldMap = /* @__PURE__ */ new Map();
        oldMap.set(mapKey, mapValue);
        const serializedOldMap = (0, deepCopy_1.deepCopy)(oldMap, SerializationType_1.SerializationType.SERIALIZE, "copiedSerializedMapHasStringKey-serialize");
        const newTable = (0, deepCopy_1.deepCopy)(serializedOldMap, SerializationType_1.SerializationType.DESERIALIZE, "copiedSerializedMapHasStringKey-deserialize");
        const newMap = newTable;
        if (!newMap.has(mapKey)) {
          const keyType = type(mapKey);
          error(`The copied Map did not have a key of: ${mapKey} with type ${keyType}`);
        }
      }
      function copiedSerializedMapHasNumberKey() {
        const mapKey = 123;
        const mapValue = 456;
        const oldMap = /* @__PURE__ */ new Map();
        oldMap.set(mapKey, mapValue);
        const serializedOldMap = (0, deepCopy_1.deepCopy)(oldMap, SerializationType_1.SerializationType.SERIALIZE, "copiedSerializedMapHasNumberKey-serialize");
        const newTable = (0, deepCopy_1.deepCopy)(serializedOldMap, SerializationType_1.SerializationType.DESERIALIZE, "copiedSerializedMapHasNumberKey-deserialize");
        const newMap = newTable;
        if (!newMap.has(mapKey)) {
          const keyType = type(mapKey);
          error(`The copied Map did not have a key of: ${mapKey} with type ${keyType}`);
        }
      }
      function copiedSerializedDefaultMapHasStringKey() {
        const mapKey = "123";
        const oldDefaultMap = new DefaultMap_1.DefaultMap(456);
        oldDefaultMap.getAndSetDefault(mapKey);
        const serializedOldDefaultMap = (0, deepCopy_1.deepCopy)(oldDefaultMap, SerializationType_1.SerializationType.SERIALIZE, "copiedSerializedDefaultMapHasStringKey-serialize");
        const newTable = (0, deepCopy_1.deepCopy)(serializedOldDefaultMap, SerializationType_1.SerializationType.DESERIALIZE, "copiedSerializedDefaultMapHasStringKey-deserialize");
        const newDefaultMap = newTable;
        if (!newDefaultMap.has(mapKey)) {
          const keyType = type(mapKey);
          error(`The copied DefaultMap did not have a key of "${mapKey}" with type: ${keyType}`);
        }
      }
      function copiedSerializedDefaultMapHasNumberKey() {
        const mapKey = 123;
        const oldDefaultMap = new DefaultMap_1.DefaultMap(456);
        oldDefaultMap.getAndSetDefault(mapKey);
        const serializedOldDefaultMap = (0, deepCopy_1.deepCopy)(oldDefaultMap, SerializationType_1.SerializationType.SERIALIZE, "copiedSerializedDefaultMapHasNumberKey-serialize");
        const newTable = (0, deepCopy_1.deepCopy)(serializedOldDefaultMap, SerializationType_1.SerializationType.DESERIALIZE, "copiedSerializedDefaultMapHasNumberKey-deserialize");
        const newDefaultMap = newTable;
        if (!newDefaultMap.has(mapKey)) {
          const keyType = type(mapKey);
          error(`The copied DefaultMap did not have a key of: ${mapKey} with type ${keyType}`);
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/levelGrid.js
  var require_levelGrid = __commonJS({
    "node_modules/isaacscript-common/dist/functions/levelGrid.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.vectorToRoomGridIndex = exports2.roomGridIndexToVector = exports2.roomExists = exports2.newRoom = exports2.isRoomInsideGrid = exports2.isRedKeyRoom = exports2.isDoorSlotValidAtGridIndexForRedRoom = exports2.isDoorSlotValidAtGridIndex = exports2.isDeadEnd = exports2.inRedKeyRoom = exports2.inGrid = exports2.getRoomShapeAdjacentNonExistingGridIndexes = exports2.getRoomShapeAdjacentGridIndexes = exports2.getRoomShapeAdjacentGridIndexDeltas = exports2.getRoomShapeAdjacentExistingGridIndexes = exports2.getRoomGridIndexesForType = exports2.getRoomDescriptorsForType = exports2.getRoomAdjacentGridIndexes = exports2.getNewRoomCandidatesForLevel = exports2.getNewRoomCandidatesBesideRoom = exports2.getNewRoomCandidate = exports2.getAllRoomGridIndexes = exports2.getAdjacentRoomGridIndexes = exports2.getAdjacentNonExistingRoomGridIndexes = exports2.getAdjacentExistingRoomGridIndexes = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var roomShapeToDoorSlotsToGridIndexDelta_1 = require_roomShapeToDoorSlotsToGridIndexDelta();
      var array_1 = require_array();
      var doors_1 = require_doors();
      var flag_1 = require_flag();
      var map_1 = require_map();
      var rng_1 = require_rng();
      var roomData_1 = require_roomData();
      var roomShape_1 = require_roomShape();
      var rooms_1 = require_rooms();
      var LEFT = -1;
      var UP = -constants_1.LEVEL_GRID_ROW_WIDTH;
      var RIGHT = 1;
      var DOWN = constants_1.LEVEL_GRID_ROW_WIDTH;
      var ADJACENT_ROOM_GRID_INDEX_DELTAS = [LEFT, UP, RIGHT, DOWN];
      function getAdjacentExistingRoomGridIndexes(roomGridIndex) {
        const adjacentRoomGridIndexes = getAdjacentRoomGridIndexes(roomGridIndex);
        return adjacentRoomGridIndexes.filter((adjacentRoomGridIndex) => (0, roomData_1.getRoomData)(adjacentRoomGridIndex) !== void 0);
      }
      exports2.getAdjacentExistingRoomGridIndexes = getAdjacentExistingRoomGridIndexes;
      function getAdjacentNonExistingRoomGridIndexes(roomGridIndex) {
        const adjacentRoomGridIndexes = getAdjacentRoomGridIndexes(roomGridIndex);
        return adjacentRoomGridIndexes.filter((adjacentRoomGridIndex) => (0, roomData_1.getRoomData)(adjacentRoomGridIndex) === void 0);
      }
      exports2.getAdjacentNonExistingRoomGridIndexes = getAdjacentNonExistingRoomGridIndexes;
      function getAdjacentRoomGridIndexes(roomGridIndex) {
        const roomGridIndexToUse = roomGridIndex ?? (0, roomData_1.getRoomGridIndex)();
        if (!isRoomInsideGrid(roomGridIndexToUse)) {
          return [];
        }
        const adjacentRoomGridIndexes = ADJACENT_ROOM_GRID_INDEX_DELTAS.map((delta) => roomGridIndexToUse + delta);
        return adjacentRoomGridIndexes.filter((adjacentRoomGridIndex) => isRoomInsideGrid(adjacentRoomGridIndex));
      }
      exports2.getAdjacentRoomGridIndexes = getAdjacentRoomGridIndexes;
      function getAllRoomGridIndexes() {
        const rooms = (0, rooms_1.getRooms)();
        return rooms.map((roomDescriptor) => roomDescriptor.SafeGridIndex);
      }
      exports2.getAllRoomGridIndexes = getAllRoomGridIndexes;
      function getNewRoomCandidate(seedOrRNG, ensureDeadEnd = true) {
        const newRoomCandidatesForLevel = getNewRoomCandidatesForLevel(ensureDeadEnd);
        if (newRoomCandidatesForLevel.length === 0) {
          return void 0;
        }
        return (0, array_1.getRandomArrayElement)(newRoomCandidatesForLevel, seedOrRNG);
      }
      exports2.getNewRoomCandidate = getNewRoomCandidate;
      function getNewRoomCandidatesBesideRoom(roomGridIndex, ensureDeadEnd = true) {
        const roomDescriptor = (0, roomData_1.getRoomDescriptor)(roomGridIndex);
        if (!isRoomInsideGrid(roomDescriptor.SafeGridIndex)) {
          return [];
        }
        const roomData = roomDescriptor.Data;
        if (roomData === void 0) {
          return [];
        }
        const doorSlotToRoomGridIndexes = getRoomShapeAdjacentNonExistingGridIndexes(roomDescriptor.SafeGridIndex, roomData.Shape);
        const roomCandidates = [];
        for (const [doorSlot, adjacentRoomGridIndex] of doorSlotToRoomGridIndexes) {
          const doorSlotFlag = (0, doors_1.doorSlotToDoorSlotFlag)(doorSlot);
          if (!(0, flag_1.hasFlag)(roomData.Doors, doorSlotFlag)) {
            continue;
          }
          if (ensureDeadEnd && !isDeadEnd(adjacentRoomGridIndex)) {
            continue;
          }
          roomCandidates.push({
            doorSlot,
            roomGridIndex: adjacentRoomGridIndex
          });
        }
        return roomCandidates;
      }
      exports2.getNewRoomCandidatesBesideRoom = getNewRoomCandidatesBesideRoom;
      function getNewRoomCandidatesForLevel(ensureDeadEnd = true) {
        const roomsInsideGrid = (0, rooms_1.getRoomsInsideGrid)();
        const normalRooms = roomsInsideGrid.filter((room) => room.Data !== void 0 && room.Data.Type === isaac_typescript_definitions_1.RoomType.DEFAULT && !(0, rooms_1.isMirrorRoom)(room.Data) && // Mirror rooms do not count as special rooms.
        !(0, rooms_1.isMineShaft)(room.Data));
        const roomsToLookThrough = ensureDeadEnd ? normalRooms : roomsInsideGrid;
        const newRoomCandidates = [];
        for (const room of roomsToLookThrough) {
          const newRoomCandidatesBesideRoom = getNewRoomCandidatesBesideRoom(room.SafeGridIndex, ensureDeadEnd);
          for (const { doorSlot, roomGridIndex } of newRoomCandidatesBesideRoom) {
            newRoomCandidates.push({
              adjacentRoomGridIndex: room.SafeGridIndex,
              doorSlot,
              newRoomGridIndex: roomGridIndex
            });
          }
        }
        return newRoomCandidates;
      }
      exports2.getNewRoomCandidatesForLevel = getNewRoomCandidatesForLevel;
      function getRoomAdjacentGridIndexes(roomGridIndex) {
        const roomDescriptor = (0, roomData_1.getRoomDescriptor)(roomGridIndex);
        if (!isRoomInsideGrid(roomDescriptor.SafeGridIndex)) {
          return /* @__PURE__ */ new Map();
        }
        const roomData = roomDescriptor.Data;
        if (roomData === void 0) {
          return /* @__PURE__ */ new Map();
        }
        return getRoomShapeAdjacentExistingGridIndexes(roomDescriptor.SafeGridIndex, roomData.Shape);
      }
      exports2.getRoomAdjacentGridIndexes = getRoomAdjacentGridIndexes;
      function getRoomDescriptorsForType(...roomTypes) {
        const roomTypesSet = new Set(roomTypes);
        const roomsInsideGrid = (0, rooms_1.getRoomsInsideGrid)();
        return roomsInsideGrid.filter((roomDescriptor) => roomDescriptor.Data !== void 0 && roomTypesSet.has(roomDescriptor.Data.Type));
      }
      exports2.getRoomDescriptorsForType = getRoomDescriptorsForType;
      function getRoomGridIndexesForType(...roomTypes) {
        const roomDescriptors = getRoomDescriptorsForType(...roomTypes);
        return roomDescriptors.map((roomDescriptor) => roomDescriptor.SafeGridIndex);
      }
      exports2.getRoomGridIndexesForType = getRoomGridIndexesForType;
      function getRoomShapeAdjacentExistingGridIndexes(safeRoomGridIndex, roomShape) {
        const roomShapeAdjacentGridIndexes = (0, map_1.copyMap)(getRoomShapeAdjacentGridIndexes(safeRoomGridIndex, roomShape));
        for (const [doorSlot, roomGridIndex] of roomShapeAdjacentGridIndexes) {
          const roomData = (0, roomData_1.getRoomData)(roomGridIndex);
          if (roomData === void 0) {
            roomShapeAdjacentGridIndexes.delete(doorSlot);
          }
        }
        return roomShapeAdjacentGridIndexes;
      }
      exports2.getRoomShapeAdjacentExistingGridIndexes = getRoomShapeAdjacentExistingGridIndexes;
      function getRoomShapeAdjacentGridIndexDeltas(roomShape) {
        return roomShapeToDoorSlotsToGridIndexDelta_1.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA[roomShape];
      }
      exports2.getRoomShapeAdjacentGridIndexDeltas = getRoomShapeAdjacentGridIndexDeltas;
      function getRoomShapeAdjacentGridIndexes(safeRoomGridIndex, roomShape) {
        const roomShapeAdjacentGridIndexDeltas = getRoomShapeAdjacentGridIndexDeltas(roomShape);
        const adjacentGridIndexes = /* @__PURE__ */ new Map();
        for (const [doorSlot, delta] of roomShapeAdjacentGridIndexDeltas) {
          const roomGridIndex = safeRoomGridIndex + delta;
          if (isRoomInsideGrid(roomGridIndex)) {
            adjacentGridIndexes.set(doorSlot, roomGridIndex);
          }
        }
        return adjacentGridIndexes;
      }
      exports2.getRoomShapeAdjacentGridIndexes = getRoomShapeAdjacentGridIndexes;
      function getRoomShapeAdjacentNonExistingGridIndexes(safeRoomGridIndex, roomShape) {
        const roomShapeAdjacentGridIndexes = (0, map_1.copyMap)(getRoomShapeAdjacentGridIndexes(safeRoomGridIndex, roomShape));
        for (const [doorSlot, roomGridIndex] of roomShapeAdjacentGridIndexes) {
          const roomData = (0, roomData_1.getRoomData)(roomGridIndex);
          if (roomData !== void 0) {
            roomShapeAdjacentGridIndexes.delete(doorSlot);
          }
        }
        return roomShapeAdjacentGridIndexes;
      }
      exports2.getRoomShapeAdjacentNonExistingGridIndexes = getRoomShapeAdjacentNonExistingGridIndexes;
      function inGrid() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return isRoomInsideGrid(roomGridIndex);
      }
      exports2.inGrid = inGrid;
      function inRedKeyRoom() {
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        return isRedKeyRoom(roomGridIndex);
      }
      exports2.inRedKeyRoom = inRedKeyRoom;
      function isDeadEnd(roomGridIndex) {
        const adjacentExistingRoomGridIndexes = getAdjacentExistingRoomGridIndexes(roomGridIndex);
        return adjacentExistingRoomGridIndexes.length === 1;
      }
      exports2.isDeadEnd = isDeadEnd;
      function isDoorSlotValidAtGridIndex(doorSlot, roomGridIndex) {
        const allowedDoors = (0, roomData_1.getRoomAllowedDoors)(roomGridIndex);
        return allowedDoors.has(doorSlot);
      }
      exports2.isDoorSlotValidAtGridIndex = isDoorSlotValidAtGridIndex;
      function isDoorSlotValidAtGridIndexForRedRoom(doorSlot, roomGridIndex) {
        const doorSlotValidAtGridIndex = isDoorSlotValidAtGridIndex(doorSlot, roomGridIndex);
        if (!doorSlotValidAtGridIndex) {
          return false;
        }
        const roomShape = (0, roomData_1.getRoomShape)(roomGridIndex);
        if (roomShape === void 0) {
          return false;
        }
        const delta = (0, roomShape_1.getGridIndexDelta)(roomShape, doorSlot);
        if (delta === void 0) {
          return false;
        }
        const redRoomGridIndex = roomGridIndex + delta;
        return !roomExists(redRoomGridIndex) && isRoomInsideGrid(redRoomGridIndex);
      }
      exports2.isDoorSlotValidAtGridIndexForRedRoom = isDoorSlotValidAtGridIndexForRedRoom;
      function isRedKeyRoom(roomGridIndex) {
        const roomDescriptor = (0, roomData_1.getRoomDescriptor)(roomGridIndex);
        return (0, flag_1.hasFlag)(roomDescriptor.Flags, isaac_typescript_definitions_1.RoomDescriptorFlag.RED_ROOM);
      }
      exports2.isRedKeyRoom = isRedKeyRoom;
      function isRoomInsideGrid(roomGridIndex) {
        if (roomGridIndex === void 0) {
          roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        }
        return roomGridIndex >= 0 && roomGridIndex <= constants_1.MAX_LEVEL_GRID_INDEX;
      }
      exports2.isRoomInsideGrid = isRoomInsideGrid;
      function newRoom(seedOrRNG, ensureDeadEnd = true, customRoomData) {
        const level = cachedClasses_1.game.GetLevel();
        if (seedOrRNG === void 0) {
          seedOrRNG = level.GetDungeonPlacementSeed();
        }
        const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
        const newRoomCandidate = getNewRoomCandidate(rng, ensureDeadEnd);
        if (newRoomCandidate === void 0) {
          return void 0;
        }
        const { adjacentRoomGridIndex, doorSlot, newRoomGridIndex } = newRoomCandidate;
        level.MakeRedRoomDoor(adjacentRoomGridIndex, doorSlot);
        const roomDescriptor = (0, roomData_1.getRoomDescriptor)(newRoomGridIndex);
        roomDescriptor.Flags = (0, flag_1.removeFlag)(roomDescriptor.Flags, isaac_typescript_definitions_1.RoomDescriptorFlag.RED_ROOM);
        if (customRoomData !== void 0) {
          roomDescriptor.Data = customRoomData;
        }
        const roomData = roomDescriptor.Data;
        if (roomData !== void 0) {
          const hasFullMap = level.GetStateFlag(isaac_typescript_definitions_1.LevelStateFlag.FULL_MAP_EFFECT);
          const hasCompass = level.GetStateFlag(isaac_typescript_definitions_1.LevelStateFlag.COMPASS_EFFECT);
          const hasBlueMap = level.GetStateFlag(isaac_typescript_definitions_1.LevelStateFlag.BLUE_MAP_EFFECT);
          const roomType = roomData.Type;
          const isSecretRoom = (0, rooms_1.isSecretRoomType)(roomType);
          if (hasFullMap) {
            roomDescriptor.DisplayFlags = constants_1.ALL_DISPLAY_FLAGS;
          } else if (!isSecretRoom && hasCompass) {
            roomDescriptor.DisplayFlags = (0, flag_1.addFlag)(isaac_typescript_definitions_1.DisplayFlag.VISIBLE, isaac_typescript_definitions_1.DisplayFlag.SHOW_ICON);
          } else if (isSecretRoom && hasBlueMap) {
            roomDescriptor.DisplayFlags = (0, flag_1.addFlag)(isaac_typescript_definitions_1.DisplayFlag.VISIBLE, isaac_typescript_definitions_1.DisplayFlag.SHOW_ICON);
          }
        }
        return newRoomGridIndex;
      }
      exports2.newRoom = newRoom;
      function roomExists(roomGridIndex) {
        const roomData = (0, roomData_1.getRoomData)(roomGridIndex);
        return roomData !== void 0;
      }
      exports2.roomExists = roomExists;
      function roomGridIndexToVector(roomGridIndex) {
        const x = roomGridIndex % constants_1.LEVEL_GRID_ROW_WIDTH;
        const y = Math.floor(roomGridIndex / constants_1.LEVEL_GRID_ROW_WIDTH);
        return Vector(x, y);
      }
      exports2.roomGridIndexToVector = roomGridIndexToVector;
      function vectorToRoomGridIndex(roomVector) {
        return roomVector.Y * constants_1.LEVEL_GRID_ROW_WIDTH + roomVector.X;
      }
      exports2.vectorToRoomGridIndex = vectorToRoomGridIndex;
    }
  });

  // node_modules/isaacscript-common/dist/maps/itemPoolTypeToItemPoolName.js
  var require_itemPoolTypeToItemPoolName = __commonJS({
    "node_modules/isaacscript-common/dist/maps/itemPoolTypeToItemPoolName.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ITEM_POOL_TYPE_TO_ITEM_POOL_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.ITEM_POOL_TYPE_TO_ITEM_POOL_NAME = {
        [isaac_typescript_definitions_1.ItemPoolType.TREASURE]: "treasure",
        [isaac_typescript_definitions_1.ItemPoolType.SHOP]: "shop",
        [isaac_typescript_definitions_1.ItemPoolType.BOSS]: "boss",
        [isaac_typescript_definitions_1.ItemPoolType.DEVIL]: "devil",
        [isaac_typescript_definitions_1.ItemPoolType.ANGEL]: "angel",
        [isaac_typescript_definitions_1.ItemPoolType.SECRET]: "secret",
        [isaac_typescript_definitions_1.ItemPoolType.LIBRARY]: "library",
        [isaac_typescript_definitions_1.ItemPoolType.SHELL_GAME]: "shellGame",
        [isaac_typescript_definitions_1.ItemPoolType.GOLDEN_CHEST]: "goldenChest",
        [isaac_typescript_definitions_1.ItemPoolType.RED_CHEST]: "redChest",
        [isaac_typescript_definitions_1.ItemPoolType.BEGGAR]: "beggar",
        [isaac_typescript_definitions_1.ItemPoolType.DEMON_BEGGAR]: "demonBeggar",
        [isaac_typescript_definitions_1.ItemPoolType.CURSE]: "curse",
        [isaac_typescript_definitions_1.ItemPoolType.KEY_MASTER]: "keyMaster",
        [isaac_typescript_definitions_1.ItemPoolType.BATTERY_BUM]: "batteryBum",
        [isaac_typescript_definitions_1.ItemPoolType.MOMS_CHEST]: "momsChest",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_TREASURE]: "greedTreasure",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_BOSS]: "greedBoss",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_SHOP]: "greedShop",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_DEVIL]: "greedDevil",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_ANGEL]: "greedAngel",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_CURSE]: "greedCurse",
        [isaac_typescript_definitions_1.ItemPoolType.GREED_SECRET]: "greedSecret",
        [isaac_typescript_definitions_1.ItemPoolType.CRANE_GAME]: "craneGame",
        [isaac_typescript_definitions_1.ItemPoolType.ULTRA_SECRET]: "ultraSecret",
        [isaac_typescript_definitions_1.ItemPoolType.BOMB_BUM]: "bombBum",
        [isaac_typescript_definitions_1.ItemPoolType.PLANETARIUM]: "planetarium",
        [isaac_typescript_definitions_1.ItemPoolType.OLD_CHEST]: "oldChest",
        [isaac_typescript_definitions_1.ItemPoolType.BABY_SHOP]: "babyShop",
        [isaac_typescript_definitions_1.ItemPoolType.WOODEN_CHEST]: "woodenChest",
        [isaac_typescript_definitions_1.ItemPoolType.ROTTEN_BEGGAR]: "rottenBeggar"
        // 30
      };
    }
  });

  // node_modules/isaacscript-common/dist/data/itempools.json
  var require_itempools = __commonJS({
    "node_modules/isaacscript-common/dist/data/itempools.json"(exports2, module2) {
      module2.exports = {
        ItemPools: {
          Pool: [
            {
              $: { Name: "treasure" },
              Item: [
                {
                  $: {
                    Id: "1",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "2",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "3",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "4",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "5",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "6",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "7",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "8",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "10",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "12",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "13",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "14",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "15",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "17",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "19",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "36",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "37",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "38",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "39",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "40",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "41",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "42",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "44",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "45",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "46",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "47",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "48",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "49",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "52",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "53",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "55",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "56",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "57",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "58",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "62",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "65",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "66",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "67",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "68",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "69",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "71",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "72",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "75",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "76",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "77",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "78",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "85",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "86",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "87",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "88",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "89",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "91",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "92",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "93",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "94",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "95",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "96",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "97",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "98",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "99",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "100",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "101",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "103",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "104",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "105",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "106",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "107",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "108",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "109",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "110",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "111",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "113",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "114",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "115",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "117",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "120",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "121",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "123",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "124",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "125",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "126",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "127",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "128",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "129",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "131",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "136",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "137",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "138",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "140",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "142",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "143",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "144",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "146",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "148",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "149",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "150",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "151",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "152",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "153",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "154",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "155",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "157",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "160",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "161",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "162",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "163",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "166",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "167",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "168",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "169",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "170",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "171",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "172",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "173",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "174",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "175",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "176",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "178",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "180",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "186",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "188",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "189",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "190",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "191",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "192",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "200",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "201",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "202",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "206",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "209",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "210",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "211",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "213",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "214",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "217",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "220",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "221",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "222",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "223",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "224",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "225",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "227",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "228",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "229",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "231",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "233",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "234",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "236",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "237",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "240",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "242",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "244",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "245",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "256",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "257",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "261",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "264",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "265",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "266",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "267",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "268",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "269",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "270",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "271",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "272",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "273",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "274",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "275",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "276",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "277",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "278",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "279",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "280",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "281",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "282",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "283",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "284",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "285",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "287",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "288",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "291",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "292",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "294",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "295",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "298",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "299",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "300",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "301",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "302",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "303",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "304",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "305",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "306",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "307",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "308",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "309",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "310",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "312",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "313",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "314",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "315",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "316",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "317",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "318",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "319",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "320",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "321",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "322",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "323",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "324",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "325",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "329",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "330",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "332",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "333",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "334",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "335",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "336",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "350",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "351",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "352",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "353",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "358",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "359",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "361",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "362",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "364",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "365",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "366",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "367",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "368",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "369",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "371",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "373",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "374",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "375",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "377",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "378",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "379",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "381",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "382",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "384",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "385",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "386",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "388",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "389",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "390",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "391",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "392",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "393",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "394",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "395",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "397",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "398",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "401",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "404",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "405",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "406",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "407",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "410",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "411",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "418",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "419",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "421",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "422",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "426",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "427",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "430",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "431",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "432",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "435",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "436",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "437",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "440",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "443",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "444",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "445",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "446",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "447",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "448",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "449",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "452",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "453",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "454",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "457",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "458",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "459",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "460",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "461",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "463",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "465",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "466",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "467",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "469",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "470",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "471",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "473",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "476",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "478",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "481",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "482",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "485",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "488",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "491",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "492",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "493",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "494",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "495",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "496",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "497",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "502",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "504",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "506",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "507",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "508",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "509",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "511",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "512",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "513",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "516",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "517",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "522",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "524",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "525",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "529",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "531",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "532",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "537",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "539",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "540",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "542",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "543",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "544",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "545",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "548",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "549",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "553",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "555",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "557",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "558",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "559",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "560",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "561",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "563",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "565",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "570",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "575",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "576",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "578",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "581",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "583",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "605",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "607",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "608",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "609",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "610",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "611",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "612",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "614",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "615",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "616",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "617",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "618",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "625",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "629",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "631",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "635",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "637",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "639",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "641",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "645",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "649",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "650",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "652",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "655",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "657",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "658",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "661",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "663",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "671",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "675",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "676",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "677",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "678",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "680",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "681",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "682",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "683",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "687",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "690",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "693",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "695",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "703",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "709",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "710",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "713",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "717",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "720",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "722",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "723",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "724",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "725",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "726",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "727",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "728",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "729",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "shop" },
              Item: [
                {
                  $: {
                    Id: "21",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "33",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "54",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "60",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "63",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "64",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "75",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "85",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "116",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "137",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "139",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "147",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "156",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "164",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "177",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "199",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "203",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "204",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "205",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "208",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "227",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "232",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "246",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "247",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "248",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "249",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "250",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "251",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "252",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "260",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "286",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "289",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "290",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "295",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "296",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "297",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "337",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "338",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "347",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "348",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "349",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "356",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "357",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "372",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "376",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "380",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "383",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "396",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "402",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "403",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "414",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "416",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "422",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "424",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "425",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "434",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "439",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "451",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "472",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "479",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "480",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "483",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "485",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "486",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "487",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "505",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "514",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "515",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "518",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "520",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "521",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "523",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "527",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "534",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "535",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "566",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "585",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "599",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "602",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "603",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "604",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "619",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "621",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "623",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "624",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "638",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "642",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "647",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "660",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "670",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "716",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "719",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                }
              ]
            },
            {
              $: { Name: "boss" },
              Item: [
                {
                  $: {
                    Id: "14",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "22",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "23",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "24",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "25",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "26",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "27",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "28",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "29",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "30",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "31",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "32",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "70",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "92",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "141",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "143",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "165",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "176",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "183",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "193",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "194",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "196",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "197",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "198",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "218",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "219",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "240",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "253",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "254",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "255",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "339",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "340",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "341",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "342",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "343",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "344",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "345",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "346",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "354",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "355",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "370",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "428",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "438",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "455",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "456",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "538",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "541",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "547",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "564",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "600",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "624",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "644",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "659",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "707",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "708",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "730",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "731",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "devil" },
              Item: [
                {
                  $: {
                    Id: "8",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "34",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "35",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "67",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "74",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "79",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "80",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "81",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "82",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "83",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "84",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "97",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "109",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "113",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "114",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "115",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "118",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "122",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "123",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "127",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "133",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "134",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "145",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "157",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "159",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "163",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "172",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "186",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "187",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "212",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "215",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "216",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "225",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "230",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "237",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "241",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "259",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "262",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "268",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "269",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "275",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "278",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "292",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "311",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "360",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "391",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "399",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "408",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "409",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "411",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "412",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "417",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "420",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "431",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "433",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "441",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "442",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "462",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "468",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "477",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "498",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "503",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "506",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "519",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "526",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "530",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "536",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "545",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "554",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "556",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "569",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "572",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "577",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "606",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "634",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "646",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "654",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "665",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "672",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "679",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "684",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "692",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "694",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "695",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "698",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "699",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "702",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "704",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "705",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "706",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "712",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "728",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "angel" },
              Item: [
                {
                  $: {
                    Id: "7",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "33",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "72",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "78",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "98",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "101",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "108",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "112",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "124",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "138",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "142",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "146",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "156",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "162",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "173",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "178",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "182",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "184",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "185",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "197",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "243",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "313",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "326",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "331",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "332",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "333",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "334",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "335",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "363",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "374",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "387",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "390",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "400",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "407",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "413",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "415",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "423",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "464",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "477",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "490",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "498",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "499",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "510",
                    Weight: "0.4",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.04"
                  }
                },
                {
                  $: {
                    Id: "519",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "526",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "528",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "533",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "543",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "567",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "568",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "573",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "574",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "579",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "584",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "586",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "601",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "622",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "634",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "640",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "643",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "651",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "653",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "685",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "686",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "691",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "696",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "secret" },
              Item: [
                {
                  $: {
                    Id: "11",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "16",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "17",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "20",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "35",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "84",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "120",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "121",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "127",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "168",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "190",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "213",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "226",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "242",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "258",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "262",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "263",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "271",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "286",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "287",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "316",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "321",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "348",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "388",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "389",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "402",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "405",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "424",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "450",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "489",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "500",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "501",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "546",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "562",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "571",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "580",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "582",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "609",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "612",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "625",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "628",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "632",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "636",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "664",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "667",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "669",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "674",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "675",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "677",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "688",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "689",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "691",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "697",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "700",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "701",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "703",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "711",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "716",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "717",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "719",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "721",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "723",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "library" },
              Item: [
                {
                  $: {
                    Id: "33",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "34",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "35",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "58",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "65",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "78",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "97",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "123",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "192",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "282",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "287",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "292",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "545",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "584",
                    Weight: "0.2",
                    DecreaseBy: "0.02",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "712",
                    Weight: "0.2",
                    DecreaseBy: "0.02",
                    RemoveOn: "0.02"
                  }
                }
              ]
            },
            {
              $: { Name: "shellGame" },
              Item: [
                {
                  $: {
                    Id: "9",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "36",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "209",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "378",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "504",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "576",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "goldenChest" },
              Item: [
                {
                  $: {
                    Id: "28",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "29",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "32",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "74",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "179",
                    Weight: "0.5",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "194",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "196",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "255",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "341",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "343",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "344",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "354",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "355",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "370",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "428",
                    Weight: "0.5",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "438",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "444",
                    Weight: "0.1",
                    DecreaseBy: "0.04",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "455",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "456",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "534",
                    Weight: "0.5",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "571",
                    Weight: "0.1",
                    DecreaseBy: "0.04",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "644",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "708",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "730",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "732",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "redChest" },
              Item: [
                {
                  $: {
                    Id: "81",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "133",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "134",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "140",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "145",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "212",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "297",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "316",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "371",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.1",
                    DecreaseBy: "0.04",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "565",
                    Weight: "0.5",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "580",
                    Weight: "0.1",
                    DecreaseBy: "0.04",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "642",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "654",
                    Weight: "0.2",
                    DecreaseBy: "0.08",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "665",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "beggar" },
              Item: [
                {
                  $: {
                    Id: "21",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "22",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "23",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "24",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "25",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "26",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "46",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "54",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "111",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "144",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "177",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "180",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "198",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "204",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "246",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "271",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "294",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "362",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "376",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "385",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "447",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "455",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "456",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "485",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "707",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "demonBeggar" },
              Item: [
                {
                  $: {
                    Id: "13",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "14",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "70",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "79",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "80",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "82",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "83",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "87",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "122",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "126",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "127",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "143",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "159",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "216",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "225",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "230",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "240",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "241",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "259",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "262",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "278",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "340",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "345",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "409",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "420",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "487",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "493",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "496",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "503",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "672",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "676",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "curse" },
              Item: [
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "79",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "80",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "81",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "126",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "133",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "134",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "145",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "212",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "215",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "216",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "225",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "241",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "260",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "371",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "408",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "442",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "451",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "468",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "496",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "503",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "536",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "565",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "569",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "580",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "642",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "654",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "665",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "692",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "694",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "697",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "702",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "711",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "keyMaster" },
              Item: [
                {
                  $: {
                    Id: "10",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "57",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "128",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "175",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "199",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "264",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "272",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "279",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "320",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "343",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "364",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "365",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "388",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "426",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "430",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "492",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "527",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "580",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "581",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "629",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "649",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "693",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "batteryBum" },
              Item: [
                {
                  $: {
                    Id: "63",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "116",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "205",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "356",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "372",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "494",
                    Weight: "0.1",
                    DecreaseBy: "0.05",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "520",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "559",
                    Weight: "0.1",
                    DecreaseBy: "0.05",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "603",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "647",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "momsChest" },
              Item: [
                {
                  $: {
                    Id: "29",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "30",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "31",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "39",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "41",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "55",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "110",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "114",
                    Weight: "0.1",
                    DecreaseBy: "0.05",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "139",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "199",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "200",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "217",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "228",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "355",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "439",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "508",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "580",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "732",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedTreasure" },
              Item: [
                {
                  $: {
                    Id: "1",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "2",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "3",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "4",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "5",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "6",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "7",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "8",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "10",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "12",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "13",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "17",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "34",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "35",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "37",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "38",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "42",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "45",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "47",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "48",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "50",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "52",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "55",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "56",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "57",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "62",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "64",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "65",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "67",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "68",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "69",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "77",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "78",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "85",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "87",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "88",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "89",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "93",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "94",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "95",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "96",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "97",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "98",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "99",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "100",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "101",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "103",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "104",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "106",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "107",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "108",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "110",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "111",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "114",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "115",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "117",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "120",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "121",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "124",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "125",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "126",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "128",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "131",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "132",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "137",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "138",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "140",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "142",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "146",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "148",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "149",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "150",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "151",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "152",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "153",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "154",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "155",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "157",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "161",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "162",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "163",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "167",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "168",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "169",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "170",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "172",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "174",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "175",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "186",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "188",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "189",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "190",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "191",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "192",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "200",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "201",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "206",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "209",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "210",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "213",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "214",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "217",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "220",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "221",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "222",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "223",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "224",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "226",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "228",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "229",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "231",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "233",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "234",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "236",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "237",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "242",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "244",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "245",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "254",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "256",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "257",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "258",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "261",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "264",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "265",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "266",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "267",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "268",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "269",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "271",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "273",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "274",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "277",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "279",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "280",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "281",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "288",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "291",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "299",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "300",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "301",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "302",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "303",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "305",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "306",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "307",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "308",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "309",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "310",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "312",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "315",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "316",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "317",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "318",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "319",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "320",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "321",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "322",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "325",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "329",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "330",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "332",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "333",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "334",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "335",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "336",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "349",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "351",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "352",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "353",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "357",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "358",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "359",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "362",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "364",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "365",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "366",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "367",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "368",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "369",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "371",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "373",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "374",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "375",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "377",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "378",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "379",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "380",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "382",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "383",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "384",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "389",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "391",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "392",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "393",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "394",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "395",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "397",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "398",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "401",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "407",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "410",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "411",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "416",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "421",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "422",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "425",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "426",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "430",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "431",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "432",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "434",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "436",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "440",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "443",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "444",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "445",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "446",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "447",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "448",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "449",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "450",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "452",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "453",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "454",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "457",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "458",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "459",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "460",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "461",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "463",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "465",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "466",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "467",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "469",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "470",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "471",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "473",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "493",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "494",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "495",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "496",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "497",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "502",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "503",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "504",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "506",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "507",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "508",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "509",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "511",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "512",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "513",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "514",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "515",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "516",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "517",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "518",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "520",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "522",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "524",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "525",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "529",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "531",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "532",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "537",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "539",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "540",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "542",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "543",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "544",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "545",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "548",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "549",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "553",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "555",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "557",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "558",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "559",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "560",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "561",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "563",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "565",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "570",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "575",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "576",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "578",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "581",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "583",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "605",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "607",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "608",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "609",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "610",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "611",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "612",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "614",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "615",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "616",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "617",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "618",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "625",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "629",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "631",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "635",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "637",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "639",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "641",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "645",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "649",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "650",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "652",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "655",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "657",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "658",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "661",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "663",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "671",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "675",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "676",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "677",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "678",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "680",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "681",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "682",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "683",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "687",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "690",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "693",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "695",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "703",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "709",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "710",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "713",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "716",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "717",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "719",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "720",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "721",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "722",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "723",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "724",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "725",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "726",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "727",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "728",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "729",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedBoss" },
              Item: [
                {
                  $: {
                    Id: "12",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "14",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "15",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "16",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "22",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "23",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "24",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "25",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "26",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "27",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "28",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "29",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "30",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "31",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "32",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "70",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "71",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "73",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "101",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "120",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "121",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "132",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "143",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "176",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "183",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "193",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "194",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "196",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "197",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "198",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "207",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "240",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "253",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "254",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "255",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "314",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "339",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "340",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "341",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "342",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "343",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "344",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "345",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "346",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "354",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "355",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "370",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "428",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "438",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "455",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "456",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "538",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "541",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "547",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "564",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "600",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "624",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "644",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "659",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "707",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "708",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "730",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "731",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedShop" },
              Item: [
                {
                  $: {
                    Id: "11",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "46",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "63",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "73",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "75",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "76",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "84",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "91",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "105",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "116",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "139",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "156",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "166",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "199",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "204",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "208",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "246",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "247",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "248",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "251",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "252",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "260",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "283",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "284",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "285",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "286",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "289",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "297",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "348",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "356",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "372",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "380",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "386",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "402",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "403",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "405",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "406",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "416",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "434",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "439",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "451",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "472",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "476",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "477",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "478",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "481",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "482",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "483",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "485",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "486",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "487",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "488",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "489",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "500",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "512",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "515",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "516",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "518",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "527",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "534",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "535",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "566",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "585",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "603",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "604",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "619",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "621",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "623",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "624",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "636",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "638",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "647",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "667",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "674",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "688",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "689",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "691",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "692",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "700",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "701",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "703",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "711",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "721",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "722",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "723",
                    Weight: "0.1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.01"
                  }
                },
                {
                  $: {
                    Id: "732",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedCurse" },
              Item: [
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "73",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "79",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "80",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "81",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "126",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "133",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "145",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "212",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "216",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "225",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "260",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "371",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "408",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "442",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "451",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "468",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "496",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "503",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "536",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "565",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "569",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "642",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "654",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "665",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "692",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "694",
                    Weight: "0.5",
                    DecreaseBy: "0.25",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "702",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "711",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedDevil" },
              Item: [
                {
                  $: {
                    Id: "34",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "35",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "67",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "68",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "74",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "79",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "80",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "81",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "82",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "83",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "97",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "109",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "113",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "114",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "115",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "118",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "122",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "123",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "132",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "133",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "145",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "157",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "159",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "172",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "187",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "212",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "216",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "225",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "230",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "237",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "259",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "268",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "269",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "270",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "292",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "311",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "360",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "391",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "399",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "408",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "409",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "411",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "412",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "420",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "431",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "433",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "441",
                    Weight: "0.2",
                    DecreaseBy: "0.2",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "442",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "451",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "462",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "468",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "503",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "506",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "519",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "526",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "536",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "545",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "554",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "556",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "569",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "572",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "577",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "606",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "634",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "646",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "654",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "665",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "679",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "684",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "692",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "694",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "695",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "698",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "699",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "702",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "704",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "705",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "706",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "712",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "728",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedAngel" },
              Item: [
                {
                  $: {
                    Id: "7",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "72",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "78",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "112",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "138",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "162",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "178",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "182",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "184",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "185",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "197",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "243",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "313",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "326",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "331",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "333",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "334",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "335",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "363",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "387",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "390",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "400",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "407",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "413",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "415",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "423",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "490",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "499",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "526",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "528",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "533",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "543",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "567",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "568",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "573",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "574",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "579",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "584",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "586",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "601",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "622",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "634",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "640",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "643",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "651",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "653",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "685",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "686",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "691",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "696",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "greedSecret" },
              Item: [
                {
                  $: {
                    Id: "11",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "16",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "17",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "20",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "35",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "84",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "120",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "121",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "127",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "168",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "190",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "213",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "226",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "242",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "258",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "262",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "263",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "271",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "286",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "316",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "321",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "348",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "389",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "402",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "405",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "424",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "450",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "489",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "500",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "501",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "546",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "562",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "571",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "582",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "609",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "612",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "625",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "628",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "632",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "636",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "664",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "667",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "669",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "674",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "677",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "688",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "689",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "691",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "700",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "701",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "703",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "711",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "716",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "717",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "719",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "721",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "723",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "craneGame" },
              Item: [
                {
                  $: {
                    Id: "1",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "3",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "4",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "5",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "21",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "32",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "38",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "44",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "46",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "47",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "48",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "49",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "63",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "66",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "68",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "77",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "85",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "89",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "90",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "91",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "93",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "95",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "105",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "116",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "136",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "137",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "147",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "152",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "153",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "166",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "189",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "194",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "196",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "208",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "212",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "227",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "232",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "244",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "251",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "255",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "263",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "267",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "283",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "284",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "285",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "337",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "338",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "352",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "357",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "362",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "370",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "382",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "383",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "386",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "395",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "397",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "403",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "406",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "419",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "422",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "425",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "427",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "437",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "438",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "439",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "444",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "451",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "465",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "476",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "478",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "488",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "494",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "505",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "515",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "516",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "518",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "524",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "527",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "538",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "599",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "604",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "609",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "617",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "624",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "629",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "638",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "644",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "649",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "655",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "687",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "709",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "720",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "723",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "730",
                    Weight: "1",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "ultraSecret" },
              Item: [
                {
                  $: {
                    Id: "12",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "13",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "15",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "30",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "31",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "40",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "45",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "49",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "51",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "53",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "67",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "72",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "73",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "79",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "80",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "82",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "96",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "105",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "109",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "110",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "118",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "119",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "122",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "135",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "137",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "157",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "159",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "166",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "167",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "176",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "177",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "182",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "193",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "208",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "214",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "230",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "247",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "253",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "254",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "261",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "276",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "289",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "334",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "373",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "394",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "399",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "411",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "412",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "421",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "435",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "443",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "452",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "462",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "466",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "475",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "481",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "506",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "511",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "531",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "541",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "554",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "556",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "565",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "572",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "573",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "580",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "606",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "607",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "614",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "616",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "618",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "621",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "637",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "650",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "654",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "657",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "671",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "678",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "682",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "684",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "692",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "694",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "695",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "700",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "702",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "703",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "704",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "705",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "706",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "711",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "724",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "726",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "728",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "bombBum" },
              Item: [
                {
                  $: {
                    Id: "37",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "106",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "125",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "137",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "140",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "190",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "209",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "220",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "256",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "353",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "366",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "367",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "432",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "483",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "517",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "563",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "583",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "614",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "646",
                    Weight: "0.2",
                    DecreaseBy: "0.1",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "727",
                    Weight: "1",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "planetarium" },
              Item: [
                {
                  $: {
                    Id: "588",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "589",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "590",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "591",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "592",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "593",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "594",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "595",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "596",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "597",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "598",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "oldChest" },
              Item: [
                {
                  $: {
                    Id: "29",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "30",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "31",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "39",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "41",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "55",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "102",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "110",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "114",
                    Weight: "0.2",
                    DecreaseBy: "0.08",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "139",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "175",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "195",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "199",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "200",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "217",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "228",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "341",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "355",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "439",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "455",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "508",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "546",
                    Weight: "0.2",
                    DecreaseBy: "0.08",
                    RemoveOn: "0.02"
                  }
                },
                {
                  $: {
                    Id: "547",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "604",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "732",
                    Weight: "1",
                    DecreaseBy: "0.4",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "babyShop" },
              Item: [
                {
                  $: {
                    Id: "8",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "10",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "57",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "67",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "73",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "88",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "95",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "96",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "99",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "100",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "112",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "113",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "117",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "128",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "144",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "155",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "163",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "167",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "170",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "172",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "174",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "188",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "207",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "264",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "265",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "266",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "267",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "268",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "269",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "270",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "272",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "273",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "274",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "275",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "277",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "278",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "279",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "280",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "281",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "320",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "322",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "360",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "361",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "363",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "364",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "365",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "372",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "384",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "385",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "388",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "390",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "403",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "404",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "417",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "426",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "430",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "435",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "468",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "470",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "471",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "472",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "473",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "491",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "492",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "509",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "511",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "518",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "519",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "537",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "575",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "581",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "607",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "608",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "610",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "612",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "615",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "629",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "635",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "645",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "649",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "661",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "679",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "682",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "698",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "woodenChest" },
              Item: [
                {
                  $: {
                    Id: "7",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "27",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "60",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "138",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "183",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "349",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "362",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "439",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "488",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "527",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "719",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            },
            {
              $: { Name: "rottenBeggar" },
              Item: [
                {
                  $: {
                    Id: "26",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "42",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "140",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "268",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "273",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "336",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "480",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                },
                {
                  $: {
                    Id: "618",
                    Weight: "0.5",
                    DecreaseBy: "0.5",
                    RemoveOn: "0.05"
                  }
                },
                {
                  $: {
                    Id: "639",
                    Weight: "1",
                    DecreaseBy: "1",
                    RemoveOn: "0.1"
                  }
                }
              ]
            }
          ]
        }
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/itemPoolTypeToCollectibleTypesSet.js
  var require_itemPoolTypeToCollectibleTypesSet = __commonJS({
    "node_modules/isaacscript-common/dist/objects/itemPoolTypeToCollectibleTypesSet.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ITEM_POOL_TYPE_TO_COLLECTIBLE_TYPES_SET = void 0;
      var cachedEnumValues_1 = require_cachedEnumValues();
      var itemPoolsJSON = __importStar(require_itempools());
      var types_1 = require_types();
      var itemPoolTypeToItemPoolName_1 = require_itemPoolTypeToItemPoolName();
      exports2.ITEM_POOL_TYPE_TO_COLLECTIBLE_TYPES_SET = (() => {
        const itemPoolTypeToCollectibleTypes = {};
        for (const itemPoolType of cachedEnumValues_1.ITEM_POOL_TYPE_VALUES) {
          const itemPoolJSON = getItemPoolJSON(itemPoolType);
          if (itemPoolJSON === void 0) {
            itemPoolTypeToCollectibleTypes[itemPoolType] = /* @__PURE__ */ new Set();
          } else {
            const collectibleTypesSet = /* @__PURE__ */ new Set();
            for (const itemPoolJSONElement of itemPoolJSON.Item) {
              const collectibleTypeInt = (0, types_1.parseIntSafe)(itemPoolJSONElement.$.Id);
              if (collectibleTypeInt === void 0) {
                error(`Failed to parse a collectible type in the "itempools.json" file: ${itemPoolJSONElement.$.Id}`);
              }
              const collectibleType = (0, types_1.asCollectibleType)(collectibleTypeInt);
              collectibleTypesSet.add(collectibleType);
            }
            itemPoolTypeToCollectibleTypes[itemPoolType] = collectibleTypesSet;
          }
        }
        return itemPoolTypeToCollectibleTypes;
      })();
      function getItemPoolJSON(itemPoolType) {
        const itemPoolName = itemPoolTypeToItemPoolName_1.ITEM_POOL_TYPE_TO_ITEM_POOL_NAME[itemPoolType];
        const itemPoolsJSONArray = itemPoolsJSON.ItemPools.Pool;
        return itemPoolsJSONArray.find((itemPoolJSON) => itemPoolJSON.$.Name === itemPoolName);
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/itemPool.js
  var require_itemPool = __commonJS({
    "node_modules/isaacscript-common/dist/functions/itemPool.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.removeTrinketFromPools = exports2.removeCollectibleFromPools = exports2.isCollectibleTypeInDefaultItemPool = exports2.getRandomItemPool = exports2.getItemPoolName = exports2.getDefaultItemPoolsForCollectibleType = exports2.getDefaultCollectibleTypesInItemPool = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var itemPoolTypeToItemPoolName_1 = require_itemPoolTypeToItemPoolName();
      var itemPoolTypeToCollectibleTypesSet_1 = require_itemPoolTypeToCollectibleTypesSet();
      var array_1 = require_array();
      var NORMAL_MODE_ONLY_ITEM_POOL_TYPES = [
        isaac_typescript_definitions_1.ItemPoolType.TREASURE,
        isaac_typescript_definitions_1.ItemPoolType.BOSS,
        isaac_typescript_definitions_1.ItemPoolType.SHOP,
        isaac_typescript_definitions_1.ItemPoolType.DEVIL,
        isaac_typescript_definitions_1.ItemPoolType.ANGEL,
        isaac_typescript_definitions_1.ItemPoolType.CURSE,
        isaac_typescript_definitions_1.ItemPoolType.SECRET
        // 5
      ];
      var GREED_MODE_ONLY_ITEM_POOL_TYPES = [
        isaac_typescript_definitions_1.ItemPoolType.GREED_TREASURE,
        isaac_typescript_definitions_1.ItemPoolType.GREED_BOSS,
        isaac_typescript_definitions_1.ItemPoolType.GREED_SHOP,
        isaac_typescript_definitions_1.ItemPoolType.GREED_DEVIL,
        isaac_typescript_definitions_1.ItemPoolType.GREED_ANGEL,
        isaac_typescript_definitions_1.ItemPoolType.GREED_CURSE,
        isaac_typescript_definitions_1.ItemPoolType.GREED_SECRET
        // 22
      ];
      var FAKE_ITEM_POOL_TYPES = [isaac_typescript_definitions_1.ItemPoolType.SHELL_GAME];
      var NORMAL_MODE_ITEM_POOL_TYPES = (0, array_1.arrayRemove)(cachedEnumValues_1.ITEM_POOL_TYPE_VALUES, ...GREED_MODE_ONLY_ITEM_POOL_TYPES, ...FAKE_ITEM_POOL_TYPES);
      var GREED_MODE_ITEM_POOL_TYPES = (0, array_1.arrayRemove)(cachedEnumValues_1.ITEM_POOL_TYPE_VALUES, ...NORMAL_MODE_ONLY_ITEM_POOL_TYPES, ...FAKE_ITEM_POOL_TYPES);
      function getDefaultCollectibleTypesInItemPool(itemPoolType) {
        return itemPoolTypeToCollectibleTypesSet_1.ITEM_POOL_TYPE_TO_COLLECTIBLE_TYPES_SET[itemPoolType];
      }
      exports2.getDefaultCollectibleTypesInItemPool = getDefaultCollectibleTypesInItemPool;
      function getDefaultItemPoolsForCollectibleType(collectibleType) {
        const collectibleItemPoolTypes = [];
        const itemPoolTypes = cachedClasses_1.game.IsGreedMode() ? GREED_MODE_ITEM_POOL_TYPES : NORMAL_MODE_ITEM_POOL_TYPES;
        for (const itemPoolType of itemPoolTypes) {
          const collectibleTypesSet = itemPoolTypeToCollectibleTypesSet_1.ITEM_POOL_TYPE_TO_COLLECTIBLE_TYPES_SET[itemPoolType];
          if (collectibleTypesSet.has(collectibleType)) {
            collectibleItemPoolTypes.push(itemPoolType);
          }
        }
        return collectibleItemPoolTypes;
      }
      exports2.getDefaultItemPoolsForCollectibleType = getDefaultItemPoolsForCollectibleType;
      function getItemPoolName(itemPoolType) {
        return itemPoolTypeToItemPoolName_1.ITEM_POOL_TYPE_TO_ITEM_POOL_NAME[itemPoolType];
      }
      exports2.getItemPoolName = getItemPoolName;
      function getRandomItemPool(seedOrRNG) {
        const itemPoolTypes = cachedClasses_1.game.IsGreedMode() ? GREED_MODE_ITEM_POOL_TYPES : NORMAL_MODE_ITEM_POOL_TYPES;
        return (0, array_1.getRandomArrayElement)(itemPoolTypes, seedOrRNG);
      }
      exports2.getRandomItemPool = getRandomItemPool;
      function isCollectibleTypeInDefaultItemPool(collectibleType, itemPoolType) {
        const collectibleTypesSet = itemPoolTypeToCollectibleTypesSet_1.ITEM_POOL_TYPE_TO_COLLECTIBLE_TYPES_SET[itemPoolType];
        return collectibleTypesSet.has(collectibleType);
      }
      exports2.isCollectibleTypeInDefaultItemPool = isCollectibleTypeInDefaultItemPool;
      function removeCollectibleFromPools(...collectibleTypes) {
        const itemPool = cachedClasses_1.game.GetItemPool();
        for (const collectibleType of collectibleTypes) {
          itemPool.RemoveCollectible(collectibleType);
        }
      }
      exports2.removeCollectibleFromPools = removeCollectibleFromPools;
      function removeTrinketFromPools(...trinketTypes) {
        const itemPool = cachedClasses_1.game.GetItemPool();
        for (const trinketType of trinketTypes) {
          itemPool.RemoveTrinket(trinketType);
        }
      }
      exports2.removeTrinketFromPools = removeTrinketFromPools;
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerEffects.js
  var require_playerEffects = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerEffects.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.shouldWhoreOfBabylonBeActive = exports2.getEffectsList = exports2.anyPlayerHasTrinketEffect = exports2.anyPlayerHasNullEffect = exports2.anyPlayerHasCollectibleEffect = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      function anyPlayerHasCollectibleEffect(collectibleType) {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => {
          const effects = player.GetEffects();
          return effects.HasCollectibleEffect(collectibleType);
        });
      }
      exports2.anyPlayerHasCollectibleEffect = anyPlayerHasCollectibleEffect;
      function anyPlayerHasNullEffect(nullItemID) {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => {
          const effects = player.GetEffects();
          return effects.HasNullEffect(nullItemID);
        });
      }
      exports2.anyPlayerHasNullEffect = anyPlayerHasNullEffect;
      function anyPlayerHasTrinketEffect(trinketType) {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => {
          const effects = player.GetEffects();
          return effects.HasTrinketEffect(trinketType);
        });
      }
      exports2.anyPlayerHasTrinketEffect = anyPlayerHasTrinketEffect;
      function getEffectsList(player) {
        const effects = player.GetEffects();
        const effectsList = effects.GetEffectsList();
        const effectArray = [];
        for (let i = 0; i < effectsList.Size; i++) {
          const effect = effectsList.Get(i);
          if (effect !== void 0) {
            effectArray.push(effect);
          }
        }
        return effectArray;
      }
      exports2.getEffectsList = getEffectsList;
      function shouldWhoreOfBabylonBeActive(player) {
        const redHearts = player.GetHearts();
        const threshold = (0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.EVE) ? 2 : 1;
        return redHearts <= threshold;
      }
      exports2.shouldWhoreOfBabylonBeActive = shouldWhoreOfBabylonBeActive;
    }
  });

  // node_modules/isaacscript-common/dist/functions/set.js
  var require_set = __commonJS({
    "node_modules/isaacscript-common/dist/functions/set.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.sumSet = exports2.setHas = exports2.setAdd = exports2.objectValuesToSet = exports2.objectValuesToReadonlySet = exports2.objectKeysToSet = exports2.objectKeysToReadonlySet = exports2.getSortedSetValues = exports2.getSetCombinations = exports2.getRandomSetElement = exports2.deleteSetsFromSet = exports2.copySet = exports2.combineSets = exports2.addSetsToSet = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      var array_1 = require_array();
      var sort_1 = require_sort();
      var types_1 = require_types();
      function addSetsToSet(mainSet, ...setsToAdd) {
        for (const set of setsToAdd) {
          for (const value of set) {
            mainSet.add(value);
          }
        }
      }
      exports2.addSetsToSet = addSetsToSet;
      function combineSets(...sets) {
        const newSet = /* @__PURE__ */ new Set();
        for (const set of sets) {
          for (const value of set) {
            newSet.add(value);
          }
        }
        return newSet;
      }
      exports2.combineSets = combineSets;
      function copySet(oldSet) {
        const newSet = /* @__PURE__ */ new Set();
        for (const value of oldSet) {
          newSet.add(value);
        }
        return newSet;
      }
      exports2.copySet = copySet;
      function deleteSetsFromSet(mainSet, ...setsToRemove) {
        for (const set of setsToRemove) {
          for (const value of set) {
            mainSet.delete(value);
          }
        }
      }
      exports2.deleteSetsFromSet = deleteSetsFromSet;
      function getRandomSetElement(set, seedOrRNG, exceptions = []) {
        const array = getSortedSetValues(set);
        return (0, array_1.getRandomArrayElement)(array, seedOrRNG, exceptions);
      }
      exports2.getRandomSetElement = getRandomSetElement;
      function getSetCombinations(set, includeEmptyArray) {
        const values = getSortedSetValues(set);
        const combinations = (0, array_1.getArrayCombinations)(values, includeEmptyArray);
        return combinations.map((array) => new ReadonlySet_1.ReadonlySet(array));
      }
      exports2.getSetCombinations = getSetCombinations;
      function getSortedSetValues(set) {
        const values = [...set];
        const firstElement = values[0];
        if (firstElement !== void 0) {
          const arrayType2 = type(firstElement);
          if (!(0, types_1.isPrimitive)(arrayType2)) {
            error(`Failed to get the sorted set values because the provided set was of type "${arrayType2}". Having sets with non-primitive types doesn't make much sense in general, so you might need to rethink what you are doing.`);
          }
        }
        values.sort(sort_1.sortNormal);
        return values;
      }
      exports2.getSortedSetValues = getSortedSetValues;
      function objectKeysToReadonlySet(object) {
        return objectKeysToSet2(object);
      }
      exports2.objectKeysToReadonlySet = objectKeysToReadonlySet;
      function objectKeysToSet2(object) {
        const set = /* @__PURE__ */ new Set();
        for (const key of Object.keys(object)) {
          set.add(key);
        }
        return set;
      }
      exports2.objectKeysToSet = objectKeysToSet2;
      function objectValuesToReadonlySet(object) {
        return objectValuesToSet(object);
      }
      exports2.objectValuesToReadonlySet = objectValuesToReadonlySet;
      function objectValuesToSet(object) {
        const set = /* @__PURE__ */ new Set();
        for (const key of Object.values(object)) {
          set.add(key);
        }
        return set;
      }
      exports2.objectValuesToSet = objectValuesToSet;
      function setAdd(set, ...elements) {
        for (const element of elements) {
          set.add(element);
        }
      }
      exports2.setAdd = setAdd;
      function setHas(set, ...elements) {
        return elements.some((element) => set.has(element));
      }
      exports2.setHas = setHas;
      function sumSet(set) {
        const values = [...set];
        return (0, array_1.sumArray)(values);
      }
      exports2.sumSet = sumSet;
    }
  });

  // node_modules/isaacscript-common/dist/functions/logMisc.js
  var require_logMisc = __commonJS({
    "node_modules/isaacscript-common/dist/functions/logMisc.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.logVector = exports2.logUserdata = exports2.logUseFlags = exports2.logTearFlags = exports2.logTableShallow = exports2.logTableKeys = exports2.logTableDifferences = exports2.logTable = exports2.logSounds = exports2.logSet = exports2.logSeedEffects = exports2.logRoom = exports2.logProjectileFlags = exports2.logPlayerHealth = exports2.logPlayerEffects = exports2.logMusic = exports2.logMap = exports2.logLevelStateFlags = exports2.logKColor = exports2.logItemPoolTypes = exports2.logGameStateFlags = exports2.logFlags = exports2.logEntityID = exports2.logEntityFlags = exports2.logDisplayFlags = exports2.logDamageFlags = exports2.logColor = exports2.logCollectibleTypes = exports2.logArray = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var ReadonlySet_1 = require_ReadonlySet();
      var array_1 = require_array();
      var bosses_1 = require_bosses();
      var collectibles_1 = require_collectibles();
      var entities_1 = require_entities();
      var enums_1 = require_enums();
      var flag_1 = require_flag();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var itemPool_1 = require_itemPool();
      var log_1 = require_log();
      var playerEffects_1 = require_playerEffects();
      var playerHealth_1 = require_playerHealth();
      var players_1 = require_players();
      var roomData_1 = require_roomData();
      var set_1 = require_set();
      var sort_1 = require_sort();
      var table_1 = require_table();
      var trinkets_1 = require_trinkets();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var vector_1 = require_vector();
      function logArray(array, name) {
        if (!(0, array_1.isArray)(array, false)) {
          (0, log_1.log)("Tried to log an array, but the given object was not an array.");
          return;
        }
        const arrayString = (0, array_1.arrayToString)(array);
        if (name === void 0) {
          name = "array";
        }
        (0, log_1.log)(`Logging ${name}: ${arrayString}`);
      }
      exports2.logArray = logArray;
      function logCollectibleTypes(collectibleTypes, name) {
        if (name === void 0) {
          name = "collectibles";
        }
        (0, log_1.log)(`Logging ${name}:`);
        let i = 1;
        for (const collectibleType of collectibleTypes) {
          const collectibleName = (0, collectibles_1.getCollectibleName)(collectibleType);
          (0, log_1.log)(`${i}) ${collectibleName} (${collectibleType})`);
          i++;
        }
      }
      exports2.logCollectibleTypes = logCollectibleTypes;
      function logColor(color, name) {
        if (name === void 0) {
          name = "color";
        }
        (0, log_1.log)(`Logging ${name}: R${color.R}, G${color.G}, B${color.B}, A${color.A}, RO${color.RO}, BO${color.BO}, GO${color.GO}`);
      }
      exports2.logColor = logColor;
      function logDamageFlags(damageFlags) {
        logFlags(damageFlags, isaac_typescript_definitions_1.DamageFlag, "damage");
      }
      exports2.logDamageFlags = logDamageFlags;
      function logDisplayFlags(displayFlags) {
        logFlags(displayFlags, isaac_typescript_definitions_1.DisplayFlag, "display");
      }
      exports2.logDisplayFlags = logDisplayFlags;
      function logEntityFlags(entityFlags) {
        logFlags(entityFlags, isaac_typescript_definitions_1.EntityFlag, "entity");
      }
      exports2.logEntityFlags = logEntityFlags;
      function logEntityID(entity) {
        const entityID = (0, entities_1.getEntityID)(entity);
        (0, log_1.log)(`Logging entity: ${entityID}`);
      }
      exports2.logEntityID = logEntityID;
      function logFlags(flags, flagEnum, description = "") {
        if (description !== "") {
          description = "flag";
        }
        (0, log_1.log)(`Logging ${description} values for: ${flags}`);
        let hasNoFlags = true;
        const entries = (0, enums_1.getEnumEntries)(flagEnum);
        for (const [key, value] of entries) {
          if ((0, flag_1.hasFlag)(flags, value)) {
            (0, log_1.log)(`  Has flag: ${key} (${value})`);
            hasNoFlags = false;
          }
        }
        if (hasNoFlags) {
          (0, log_1.log)("  n/a (no flags)");
        }
      }
      exports2.logFlags = logFlags;
      function logGameStateFlags() {
        (0, log_1.log)("Logging game state flags:");
        const gameStateFlagEntries = (0, enums_1.getEnumEntries)(isaac_typescript_definitions_1.GameStateFlag);
        let hasNoFlags = true;
        for (const [key, gameStateFlag] of gameStateFlagEntries) {
          const flagValue = cachedClasses_1.game.GetStateFlag(gameStateFlag);
          if (flagValue) {
            (0, log_1.log)(`  Has flag: ${key} (${gameStateFlag})`);
            hasNoFlags = false;
          }
        }
        if (hasNoFlags) {
          (0, log_1.log)("  n/a (no flags)");
        }
      }
      exports2.logGameStateFlags = logGameStateFlags;
      function logItemPoolTypes(itemPoolTypes, name) {
        if (name === void 0) {
          name = "item pool types";
        }
        (0, log_1.log)(`Logging ${name}:`);
        let i = 1;
        for (const itemPoolType of itemPoolTypes) {
          const itemPoolName = (0, itemPool_1.getItemPoolName)(itemPoolType);
          (0, log_1.log)(`${i}) ${itemPoolName} (${itemPoolType})`);
          i++;
        }
      }
      exports2.logItemPoolTypes = logItemPoolTypes;
      function logKColor(kColor, name) {
        if (name === void 0) {
          name = "KColor";
        }
        (0, log_1.log)(`Logging ${name}: R${kColor.Red}, G${kColor.Green}, B${kColor.Blue}, A${kColor.Alpha}`);
      }
      exports2.logKColor = logKColor;
      function logLevelStateFlags() {
        const level = cachedClasses_1.game.GetLevel();
        const levelStateFlagEntries = (0, enums_1.getEnumEntries)(isaac_typescript_definitions_1.LevelStateFlag);
        (0, log_1.log)("Logging level state flags:");
        let hasNoFlags = true;
        for (const [key, levelStateFlag] of levelStateFlagEntries) {
          const flagValue = level.GetStateFlag(levelStateFlag);
          if (flagValue) {
            (0, log_1.log)(`  Has flag: ${key} (${levelStateFlag})`);
            hasNoFlags = false;
          }
        }
        if (hasNoFlags) {
          (0, log_1.log)("  n/a (no flags)");
        }
      }
      exports2.logLevelStateFlags = logLevelStateFlags;
      function logMap(map, name) {
        if (!(0, tstlClass_1.isTSTLMap)(map) && !(0, tstlClass_1.isDefaultMap)(map)) {
          (0, log_1.log)("Tried to log a TSTL map, but the given object was not a TSTL map.");
          return;
        }
        const suffix = name === void 0 ? "" : ` "${name}"`;
        (0, log_1.log)(`Logging a TSTL map${suffix}:`);
        const mapKeys = [...map.keys()];
        mapKeys.sort(sort_1.sortNormal);
        for (const key of mapKeys) {
          const value = map.get(key);
          (0, log_1.log)(`  ${key} --> ${value}`);
        }
        (0, log_1.log)(`  The size of the map was: ${map.size}`);
      }
      exports2.logMap = logMap;
      function logMusic() {
        const currentMusic = cachedClasses_1.musicManager.GetCurrentMusicID();
        (0, log_1.log)(`Currently playing music track: ${isaac_typescript_definitions_1.Music[currentMusic]} (${currentMusic})`);
      }
      exports2.logMusic = logMusic;
      function logPlayerEffects(player) {
        const effects = (0, playerEffects_1.getEffectsList)(player);
        (0, log_1.log)("Logging player effects:");
        if (effects.length === 0) {
          (0, log_1.log)("  n/a (no effects)");
          return;
        }
        for (const [i, effect] of effects.entries()) {
          let effectDescription;
          if (effect.Item.IsCollectible()) {
            const collectibleName = (0, collectibles_1.getCollectibleName)(effect.Item.ID);
            effectDescription = `Collectible: ${collectibleName}`;
          } else if (effect.Item.IsTrinket()) {
            const trinketName = (0, trinkets_1.getTrinketName)(effect.Item.ID);
            effectDescription = `Trinket: ${trinketName}`;
          } else if (effect.Item.IsNull()) {
            effectDescription = `Null item: ${effect.Item.ID}`;
          } else {
            effectDescription = `Unknown type of effect: ${effect.Item.ID}`;
          }
          (0, log_1.log)(`  ${i + 1}) ${effectDescription} (x${effect.Count})`);
        }
      }
      exports2.logPlayerEffects = logPlayerEffects;
      function logPlayerHealth(player) {
        const playerName = (0, players_1.getPlayerName)(player);
        const playerHealth = (0, playerHealth_1.getPlayerHealth)(player);
        (0, log_1.log)(`Player health for ${playerName}:`);
        (0, log_1.log)(`  Max hearts: ${playerHealth.maxHearts}`);
        (0, log_1.log)(`  Hearts: ${playerHealth.hearts}`);
        (0, log_1.log)(`  Eternal hearts: ${playerHealth.eternalHearts}`);
        (0, log_1.log)(`  Soul hearts: ${playerHealth.soulHearts}`);
        (0, log_1.log)(`  Bone hearts: ${playerHealth.boneHearts}`);
        (0, log_1.log)(`  Golden hearts: ${playerHealth.goldenHearts}`);
        (0, log_1.log)(`  Rotten hearts: ${playerHealth.rottenHearts}`);
        (0, log_1.log)(`  Broken hearts: ${playerHealth.brokenHearts}`);
        (0, log_1.log)(`  Soul charges: ${playerHealth.soulCharges}`);
        (0, log_1.log)(`  Blood charges: ${playerHealth.bloodCharges}`);
        (0, log_1.log)("  Soul heart types: [");
        for (const soulHeartType of playerHealth.soulHeartTypes) {
          (0, log_1.log)(`    HeartSubType.${isaac_typescript_definitions_1.HeartSubType[soulHeartType]}`);
        }
        (0, log_1.log)("  ]");
      }
      exports2.logPlayerHealth = logPlayerHealth;
      function logProjectileFlags(projectileFlags) {
        logFlags(projectileFlags, isaac_typescript_definitions_1.ProjectileFlag, "projectile");
      }
      exports2.logProjectileFlags = logProjectileFlags;
      function logRoom() {
        const bossID = (0, bosses_1.getBossID)();
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        const roomListIndex = (0, roomData_1.getRoomListIndex)();
        const roomData = (0, roomData_1.getRoomData)();
        (0, log_1.log)("Logging room information:");
        (0, log_1.log)(`- Room stage ID: ${isaac_typescript_definitions_1.StageID[roomData.StageID]} (roomData.StageID)`);
        (0, log_1.log)(`- Room type: ${isaac_typescript_definitions_1.RoomType[roomData.Type]} (${roomData.Type})`);
        (0, log_1.log)(`- Variant: ${roomData.Variant}`);
        (0, log_1.log)(`- Sub-type: ${roomData.Subtype}`);
        (0, log_1.log)(`- Name: ${roomData.Name}`);
        const roomGridIndexName = isaac_typescript_definitions_1.GridRoom[roomGridIndex];
        if (roomGridIndexName === void 0) {
          (0, log_1.log)(`- Grid index: ${roomGridIndex}`);
        } else {
          (0, log_1.log)(`- Grid index: ${roomGridIndexName} (${roomGridIndex})`);
        }
        (0, log_1.log)(`- List index: ${roomListIndex}`);
        if (bossID === void 0) {
          (0, log_1.log)("- Boss ID: undefined");
        } else {
          (0, log_1.log)(`- Boss ID: ${isaac_typescript_definitions_1.BossID[bossID]} (${bossID})`);
        }
      }
      exports2.logRoom = logRoom;
      function logSeedEffects() {
        const seeds = cachedClasses_1.game.GetSeeds();
        const seedEffectEntries = (0, enums_1.getEnumEntries)(isaac_typescript_definitions_1.SeedEffect);
        (0, log_1.log)("Logging seed effects:");
        let hasNoSeedEffects = true;
        for (const [key, seedEffect] of seedEffectEntries) {
          if (seeds.HasSeedEffect(seedEffect)) {
            (0, log_1.log)(`  ${key} (${seedEffect})`);
            hasNoSeedEffects = false;
          }
        }
        if (hasNoSeedEffects) {
          (0, log_1.log)("  n/a (no seed effects)");
        }
      }
      exports2.logSeedEffects = logSeedEffects;
      function logSet(set, name) {
        if (!(0, tstlClass_1.isTSTLSet)(set)) {
          (0, log_1.log)("Tried to log a TSTL set, but the given object was not a TSTL set.");
          return;
        }
        const suffix = name === void 0 ? "" : ` "${name}"`;
        (0, log_1.log)(`Logging a TSTL set${suffix}:`);
        const setValues = (0, set_1.getSortedSetValues)(set);
        for (const value of setValues) {
          (0, log_1.log)(`  Value: ${value}`);
        }
        (0, log_1.log)(`  The size of the set was: ${set.size}`);
      }
      exports2.logSet = logSet;
      function logSounds() {
        const soundEffects = (0, enums_1.getEnumEntries)(isaac_typescript_definitions_1.SoundEffect);
        for (const [key, soundEffect] of soundEffects) {
          if (cachedClasses_1.sfxManager.IsPlaying(soundEffect)) {
            (0, log_1.log)(`Currently playing sound effect: ${key} (${soundEffect})`);
          }
        }
      }
      exports2.logSounds = logSounds;
      function logTable(luaTable, parentTables = 0) {
        if (parentTables === 0) {
          (0, log_1.log)("Logging a Lua table:", false);
        } else if (parentTables > 10) {
          return;
        }
        const numSpaces = (parentTables + 1) * 2;
        const indentation = " ".repeat(numSpaces);
        if (!(0, types_1.isTable)(luaTable)) {
          (0, log_1.log)(`${indentation}n/a (encountered a variable of type "${typeof luaTable}" instead of a table)`, false);
          return;
        }
        let numElements = 0;
        (0, table_1.iterateTableInOrder)(luaTable, (key, value) => {
          (0, log_1.log)(`${indentation}${key} --> ${value}`, false);
          if ((0, types_1.isTable)(value)) {
            if (key === "__class") {
              (0, log_1.log)(`${indentation}  (skipping enumerating this key to avoid infinite recursion)`, false);
            } else {
              logTable(value, parentTables + 1);
            }
          }
          numElements++;
        });
        (0, log_1.log)(`${indentation}The size of the table was: ${numElements}`, false);
      }
      exports2.logTable = logTable;
      function logTableDifferences(table1, table2) {
        (0, log_1.log)("Comparing two Lua tables:");
        const table1Keys = Object.keys(table1);
        const table1KeysSet = new ReadonlySet_1.ReadonlySet(table1Keys);
        const table2Keys = Object.keys(table2);
        const table2KeysSet = new ReadonlySet_1.ReadonlySet(table2Keys);
        const keysSet = (0, set_1.combineSets)(table1KeysSet, table2KeysSet);
        const keys = [...keysSet.values()];
        keys.sort();
        for (const key of keys) {
          const value1 = table1.get(key);
          const value2 = table2.get(key);
          if (value1 === void 0) {
            (0, log_1.log)(`  Table 1 is missing key: ${key}`);
          }
          if (value2 === void 0) {
            (0, log_1.log)(`  Table 2 is missing key: ${key}`);
          }
          if (value1 !== value2) {
            (0, log_1.log)(`  ${key} --> "${value1}" versus "${value2}"`);
          }
        }
      }
      exports2.logTableDifferences = logTableDifferences;
      function logTableKeys(luaTable) {
        (0, log_1.log)("Logging the keys of a Lua table:");
        if (!(0, types_1.isTable)(luaTable)) {
          (0, log_1.log)(`  n/a (encountered a variable of type "${typeof luaTable}" instead of a table)`);
          return;
        }
        let numElements = 0;
        (0, table_1.iterateTableInOrder)(luaTable, (key) => {
          (0, log_1.log)(`${key}`);
          numElements++;
        });
        (0, log_1.log)(`  The size of the table was: ${numElements}`);
      }
      exports2.logTableKeys = logTableKeys;
      function logTableShallow(luaTable) {
        (0, log_1.log)("Logging a Lua table (shallow):", false);
        if (!(0, types_1.isTable)(luaTable)) {
          (0, log_1.log)(`n/a (encountered a variable of type "${typeof luaTable}" instead of a table)`, false);
          return;
        }
        let numElements = 0;
        const indentation = "  ";
        (0, table_1.iterateTableInOrder)(luaTable, (key, value) => {
          (0, log_1.log)(`${indentation}${key} --> ${value}`, false);
          numElements++;
        });
        (0, log_1.log)(`${indentation}The size of the table was: ${numElements}`, false);
      }
      exports2.logTableShallow = logTableShallow;
      function logTearFlags(tearFlags) {
        logFlags(tearFlags, isaac_typescript_definitions_1.TearFlag, "tear");
      }
      exports2.logTearFlags = logTearFlags;
      function logUseFlags(useFlags) {
        logFlags(useFlags, isaac_typescript_definitions_1.UseFlag, "use");
      }
      exports2.logUseFlags = logUseFlags;
      function logUserdata(userdata) {
        if (!(0, types_1.isUserdata)(userdata)) {
          (0, log_1.log)("Userdata: [not userdata]");
          return;
        }
        const metatable = getmetatable(userdata);
        if (metatable === void 0) {
          (0, log_1.log)("Userdata: [no metatable]");
          return;
        }
        const classType = (0, isaacAPIClass_1.getIsaacAPIClassName)(userdata);
        if (classType === void 0) {
          (0, log_1.log)("Userdata: [no class type]");
        } else {
          (0, log_1.log)(`Userdata: ${classType}`);
        }
        logTable(metatable);
      }
      exports2.logUserdata = logUserdata;
      function logVector(vector, name, round = false) {
        if (name === void 0) {
          name = "vector";
        }
        const vectorString = (0, vector_1.vectorToString)(vector, round);
        (0, log_1.log)(`Logging ${name}: ${vectorString}`);
      }
      exports2.logVector = logVector;
    }
  });

  // node_modules/isaacscript-common/dist/functions/merge.js
  var require_merge = __commonJS({
    "node_modules/isaacscript-common/dist/functions/merge.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.merge = void 0;
      var constants_1 = require_constants3();
      var SerializationBrand_1 = require_SerializationBrand();
      var SerializationType_1 = require_SerializationType();
      var serialization_1 = require_serialization();
      var array_1 = require_array();
      var deepCopy_1 = require_deepCopy();
      var log_1 = require_log();
      var serialization_2 = require_serialization2();
      var table_1 = require_table();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function merge(oldObject, newTable, traversalDescription, classConstructors = new LuaMap()) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)(`merge is traversing: ${traversalDescription}`);
        }
        if (!(0, types_1.isTable)(oldObject)) {
          error("The first argument given to the merge function is not a table.");
        }
        if (!(0, types_1.isTable)(newTable)) {
          error("The second argument given to the merge function is not a table.");
        }
        if ((0, array_1.isArray)(oldObject) && (0, array_1.isArray)(newTable)) {
          mergeSerializedArray(oldObject, newTable, traversalDescription, classConstructors);
          return;
        }
        if ((0, tstlClass_1.isTSTLMap)(oldObject) || (0, tstlClass_1.isTSTLSet)(oldObject) || (0, tstlClass_1.isDefaultMap)(oldObject)) {
          mergeSerializedTSTLObject(oldObject, newTable, traversalDescription, classConstructors);
        } else {
          mergeSerializedTable(oldObject, newTable, traversalDescription, classConstructors);
        }
      }
      exports2.merge = merge;
      function mergeSerializedArray(oldArray, newArray, traversalDescription, classConstructors) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)(`merge encountered an array: ${traversalDescription}`);
        }
        (0, table_1.clearTable)(oldArray);
        (0, table_1.iterateTableInOrder)(newArray, (key, value) => {
          const deserializedValue = (0, deepCopy_1.deepCopy)(value, SerializationType_1.SerializationType.DESERIALIZE, traversalDescription, classConstructors);
          oldArray.set(key, deserializedValue);
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
      }
      function mergeSerializedTSTLObject(oldObject, newTable, traversalDescription, classConstructors) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)(`merge encountered a TSTL object: ${traversalDescription}`);
        }
        oldObject.clear();
        const convertStringKeysToNumbers = newTable.has(SerializationBrand_1.SerializationBrand.OBJECT_WITH_NUMBER_KEYS);
        (0, table_1.iterateTableInOrder)(newTable, (key, value) => {
          if ((0, serialization_1.isSerializationBrand)(key)) {
            return;
          }
          let keyToUse = key;
          if (convertStringKeysToNumbers) {
            const numberKey = tonumber(key);
            if (numberKey === void 0) {
              return;
            }
            keyToUse = numberKey;
          }
          if ((0, tstlClass_1.isTSTLMap)(oldObject) || (0, tstlClass_1.isDefaultMap)(oldObject)) {
            const deserializedValue = (0, deepCopy_1.deepCopy)(value, SerializationType_1.SerializationType.DESERIALIZE, traversalDescription, classConstructors);
            oldObject.set(keyToUse, deserializedValue);
          } else if ((0, tstlClass_1.isTSTLSet)(oldObject)) {
            oldObject.add(keyToUse);
          }
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
      }
      function mergeSerializedTable(oldTable, newTable, traversalDescription, classConstructors) {
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)(`merge encountered a Lua table: ${traversalDescription}`);
        }
        (0, table_1.iterateTableInOrder)(newTable, (key, value) => {
          if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
            const valueToPrint = value === "" ? "(empty string)" : `${value}`;
            (0, log_1.log)(`merge is merging: ${traversalDescription} --> ${valueToPrint}`);
          }
          if ((0, serialization_1.isSerializationBrand)(key)) {
            return;
          }
          if ((0, serialization_2.isSerializedIsaacAPIClass)(value)) {
            if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
              (0, log_1.log)("merge found a serialized Isaac API class.");
            }
            const deserializedObject = (0, serialization_2.deserializeIsaacAPIClass)(value);
            oldTable.set(key, deserializedObject);
            return;
          }
          if ((0, types_1.isTable)(value)) {
            let oldValue = oldTable.get(key);
            if (!(0, types_1.isTable)(oldValue)) {
              oldValue = new LuaMap();
              oldTable.set(key, oldValue);
            }
            traversalDescription = (0, utils_1.getTraversalDescription)(key, traversalDescription);
            merge(oldValue, value, traversalDescription, classConstructors);
          } else {
            oldTable.set(key, value);
          }
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/mergeTests.js
  var require_mergeTests = __commonJS({
    "node_modules/isaacscript-common/dist/functions/mergeTests.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.runMergeTests = void 0;
      var DefaultMap_1 = require_DefaultMap();
      var SerializationType_1 = require_SerializationType();
      var deepCopy_1 = require_deepCopy();
      var log_1 = require_log();
      var merge_1 = require_merge();
      var rng_1 = require_rng();
      var serialization_1 = require_serialization2();
      var vector_1 = require_vector();
      function runMergeTests() {
        oldTableHasUpdatedValue();
        newTableHasSameValue();
        oldTableHasUpdatedValueFromNull();
        oldTableHasSerializedIsaacAPIClass();
        oldTableHasFilledChildTable();
        oldTableHasFilledMap();
        oldTableHasFilledDefaultMap();
        oldTableHasVector();
        oldTableHasVectorSerialized();
        oldTableHasRNG();
        oldTableHasRNGSerialized();
        const successText = "All merge tests passed!";
        (0, log_1.logAndPrint)(successText);
      }
      exports2.runMergeTests = runMergeTests;
      function oldTableHasUpdatedValue() {
        const key = "foo";
        const oldValue = "bar";
        const newValue = "baz";
        const oldTable = {
          foo: oldValue
        };
        const newTable = {
          foo: newValue
        };
        (0, merge_1.merge)(oldTable, newTable, "oldTableHasUpdatedValue");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue !== newValue) {
          error(`The old table does not have a value of: ${newValue}`);
        }
      }
      function newTableHasSameValue() {
        const key = "foo";
        const oldValue = "bar";
        const newValue = "baz";
        const oldTable = {
          foo: oldValue
        };
        const newTable = {
          foo: newValue
        };
        (0, merge_1.merge)(oldTable, newTable, "newTableHasSameValue");
        const newTableValue = newTable.get(key);
        if (newTableValue !== newValue) {
          error(`The new table does not have a value of: ${newValue}`);
        }
      }
      function oldTableHasUpdatedValueFromNull() {
        const key = "foo";
        const newValue = "baz";
        const oldTable = {
          foo: null
        };
        const newTable = {
          foo: newValue
        };
        (0, merge_1.merge)(oldTable, newTable, "oldTableHasUpdatedValueFromNull");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue !== newValue) {
          error(`The old table does not have a value of: ${newValue}`);
        }
      }
      function oldTableHasSerializedIsaacAPIClass() {
        const x = 50;
        const y = 60;
        const vector = Vector(x, y);
        const vectorSerialized = (0, vector_1.serializeVector)(vector);
        if (!(0, serialization_1.isSerializedIsaacAPIClass)(vectorSerialized)) {
          error('The "isSerializedIsaacAPIClass" function says that a serialized vector is not serialized.');
        }
      }
      function oldTableHasFilledChildTable() {
        const key = "foo";
        const newValue = "baz";
        const oldTable = {
          foo: null
        };
        const foo = {
          bar: newValue
        };
        const newTable = {
          foo
        };
        (0, merge_1.merge)(oldTable, newTable, "oldTableHasFilledChildTable");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue === void 0) {
          error(`The old table's key of "${key}" was not filled.`);
        }
        if (oldTableValue.bar !== newValue) {
          error(`The old table's key of "bar" was not filled.`);
        }
      }
      function oldTableHasFilledMap() {
        const fakeV = {
          run: {
            myMap: /* @__PURE__ */ new Map()
          }
        };
        const saveData = {
          run: {
            myMap: /* @__PURE__ */ new Map([
              ["foo1", "bar1"],
              ["foo2", "bar2"],
              ["foo3", "bar3"]
            ])
          }
        };
        const serializedSaveData = (0, deepCopy_1.deepCopy)(saveData, SerializationType_1.SerializationType.SERIALIZE);
        (0, merge_1.merge)(fakeV, serializedSaveData, "oldTableHasFilledMap");
        const expectedSize = 3;
        if (fakeV.run.myMap.size !== expectedSize) {
          error(`The size of the merged map was equal to ${fakeV.run.myMap.size}, but it should be equal to: ${expectedSize}`);
        }
        {
          const key = "foo1";
          const expectedValue = "bar1";
          const value = fakeV.run.myMap.get(key);
          if (value !== expectedValue) {
            error(`The old table's map key of "${key}" was not equal to "${expectedValue}" and was instead equal to: ${value}`);
          }
        }
        {
          const key = "foo2";
          const expectedValue = "bar2";
          const value = fakeV.run.myMap.get(key);
          if (value !== expectedValue) {
            error(`The old table's map key of "${key}" was not equal to "${expectedValue}" and was instead equal to: ${value}`);
          }
        }
        {
          const key = "foo3";
          const expectedValue = "bar3";
          const value = fakeV.run.myMap.get(key);
          if (value !== expectedValue) {
            error(`The old table's map key of "${key}" was not equal to "${expectedValue}" and was instead equal to: ${value}`);
          }
        }
      }
      function oldTableHasFilledDefaultMap() {
        const fakeV = {
          run: {
            myDefaultMap: new DefaultMap_1.DefaultMap("default")
          }
        };
        const saveData = {
          run: {
            myDefaultMap: new DefaultMap_1.DefaultMap("default", [
              ["foo1", "bar1"],
              ["foo2", "bar2"],
              ["foo3", "bar3"]
            ])
          }
        };
        const serializedSaveData = (0, deepCopy_1.deepCopy)(saveData, SerializationType_1.SerializationType.SERIALIZE);
        (0, merge_1.merge)(fakeV, serializedSaveData, "oldTableHasFilledDefaultMap");
        const expectedSize = 3;
        if (fakeV.run.myDefaultMap.size !== expectedSize) {
          error(`The size of the merged default map was equal to ${fakeV.run.myDefaultMap.size}, but it should be equal to: ${expectedSize}`);
        }
        {
          const key = "foo1";
          const expectedValue = "bar1";
          const value = fakeV.run.myDefaultMap.get(key);
          if (value !== expectedValue) {
            error(`The old table's default map key of "${key}" was not equal to "${expectedValue}" and was instead equal to: ${value}`);
          }
        }
        {
          const key = "foo2";
          const expectedValue = "bar2";
          const value = fakeV.run.myDefaultMap.get(key);
          if (value !== expectedValue) {
            error(`The old table's default map key of "${key}" was not equal to "${expectedValue}" and was instead equal to: ${value}`);
          }
        }
        {
          const key = "foo3";
          const expectedValue = "bar3";
          const value = fakeV.run.myDefaultMap.get(key);
          if (value !== expectedValue) {
            error(`The old table's default map key of "${key}" was not equal to "${expectedValue}" and was instead equal to: ${value}`);
          }
        }
      }
      function oldTableHasVector() {
        const key = "foo";
        const x = 50;
        const y = 60;
        const newValue = Vector(x, y);
        const oldTable = {
          foo: null
        };
        const foo = {
          bar: newValue
        };
        const newTable = {
          foo
        };
        (0, merge_1.merge)(oldTable, newTable, "oldTableHasVector");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue === void 0) {
          error(`The old table's key of "${key}" was not filled.`);
        }
        if (oldTableValue.bar.X !== x) {
          error(`The old table's value for "x" does not match: ${x}`);
        }
        if (oldTableValue.bar.Y !== y) {
          error(`The old table's value for "y" does not match: ${y}`);
        }
        if (!(0, vector_1.isVector)(oldTableValue.bar)) {
          error("The old table's value is not a Vector object.");
        }
      }
      function oldTableHasVectorSerialized() {
        const key = "foo";
        const x = 50;
        const y = 60;
        const newValue = Vector(x, y);
        const oldTable = {
          foo: null
        };
        const foo = {
          bar: newValue
        };
        const newTable = {
          foo
        };
        const newTableSerialized = (0, deepCopy_1.deepCopy)(newTable, SerializationType_1.SerializationType.SERIALIZE, "oldTableHasVectorSerialized");
        (0, merge_1.merge)(oldTable, newTableSerialized, "oldTableHasVectorSerialized");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue === void 0) {
          error(`The old table's key of "${key}" was not filled.`);
        }
        if (oldTableValue.bar.X !== x) {
          error(`The old table's value for "x" does not match: ${x}`);
        }
        if (oldTableValue.bar.Y !== y) {
          error(`The old table's value for "y" does not match: ${y}`);
        }
        if (!(0, vector_1.isVector)(oldTableValue.bar)) {
          error("The old table's value is not a Vector object (during the serialized test).");
        }
      }
      function oldTableHasRNG() {
        const key = "foo";
        const seed = 50;
        const newValue = (0, rng_1.newRNG)(seed);
        const oldTable = {
          foo: null
        };
        const foo = {
          bar: newValue
        };
        const newTable = {
          foo
        };
        (0, merge_1.merge)(oldTable, newTable, "oldTableHasRNG");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue === void 0) {
          error(`The old table's key of "${key}" was not filled.`);
        }
        if (!(0, rng_1.isRNG)(oldTableValue.bar)) {
          error("The old table's value is not an RNG object.");
        }
        const newSeed = oldTableValue.bar.GetSeed();
        if (newSeed !== seed) {
          error(`The old table's seed not match: ${seed}`);
        }
      }
      function oldTableHasRNGSerialized() {
        const key = "foo";
        const seed = 50;
        const newValue = (0, rng_1.newRNG)(seed);
        const oldTable = {
          foo: null
        };
        const foo = {
          bar: newValue
        };
        const newTable = {
          foo
        };
        const newTableSerialized = (0, deepCopy_1.deepCopy)(newTable, SerializationType_1.SerializationType.SERIALIZE, "oldTableHasRNGSerialized");
        (0, merge_1.merge)(oldTable, newTableSerialized, "oldTableHasRNGSerialized");
        const oldTableValue = oldTable.get(key);
        if (oldTableValue === void 0) {
          error(`The old table's key of "${key}" was not filled.`);
        }
        if (!(0, rng_1.isRNG)(oldTableValue.bar)) {
          error("The old table's value is not an RNG object (during the serialized test).");
        }
        const newSeed = oldTableValue.bar.GetSeed();
        if (newSeed !== seed) {
          error(`The old table's seed not match: ${seed}`);
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/run.js
  var require_run = __commonJS({
    "node_modules/isaacscript-common/dist/functions/run.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setUnseeded = exports2.setRunSeed = exports2.restart = exports2.onVictoryLap = exports2.onSetSeed = exports2.getSeedEffects = exports2.anySeedEffectEnabled = exports2.anyEasterEggEnabled = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var characters_1 = require_characters();
      var log_1 = require_log();
      var types_1 = require_types();
      function anyEasterEggEnabled(exceptions) {
        return anySeedEffectEnabled(exceptions);
      }
      exports2.anyEasterEggEnabled = anyEasterEggEnabled;
      function anySeedEffectEnabled(exceptions) {
        const seeds = cachedClasses_1.game.GetSeeds();
        if (exceptions === void 0) {
          const numSeedEffects = seeds.CountSeedEffects();
          return numSeedEffects > 0;
        }
        const exceptionsSet = new Set(exceptions);
        return cachedEnumValues_1.SEED_EFFECTS.some((seedEffect) => seeds.HasSeedEffect(seedEffect) && !exceptionsSet.has(seedEffect));
      }
      exports2.anySeedEffectEnabled = anySeedEffectEnabled;
      function getSeedEffects() {
        const seeds = cachedClasses_1.game.GetSeeds();
        return cachedEnumValues_1.SEED_EFFECTS.filter((seedEffect) => seedEffect !== isaac_typescript_definitions_1.SeedEffect.NORMAL && seeds.HasSeedEffect(seedEffect));
      }
      exports2.getSeedEffects = getSeedEffects;
      function onSetSeed() {
        const seeds = cachedClasses_1.game.GetSeeds();
        const customRun = seeds.IsCustomRun();
        const challenge = Isaac.GetChallenge();
        return challenge === isaac_typescript_definitions_1.Challenge.NULL && customRun;
      }
      exports2.onSetSeed = onSetSeed;
      function onVictoryLap() {
        const numVictoryLaps = cachedClasses_1.game.GetVictoryLap();
        return numVictoryLaps > 0;
      }
      exports2.onVictoryLap = onVictoryLap;
      function restart(character) {
        if (character === void 0) {
          const command2 = "restart";
          (0, log_1.log)(`Restarting the run with a console command of: ${command2}`);
          Isaac.ExecuteCommand(command2);
          return;
        }
        if (character < isaac_typescript_definitions_1.PlayerType.ISAAC) {
          error(`Restarting as a character of ${character} would crash the game.`);
        }
        const command = `restart ${character}`;
        const characterName = (0, characters_1.getCharacterName)(character);
        (0, log_1.log)(`Restarting the run as ${characterName} (${character}) with a console command of: ${command}`);
        Isaac.ExecuteCommand(command);
      }
      exports2.restart = restart;
      function setRunSeed(startSeedOrStartSeedString) {
        const startSeedString = (0, types_1.isString)(startSeedOrStartSeedString) ? startSeedOrStartSeedString : Seeds.Seed2String(startSeedOrStartSeedString);
        const command = `seed ${startSeedString}`;
        (0, log_1.log)(`Restarting the run to set a seed with a console command of: ${command}`);
        Isaac.ExecuteCommand(command);
      }
      exports2.setRunSeed = setRunSeed;
      function setUnseeded() {
        const seeds = cachedClasses_1.game.GetSeeds();
        seeds.Reset();
        seeds.Restart(isaac_typescript_definitions_1.Challenge.NULL);
      }
      exports2.setUnseeded = setUnseeded;
    }
  });

  // node_modules/isaacscript-common/dist/maps/cardNameToTypeMap.js
  var require_cardNameToTypeMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/cardNameToTypeMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CARD_NAME_TO_TYPE_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.CARD_NAME_TO_TYPE_MAP = new ReadonlyMap_1.ReadonlyMap([
        ["fool", isaac_typescript_definitions_1.CardType.FOOL],
        ["magician", isaac_typescript_definitions_1.CardType.MAGICIAN],
        ["mag", isaac_typescript_definitions_1.CardType.MAGICIAN],
        ["highPriestess", isaac_typescript_definitions_1.CardType.HIGH_PRIESTESS],
        ["priestess", isaac_typescript_definitions_1.CardType.HIGH_PRIESTESS],
        ["priest", isaac_typescript_definitions_1.CardType.HIGH_PRIESTESS],
        ["hp", isaac_typescript_definitions_1.CardType.HIGH_PRIESTESS],
        ["empress", isaac_typescript_definitions_1.CardType.EMPRESS],
        ["emperor", isaac_typescript_definitions_1.CardType.EMPEROR],
        ["emp", isaac_typescript_definitions_1.CardType.EMPEROR],
        ["hierophant", isaac_typescript_definitions_1.CardType.HIEROPHANT],
        ["hi", isaac_typescript_definitions_1.CardType.HIEROPHANT],
        ["lovers", isaac_typescript_definitions_1.CardType.LOVERS],
        ["chariot", isaac_typescript_definitions_1.CardType.CHARIOT],
        ["justice", isaac_typescript_definitions_1.CardType.JUSTICE],
        ["hermit", isaac_typescript_definitions_1.CardType.HERMIT],
        ["wheelOfFortune", isaac_typescript_definitions_1.CardType.WHEEL_OF_FORTUNE],
        ["wheel", isaac_typescript_definitions_1.CardType.WHEEL_OF_FORTUNE],
        ["fortune", isaac_typescript_definitions_1.CardType.WHEEL_OF_FORTUNE],
        ["strength", isaac_typescript_definitions_1.CardType.STRENGTH],
        ["str", isaac_typescript_definitions_1.CardType.STRENGTH],
        ["hangedMan", isaac_typescript_definitions_1.CardType.HANGED_MAN],
        ["hanged", isaac_typescript_definitions_1.CardType.HANGED_MAN],
        ["death", isaac_typescript_definitions_1.CardType.DEATH],
        ["temperance", isaac_typescript_definitions_1.CardType.TEMPERANCE],
        ["devil", isaac_typescript_definitions_1.CardType.DEVIL],
        ["tower", isaac_typescript_definitions_1.CardType.TOWER],
        ["stars", isaac_typescript_definitions_1.CardType.STARS],
        ["moon", isaac_typescript_definitions_1.CardType.MOON],
        ["sun", isaac_typescript_definitions_1.CardType.SUN],
        ["judgement", isaac_typescript_definitions_1.CardType.JUDGEMENT],
        ["judge", isaac_typescript_definitions_1.CardType.JUDGEMENT],
        ["world", isaac_typescript_definitions_1.CardType.WORLD],
        ["2OfClubs", isaac_typescript_definitions_1.CardType.TWO_OF_CLUBS],
        ["2Clubs", isaac_typescript_definitions_1.CardType.TWO_OF_CLUBS],
        ["2OfDiamonds", isaac_typescript_definitions_1.CardType.TWO_OF_DIAMONDS],
        ["2Diamonds", isaac_typescript_definitions_1.CardType.TWO_OF_DIAMONDS],
        ["2OfSpades", isaac_typescript_definitions_1.CardType.TWO_OF_SPADES],
        ["2Spades", isaac_typescript_definitions_1.CardType.TWO_OF_SPADES],
        ["2OfHearts", isaac_typescript_definitions_1.CardType.TWO_OF_HEARTS],
        ["2Hearts", isaac_typescript_definitions_1.CardType.TWO_OF_HEARTS],
        ["aceOfClubs", isaac_typescript_definitions_1.CardType.ACE_OF_CLUBS],
        ["aceClubs", isaac_typescript_definitions_1.CardType.ACE_OF_CLUBS],
        ["aceOfDiamonds", isaac_typescript_definitions_1.CardType.ACE_OF_DIAMONDS],
        ["aceDiamonds", isaac_typescript_definitions_1.CardType.ACE_OF_DIAMONDS],
        ["aceOfSpades", isaac_typescript_definitions_1.CardType.ACE_OF_SPADES],
        ["aceSpades", isaac_typescript_definitions_1.CardType.ACE_OF_SPADES],
        ["aceOfHearts", isaac_typescript_definitions_1.CardType.ACE_OF_HEARTS],
        ["aceHearts", isaac_typescript_definitions_1.CardType.ACE_OF_HEARTS],
        ["joker", isaac_typescript_definitions_1.CardType.JOKER],
        ["hagalaz", isaac_typescript_definitions_1.CardType.RUNE_HAGALAZ],
        ["destruction", isaac_typescript_definitions_1.CardType.RUNE_HAGALAZ],
        ["jera", isaac_typescript_definitions_1.CardType.RUNE_JERA],
        ["abundance", isaac_typescript_definitions_1.CardType.RUNE_JERA],
        ["ehwaz", isaac_typescript_definitions_1.CardType.RUNE_EHWAZ],
        ["passage", isaac_typescript_definitions_1.CardType.RUNE_EHWAZ],
        ["dagaz", isaac_typescript_definitions_1.CardType.RUNE_DAGAZ],
        ["purity", isaac_typescript_definitions_1.CardType.RUNE_DAGAZ],
        ["ansuz", isaac_typescript_definitions_1.CardType.RUNE_ANSUZ],
        ["vision", isaac_typescript_definitions_1.CardType.RUNE_ANSUZ],
        ["perthro", isaac_typescript_definitions_1.CardType.RUNE_PERTHRO],
        ["change", isaac_typescript_definitions_1.CardType.RUNE_PERTHRO],
        ["berkano", isaac_typescript_definitions_1.CardType.RUNE_BERKANO],
        ["companionship", isaac_typescript_definitions_1.CardType.RUNE_BERKANO],
        ["algiz", isaac_typescript_definitions_1.CardType.RUNE_ALGIZ],
        ["resistance", isaac_typescript_definitions_1.CardType.RUNE_ALGIZ],
        ["shield", isaac_typescript_definitions_1.CardType.RUNE_ALGIZ],
        ["blankRune", isaac_typescript_definitions_1.CardType.RUNE_BLANK],
        ["blackRune", isaac_typescript_definitions_1.CardType.RUNE_BLACK],
        ["chaos", isaac_typescript_definitions_1.CardType.CHAOS],
        ["credit", isaac_typescript_definitions_1.CardType.CREDIT],
        ["rules", isaac_typescript_definitions_1.CardType.RULES],
        ["againstHumanity", isaac_typescript_definitions_1.CardType.AGAINST_HUMANITY],
        ["humanity", isaac_typescript_definitions_1.CardType.AGAINST_HUMANITY],
        ["suicideKing", isaac_typescript_definitions_1.CardType.SUICIDE_KING],
        ["suicide", isaac_typescript_definitions_1.CardType.SUICIDE_KING],
        ["getOutOfJailFree", isaac_typescript_definitions_1.CardType.GET_OUT_OF_JAIL_FREE],
        ["jail", isaac_typescript_definitions_1.CardType.GET_OUT_OF_JAIL_FREE],
        ["?", isaac_typescript_definitions_1.CardType.QUESTION_MARK],
        ["diceShard", isaac_typescript_definitions_1.CardType.DICE_SHARD],
        ["shard", isaac_typescript_definitions_1.CardType.DICE_SHARD],
        ["emergencyContact", isaac_typescript_definitions_1.CardType.EMERGENCY_CONTACT],
        ["contact", isaac_typescript_definitions_1.CardType.EMERGENCY_CONTACT],
        ["holy", isaac_typescript_definitions_1.CardType.HOLY],
        ["hugeGrowth", isaac_typescript_definitions_1.CardType.HUGE_GROWTH],
        ["growth", isaac_typescript_definitions_1.CardType.HUGE_GROWTH],
        ["ancientRecall", isaac_typescript_definitions_1.CardType.ANCIENT_RECALL],
        ["recall", isaac_typescript_definitions_1.CardType.ANCIENT_RECALL],
        ["eraWalk", isaac_typescript_definitions_1.CardType.ERA_WALK],
        ["walk", isaac_typescript_definitions_1.CardType.ERA_WALK],
        ["runeShard", isaac_typescript_definitions_1.CardType.RUNE_SHARD],
        ["shard", isaac_typescript_definitions_1.CardType.RUNE_SHARD],
        ["fool?", isaac_typescript_definitions_1.CardType.REVERSE_FOOL],
        ["magician?", isaac_typescript_definitions_1.CardType.REVERSE_MAGICIAN],
        ["magi?", isaac_typescript_definitions_1.CardType.REVERSE_MAGICIAN],
        ["mag?", isaac_typescript_definitions_1.CardType.REVERSE_MAGICIAN],
        ["highPriestess?", isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS],
        ["high?", isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS],
        ["hi?", isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS],
        ["priestess?", isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS],
        ["priest?", isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS],
        ["hp?", isaac_typescript_definitions_1.CardType.REVERSE_HIGH_PRIESTESS],
        ["empress?", isaac_typescript_definitions_1.CardType.REVERSE_EMPRESS],
        ["emperor?", isaac_typescript_definitions_1.CardType.REVERSE_EMPEROR],
        ["emp?", isaac_typescript_definitions_1.CardType.REVERSE_EMPEROR],
        ["hierophant?", isaac_typescript_definitions_1.CardType.REVERSE_HIEROPHANT],
        ["hiero?", isaac_typescript_definitions_1.CardType.REVERSE_HIEROPHANT],
        ["lovers?", isaac_typescript_definitions_1.CardType.REVERSE_LOVERS],
        ["chariot?", isaac_typescript_definitions_1.CardType.REVERSE_CHARIOT],
        ["justice?", isaac_typescript_definitions_1.CardType.REVERSE_JUSTICE],
        ["hermit?", isaac_typescript_definitions_1.CardType.REVERSE_HERMIT],
        ["wheelOfFortune?", isaac_typescript_definitions_1.CardType.REVERSE_WHEEL_OF_FORTUNE],
        ["wheel?", isaac_typescript_definitions_1.CardType.REVERSE_WHEEL_OF_FORTUNE],
        ["fortune?", isaac_typescript_definitions_1.CardType.REVERSE_WHEEL_OF_FORTUNE],
        ["strength?", isaac_typescript_definitions_1.CardType.REVERSE_STRENGTH],
        ["str?", isaac_typescript_definitions_1.CardType.REVERSE_STRENGTH],
        ["hangedMan?", isaac_typescript_definitions_1.CardType.REVERSE_HANGED_MAN],
        ["hanged?", isaac_typescript_definitions_1.CardType.REVERSE_HANGED_MAN],
        ["death?", isaac_typescript_definitions_1.CardType.REVERSE_DEATH],
        ["temperance?", isaac_typescript_definitions_1.CardType.REVERSE_TEMPERANCE],
        ["devil?", isaac_typescript_definitions_1.CardType.REVERSE_DEVIL],
        ["tower?", isaac_typescript_definitions_1.CardType.REVERSE_TOWER],
        ["stars?", isaac_typescript_definitions_1.CardType.REVERSE_STARS],
        ["moon?", isaac_typescript_definitions_1.CardType.REVERSE_MOON],
        ["sun?", isaac_typescript_definitions_1.CardType.REVERSE_SUN],
        ["judgement?", isaac_typescript_definitions_1.CardType.REVERSE_JUDGEMENT],
        ["judge?", isaac_typescript_definitions_1.CardType.REVERSE_JUDGEMENT],
        ["world?", isaac_typescript_definitions_1.CardType.REVERSE_WORLD],
        ["crackedKey", isaac_typescript_definitions_1.CardType.CRACKED_KEY],
        ["key", isaac_typescript_definitions_1.CardType.CRACKED_KEY],
        ["queenOfHearts", isaac_typescript_definitions_1.CardType.QUEEN_OF_HEARTS],
        ["queenHearts", isaac_typescript_definitions_1.CardType.QUEEN_OF_HEARTS],
        ["wildcard", isaac_typescript_definitions_1.CardType.WILD],
        ["soulOfIsaac", isaac_typescript_definitions_1.CardType.SOUL_OF_ISAAC],
        ["soulIsaac", isaac_typescript_definitions_1.CardType.SOUL_OF_ISAAC],
        ["isaac", isaac_typescript_definitions_1.CardType.SOUL_OF_ISAAC],
        ["soulOfMagdalene", isaac_typescript_definitions_1.CardType.SOUL_OF_MAGDALENE],
        ["soulMagdalene", isaac_typescript_definitions_1.CardType.SOUL_OF_MAGDALENE],
        ["magdalene", isaac_typescript_definitions_1.CardType.SOUL_OF_MAGDALENE],
        ["soulOfCain", isaac_typescript_definitions_1.CardType.SOUL_OF_CAIN],
        ["soulCain", isaac_typescript_definitions_1.CardType.SOUL_OF_CAIN],
        ["cain", isaac_typescript_definitions_1.CardType.SOUL_OF_CAIN],
        ["soulOfJudas", isaac_typescript_definitions_1.CardType.SOUL_OF_JUDAS],
        ["soulJudas", isaac_typescript_definitions_1.CardType.SOUL_OF_JUDAS],
        ["judas", isaac_typescript_definitions_1.CardType.SOUL_OF_JUDAS],
        ["soulOf???", isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY],
        ["soul???", isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY],
        ["???", isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY],
        ["soulOfBlueBaby", isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY],
        ["soulBlueBaby", isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY],
        ["blueBaby", isaac_typescript_definitions_1.CardType.SOUL_OF_BLUE_BABY],
        ["soulOfEve", isaac_typescript_definitions_1.CardType.SOUL_OF_EVE],
        ["soulEve", isaac_typescript_definitions_1.CardType.SOUL_OF_EVE],
        ["eve", isaac_typescript_definitions_1.CardType.SOUL_OF_EVE],
        ["soulOfSamson", isaac_typescript_definitions_1.CardType.SOUL_OF_SAMSON],
        ["soulSamson", isaac_typescript_definitions_1.CardType.SOUL_OF_SAMSON],
        ["samson", isaac_typescript_definitions_1.CardType.SOUL_OF_SAMSON],
        ["soulOfAzazel", isaac_typescript_definitions_1.CardType.SOUL_OF_AZAZEL],
        ["soulAzazel", isaac_typescript_definitions_1.CardType.SOUL_OF_AZAZEL],
        ["azazel", isaac_typescript_definitions_1.CardType.SOUL_OF_AZAZEL],
        ["soulOfLazarus", isaac_typescript_definitions_1.CardType.SOUL_OF_LAZARUS],
        ["soulLazarus", isaac_typescript_definitions_1.CardType.SOUL_OF_LAZARUS],
        ["lazarus", isaac_typescript_definitions_1.CardType.SOUL_OF_LAZARUS],
        ["soulOfEden", isaac_typescript_definitions_1.CardType.SOUL_OF_EDEN],
        ["soulEden", isaac_typescript_definitions_1.CardType.SOUL_OF_EDEN],
        ["eden", isaac_typescript_definitions_1.CardType.SOUL_OF_EDEN],
        ["soulOfTheLost", isaac_typescript_definitions_1.CardType.SOUL_OF_LOST],
        ["soulTheLost", isaac_typescript_definitions_1.CardType.SOUL_OF_LOST],
        ["theLost", isaac_typescript_definitions_1.CardType.SOUL_OF_LOST],
        ["soulOfLost", isaac_typescript_definitions_1.CardType.SOUL_OF_LOST],
        ["soulLost", isaac_typescript_definitions_1.CardType.SOUL_OF_LOST],
        ["lost", isaac_typescript_definitions_1.CardType.SOUL_OF_LOST],
        ["soulOfLilith", isaac_typescript_definitions_1.CardType.SOUL_OF_LILITH],
        ["soulLilith", isaac_typescript_definitions_1.CardType.SOUL_OF_LILITH],
        ["lilith", isaac_typescript_definitions_1.CardType.SOUL_OF_LILITH],
        ["soulOfTheKeeper", isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER],
        ["soulTheKeeper", isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER],
        ["theKeeper", isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER],
        ["soulOfKeeper", isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER],
        ["soulKeeper", isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER],
        ["keeper", isaac_typescript_definitions_1.CardType.SOUL_OF_KEEPER],
        ["soulOfApollyon", isaac_typescript_definitions_1.CardType.SOUL_OF_APOLLYON],
        ["soulApollyon", isaac_typescript_definitions_1.CardType.SOUL_OF_APOLLYON],
        ["apollyon", isaac_typescript_definitions_1.CardType.SOUL_OF_APOLLYON],
        ["soulOfTheForgotten", isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN],
        ["soulTheForgotten", isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN],
        ["theForgotten", isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN],
        ["soulOfForgotten", isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN],
        ["soulForgotten", isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN],
        ["forgotten", isaac_typescript_definitions_1.CardType.SOUL_OF_FORGOTTEN],
        ["soulOfBethany", isaac_typescript_definitions_1.CardType.SOUL_OF_BETHANY],
        ["soulBethany", isaac_typescript_definitions_1.CardType.SOUL_OF_BETHANY],
        ["bethany", isaac_typescript_definitions_1.CardType.SOUL_OF_BETHANY],
        ["soulOfJacobAndEsau", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["soulJacobAndEsau", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["jacobAndEsau", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["soulOfJacob&Esau", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["soulJacob&Esau", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["jacob&Esau", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["soulOfJacob", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["soulJacob", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU],
        ["jacob", isaac_typescript_definitions_1.CardType.SOUL_OF_JACOB_AND_ESAU]
        // 97
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/characterNameToTypeMap.js
  var require_characterNameToTypeMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/characterNameToTypeMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHARACTER_NAME_TO_TYPE_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.CHARACTER_NAME_TO_TYPE_MAP = new ReadonlyMap_1.ReadonlyMap([
        ["isaac", isaac_typescript_definitions_1.PlayerType.ISAAC],
        ["magdalene", isaac_typescript_definitions_1.PlayerType.MAGDALENE],
        ["maggy", isaac_typescript_definitions_1.PlayerType.MAGDALENE],
        ["cain", isaac_typescript_definitions_1.PlayerType.CAIN],
        ["judas", isaac_typescript_definitions_1.PlayerType.JUDAS],
        ["blueBaby", isaac_typescript_definitions_1.PlayerType.BLUE_BABY],
        ["bb", isaac_typescript_definitions_1.PlayerType.BLUE_BABY],
        ["eve", isaac_typescript_definitions_1.PlayerType.EVE],
        ["samson", isaac_typescript_definitions_1.PlayerType.SAMSON],
        ["azazel", isaac_typescript_definitions_1.PlayerType.AZAZEL],
        ["lazarus", isaac_typescript_definitions_1.PlayerType.LAZARUS],
        // Needed so that "laz2" does not take precedence over "lazarus".
        ["laz", isaac_typescript_definitions_1.PlayerType.LAZARUS],
        ["eden", isaac_typescript_definitions_1.PlayerType.EDEN],
        ["theLost", isaac_typescript_definitions_1.PlayerType.LOST],
        ["lost", isaac_typescript_definitions_1.PlayerType.LOST],
        ["lazarus2", isaac_typescript_definitions_1.PlayerType.LAZARUS_2],
        ["laz2", isaac_typescript_definitions_1.PlayerType.LAZARUS_2],
        ["darkJudas", isaac_typescript_definitions_1.PlayerType.DARK_JUDAS],
        ["dJudas", isaac_typescript_definitions_1.PlayerType.DARK_JUDAS],
        ["blackJudas", isaac_typescript_definitions_1.PlayerType.DARK_JUDAS],
        ["bJudas", isaac_typescript_definitions_1.PlayerType.DARK_JUDAS],
        ["lilith", isaac_typescript_definitions_1.PlayerType.LILITH],
        ["keeper", isaac_typescript_definitions_1.PlayerType.KEEPER],
        ["apollyon", isaac_typescript_definitions_1.PlayerType.APOLLYON],
        ["theForgotten", isaac_typescript_definitions_1.PlayerType.FORGOTTEN],
        ["forgotten", isaac_typescript_definitions_1.PlayerType.FORGOTTEN],
        ["theSoul", isaac_typescript_definitions_1.PlayerType.SOUL],
        ["soul", isaac_typescript_definitions_1.PlayerType.SOUL],
        ["bethany", isaac_typescript_definitions_1.PlayerType.BETHANY],
        ["jacob", isaac_typescript_definitions_1.PlayerType.JACOB],
        ["esau", isaac_typescript_definitions_1.PlayerType.ESAU],
        ["taintedIsaac", isaac_typescript_definitions_1.PlayerType.ISAAC_B],
        ["tIsaac", isaac_typescript_definitions_1.PlayerType.ISAAC_B],
        ["taintedMagdalene", isaac_typescript_definitions_1.PlayerType.MAGDALENE_B],
        ["tMagdalene", isaac_typescript_definitions_1.PlayerType.MAGDALENE_B],
        ["taintedMaggy", isaac_typescript_definitions_1.PlayerType.MAGDALENE_B],
        ["tMaggy", isaac_typescript_definitions_1.PlayerType.MAGDALENE_B],
        ["taintedCain", isaac_typescript_definitions_1.PlayerType.CAIN_B],
        ["tCain", isaac_typescript_definitions_1.PlayerType.CAIN_B],
        ["taintedJudas", isaac_typescript_definitions_1.PlayerType.JUDAS_B],
        ["tJudas", isaac_typescript_definitions_1.PlayerType.JUDAS_B],
        ["taintedBlueBaby", isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B],
        ["tBlueBaby", isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B],
        ["tbb", isaac_typescript_definitions_1.PlayerType.BLUE_BABY_B],
        ["taintedEve", isaac_typescript_definitions_1.PlayerType.EVE_B],
        ["tEve", isaac_typescript_definitions_1.PlayerType.EVE_B],
        ["taintedSamson", isaac_typescript_definitions_1.PlayerType.SAMSON_B],
        ["tSamson", isaac_typescript_definitions_1.PlayerType.SAMSON_B],
        ["taintedAzazel", isaac_typescript_definitions_1.PlayerType.AZAZEL_B],
        ["tAzazel", isaac_typescript_definitions_1.PlayerType.AZAZEL_B],
        ["taintedLazarus", isaac_typescript_definitions_1.PlayerType.LAZARUS_B],
        ["tLazarus", isaac_typescript_definitions_1.PlayerType.LAZARUS_B],
        ["taintedLaz", isaac_typescript_definitions_1.PlayerType.LAZARUS_B],
        ["tLaz", isaac_typescript_definitions_1.PlayerType.LAZARUS_B],
        ["taintedEden", isaac_typescript_definitions_1.PlayerType.EDEN_B],
        ["tEden", isaac_typescript_definitions_1.PlayerType.EDEN_B],
        ["taintedLost", isaac_typescript_definitions_1.PlayerType.LOST_B],
        ["tLost", isaac_typescript_definitions_1.PlayerType.LOST_B],
        ["taintedLilith", isaac_typescript_definitions_1.PlayerType.LILITH_B],
        ["tLilith", isaac_typescript_definitions_1.PlayerType.LILITH_B],
        ["taintedKeeper", isaac_typescript_definitions_1.PlayerType.KEEPER_B],
        ["tKeeper", isaac_typescript_definitions_1.PlayerType.KEEPER_B],
        ["taintedApollyon", isaac_typescript_definitions_1.PlayerType.APOLLYON_B],
        ["tApollyon", isaac_typescript_definitions_1.PlayerType.APOLLYON_B],
        ["taintedForgotten", isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B],
        ["tForgotten", isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B],
        ["taintedBethany", isaac_typescript_definitions_1.PlayerType.BETHANY_B],
        ["tBethany", isaac_typescript_definitions_1.PlayerType.BETHANY_B],
        ["taintedJacob", isaac_typescript_definitions_1.PlayerType.JACOB_B],
        ["tJacob", isaac_typescript_definitions_1.PlayerType.JACOB_B],
        ["taintedLazarusDead", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["tLazarusDead", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["taintedLazDead", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["tLazDead", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["deadTaintedLazarus", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["deadTLazarus", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["deadTaintedLaz", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["deadTLaz", isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B],
        ["taintedJacobGhost", isaac_typescript_definitions_1.PlayerType.JACOB_2_B],
        ["tJacobGhost", isaac_typescript_definitions_1.PlayerType.JACOB_2_B],
        ["taintedSoul", isaac_typescript_definitions_1.PlayerType.SOUL_B],
        ["tSoul", isaac_typescript_definitions_1.PlayerType.SOUL_B]
        // 40
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/collectibleNameToTypeMap.js
  var require_collectibleNameToTypeMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/collectibleNameToTypeMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.COLLECTIBLE_NAME_TO_TYPE_MAP = void 0;
      var string_1 = require_string();
      var collectibleNames_1 = require_collectibleNames();
      exports2.COLLECTIBLE_NAME_TO_TYPE_MAP = (() => {
        const collectibleNameToTypeMap = /* @__PURE__ */ new Map();
        for (const [collectibleTypeString, name] of Object.entries(collectibleNames_1.COLLECTIBLE_NAMES)) {
          const collectibleType = collectibleTypeString;
          const simpleString = (0, string_1.removeNonAlphanumericCharacters)(name);
          collectibleNameToTypeMap.set(simpleString, collectibleType);
        }
        return collectibleNameToTypeMap;
      })();
    }
  });

  // node_modules/isaacscript-common/dist/maps/pillNameToEffectMap.js
  var require_pillNameToEffectMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/pillNameToEffectMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PILL_NAME_TO_EFFECT_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.PILL_NAME_TO_EFFECT_MAP = new ReadonlyMap_1.ReadonlyMap([
        ["badGas", isaac_typescript_definitions_1.PillEffect.BAD_GAS],
        ["gas", isaac_typescript_definitions_1.PillEffect.BAD_GAS],
        ["badTrip", isaac_typescript_definitions_1.PillEffect.BAD_TRIP],
        ["trip", isaac_typescript_definitions_1.PillEffect.BAD_TRIP],
        ["ballsOfSteel", isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL],
        ["ballsSteel", isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL],
        ["steel", isaac_typescript_definitions_1.PillEffect.BALLS_OF_STEEL],
        ["bombsAreKey", isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS],
        ["bombsKey", isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS],
        ["key", isaac_typescript_definitions_1.PillEffect.BOMBS_ARE_KEYS],
        ["explosiveDiarrhea", isaac_typescript_definitions_1.PillEffect.EXPLOSIVE_DIARRHEA],
        ["diarrhea", isaac_typescript_definitions_1.PillEffect.EXPLOSIVE_DIARRHEA],
        ["fullHealth", isaac_typescript_definitions_1.PillEffect.FULL_HEALTH],
        ["healthDown", isaac_typescript_definitions_1.PillEffect.HEALTH_DOWN],
        ["healthUp", isaac_typescript_definitions_1.PillEffect.HEALTH_UP],
        ["iFoundPills", isaac_typescript_definitions_1.PillEffect.I_FOUND_PILLS],
        ["foundPills", isaac_typescript_definitions_1.PillEffect.I_FOUND_PILLS],
        ["pills", isaac_typescript_definitions_1.PillEffect.I_FOUND_PILLS],
        ["puberty", isaac_typescript_definitions_1.PillEffect.PUBERTY],
        ["prettyFly", isaac_typescript_definitions_1.PillEffect.PRETTY_FLY],
        ["fly", isaac_typescript_definitions_1.PillEffect.PRETTY_FLY],
        ["rangeDown", isaac_typescript_definitions_1.PillEffect.RANGE_DOWN],
        ["rangeUp", isaac_typescript_definitions_1.PillEffect.RANGE_UP],
        ["speedDown", isaac_typescript_definitions_1.PillEffect.SPEED_DOWN],
        ["speedUp", isaac_typescript_definitions_1.PillEffect.SPEED_UP],
        ["tearsDown", isaac_typescript_definitions_1.PillEffect.TEARS_DOWN],
        ["tearsUp", isaac_typescript_definitions_1.PillEffect.TEARS_UP],
        ["luckDown", isaac_typescript_definitions_1.PillEffect.LUCK_DOWN],
        ["luckUp", isaac_typescript_definitions_1.PillEffect.LUCK_UP],
        ["telepills", isaac_typescript_definitions_1.PillEffect.TELEPILLS],
        ["48HourEnergy", isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY],
        ["energy", isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY],
        ["48", isaac_typescript_definitions_1.PillEffect.FORTY_EIGHT_HOUR_ENERGY],
        ["hematemesis", isaac_typescript_definitions_1.PillEffect.HEMATEMESIS],
        ["paralysis", isaac_typescript_definitions_1.PillEffect.PARALYSIS],
        ["iCanSeeForever!", isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER],
        ["canSee", isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER],
        ["see", isaac_typescript_definitions_1.PillEffect.I_CAN_SEE_FOREVER],
        ["pheromones", isaac_typescript_definitions_1.PillEffect.PHEROMONES],
        ["amnesia", isaac_typescript_definitions_1.PillEffect.AMNESIA],
        ["lemonParty", isaac_typescript_definitions_1.PillEffect.LEMON_PARTY],
        ["party", isaac_typescript_definitions_1.PillEffect.LEMON_PARTY],
        ["RUAWizard", isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD],
        ["areYouAWizard", isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD],
        ["wizard", isaac_typescript_definitions_1.PillEffect.R_U_A_WIZARD],
        ["percs!", isaac_typescript_definitions_1.PillEffect.PERCS],
        ["addicted!", isaac_typescript_definitions_1.PillEffect.ADDICTED],
        ["relax", isaac_typescript_definitions_1.PillEffect.RELAX],
        ["???", isaac_typescript_definitions_1.PillEffect.QUESTION_MARKS],
        ["oneMakesYouLarger", isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_LARGER],
        ["larger", isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_LARGER],
        ["oneMakesYouSmaller", isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_SMALL],
        ["smaller", isaac_typescript_definitions_1.PillEffect.ONE_MAKES_YOU_SMALL],
        ["infested!", isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION],
        ["infest!", isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION],
        ["inf!", isaac_typescript_definitions_1.PillEffect.INFESTED_EXCLAMATION],
        ["infested?", isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION],
        ["infest?", isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION],
        ["inf?", isaac_typescript_definitions_1.PillEffect.INFESTED_QUESTION],
        ["powerPill", isaac_typescript_definitions_1.PillEffect.POWER],
        ["retroVision", isaac_typescript_definitions_1.PillEffect.RETRO_VISION],
        ["vision", isaac_typescript_definitions_1.PillEffect.RETRO_VISION],
        ["friendsTillTheEnd", isaac_typescript_definitions_1.PillEffect.FRIENDS_TILL_THE_END],
        ["friendsUntilTheEnd", isaac_typescript_definitions_1.PillEffect.FRIENDS_TILL_THE_END],
        ["xlax", isaac_typescript_definitions_1.PillEffect.X_LAX],
        ["somethingsWrong", isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG],
        ["wrong", isaac_typescript_definitions_1.PillEffect.SOMETHINGS_WRONG],
        ["imDrowsy", isaac_typescript_definitions_1.PillEffect.IM_DROWSY],
        ["drowsy", isaac_typescript_definitions_1.PillEffect.IM_DROWSY],
        ["imExcited!!!", isaac_typescript_definitions_1.PillEffect.IM_EXCITED],
        ["excited", isaac_typescript_definitions_1.PillEffect.IM_EXCITED],
        ["gulp!", isaac_typescript_definitions_1.PillEffect.GULP],
        ["horf!", isaac_typescript_definitions_1.PillEffect.HORF],
        [
          "feelsLikeImWalkingOnSunshine!",
          isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE
        ],
        ["walking", isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE],
        ["sunshine", isaac_typescript_definitions_1.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE],
        ["vurp!", isaac_typescript_definitions_1.PillEffect.VURP],
        ["shotSpeedDown", isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_DOWN],
        ["shotSpeedUp", isaac_typescript_definitions_1.PillEffect.SHOT_SPEED_UP],
        ["experimental", isaac_typescript_definitions_1.PillEffect.EXPERIMENTAL]
        // 49
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/roomNameToTypeMap.js
  var require_roomNameToTypeMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/roomNameToTypeMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ROOM_NAME_TO_TYPE_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.ROOM_NAME_TO_TYPE_MAP = new ReadonlyMap_1.ReadonlyMap([
        ["default", isaac_typescript_definitions_1.RoomType.DEFAULT],
        ["shop", isaac_typescript_definitions_1.RoomType.SHOP],
        ["error", isaac_typescript_definitions_1.RoomType.ERROR],
        ["iAmError", isaac_typescript_definitions_1.RoomType.ERROR],
        ["treasure", isaac_typescript_definitions_1.RoomType.TREASURE],
        ["boss", isaac_typescript_definitions_1.RoomType.BOSS],
        ["miniBoss", isaac_typescript_definitions_1.RoomType.MINI_BOSS],
        ["secret", isaac_typescript_definitions_1.RoomType.SECRET],
        ["superSecret", isaac_typescript_definitions_1.RoomType.SUPER_SECRET],
        ["arcade", isaac_typescript_definitions_1.RoomType.ARCADE],
        ["curse", isaac_typescript_definitions_1.RoomType.CURSE],
        ["challenge", isaac_typescript_definitions_1.RoomType.CHALLENGE],
        ["library", isaac_typescript_definitions_1.RoomType.LIBRARY],
        ["sacrifice", isaac_typescript_definitions_1.RoomType.SACRIFICE],
        ["devil", isaac_typescript_definitions_1.RoomType.DEVIL],
        ["angel", isaac_typescript_definitions_1.RoomType.ANGEL],
        ["dungeon", isaac_typescript_definitions_1.RoomType.DUNGEON],
        ["crawlSpace", isaac_typescript_definitions_1.RoomType.DUNGEON],
        ["bossRush", isaac_typescript_definitions_1.RoomType.BOSS_RUSH],
        ["isaacs", isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM],
        ["bedroom", isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM],
        ["cleanBedroom", isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM],
        ["dirtyBedroom", isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM],
        ["barren", isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM],
        ["vault", isaac_typescript_definitions_1.RoomType.VAULT],
        ["chest", isaac_typescript_definitions_1.RoomType.VAULT],
        ["dice", isaac_typescript_definitions_1.RoomType.DICE],
        ["blackMarket", isaac_typescript_definitions_1.RoomType.BLACK_MARKET],
        ["greedExit", isaac_typescript_definitions_1.RoomType.GREED_EXIT],
        ["planetarium", isaac_typescript_definitions_1.RoomType.PLANETARIUM],
        ["teleporter", isaac_typescript_definitions_1.RoomType.TELEPORTER],
        ["teleporterExit", isaac_typescript_definitions_1.RoomType.TELEPORTER_EXIT],
        ["secretExit", isaac_typescript_definitions_1.RoomType.SECRET_EXIT],
        ["blue", isaac_typescript_definitions_1.RoomType.BLUE],
        ["ultraSecret", isaac_typescript_definitions_1.RoomType.ULTRA_SECRET]
        // 29
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/maps/trinketNameToTypeMap.js
  var require_trinketNameToTypeMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/trinketNameToTypeMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TRINKET_NAME_TO_TYPE_MAP = void 0;
      var string_1 = require_string();
      var trinketNames_1 = require_trinketNames();
      exports2.TRINKET_NAME_TO_TYPE_MAP = (() => {
        const trinketNameToTypeMap = /* @__PURE__ */ new Map();
        for (const [trinketTypeString, name] of Object.entries(trinketNames_1.TRINKET_NAMES)) {
          const trinketType = trinketTypeString;
          const simpleString = (0, string_1.removeNonAlphanumericCharacters)(name);
          trinketNameToTypeMap.set(simpleString, trinketType);
        }
        return trinketNameToTypeMap;
      })();
    }
  });

  // node_modules/isaacscript-common/dist/functions/logEntities.js
  var require_logEntities = __commonJS({
    "node_modules/isaacscript-common/dist/functions/logEntities.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.logPtrHashes = exports2.logPtrHash = exports2.logGridEntity = exports2.logGridEntities = exports2.logEntity = exports2.logEntities = exports2.logAllGridEntities = exports2.logAllEntities = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlySet_1 = require_ReadonlySet();
      var entities_1 = require_entities();
      var gridEntities_1 = require_gridEntities();
      var log_1 = require_log();
      var IGNORE_EFFECT_VARIANTS = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.EffectVariant.BLOOD_EXPLOSION,
        isaac_typescript_definitions_1.EffectVariant.BLOOD_PARTICLE,
        isaac_typescript_definitions_1.EffectVariant.TINY_BUG,
        isaac_typescript_definitions_1.EffectVariant.TINY_FLY,
        isaac_typescript_definitions_1.EffectVariant.WATER_DROPLET,
        isaac_typescript_definitions_1.EffectVariant.WORM,
        isaac_typescript_definitions_1.EffectVariant.WALL_BUG,
        isaac_typescript_definitions_1.EffectVariant.FALLING_EMBER,
        isaac_typescript_definitions_1.EffectVariant.LIGHT,
        isaac_typescript_definitions_1.EffectVariant.MIST,
        isaac_typescript_definitions_1.EffectVariant.BACKDROP_DECORATION,
        isaac_typescript_definitions_1.EffectVariant.TADPOLE
        // 158
      ]);
      function logAllEntities(includeBackgroundEffects, entityTypeFilter) {
        let msg = "Entities in the room";
        if (entityTypeFilter !== void 0) {
          msg += ` (filtered to entity type ${entityTypeFilter})`;
        } else if (!includeBackgroundEffects) {
          msg += " (not including background effects)";
        }
        msg += ":\n";
        const entities = (0, entities_1.getEntities)();
        let numMatchedEntities = 0;
        for (const [i, entity] of entities.entries()) {
          if (entityTypeFilter !== void 0 && entity.Type !== entityTypeFilter) {
            continue;
          }
          const effect = entity.ToEffect();
          if (!includeBackgroundEffects && effect !== void 0 && IGNORE_EFFECT_VARIANTS.has(effect.Variant)) {
            continue;
          }
          msg += getEntityLogLine(entity, i + 1);
          numMatchedEntities++;
        }
        const zeroText = "(no entities matched)";
        const oneOrMoreText = `(${numMatchedEntities} total ${numMatchedEntities === 1 ? "entity" : "entities"})`;
        const text = numMatchedEntities === 0 ? zeroText : oneOrMoreText;
        msg += `${text}
`;
        for (const line of msg.trim().split("\n")) {
          (0, log_1.log)(line);
        }
      }
      exports2.logAllEntities = logAllEntities;
      function logAllGridEntities(includeWalls = false, gridEntityTypeFilter) {
        let msg = "Grid entities in the room";
        if (gridEntityTypeFilter !== void 0) {
          msg += ` (filtered to grid entity type ${gridEntityTypeFilter})`;
        } else if (!includeWalls) {
          msg += " (not including walls)";
        }
        msg += ":\n";
        const gridEntities = (0, gridEntities_1.getGridEntities)();
        let numMatchedEntities = 0;
        for (const gridEntity of gridEntities) {
          const gridEntityIndex = gridEntity.GetGridIndex();
          const gridEntityType = gridEntity.GetType();
          if (gridEntityTypeFilter !== void 0 && gridEntityType !== gridEntityTypeFilter) {
            continue;
          }
          if (!includeWalls && gridEntityType === isaac_typescript_definitions_1.GridEntityType.WALL && gridEntityTypeFilter !== isaac_typescript_definitions_1.GridEntityType.WALL) {
            continue;
          }
          msg += getGridEntityLogLine(gridEntity, gridEntityIndex);
          numMatchedEntities++;
        }
        msg += numMatchedEntities === 0 ? "(no grid entities matched)\n" : `(${numMatchedEntities} total grid ${numMatchedEntities === 1 ? "entity" : "entities"})
`;
        for (const line of msg.trim().split("\n")) {
          (0, log_1.log)(line);
        }
      }
      exports2.logAllGridEntities = logAllGridEntities;
      function logEntities(entities) {
        for (const entity of entities) {
          logEntity(entity);
        }
      }
      exports2.logEntities = logEntities;
      function logEntity(entity) {
        const msg = getEntityLogLine(entity);
        (0, log_1.log)(msg);
      }
      exports2.logEntity = logEntity;
      function getEntityLogLine(entity, num) {
        let msg = num === void 0 ? "" : `${num}) `;
        msg += (0, entities_1.getEntityID)(entity);
        const bomb = entity.ToBomb();
        if (bomb !== void 0) {
          msg += ` (bomb - ${getBombVariantName(bomb)})`;
        }
        const effect = entity.ToEffect();
        if (effect !== void 0) {
          msg += ` (effect - ${getEffectVariantName(effect)}) (State: ${effect.State})`;
        }
        const familiar = entity.ToFamiliar();
        if (familiar !== void 0) {
          msg += ` (familiar - ${getFamiliarVariantName(familiar)}) (State: ${familiar.State})`;
        }
        const knife = entity.ToKnife();
        if (knife !== void 0) {
          msg += ` (knife - ${getKnifeVariantName(knife)})`;
        }
        const laser = entity.ToLaser();
        if (laser !== void 0) {
          msg += ` (laser - ${getLaserVariantName(laser)})`;
        }
        const npc = entity.ToNPC();
        if (npc !== void 0) {
          msg += ` (NPC - ${getEntityTypeName(npc)}) (State: ${npc.State})`;
        }
        const pickup = entity.ToPickup();
        if (pickup !== void 0) {
          msg += ` (pickup - ${getPickupVariantName(pickup)}) (State: ${pickup.State})`;
        }
        const player = entity.ToPlayer();
        if (player !== void 0) {
          msg += ` (player - ${getPlayerVariantName(player)})`;
        }
        const projectile = entity.ToProjectile();
        if (projectile !== void 0) {
          msg += ` (projectile - ${getProjectileVariantName(projectile)})`;
        }
        const tear = entity.ToTear();
        if (tear !== void 0) {
          msg += ` (tear - ${getTearVariantName(tear)})`;
        }
        msg += "\n";
        msg += `  - Index: ${entity.Index}
`;
        msg += `  - InitSeed: ${entity.InitSeed}
`;
        msg += `  - DropSeed: ${entity.DropSeed}
`;
        msg += `  - Position: (${entity.Position.X}, ${entity.Position.Y})
`;
        msg += `  - Velocity: (${entity.Velocity.X}, ${entity.Velocity.Y})
`;
        msg += `  - HP: ${entity.HitPoints} / ${entity.MaxHitPoints}
`;
        msg += `  - Parent: ${entity.Parent}
`;
        msg += `  - Child: ${entity.Child}
`;
        msg += `  - SpawnerEntity: ${entity.SpawnerEntity}
`;
        msg += `  - SpawnerType / SpawnerVariant: ${entity.SpawnerType}.${entity.SpawnerVariant}
`;
        msg += `  - FrameCount: ${entity.FrameCount}
`;
        if (npc !== void 0) {
          msg += `  - CanShutDoors: ${npc.CanShutDoors}
`;
        }
        return msg;
      }
      function getBombVariantName(bomb) {
        const enumName = isaac_typescript_definitions_1.BombVariant[bomb.Variant];
        return enumName === void 0 ? "unknown" : `BombVariant.${enumName}`;
      }
      function getEffectVariantName(effect) {
        const enumName = isaac_typescript_definitions_1.EffectVariant[effect.Variant];
        return enumName === void 0 ? "unknown" : `EffectVariant.${enumName}`;
      }
      function getFamiliarVariantName(familiar) {
        const enumName = isaac_typescript_definitions_1.FamiliarVariant[familiar.Variant];
        return enumName === void 0 ? "unknown" : `FamiliarVariant.${enumName}`;
      }
      function getKnifeVariantName(knife) {
        const enumName = isaac_typescript_definitions_1.KnifeVariant[knife.Variant];
        return enumName === void 0 ? "unknown" : `KnifeVariant.${enumName}`;
      }
      function getLaserVariantName(laser) {
        const enumName = isaac_typescript_definitions_1.LaserVariant[laser.Variant];
        return enumName === void 0 ? "unknown" : `LaserVariant.${enumName}`;
      }
      function getEntityTypeName(npc) {
        const enumName = isaac_typescript_definitions_1.EntityType[npc.Type];
        return enumName === void 0 ? "unknown" : `EntityType.${enumName}`;
      }
      function getPickupVariantName(pickup) {
        const enumName = isaac_typescript_definitions_1.PickupVariant[pickup.Variant];
        return enumName === void 0 ? "unknown" : `PickupVariant.${enumName}`;
      }
      function getPlayerVariantName(player) {
        const enumName = isaac_typescript_definitions_1.PlayerVariant[player.Variant];
        return enumName === void 0 ? "unknown" : `PlayerVariant.${enumName}`;
      }
      function getProjectileVariantName(projectile) {
        const enumName = isaac_typescript_definitions_1.ProjectileVariant[projectile.Variant];
        return enumName === void 0 ? "unknown" : `ProjectileVariant.${enumName}`;
      }
      function getTearVariantName(tear) {
        const enumName = isaac_typescript_definitions_1.TearVariant[tear.Variant];
        return enumName === void 0 ? "unknown" : `TearVariant.${enumName}`;
      }
      function logGridEntities(gridEntities) {
        for (const gridEntity of gridEntities) {
          logGridEntity(gridEntity);
        }
      }
      exports2.logGridEntities = logGridEntities;
      function logGridEntity(gridEntity) {
        const msg = getGridEntityLogLine(gridEntity);
        (0, log_1.log)(msg);
      }
      exports2.logGridEntity = logGridEntity;
      function getGridEntityLogLine(gridEntity, num) {
        const gridEntityDesc = gridEntity.GetSaveState();
        let msg = num === void 0 ? "" : `${num}) `;
        msg += (0, gridEntities_1.getGridEntityID)(gridEntity);
        const door = gridEntity.ToDoor();
        if (door !== void 0) {
          msg += " (door)";
        }
        const pit = gridEntity.ToPit();
        if (pit !== void 0) {
          msg += " (pit)";
        }
        const poop = gridEntity.ToPoop();
        if (poop !== void 0) {
          msg += " (poop)";
        }
        const pressurePlate = gridEntity.ToPressurePlate();
        if (pressurePlate !== void 0) {
          msg += " (pressurePlate)";
        }
        const rock = gridEntity.ToRock();
        if (rock !== void 0) {
          msg += " (rock)";
        }
        const spikes = gridEntity.ToSpikes();
        if (spikes !== void 0) {
          msg += " (spikes)";
        }
        const tnt = gridEntity.ToTNT();
        if (tnt !== void 0) {
          msg += " (TNT)";
        }
        msg += `  - State: ${gridEntity.State}
`;
        msg += `  - VarData: ${gridEntity.VarData}
`;
        msg += `  - Position: (${gridEntity.Position.X}, ${gridEntity.Position.Y})
`;
        msg += `  - SpawnSeed: ${gridEntityDesc.SpawnSeed}
`;
        msg += `  - VariableSeed: ${gridEntityDesc.VariableSeed})
`;
        if (door !== void 0) {
          msg += `  - Slot: ${door.Slot}
`;
          msg += `  - Direction: ${door.Direction}
`;
          msg += `  - TargetRoomIndex: ${door.TargetRoomIndex}
`;
          msg += `  - TargetRoomType: ${door.TargetRoomType}
`;
        }
        return msg;
      }
      function logPtrHash(ptrHash) {
        (0, log_1.log)(`PtrHash: ${ptrHash}`);
        const entity = (0, entities_1.getEntityFromPtrHash)(ptrHash);
        if (entity === void 0) {
          (0, log_1.log)("No corresponding entity found.");
        } else {
          logEntity(entity);
        }
      }
      exports2.logPtrHash = logPtrHash;
      function logPtrHashes(ptrHashes) {
        for (const ptrHash of ptrHashes) {
          logPtrHash(ptrHash);
        }
      }
      exports2.logPtrHashes = logPtrHashes;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/extraConsoleCommands/subroutines.js
  var require_subroutines = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/extraConsoleCommands/subroutines.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.warpNextToRoomType = exports2.warpToRoomType = exports2.spawnTrapdoorOrCrawlSpace = exports2.movePlayer = exports2.listGridEntities = exports2.listEntities = exports2.devilAngel = exports2.addHeart = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var HealthType_1 = require_HealthType();
      var direction_1 = require_direction();
      var gridEntities_1 = require_gridEntities();
      var levelGrid_1 = require_levelGrid();
      var logEntities_1 = require_logEntities();
      var playerHealth_1 = require_playerHealth();
      var roomData_1 = require_roomData();
      var rooms_1 = require_rooms();
      var types_1 = require_types();
      var roomTypeNames_1 = require_roomTypeNames();
      var DEFAULT_MOVE_UNITS = 0.5;
      function addHeart(params, healthType) {
        let numHearts = healthType === HealthType_1.HealthType.MAX_HEARTS ? 2 : 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print("That is an invalid amount of hearts to add.");
            return;
          }
          numHearts = num;
        }
        const player = Isaac.GetPlayer();
        (0, playerHealth_1.addPlayerHealthType)(player, healthType, numHearts);
      }
      exports2.addHeart = addHeart;
      function devilAngel(useDevil) {
        const level = cachedClasses_1.game.GetLevel();
        const devilAngelRoomData = (0, roomData_1.getRoomData)(isaac_typescript_definitions_1.GridRoom.DEVIL);
        if (devilAngelRoomData !== void 0) {
          const roomType = devilAngelRoomData.Type;
          const conflictingType = useDevil ? isaac_typescript_definitions_1.RoomType.ANGEL : isaac_typescript_definitions_1.RoomType.DEVIL;
          if (roomType === conflictingType) {
            const roomDescriptor = (0, roomData_1.getRoomDescriptor)(isaac_typescript_definitions_1.GridRoom.DEVIL);
            roomDescriptor.Data = void 0;
          }
        }
        if (useDevil) {
          level.InitializeDevilAngelRoom(false, true);
        } else {
          level.InitializeDevilAngelRoom(true, false);
        }
        (0, rooms_1.changeRoom)(isaac_typescript_definitions_1.GridRoom.DEVIL);
      }
      exports2.devilAngel = devilAngel;
      function listEntities(params, includeBackgroundEffects) {
        let entityTypeFilter;
        if (params !== "") {
          entityTypeFilter = (0, types_1.parseIntSafe)(params);
          if (entityTypeFilter === void 0) {
            print("That is an invalid entity type to filter by.");
            return;
          }
        }
        (0, logEntities_1.logAllEntities)(includeBackgroundEffects, entityTypeFilter);
        print('Logged the entities in the room to the "log.txt" file.');
      }
      exports2.listEntities = listEntities;
      function listGridEntities(params, includeWalls) {
        let gridEntityTypeFilter;
        if (params !== "") {
          gridEntityTypeFilter = (0, types_1.parseIntSafe)(params);
          if (gridEntityTypeFilter === void 0) {
            print("That is an invalid grid entity type to filter by.");
            return;
          }
        }
        (0, logEntities_1.logAllGridEntities)(includeWalls, gridEntityTypeFilter);
        print('Logged the grid entities in the room to the "log.txt" file.');
      }
      exports2.listGridEntities = listGridEntities;
      function movePlayer(params, direction) {
        let amount = DEFAULT_MOVE_UNITS;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print("That is an invalid amount of units to move.");
            return;
          }
          amount = num;
        }
        const player = Isaac.GetPlayer();
        const vector = (0, direction_1.directionToVector)(direction);
        const modifiedVector = vector.mul(amount);
        player.Position = player.Position.add(modifiedVector);
      }
      exports2.movePlayer = movePlayer;
      function spawnTrapdoorOrCrawlSpace(trapdoor) {
        const room = cachedClasses_1.game.GetRoom();
        const player = Isaac.GetPlayer();
        const position = room.FindFreeTilePosition(player.Position, 0);
        const gridEntityType = trapdoor ? isaac_typescript_definitions_1.GridEntityType.TRAPDOOR : isaac_typescript_definitions_1.GridEntityType.CRAWL_SPACE;
        (0, gridEntities_1.spawnGridEntity)(gridEntityType, position);
      }
      exports2.spawnTrapdoorOrCrawlSpace = spawnTrapdoorOrCrawlSpace;
      function warpToRoomType(roomType) {
        const roomTypeName = roomTypeNames_1.ROOM_TYPE_NAMES[roomType];
        const gridIndexes = (0, levelGrid_1.getRoomGridIndexesForType)(roomType);
        const firstGridIndex = gridIndexes[0];
        if (firstGridIndex === void 0) {
          print(`There are no ${roomTypeName}s on this floor.`);
          return;
        }
        (0, rooms_1.changeRoom)(firstGridIndex);
        print(`Warped to room type: ${roomTypeName} (${roomType})`);
      }
      exports2.warpToRoomType = warpToRoomType;
      function warpNextToRoomType(roomType) {
        const roomTypeName = roomTypeNames_1.ROOM_TYPE_NAMES[roomType];
        const gridIndexes = (0, levelGrid_1.getRoomGridIndexesForType)(roomType);
        const firstGridIndex = gridIndexes[0];
        if (firstGridIndex === void 0) {
          print(`There are no ${roomTypeName}s on this floor.`);
          return;
        }
        const adjacentRoomGridIndexes = (0, levelGrid_1.getRoomAdjacentGridIndexes)(firstGridIndex);
        for (const [_doorSlot, roomGridIndex] of adjacentRoomGridIndexes) {
          const roomData = (0, roomData_1.getRoomData)(roomGridIndex);
          if (roomData !== void 0 && roomData.Type === isaac_typescript_definitions_1.RoomType.DEFAULT) {
            (0, rooms_1.changeRoom)(roomGridIndex);
            print(`Warped next to room type: ${roomTypeName} (${roomType})`);
            return;
          }
        }
        print(`Failed to find the room next to room type: ${roomTypeName} (${roomType})`);
      }
      exports2.warpNextToRoomType = warpNextToRoomType;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/extraConsoleCommands/v.js
  var require_v2 = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/extraConsoleCommands/v.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.v = void 0;
      exports2.v = {
        persistent: {
          // Curses
          darkness: false,
          labyrinth: false,
          lost: false,
          unknown: false,
          cursed: false,
          maze: false,
          blind: false,
          giant: false,
          disableCurses: false,
          // Stats
          damage: false,
          damageAmount: 500,
          speed: false,
          speedAmount: 2,
          tears: false,
          tearsAmount: 1,
          flight: false,
          // Other
          chaosCardTears: false,
          spamBloodRights: false
        }
      };
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/extraConsoleCommands/commands.js
  var require_commands = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/extraConsoleCommands/commands.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getPosition = exports2.getCharge = exports2.getChallenge = exports2.fool = exports2.flight = exports2.flies = exports2.eternalHearts = exports2.errorRoom = exports2.effects = exports2.dungeon = exports2.down = exports2.dogma = exports2.disableCurses = exports2.dirtyBedroom = exports2.devilRoom = exports2.dd = exports2.darkness = exports2.damage = exports2.dadsNote = exports2.d6 = exports2.d20 = exports2.cursed = exports2.crawlSpace = exports2.collectible = exports2.coins = exports2.coin = exports2.cleanBedroom = exports2.charge = exports2.character = exports2.chaosCardTears = exports2.cc = exports2.cards = exports2.card = exports2.brokenHearts = exports2.bossRush = exports2.bossRoom = exports2.bossNextRoom = exports2.boss = exports2.boneHearts = exports2.bombs = exports2.bomb = exports2.bm = exports2.bloodCharges = exports2.blind = exports2.blackMarket = exports2.blackHearts = exports2.bedroom = exports2.ascent = exports2.angelRoom = exports2.addCharges = void 0;
      exports2.right = exports2.reloadRoom = exports2.redHearts = exports2.position = exports2.poopMana = exports2.poop = exports2.pocket = exports2.playSound = exports2.planetarium = exports2.pills = exports2.pill = exports2.oneHP = exports2.noCurses = exports2.music = exports2.miniboss = exports2.maze = exports2.maxHearts = exports2.map = exports2.mana = exports2.luck = exports2.lowHP = exports2.lost = exports2.listGridAll = exports2.listGrid = exports2.listAll = exports2.list = exports2.library = exports2.left = exports2.labyrinth = exports2.keys = exports2.key = exports2.iAmErrorRoom = exports2.hush = exports2.horse = exports2.hitboxes = exports2.hearts = exports2.gridEntities = exports2.gridCosts = exports2.grid2 = exports2.grid = exports2.goldenTrinket = exports2.goldenKey = exports2.goldenHearts = exports2.goldenBomb = exports2.goldTrinket = exports2.goldKey = exports2.goldHearts = exports2.goldBomb = exports2.gigaBomb = exports2.giant = void 0;
      exports2.xl = exports2.warp = exports2.up = exports2.unseed = exports2.unknown = exports2.ultraSecretRoom = exports2.trinket = exports2.treasureRoom = exports2.trapdoor = exports2.tests = exports2.tears = exports2.superSecretRoom = exports2.startingRoom = exports2.startRoom = exports2.spikes = exports2.speed = exports2.spawnTrinketAt = exports2.spawnTrinket = exports2.spawnGoldenTrinketAt = exports2.spawnGoldenTrinket = exports2.spawnGoldTrinket = exports2.spawnCollectibleAt = exports2.spawnCollectible = exports2.spam = exports2.sounds = exports2.sound = exports2.soulHearts = exports2.soulCharges = exports2.smelt = exports2.shop = exports2.setPosition = exports2.setCharges = exports2.seeds = exports2.seedStick = exports2.secretShop = exports2.secretRoom = exports2.sacrificeRoom = exports2.s = exports2.runTests = exports2.rottenHearts = exports2.room = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var HealthType_1 = require_HealthType();
      var cards_1 = require_cards();
      var characters_1 = require_characters();
      var charge_1 = require_charge();
      var collectibles_1 = require_collectibles();
      var console_1 = require_console();
      var deepCopyTests_1 = require_deepCopyTests();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var enums_1 = require_enums();
      var flag_1 = require_flag();
      var gridEntities_1 = require_gridEntities();
      var levelGrid_1 = require_levelGrid();
      var logMisc_1 = require_logMisc();
      var mergeTests_1 = require_mergeTests();
      var pickupsSpecific_1 = require_pickupsSpecific();
      var pills_1 = require_pills();
      var playerCollectibles_1 = require_playerCollectibles();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      var roomData_1 = require_roomData();
      var roomGrid_1 = require_roomGrid();
      var roomTransition_1 = require_roomTransition();
      var rooms_1 = require_rooms();
      var run_1 = require_run();
      var spawnCollectible_1 = require_spawnCollectible();
      var stage_1 = require_stage();
      var string_1 = require_string();
      var trinkets_1 = require_trinkets();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var cardNameToTypeMap_1 = require_cardNameToTypeMap();
      var characterNameToTypeMap_1 = require_characterNameToTypeMap();
      var collectibleNameToTypeMap_1 = require_collectibleNameToTypeMap();
      var pillNameToEffectMap_1 = require_pillNameToEffectMap();
      var roomNameToTypeMap_1 = require_roomNameToTypeMap();
      var trinketNameToTypeMap_1 = require_trinketNameToTypeMap();
      var roomTypeNames_1 = require_roomTypeNames();
      var subroutines_1 = require_subroutines();
      var v_1 = require_v2();
      function addCharges(params) {
        if (params === "") {
          print("You must specify a slot number. (Use 0 for the primary slot, 1 for the Schoolbag slot, 2 for the pocket item slot, and 3 for the Dice Bag slot.)");
          return;
        }
        const args = params.split(" ");
        if (args.length !== 1 && args.length !== 2) {
          print(`Invalid amount of arguments: ${args.length}`);
          return;
        }
        const [activeSlotString, numChargeString] = args;
        if (activeSlotString === void 0) {
          return;
        }
        const activeSlot = (0, types_1.parseIntSafe)(activeSlotString);
        if (activeSlot === void 0 || !(0, enums_1.isEnumValue)(activeSlot, isaac_typescript_definitions_1.ActiveSlot)) {
          print(`Invalid slot number: ${activeSlot}`);
          return;
        }
        let numCharges = 1;
        if (numChargeString !== void 0) {
          const numChargesAttempt = (0, types_1.parseIntSafe)(numChargeString);
          if (numChargesAttempt === void 0) {
            print(`Invalid charge amount: ${numChargeString}`);
            return;
          }
          numCharges = numChargesAttempt;
        }
        const player = Isaac.GetPlayer();
        (0, charge_1.addCharge)(player, activeSlot, numCharges);
      }
      exports2.addCharges = addCharges;
      function angelRoom() {
        (0, subroutines_1.devilAngel)(false);
      }
      exports2.angelRoom = angelRoom;
      function ascent() {
        cachedClasses_1.game.SetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH_INIT, true);
        cachedClasses_1.game.SetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH, true);
        print("Set Ascent flags.");
      }
      exports2.ascent = ascent;
      function bedroom() {
        const cleanBedroomGridIndexes = (0, levelGrid_1.getRoomGridIndexesForType)(isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM);
        if (cleanBedroomGridIndexes.length > 0) {
          (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM);
          return;
        }
        const dirtyBedroomGridIndexes = (0, levelGrid_1.getRoomGridIndexesForType)(isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM);
        if (dirtyBedroomGridIndexes.length > 0) {
          (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM);
          return;
        }
        print("There are no Clean Bedrooms or Dirty Bedrooms on this floor.");
      }
      exports2.bedroom = bedroom;
      function blackHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.BLACK);
      }
      exports2.blackHearts = blackHearts;
      function blackMarket() {
        (0, rooms_1.changeRoom)(isaac_typescript_definitions_1.GridRoom.BLACK_MARKET);
      }
      exports2.blackMarket = blackMarket;
      function blind() {
        v_1.v.persistent.blind = !v_1.v.persistent.blind;
        (0, console_1.printEnabled)(v_1.v.persistent.blind, "permanent Curse of the Blind");
      }
      exports2.blind = blind;
      function bloodCharges(params) {
        let charges = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid charge amount: ${num}`);
            return;
          }
          charges = num;
        }
        const player = Isaac.GetPlayer();
        player.AddBloodCharge(charges);
      }
      exports2.bloodCharges = bloodCharges;
      function bm() {
        blackMarket();
      }
      exports2.bm = bm;
      function bomb(params) {
        let numBombs = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid bomb amount: ${num}`);
            return;
          }
          numBombs = num;
        }
        const player = Isaac.GetPlayer();
        player.AddBombs(numBombs);
      }
      exports2.bomb = bomb;
      function bombs(params) {
        let numBombs = 99;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid bomb amount: ${num}`);
            return;
          }
          numBombs = num;
        }
        const player = Isaac.GetPlayer();
        player.AddBombs(numBombs);
      }
      exports2.bombs = bombs;
      function boneHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.BONE);
      }
      exports2.boneHearts = boneHearts;
      function boss() {
        bossRoom();
      }
      exports2.boss = boss;
      function bossNextRoom() {
        (0, subroutines_1.warpNextToRoomType)(isaac_typescript_definitions_1.RoomType.BOSS);
      }
      exports2.bossNextRoom = bossNextRoom;
      function bossRoom() {
        const roomType = isaac_typescript_definitions_1.RoomType.BOSS;
        const roomGridIndexes = (0, levelGrid_1.getRoomGridIndexesForType)(roomType);
        let roomGridIndex = roomGridIndexes[0];
        if ((0, stage_1.onStage)(isaac_typescript_definitions_1.LevelStage.VOID)) {
          roomGridIndex = roomGridIndexes.find((thisRoomGridIndex) => (0, roomData_1.getRoomData)(thisRoomGridIndex)?.Subtype === isaac_typescript_definitions_1.BossID.DELIRIUM);
        }
        const roomTypeName = roomTypeNames_1.ROOM_TYPE_NAMES[isaac_typescript_definitions_1.RoomType.BOSS];
        if (roomGridIndex === void 0) {
          print(`There are no ${roomTypeName}s on this floor.`);
          return;
        }
        (0, rooms_1.changeRoom)(roomGridIndex);
        print(`Warped to room type: ${roomTypeName} (${roomType})`);
      }
      exports2.bossRoom = bossRoom;
      function bossRush() {
        (0, rooms_1.changeRoom)(isaac_typescript_definitions_1.GridRoom.BOSS_RUSH);
      }
      exports2.bossRush = bossRush;
      function brokenHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.BROKEN);
      }
      exports2.brokenHearts = brokenHearts;
      function card(params) {
        if (params === "") {
          print("You must specify a card name or number.");
          return;
        }
        let cardType;
        const num = (0, types_1.parseIntSafe)(params);
        if (num === void 0) {
          const match = (0, string_1.getMapPartialMatch)(params, cardNameToTypeMap_1.CARD_NAME_TO_TYPE_MAP);
          if (match === void 0) {
            print(`Unknown card: ${params}`);
            return;
          }
          cardType = match[1];
        } else {
          if (!(0, cards_1.isValidCardType)(num)) {
            print(`Invalid card type: ${num}`);
            return;
          }
          cardType = num;
        }
        const cardName = (0, cards_1.getCardName)(cardType);
        Isaac.ExecuteCommand(`g k${cardType}`);
        print(`Gave card: ${cardName} (${cardType})`);
      }
      exports2.card = card;
      function cards() {
        let cardType = constantsFirstLast_1.FIRST_CARD_TYPE;
        for (let y = 0; y <= 6; y++) {
          for (let x = 0; x <= 12; x++) {
            if (cardType > constantsFirstLast_1.LAST_VANILLA_CARD_TYPE) {
              return;
            }
            const worldPosition = (0, roomGrid_1.gridCoordinatesToWorldPosition)(x, y);
            (0, pickupsSpecific_1.spawnCard)(cardType, worldPosition);
            cardType++;
          }
        }
      }
      exports2.cards = cards;
      function cc() {
        chaosCardTears();
      }
      exports2.cc = cc;
      function chaosCardTears() {
        v_1.v.persistent.chaosCardTears = !v_1.v.persistent.chaosCardTears;
        (0, console_1.printEnabled)(v_1.v.persistent.chaosCardTears, "Chaos Card tears");
      }
      exports2.chaosCardTears = chaosCardTears;
      function character(params) {
        if (params === "") {
          print("You must specify a character name or number.");
          return;
        }
        let playerType;
        const num = (0, types_1.parseIntSafe)(params);
        if (num === void 0) {
          const match = (0, string_1.getMapPartialMatch)(params, characterNameToTypeMap_1.CHARACTER_NAME_TO_TYPE_MAP);
          if (match === void 0) {
            print(`Unknown character: ${params}`);
            return;
          }
          playerType = match[1];
        } else {
          if (!(0, enums_1.isEnumValue)(num, isaac_typescript_definitions_1.PlayerType) || num === isaac_typescript_definitions_1.PlayerType.POSSESSOR) {
            print(`Invalid character number: ${num}`);
            return;
          }
          playerType = num;
        }
        const characterName = (0, characters_1.getCharacterName)(playerType);
        (0, run_1.restart)(playerType);
        print(`Restarting as character: ${characterName} (${playerType})`);
      }
      exports2.character = character;
      function charge(params) {
        addCharges(params);
      }
      exports2.charge = charge;
      function cleanBedroom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.CLEAN_BEDROOM);
      }
      exports2.cleanBedroom = cleanBedroom;
      function coin(params) {
        let numCoins = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid coin amount: ${num}`);
            return;
          }
          numCoins = num;
        }
        const player = Isaac.GetPlayer();
        player.AddCoins(numCoins);
      }
      exports2.coin = coin;
      function coins(params) {
        let numCoins = 999;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid coin amount: ${num}`);
            return;
          }
          numCoins = num;
        }
        const player = Isaac.GetPlayer();
        player.AddCoins(numCoins);
      }
      exports2.coins = coins;
      function collectible(params) {
        spawnCollectible(params);
      }
      exports2.collectible = collectible;
      function crawlSpace() {
        (0, subroutines_1.spawnTrapdoorOrCrawlSpace)(false);
      }
      exports2.crawlSpace = crawlSpace;
      function cursed() {
        v_1.v.persistent.cursed = !v_1.v.persistent.cursed;
        (0, console_1.printEnabled)(v_1.v.persistent.cursed, "permanent Curse of the Cursed");
      }
      exports2.cursed = cursed;
      function d20() {
        const player = Isaac.GetPlayer();
        (0, playerCollectibles_1.useActiveItemTemp)(player, isaac_typescript_definitions_1.CollectibleType.D20);
      }
      exports2.d20 = d20;
      function d6() {
        const player = Isaac.GetPlayer();
        (0, playerCollectibles_1.useActiveItemTemp)(player, isaac_typescript_definitions_1.CollectibleType.D6);
      }
      exports2.d6 = d6;
      function dadsNote() {
        cachedClasses_1.game.SetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH_INIT, true);
        (0, stage_1.setStage)(isaac_typescript_definitions_1.LevelStage.DEPTHS_2, isaac_typescript_definitions_1.StageType.REPENTANCE);
        bossRoom();
      }
      exports2.dadsNote = dadsNote;
      function damage(params) {
        if (params !== "") {
          const num = tonumber(params);
          if (num === void 0) {
            print(`Invalid damage amount: ${params}`);
            return;
          }
          v_1.v.persistent.damageAmount = num;
        }
        v_1.v.persistent.damage = !v_1.v.persistent.damage;
        const player = Isaac.GetPlayer();
        player.AddCacheFlags(isaac_typescript_definitions_1.CacheFlag.DAMAGE);
        player.EvaluateItems();
        (0, console_1.printEnabled)(v_1.v.persistent.damage, "set damage");
      }
      exports2.damage = damage;
      function darkness() {
        v_1.v.persistent.darkness = !v_1.v.persistent.darkness;
        (0, console_1.printEnabled)(v_1.v.persistent.darkness, "permanent Curse of Darkness");
      }
      exports2.darkness = darkness;
      function dd() {
        devilRoom();
      }
      exports2.dd = dd;
      function devilRoom() {
        (0, subroutines_1.devilAngel)(true);
      }
      exports2.devilRoom = devilRoom;
      function dirtyBedroom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.DIRTY_BEDROOM);
      }
      exports2.dirtyBedroom = dirtyBedroom;
      function disableCurses() {
        v_1.v.persistent.disableCurses = !v_1.v.persistent.disableCurses;
        (0, console_1.printEnabled)(!v_1.v.persistent.disableCurses, "curses");
      }
      exports2.disableCurses = disableCurses;
      function dogma() {
        (0, stage_1.setStage)(isaac_typescript_definitions_1.LevelStage.HOME, isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB);
        (0, rooms_1.changeRoom)(constants_1.DOGMA_ROOM_GRID_INDEX);
      }
      exports2.dogma = dogma;
      function down(params) {
        (0, subroutines_1.movePlayer)(params, isaac_typescript_definitions_1.Direction.DOWN);
      }
      exports2.down = down;
      function dungeon() {
        (0, rooms_1.changeRoom)(isaac_typescript_definitions_1.GridRoom.DUNGEON);
      }
      exports2.dungeon = dungeon;
      function effects() {
        const player = Isaac.GetPlayer();
        (0, logMisc_1.logPlayerEffects)(player);
        print(`Logged the player's effects to the "log.txt" file.`);
      }
      exports2.effects = effects;
      function errorRoom() {
        iAmErrorRoom();
      }
      exports2.errorRoom = errorRoom;
      function eternalHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.ETERNAL);
      }
      exports2.eternalHearts = eternalHearts;
      function flies() {
        const player = Isaac.GetPlayer();
        player.AddBlueFlies(constants_1.MAX_NUM_FAMILIARS, player.Position, void 0);
      }
      exports2.flies = flies;
      function flight(params) {
        const player = Isaac.GetPlayer();
        v_1.v.persistent.flight = !v_1.v.persistent.flight;
        if (params === "true") {
          v_1.v.persistent.flight = true;
        } else if (params === "false") {
          v_1.v.persistent.flight = false;
        }
        player.AddCacheFlags(isaac_typescript_definitions_1.CacheFlag.FLYING);
        player.EvaluateItems();
        const collectibleUsedToShowFlight = isaac_typescript_definitions_1.CollectibleType.FATE;
        if (v_1.v.persistent.flight) {
          (0, playerCollectibles_1.addCollectibleCostume)(player, collectibleUsedToShowFlight);
        } else {
          (0, playerCollectibles_1.removeCollectibleCostume)(player, collectibleUsedToShowFlight);
        }
        (0, console_1.printEnabled)(v_1.v.persistent.flight, "flight");
      }
      exports2.flight = flight;
      function fool() {
        startingRoom();
      }
      exports2.fool = fool;
      function getChallenge() {
        const challenge = Isaac.GetChallenge();
        const challengeName = isaac_typescript_definitions_1.Challenge[challenge];
        const challengeDescription = (
          // Handle modded challenges.
          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
          challengeName === void 0 ? `${challenge} (custom)` : `Challenge.${challengeName} (${challenge})`
        );
        print(`The current challenge is: ${challengeDescription}`);
      }
      exports2.getChallenge = getChallenge;
      function getCharge(params) {
        let activeSlot = isaac_typescript_definitions_1.ActiveSlot.PRIMARY;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0 || !(0, enums_1.isEnumValue)(num, isaac_typescript_definitions_1.ActiveSlot)) {
            print(`Invalid slot number: ${params}`);
            return;
          }
          activeSlot = num;
        }
        const player = Isaac.GetPlayer();
        const totalCharge = (0, charge_1.getTotalCharge)(player, activeSlot);
        print(`Total charge for ActiveSlot.${isaac_typescript_definitions_1.ActiveSlot[activeSlot]} (${activeSlot}) is: ${totalCharge}`);
      }
      exports2.getCharge = getCharge;
      function getPosition() {
        for (const player of (0, playerIndex_1.getPlayers)()) {
          const playerName = (0, players_1.getPlayerName)(player);
          print(`Player position for ${playerName}: (${player.Position.X}, ${player.Position.Y})`);
        }
      }
      exports2.getPosition = getPosition;
      function giant() {
        v_1.v.persistent.giant = !v_1.v.persistent.giant;
        (0, console_1.printEnabled)(v_1.v.persistent.giant, "permanent Curse of the Giant");
      }
      exports2.giant = giant;
      function gigaBomb(params) {
        let numBombs = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid Giga Bomb amount: ${num}`);
            return;
          }
          numBombs = num;
        }
        const player = Isaac.GetPlayer();
        player.AddGigaBombs(numBombs);
      }
      exports2.gigaBomb = gigaBomb;
      function goldBomb() {
        goldenBomb();
      }
      exports2.goldBomb = goldBomb;
      function goldHearts(params) {
        goldenHearts(params);
      }
      exports2.goldHearts = goldHearts;
      function goldKey() {
        goldenKey();
      }
      exports2.goldKey = goldKey;
      function goldTrinket(params) {
        spawnGoldenTrinket(params);
      }
      exports2.goldTrinket = goldTrinket;
      function goldenBomb() {
        const player = Isaac.GetPlayer();
        player.AddGoldenBomb();
      }
      exports2.goldenBomb = goldenBomb;
      function goldenHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.GOLDEN);
      }
      exports2.goldenHearts = goldenHearts;
      function goldenKey() {
        const player = Isaac.GetPlayer();
        player.AddGoldenKey();
      }
      exports2.goldenKey = goldenKey;
      function goldenTrinket(params) {
        spawnGoldenTrinket(params);
      }
      exports2.goldenTrinket = goldenTrinket;
      function grid() {
        Isaac.ExecuteCommand("debug 11");
      }
      exports2.grid = grid;
      function grid2() {
        gridCosts();
      }
      exports2.grid2 = grid2;
      function gridCosts() {
        Isaac.ExecuteCommand("debug 2");
      }
      exports2.gridCosts = gridCosts;
      function gridEntities() {
        let gridEntityTypeIndex = -1;
        for (let y = 0; y <= 6; y++) {
          for (let x = 0; x <= 12; x++) {
            gridEntityTypeIndex++;
            const gridEntityType = cachedEnumValues_1.GRID_ENTITY_TYPE_VALUES[gridEntityTypeIndex];
            if (gridEntityType === void 0) {
              return;
            }
            const worldPosition = (0, roomGrid_1.gridCoordinatesToWorldPosition)(x, y);
            (0, gridEntities_1.spawnGridEntity)(gridEntityType, worldPosition);
          }
        }
      }
      exports2.gridEntities = gridEntities;
      function hearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.RED);
      }
      exports2.hearts = hearts;
      function hitboxes() {
        Isaac.ExecuteCommand("debug 6");
      }
      exports2.hitboxes = hitboxes;
      function horse(params) {
        pill(params, true);
      }
      exports2.horse = horse;
      function hush() {
        (0, stage_1.setStage)(isaac_typescript_definitions_1.LevelStage.BLUE_WOMB, isaac_typescript_definitions_1.StageType.ORIGINAL);
        bossRoom();
      }
      exports2.hush = hush;
      function iAmErrorRoom() {
        (0, rooms_1.changeRoom)(isaac_typescript_definitions_1.GridRoom.ERROR);
      }
      exports2.iAmErrorRoom = iAmErrorRoom;
      function key(params) {
        let numKeys = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid key amount: ${num}`);
            return;
          }
          numKeys = num;
        }
        const player = Isaac.GetPlayer();
        player.AddKeys(numKeys);
      }
      exports2.key = key;
      function keys(params) {
        let numKeys = 99;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid key amount: ${num}`);
            return;
          }
          numKeys = num;
        }
        const player = Isaac.GetPlayer();
        player.AddKeys(numKeys);
      }
      exports2.keys = keys;
      function labyrinth() {
        v_1.v.persistent.labyrinth = !v_1.v.persistent.labyrinth;
        (0, console_1.printEnabled)(v_1.v.persistent.labyrinth, "permanent Curse of the Labyrinth");
      }
      exports2.labyrinth = labyrinth;
      function left(params) {
        (0, subroutines_1.movePlayer)(params, isaac_typescript_definitions_1.Direction.LEFT);
      }
      exports2.left = left;
      function library() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.LIBRARY);
      }
      exports2.library = library;
      function list(params) {
        (0, subroutines_1.listEntities)(params, false);
      }
      exports2.list = list;
      function listAll(params) {
        (0, subroutines_1.listEntities)(params, true);
      }
      exports2.listAll = listAll;
      function listGrid(params) {
        (0, subroutines_1.listGridEntities)(params, false);
      }
      exports2.listGrid = listGrid;
      function listGridAll(params) {
        (0, subroutines_1.listGridEntities)(params, true);
      }
      exports2.listGridAll = listGridAll;
      function lost() {
        v_1.v.persistent.lost = !v_1.v.persistent.lost;
        (0, console_1.printEnabled)(v_1.v.persistent.lost, "permanent Curse of the Lost");
      }
      exports2.lost = lost;
      function lowHP() {
        oneHP();
      }
      exports2.lowHP = lowHP;
      function luck() {
        Isaac.ExecuteCommand("debug 9");
      }
      exports2.luck = luck;
      function mana(params) {
        poopMana(params);
      }
      exports2.mana = mana;
      function map() {
        const level = cachedClasses_1.game.GetLevel();
        const displayFlags = (0, flag_1.addFlag)(
          isaac_typescript_definitions_1.DisplayFlag.VISIBLE,
          // 1 << 0
          isaac_typescript_definitions_1.DisplayFlag.SHADOW,
          // 1 << 1
          isaac_typescript_definitions_1.DisplayFlag.SHOW_ICON
        );
        for (const roomGridIndex of (0, utils_1.iRange)(constants_1.MAX_LEVEL_GRID_INDEX)) {
          const roomDesc = level.GetRoomByIdx(roomGridIndex);
          roomDesc.DisplayFlags = displayFlags;
        }
        level.UpdateVisibility();
      }
      exports2.map = map;
      function maxHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.MAX_HEARTS);
      }
      exports2.maxHearts = maxHearts;
      function maze() {
        v_1.v.persistent.maze = !v_1.v.persistent.maze;
        (0, console_1.printEnabled)(v_1.v.persistent.maze, "permanent Curse of the Maze");
      }
      exports2.maze = maze;
      function miniboss() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.MINI_BOSS);
      }
      exports2.miniboss = miniboss;
      function music() {
        (0, logMisc_1.logMusic)();
        print('Logged the currently playing music track to the "log.txt" file.');
      }
      exports2.music = music;
      function noCurses() {
        disableCurses();
      }
      exports2.noCurses = noCurses;
      function oneHP() {
        for (const npc of (0, entitiesSpecific_1.getNPCs)()) {
          npc.HitPoints = 1;
        }
        print("Set every NPC to 1 HP.");
      }
      exports2.oneHP = oneHP;
      function pill(params, isHorse = false) {
        if (params === "") {
          print("You must specify a pill name or number.");
          return;
        }
        let pillEffect;
        const num = (0, types_1.parseIntSafe)(params);
        if (num === void 0) {
          const match = (0, string_1.getMapPartialMatch)(params, pillNameToEffectMap_1.PILL_NAME_TO_EFFECT_MAP);
          if (match === void 0) {
            print(`Unknown pill effect: ${params}`);
            return;
          }
          pillEffect = match[1];
        } else {
          if (!(0, pills_1.isValidPillEffect)(num)) {
            print(`Invalid pill effect ID: ${num}`);
            return;
          }
          pillEffect = num;
        }
        const pillEffectName = (0, pills_1.getPillEffectName)(pillEffect);
        Isaac.ExecuteCommand(`g p${pillEffect}`);
        if (isHorse) {
          const player = Isaac.GetPlayer();
          const pillColor = player.GetPill(isaac_typescript_definitions_1.PocketItemSlot.SLOT_1);
          const horsePillColor = (0, pills_1.getHorsePillColor)(pillColor);
          player.SetPill(isaac_typescript_definitions_1.PocketItemSlot.SLOT_1, horsePillColor);
        }
        if (isHorse) {
          print(`Gave horse pill: ${pillEffectName} (${pillEffect})`);
        } else {
          print(`Gave pill: ${pillEffectName} (${pillEffect})`);
        }
      }
      exports2.pill = pill;
      function pills() {
        let y;
        let pillColor;
        y = 1;
        pillColor = constantsFirstLast_1.FIRST_PILL_COLOR;
        for (let x = 0; x <= 12; x++) {
          if (pillColor >= isaac_typescript_definitions_1.PillColor.GOLD) {
            break;
          }
          const worldPosition = (0, roomGrid_1.gridCoordinatesToWorldPosition)(x, y);
          (0, pickupsSpecific_1.spawnPill)(pillColor, worldPosition);
          pillColor++;
        }
        y = 2;
        pillColor = constantsFirstLast_1.FIRST_HORSE_PILL_COLOR;
        for (let x = 0; x <= 12; x++) {
          if (pillColor >= isaac_typescript_definitions_1.PillColor.HORSE_GOLD) {
            break;
          }
          const worldPosition = (0, roomGrid_1.gridCoordinatesToWorldPosition)(x, y);
          (0, pickupsSpecific_1.spawnPill)(pillColor, worldPosition);
          pillColor++;
        }
        y = 3;
        const worldPosition1 = (0, roomGrid_1.gridCoordinatesToWorldPosition)(0, y);
        (0, pickupsSpecific_1.spawnPill)(isaac_typescript_definitions_1.PillColor.GOLD, worldPosition1);
        const worldPosition2 = (0, roomGrid_1.gridCoordinatesToWorldPosition)(1, y);
        (0, pickupsSpecific_1.spawnPill)(isaac_typescript_definitions_1.PillColor.HORSE_GOLD, worldPosition2);
      }
      exports2.pills = pills;
      function planetarium() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.PLANETARIUM);
      }
      exports2.planetarium = planetarium;
      function playSound(params) {
        sound(params);
      }
      exports2.playSound = playSound;
      function pocket(params) {
        if (params === "") {
          print("You must supply a collectible type to put as the pocket item.");
          return;
        }
        const collectibleType = (0, types_1.parseIntSafe)(params);
        if (collectibleType === void 0 || !(0, collectibles_1.isValidCollectibleType)(collectibleType)) {
          print(`Invalid collectible type: ${collectibleType}`);
          return;
        }
        const player = Isaac.GetPlayer();
        player.SetPocketActiveItem(collectibleType, isaac_typescript_definitions_1.ActiveSlot.POCKET);
      }
      exports2.pocket = pocket;
      function poop() {
        const roomClass = cachedClasses_1.game.GetRoom();
        const player = Isaac.GetPlayer();
        const tilePosition = roomClass.FindFreeTilePosition(player.Position, 0);
        (0, gridEntities_1.spawnGridEntity)(isaac_typescript_definitions_1.GridEntityType.POOP, tilePosition);
      }
      exports2.poop = poop;
      function poopMana(params) {
        let charges = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid mana amount: ${num}`);
            return;
          }
          charges = num;
        }
        const player = Isaac.GetPlayer();
        player.AddPoopMana(charges);
      }
      exports2.poopMana = poopMana;
      function position() {
        getPosition();
      }
      exports2.position = position;
      function redHearts(params) {
        hearts(params);
      }
      exports2.redHearts = redHearts;
      function reloadRoom() {
        (0, roomTransition_1.reloadRoom)();
      }
      exports2.reloadRoom = reloadRoom;
      function right(params) {
        (0, subroutines_1.movePlayer)(params, isaac_typescript_definitions_1.Direction.RIGHT);
      }
      exports2.right = right;
      function room() {
        (0, logMisc_1.logRoom)();
        print('Logged room information to the "log.txt" file.');
      }
      exports2.room = room;
      function rottenHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.ROTTEN);
      }
      exports2.rottenHearts = rottenHearts;
      function runTests() {
        (0, deepCopyTests_1.runDeepCopyTests)();
        (0, mergeTests_1.runMergeTests)();
      }
      exports2.runTests = runTests;
      function s(params) {
        if (params === "") {
          print("You must specify a stage number.");
          return;
        }
        const finalCharacter = params.slice(-1);
        let stageString;
        let stageTypeLetter;
        if (finalCharacter === "a" || finalCharacter === "b" || finalCharacter === "c" || finalCharacter === "d") {
          stageString = params.slice(0, -1);
          stageTypeLetter = finalCharacter;
        } else {
          stageString = params;
          stageTypeLetter = "";
        }
        const stage = (0, types_1.parseIntSafe)(stageString);
        if (stage === void 0 || !(0, enums_1.isEnumValue)(stage, isaac_typescript_definitions_1.StageType)) {
          print(`Invalid stage number: ${stage}`);
          return;
        }
        Isaac.ExecuteCommand(`stage ${stage}${stageTypeLetter}`);
      }
      exports2.s = s;
      function sacrificeRoom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.SACRIFICE);
      }
      exports2.sacrificeRoom = sacrificeRoom;
      function secretRoom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.SECRET);
      }
      exports2.secretRoom = secretRoom;
      function secretShop() {
        (0, rooms_1.changeRoom)(isaac_typescript_definitions_1.GridRoom.SECRET_SHOP);
      }
      exports2.secretShop = secretShop;
      function seedStick() {
        const seedsClass = cachedClasses_1.game.GetSeeds();
        const startSeedString = seedsClass.GetStartSeedString();
        Isaac.ExecuteCommand(`seed ${startSeedString}`);
        print(`Sticking to seed: ${startSeedString}`);
      }
      exports2.seedStick = seedStick;
      function seeds() {
        (0, logMisc_1.logSeedEffects)();
        print('Logged the seed effects to the "log.txt" file.');
      }
      exports2.seeds = seeds;
      function setCharges(params) {
        if (params === "") {
          print("You must specify a slot number and a charge amount. (Use 0 for the primary slot, 1 for the Schoolbag slot, 2 for the pocket item slot, and 3 for the Dice Bag slot.)");
          return;
        }
        const args = params.split(" ");
        if (args.length === 1) {
          print("You must specify the amount of charge to set.");
          return;
        }
        if (args.length !== 2) {
          print(`Invalid amount of arguments: ${args.length}`);
          return;
        }
        const [activeSlotString, chargeString] = args;
        if (activeSlotString === void 0 || chargeString === void 0) {
          return;
        }
        const activeSlot = (0, types_1.parseIntSafe)(activeSlotString);
        if (activeSlot === void 0 || !(0, enums_1.isEnumValue)(activeSlot, isaac_typescript_definitions_1.ActiveSlot)) {
          print(`Invalid slot number: ${activeSlotString}`);
          return;
        }
        const chargeNum = (0, types_1.parseIntSafe)(chargeString);
        if (chargeNum === void 0) {
          print(`Invalid charge amount: ${chargeString}`);
          return;
        }
        if (chargeNum < 0) {
          print(`Invalid charge amount: ${chargeNum}`);
          return;
        }
        const player = Isaac.GetPlayer();
        player.SetActiveCharge(chargeNum, activeSlot);
      }
      exports2.setCharges = setCharges;
      function setPosition(params) {
        if (params === "") {
          print('You must specify a position. (e.g. "setPosition 100 50")');
          return;
        }
        const args = params.split(" ");
        if (args.length !== 2) {
          print('You must specify a position. (e.g. "setPosition 100 50")');
          return;
        }
        const [xString, yString] = args;
        if (xString === void 0 || yString === void 0) {
          return;
        }
        const x = (0, types_1.parseIntSafe)(xString);
        if (x === void 0) {
          print(`Invalid x value: ${xString}`);
          return;
        }
        const y = (0, types_1.parseIntSafe)(yString);
        if (y === void 0) {
          print(`Invalid y value: ${yString}`);
          return;
        }
        const player = Isaac.GetPlayer();
        const newPosition = Vector(x, y);
        player.Position = newPosition;
      }
      exports2.setPosition = setPosition;
      function shop() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.SHOP);
      }
      exports2.shop = shop;
      function smelt() {
        const player = Isaac.GetPlayer();
        (0, playerCollectibles_1.useActiveItemTemp)(player, isaac_typescript_definitions_1.CollectibleType.SMELTER);
      }
      exports2.smelt = smelt;
      function soulCharges(params) {
        let charges = 1;
        if (params !== "") {
          const num = (0, types_1.parseIntSafe)(params);
          if (num === void 0) {
            print(`Invalid charges amount: ${num}`);
            return;
          }
          charges = num;
        }
        const player = Isaac.GetPlayer();
        player.AddSoulCharge(charges);
      }
      exports2.soulCharges = soulCharges;
      function soulHearts(params) {
        (0, subroutines_1.addHeart)(params, HealthType_1.HealthType.SOUL);
      }
      exports2.soulHearts = soulHearts;
      function sound(params) {
        const soundEffect = (0, types_1.parseIntSafe)(params);
        if (soundEffect === void 0 || !(0, enums_1.isEnumValue)(soundEffect, isaac_typescript_definitions_1.SoundEffect)) {
          print(`Invalid sound effect ID: ${soundEffect}.`);
          return;
        }
        cachedClasses_1.sfxManager.Play(soundEffect);
      }
      exports2.sound = sound;
      function sounds() {
        (0, logMisc_1.logSounds)();
        print('Logged the currently playing sound effects to the "log.txt" file.');
      }
      exports2.sounds = sounds;
      function spam() {
        v_1.v.persistent.spamBloodRights = !v_1.v.persistent.spamBloodRights;
        (0, console_1.printEnabled)(v_1.v.persistent.spamBloodRights, "spamming Blood Rights");
      }
      exports2.spam = spam;
      function spawnCollectible(params) {
        if (params === "") {
          print("You must specify the collectible name or the number corresponding to the collectible type.");
          return;
        }
        const num = (0, types_1.parseIntSafe)(params);
        let collectibleType;
        if (num === void 0) {
          const match = (0, string_1.getMapPartialMatch)(params, collectibleNameToTypeMap_1.COLLECTIBLE_NAME_TO_TYPE_MAP);
          if (match === void 0) {
            print(`Unknown collectible: ${params}`);
            return;
          }
          collectibleType = match[1];
        } else {
          if (!(0, collectibles_1.isValidCollectibleType)(num)) {
            print(`Invalid collectible type: ${num}`);
          }
          collectibleType = num;
        }
        const roomClass = cachedClasses_1.game.GetRoom();
        const centerPos = roomClass.GetCenterPos();
        (0, spawnCollectible_1.spawnCollectible)(collectibleType, centerPos, void 0);
      }
      exports2.spawnCollectible = spawnCollectible;
      function spawnCollectibleAt(params) {
        if (params === "") {
          print("You must specify the number corresponding to the collectible type and the number corresponding to the grid tile location.");
          return;
        }
        const args = params.split(" ");
        if (args.length !== 2) {
          print("You must specify the number corresponding to the collectible type and the number corresponding to the grid tile location.");
          return;
        }
        const [collectibleTypeString, gridIndexString] = args;
        if (collectibleTypeString === void 0 || gridIndexString === void 0) {
          return;
        }
        const collectibleType = (0, types_1.parseIntSafe)(collectibleTypeString);
        if (collectibleType === void 0 || !(0, collectibles_1.isValidCollectibleType)(collectibleType)) {
          print(`Invalid collectible type: ${args[0]}`);
          return;
        }
        const gridIndex = (0, types_1.parseIntSafe)(gridIndexString);
        if (gridIndex === void 0 || gridIndex < 0) {
          print(`Failed to parse the grid index of: ${args[1]}`);
          return;
        }
        (0, spawnCollectible_1.spawnCollectible)(collectibleType, gridIndex, void 0);
      }
      exports2.spawnCollectibleAt = spawnCollectibleAt;
      function spawnGoldTrinket(params) {
        spawnGoldenTrinket(params);
      }
      exports2.spawnGoldTrinket = spawnGoldTrinket;
      function spawnGoldenTrinket(params) {
        spawnTrinket(params, true);
      }
      exports2.spawnGoldenTrinket = spawnGoldenTrinket;
      function spawnGoldenTrinketAt(params) {
        spawnTrinketAt(params, true);
      }
      exports2.spawnGoldenTrinketAt = spawnGoldenTrinketAt;
      function spawnTrinket(params, golden = false) {
        if (params === "") {
          print("You must specify the name or number corresponding to the trinket type.");
          return;
        }
        const num = (0, types_1.parseIntSafe)(params);
        let trinketType;
        if (num === void 0) {
          const match = (0, string_1.getMapPartialMatch)(params, trinketNameToTypeMap_1.TRINKET_NAME_TO_TYPE_MAP);
          if (match === void 0) {
            print(`Unknown trinket: ${params}`);
            return;
          }
          trinketType = match[1];
        } else {
          if (!(0, trinkets_1.isValidTrinketType)(num)) {
            print(`Invalid trinket type: ${num}`);
            return;
          }
          trinketType = num;
        }
        const roomClass = cachedClasses_1.game.GetRoom();
        const centerPos = roomClass.GetCenterPos();
        const goldenTrinketType = (0, trinkets_1.getGoldenTrinketType)(trinketType);
        const trinketTypeToSpawn = golden ? goldenTrinketType : trinketType;
        (0, pickupsSpecific_1.spawnTrinket)(trinketTypeToSpawn, centerPos);
      }
      exports2.spawnTrinket = spawnTrinket;
      function spawnTrinketAt(params, golden = false) {
        if (params === "") {
          print("You must specify the number corresponding to the trinket type and the number corresponding to the grid tile location.");
          return;
        }
        const args = params.split(" ");
        if (args.length !== 2) {
          print("You must specify the number corresponding to the trinket type and the number corresponding to the grid tile location.");
          return;
        }
        const [trinketTypeString, gridIndexString] = args;
        if (trinketTypeString === void 0 || gridIndexString === void 0) {
          return;
        }
        const trinketType = (0, types_1.parseIntSafe)(trinketTypeString);
        if (trinketType === void 0 || !(0, trinkets_1.isValidTrinketType)(trinketType)) {
          print(`Invalid trinket type: ${trinketTypeString}`);
          return;
        }
        const gridIndex = (0, types_1.parseIntSafe)(gridIndexString);
        if (gridIndex === void 0 || gridIndex < 0) {
          print(`Failed to parse the grid index of: ${args[1]}`);
          return;
        }
        const goldenTrinketType = (0, trinkets_1.getGoldenTrinketType)(trinketType);
        const trinketTypeToSpawn = golden ? goldenTrinketType : trinketType;
        (0, pickupsSpecific_1.spawnTrinket)(trinketTypeToSpawn, gridIndex);
      }
      exports2.spawnTrinketAt = spawnTrinketAt;
      function speed(params) {
        const player = Isaac.GetPlayer();
        if (params !== "") {
          const num = tonumber(params);
          if (num === void 0) {
            print(`Invalid speed amount: ${params}`);
            return;
          }
          v_1.v.persistent.damageAmount = num;
        }
        v_1.v.persistent.speed = !v_1.v.persistent.speed;
        player.AddCacheFlags(isaac_typescript_definitions_1.CacheFlag.SPEED);
        player.EvaluateItems();
        const value = tostring(v_1.v.persistent.speed);
        flight(value);
        (0, console_1.printEnabled)(v_1.v.persistent.speed, "set speed");
      }
      exports2.speed = speed;
      function spikes() {
        const roomClass = cachedClasses_1.game.GetRoom();
        const player = Isaac.GetPlayer();
        const tilePosition = roomClass.FindFreeTilePosition(player.Position, 0);
        (0, gridEntities_1.spawnGridEntity)(isaac_typescript_definitions_1.GridEntityType.SPIKES, tilePosition);
      }
      exports2.spikes = spikes;
      function startRoom() {
        startingRoom();
      }
      exports2.startRoom = startRoom;
      function startingRoom() {
        const level = cachedClasses_1.game.GetLevel();
        const startingRoomIndex = level.GetStartingRoomIndex();
        (0, rooms_1.changeRoom)(startingRoomIndex);
      }
      exports2.startingRoom = startingRoom;
      function superSecretRoom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.SUPER_SECRET);
      }
      exports2.superSecretRoom = superSecretRoom;
      function tears(params) {
        if (params !== "") {
          const num = tonumber(params);
          if (num === void 0) {
            print(`Invalid tear delay amount: ${params}`);
            return;
          }
          v_1.v.persistent.tearsAmount = num;
        }
        v_1.v.persistent.tears = !v_1.v.persistent.tears;
        const player = Isaac.GetPlayer();
        player.AddCacheFlags(isaac_typescript_definitions_1.CacheFlag.FIRE_DELAY);
        player.EvaluateItems();
        (0, console_1.printEnabled)(v_1.v.persistent.damage, "set tear delay");
      }
      exports2.tears = tears;
      function tests() {
        runTests();
      }
      exports2.tests = tests;
      function trapdoor() {
        (0, subroutines_1.spawnTrapdoorOrCrawlSpace)(true);
      }
      exports2.trapdoor = trapdoor;
      function treasureRoom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.TREASURE);
      }
      exports2.treasureRoom = treasureRoom;
      function trinket(params) {
        spawnTrinket(params);
      }
      exports2.trinket = trinket;
      function ultraSecretRoom() {
        (0, subroutines_1.warpToRoomType)(isaac_typescript_definitions_1.RoomType.ULTRA_SECRET);
      }
      exports2.ultraSecretRoom = ultraSecretRoom;
      function unknown() {
        v_1.v.persistent.unknown = !v_1.v.persistent.unknown;
        (0, console_1.printEnabled)(v_1.v.persistent.unknown, "permanent Curse of the Unknown");
      }
      exports2.unknown = unknown;
      function unseed() {
        if (!(0, run_1.onSetSeed)()) {
          print("You are not on a set seed, so you cannot unseed the run.");
          return;
        }
        (0, run_1.setUnseeded)();
        (0, run_1.restart)();
      }
      exports2.unseed = unseed;
      function up(params) {
        (0, subroutines_1.movePlayer)(params, isaac_typescript_definitions_1.Direction.UP);
      }
      exports2.up = up;
      function warp(params) {
        if (params === "") {
          print("You must specify a room type name or number.");
          return;
        }
        let roomType;
        const num = (0, types_1.parseIntSafe)(params);
        if (num === void 0) {
          const match = (0, string_1.getMapPartialMatch)(params, roomNameToTypeMap_1.ROOM_NAME_TO_TYPE_MAP);
          if (match === void 0) {
            print(`Unknown room type: ${params}`);
            return;
          }
          roomType = match[1];
        } else {
          if (!(0, enums_1.isEnumValue)(num, isaac_typescript_definitions_1.RoomType)) {
            print(`Invalid room type: ${num}`);
            return;
          }
          roomType = num;
        }
        (0, subroutines_1.warpToRoomType)(roomType);
      }
      exports2.warp = warp;
      function xl() {
        labyrinth();
      }
      exports2.xl = xl;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/ExtraConsoleCommands.js
  var require_ExtraConsoleCommands = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/ExtraConsoleCommands.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      var __importStar = exports2 && exports2.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ExtraConsoleCommands = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var console_1 = require_console();
      var flag_1 = require_flag();
      var log_1 = require_log();
      var string_1 = require_string();
      var utils_1 = require_utils();
      var Feature_1 = require_Feature();
      var commands = __importStar(require_commands());
      var v_1 = require_v2();
      var ExtraConsoleCommands = class extends Feature_1.Feature {
        /** @internal */
        v = v_1.v;
        isMainFeature;
        commandFunctionMap = /* @__PURE__ */ new Map();
        /** @internal */
        constructor() {
          super();
          this.isMainFeature = __ISAACSCRIPT_COMMON_EXTRA_CONSOLE_COMMANDS_FEATURE === void 0;
          if (!this.isMainFeature) {
            return;
          }
          __ISAACSCRIPT_COMMON_EXTRA_CONSOLE_COMMANDS_FEATURE = this;
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate],
            // 8
            [
              isaac_typescript_definitions_1.ModCallback.EVALUATE_CACHE,
              this.evaluateCacheDamage,
              [isaac_typescript_definitions_1.CacheFlag.DAMAGE]
              // 1 << 0
            ],
            // 8
            [
              isaac_typescript_definitions_1.ModCallback.EVALUATE_CACHE,
              this.evaluateCacheFireDelay,
              [isaac_typescript_definitions_1.CacheFlag.FIRE_DELAY]
              // 1 << 1
            ],
            // 8
            [
              isaac_typescript_definitions_1.ModCallback.EVALUATE_CACHE,
              this.evaluateCacheSpeed,
              [isaac_typescript_definitions_1.CacheFlag.SPEED]
              // 1 << 4
            ],
            // 8
            [
              isaac_typescript_definitions_1.ModCallback.EVALUATE_CACHE,
              this.evaluateCacheFlying,
              [isaac_typescript_definitions_1.CacheFlag.FLYING]
              // 1 << 7
            ],
            // 12
            [isaac_typescript_definitions_1.ModCallback.POST_CURSE_EVAL, this.postCurseEval],
            // 22
            [isaac_typescript_definitions_1.ModCallback.EXECUTE_CMD, this.executeCmd],
            // 61
            [isaac_typescript_definitions_1.ModCallback.POST_FIRE_TEAR, this.postFireTear]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER, this.entityTakeDmgPlayer]
          ];
          for (const [funcName, func] of Object.entries(commands)) {
            this.commandFunctionMap.set(funcName, func);
          }
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          if (v_1.v.persistent.spamBloodRights) {
            const player = Isaac.GetPlayer();
            player.UseActiveItem(isaac_typescript_definitions_1.CollectibleType.BLOOD_RIGHTS);
          }
        };
        // ModCallback.EVALUATE_CACHE (8)
        // CacheFlag.DAMAGE (1 << 0)
        evaluateCacheDamage = (player) => {
          if (v_1.v.persistent.damage) {
            player.Damage = v_1.v.persistent.damageAmount;
          }
        };
        // ModCallback.EVALUATE_CACHE (8)
        // CacheFlag.FIRE_DELAY (1 << 1)
        evaluateCacheFireDelay = (player) => {
          if (v_1.v.persistent.tears) {
            player.FireDelay = v_1.v.persistent.tearsAmount;
          }
        };
        // ModCallback.EVALUATE_CACHE (8)
        // CacheFlag.SPEED (1 << 4)
        evaluateCacheSpeed = (player) => {
          if (v_1.v.persistent.speed) {
            player.MoveSpeed = v_1.v.persistent.speedAmount;
          }
        };
        // ModCallback.EVALUATE_CACHE (8)
        // CacheFlag.FLYING (1 << 7)
        evaluateCacheFlying = (player) => {
          if (v_1.v.persistent.flight) {
            player.CanFly = true;
          }
        };
        // ModCallback.POST_CURSE_EVAL (12)
        postCurseEval = (curses) => {
          if (v_1.v.persistent.disableCurses) {
            return (0, flag_1.bitFlags)(isaac_typescript_definitions_1.LevelCurse.NONE);
          }
          let newCurses = curses;
          if (v_1.v.persistent.darkness) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.DARKNESS);
          }
          if (v_1.v.persistent.labyrinth) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.LABYRINTH);
          }
          if (v_1.v.persistent.lost) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.LOST);
          }
          if (v_1.v.persistent.unknown) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.UNKNOWN);
          }
          if (v_1.v.persistent.cursed) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.CURSED);
          }
          if (v_1.v.persistent.maze) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.MAZE);
          }
          if (v_1.v.persistent.blind) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.BLIND);
          }
          if (v_1.v.persistent.giant) {
            newCurses = (0, flag_1.addFlag)(newCurses, isaac_typescript_definitions_1.LevelCurse.GIANT);
          }
          return curses === newCurses ? void 0 : newCurses;
        };
        // ModCallback.EXECUTE_CMD (22)
        executeCmd = (command, params) => {
          const resultTuple = (0, string_1.getMapPartialMatch)(command, this.commandFunctionMap);
          if (resultTuple === void 0) {
            return;
          }
          const [commandName, commandFunction] = resultTuple;
          print(`Command: ${commandName}`);
          commandFunction(params);
        };
        // ModCallback.POST_FIRE_TEAR (61)
        postFireTear = (tear) => {
          if (v_1.v.persistent.chaosCardTears) {
            tear.ChangeVariant(isaac_typescript_definitions_1.TearVariant.CHAOS_CARD);
          }
        };
        // ModCallbackCustom.ENTITY_TAKE_DMG_PLAYER
        entityTakeDmgPlayer = (_player, _damageAmount, _damageFlags, _damageSource, _damageCountdownFrames) => {
          if (v_1.v.persistent.spamBloodRights) {
            return false;
          }
          return void 0;
        };
        /**
         * Helper function to add a custom console command.
         *
         * The standard library comes with [many existing console commands](ExtraConsoleCommandsList) that
         * are useful for debugging, but you can also add your own commands that are useful for your
         * particular mod. It's easier to add commands to the existing command system than to add your own
         * logic manually to the `EXECUTE_CMD` callback.
         *
         * This function is intended to be called when your mod is first loading.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.EXTRA_CONSOLE_COMMANDS`.
         *
         * @public
         */
        addConsoleCommand(commandName, commandFunction) {
          if (!this.isMainFeature) {
            (0, utils_1.assertDefined)(__ISAACSCRIPT_COMMON_EXTRA_CONSOLE_COMMANDS_FEATURE, "Failed to find the non-main isaacscript-common extra console commands feature in the global variable.");
            __ISAACSCRIPT_COMMON_EXTRA_CONSOLE_COMMANDS_FEATURE.addConsoleCommand(commandName, commandFunction);
            return;
          }
          if ((0, console_1.isVanillaConsoleCommand)(commandName)) {
            (0, log_1.logError)(`Failed to add a new console command of "${commandName}" because that name already belongs to a vanilla command. You must pick a non-colliding name.`);
            return;
          }
          if (this.commandFunctionMap.has(commandName)) {
            (0, log_1.logError)(`Failed to add a new console command of "${commandName}" because there is already an existing custom command by that name. If you want to overwrite a command from the standard library, you can use the "removeExtraConsoleCommand" function.`);
            return;
          }
          this.commandFunctionMap.set(commandName, commandFunction);
        }
        /**
         * Helper function to remove a custom console command.
         *
         * The standard library comes with [many existing console commands](ExtraConsoleCommandsList) that
         * are useful for debugging. If you want to disable one of them, use this function.
         *
         * This function is intended to be called when your mod is first loading.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.EXTRA_CONSOLE_COMMANDS`.
         *
         * @public
         */
        removeConsoleCommand(commandName) {
          if (!this.isMainFeature) {
            (0, utils_1.assertDefined)(__ISAACSCRIPT_COMMON_EXTRA_CONSOLE_COMMANDS_FEATURE, "Failed to find the non-main isaacscript-common extra console commands feature in the global variable.");
            __ISAACSCRIPT_COMMON_EXTRA_CONSOLE_COMMANDS_FEATURE.removeConsoleCommand(commandName);
            return;
          }
          if (!this.commandFunctionMap.has(commandName)) {
            error(`Failed to remove the console command of "${commandName}", since it does not already exist in the command map.`);
          }
          this.commandFunctionMap.delete(commandName);
        }
        /**
         * Helper function to remove all custom console commands.
         *
         * The standard library comes with [many existing console commands](ExtraConsoleCommandsList) that
         * are useful for debugging. If you want to disable all of them after this feature has already
         * been initialized, use this function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.EXTRA_CONSOLE_COMMANDS`.
         *
         * @public
         */
        removeAllConsoleCommands() {
          this.commandFunctionMap.clear();
        }
      };
      exports2.ExtraConsoleCommands = ExtraConsoleCommands;
      __decorate([
        decorators_1.Exported
      ], ExtraConsoleCommands.prototype, "addConsoleCommand", null);
      __decorate([
        decorators_1.Exported
      ], ExtraConsoleCommands.prototype, "removeConsoleCommand", null);
      __decorate([
        decorators_1.Exported
      ], ExtraConsoleCommands.prototype, "removeAllConsoleCommands", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/FadeInRemover.js
  var require_FadeInRemover = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/FadeInRemover.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FadeInRemover = void 0;
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var Feature_1 = require_Feature();
      var INSTANT_FADE_IN_SPEED = 1;
      var FadeInRemover = class extends Feature_1.Feature {
        enabled = false;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED,
              this.postGameStartedReordered,
              [void 0]
            ]
          ];
        }
        // ModCallbackCustom.POST_GAME_STARTED_REORDERED
        postGameStartedReordered = () => {
          if (this.enabled) {
            cachedClasses_1.game.Fadein(INSTANT_FADE_IN_SPEED);
          }
        };
        /**
         * Removes the fade-in that occurs at the beginning of a run. If this behavior is desired, call
         * this function once at the beginning of your mod.
         *
         * This is useful for debugging, when you are resetting the game often.
         *
         * You can restore the vanilla behavior with the `restoreFadeIn` function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.FADE_IN_REMOVER`.
         *
         * @public
         */
        removeFadeIn() {
          this.enabled = true;
        }
        /**
         * Disables the fade-in remover. Only useful if you have previously called the `removeFadeIn`
         * function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.FADE_IN_REMOVER`.
         *
         * @public
         */
        restoreFadeIn() {
          this.enabled = false;
        }
      };
      exports2.FadeInRemover = FadeInRemover;
      __decorate([
        decorators_1.Exported
      ], FadeInRemover.prototype, "removeFadeIn", null);
      __decorate([
        decorators_1.Exported
      ], FadeInRemover.prototype, "restoreFadeIn", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/FastReset.js
  var require_FastReset = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/FastReset.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FastReset = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var input_1 = require_input();
      var run_1 = require_run();
      var Feature_1 = require_Feature();
      var FastReset = class extends Feature_1.Feature {
        enabled = false;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
        }
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          if (!this.enabled) {
            return;
          }
          checkResetInput();
        };
        /**
         * Enables the fast-reset feature, which allows you to restart the game instantaneously. If this
         * behavior is desired, call this function once at the beginning of your mod.
         *
         * This is useful for debugging, when you are resetting the game often.
         *
         * You can disable the fast-reset feature with the `disableFastReset` function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.FAST_RESET`.
         *
         * @public
         */
        enableFastReset() {
          this.enabled = true;
        }
        /**
         * Disables the fast-reset feature. Only useful if you have previously called the
         * `enableFastReset` function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.FAST_RESET`.
         *
         * @public
         */
        disableFastReset() {
          this.enabled = false;
        }
      };
      exports2.FastReset = FastReset;
      __decorate([
        decorators_1.Exported
      ], FastReset.prototype, "enableFastReset", null);
      __decorate([
        decorators_1.Exported
      ], FastReset.prototype, "disableFastReset", null);
      function checkResetInput() {
        const isPaused = cachedClasses_1.game.IsPaused();
        if (isPaused) {
          return;
        }
        if (AwaitingTextInput) {
          return;
        }
        if ((0, input_1.isModifierKeyPressed)()) {
          return;
        }
        if ((0, input_1.isActionTriggeredOnAnyInput)(isaac_typescript_definitions_1.ButtonAction.RESTART)) {
          (0, run_1.restart)();
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/FlyingDetection.js
  var require_FlyingDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/FlyingDetection.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.FlyingDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var Feature_1 = require_Feature();
      var FLYING_NULL_ITEMS = [
        isaac_typescript_definitions_1.NullItemID.REVERSE_SUN,
        isaac_typescript_definitions_1.NullItemID.SPIRIT_SHACKLES_SOUL,
        isaac_typescript_definitions_1.NullItemID.LOST_CURSE
        // 112
      ];
      var FlyingDetection = class extends Feature_1.Feature {
        moddedElementSets;
        /** @internal */
        constructor(moddedElementSets) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.MODDED_ELEMENT_SETS];
          this.moddedElementSets = moddedElementSets;
        }
        /**
         * Helper function to see if the player currently has flying from a temporary effect such as
         * Hanged Man, Bat Wing, and so on.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.FLYING_DETECTION`.
         *
         * @public
         */
        hasFlyingTemporaryEffect(player) {
          const effects = player.GetEffects();
          const flyingCollectibles = this.moddedElementSets.getFlyingCollectibleTypes(true);
          for (const collectibleType of flyingCollectibles) {
            if (effects.HasCollectibleEffect(collectibleType)) {
              return true;
            }
          }
          const flyingTrinkets = this.moddedElementSets.getFlyingTrinketTypes();
          for (const trinketType of flyingTrinkets) {
            if (effects.HasTrinketEffect(trinketType)) {
              return true;
            }
          }
          for (const nullItemID of FLYING_NULL_ITEMS) {
            if (effects.HasNullEffect(nullItemID)) {
              return true;
            }
          }
          return false;
        }
      };
      exports2.FlyingDetection = FlyingDetection;
      __decorate([
        decorators_1.Exported
      ], FlyingDetection.prototype, "hasFlyingTemporaryEffect", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/ForgottenSwitch.js
  var require_ForgottenSwitch = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/ForgottenSwitch.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ForgottenSwitch = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var Feature_1 = require_Feature();
      var ForgottenSwitch = class extends Feature_1.Feature {
        /** @internal */
        v = {
          run: {
            shouldSwitch: false
          }
        };
        pressInput;
        /** @internal */
        constructor(pressInput) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.PRESS_INPUT];
          this.pressInput = pressInput;
        }
        /**
         * When used on The Forgotten, switches to The Soul. When used on The Soul, switches to The
         * Forgotten. This takes 1 game frame to take effect.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.FORGOTTEN_SWITCH`.
         *
         * @public
         */
        forgottenSwitch(player) {
          this.pressInput.pressInput(player, isaac_typescript_definitions_1.ButtonAction.DROP);
        }
      };
      exports2.ForgottenSwitch = ForgottenSwitch;
      __decorate([
        decorators_1.Exported
      ], ForgottenSwitch.prototype, "forgottenSwitch", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/ItemPoolDetection.js
  var require_ItemPoolDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/ItemPoolDetection.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ItemPoolDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var collectibleTag_1 = require_collectibleTag();
      var playerCollectibles_1 = require_playerCollectibles();
      var playerDataStructures_1 = require_playerDataStructures();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      var utils_1 = require_utils();
      var Feature_1 = require_Feature();
      var COLLECTIBLE_TYPE_THAT_IS_NOT_IN_ANY_POOLS = isaac_typescript_definitions_1.CollectibleType.KEY_PIECE_1;
      var COLLECTIBLES_THAT_AFFECT_ITEM_POOLS = [
        isaac_typescript_definitions_1.CollectibleType.CHAOS,
        isaac_typescript_definitions_1.CollectibleType.SACRED_ORB,
        isaac_typescript_definitions_1.CollectibleType.TMTRAINER
        // 721
      ];
      var TRINKETS_THAT_AFFECT_ITEM_POOLS = [isaac_typescript_definitions_1.TrinketType.NO];
      var ItemPoolDetection = class extends Feature_1.Feature {
        moddedElementSets;
        /** @internal */
        constructor(moddedElementSets) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.MODDED_ELEMENT_SETS];
          this.moddedElementSets = moddedElementSets;
        }
        /**
         * Helper function to get the remaining collectibles in a given item pool. This function is
         * expensive, so only use it in situations where the lag is acceptable.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ITEM_POOL_DETECTION`.
         *
         * @public
         */
        getCollectiblesInItemPool(itemPoolType) {
          const collectibleArray = this.moddedElementSets.getCollectibleTypes();
          return collectibleArray.filter((collectibleType) => this.isCollectibleInItemPool(collectibleType, itemPoolType));
        }
        /**
         * Helper function to see if the given collectible is still present in the given item pool.
         *
         * If the collectible is non-offensive, any Tainted Losts will be temporarily changed to Isaac and
         * then changed back. (This is because Tainted Lost is not able to retrieve non-offensive
         * collectibles from item pools).
         *
         * Under the hood, this function works by using the `ItemPool.AddRoomBlacklist` method to
         * blacklist every collectible except for the one provided.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ITEM_POOL_DETECTION`.
         *
         * @public
         */
        isCollectibleInItemPool(collectibleType, itemPoolType) {
          if (collectibleType === COLLECTIBLE_TYPE_THAT_IS_NOT_IN_ANY_POOLS) {
            return false;
          }
          const taintedLosts = (0, players_1.getPlayersOfType)(isaac_typescript_definitions_1.PlayerType.LOST_B);
          const isOffensive = (0, collectibleTag_1.collectibleHasTag)(collectibleType, isaac_typescript_definitions_1.ItemConfigTag.OFFENSIVE);
          let changedPlayerTypes = false;
          if (!isOffensive) {
            changedPlayerTypes = true;
            for (const player of taintedLosts) {
              player.ChangePlayerType(isaac_typescript_definitions_1.PlayerType.ISAAC);
            }
          }
          const { removedItemsMap, removedTrinketsMap } = removeItemsAndTrinketsThatAffectItemPools();
          const itemPool = cachedClasses_1.game.GetItemPool();
          itemPool.ResetRoomBlacklist();
          for (const collectibleTypeInSet of this.moddedElementSets.getCollectibleTypes()) {
            if (collectibleTypeInSet !== collectibleType) {
              itemPool.AddRoomBlacklist(collectibleTypeInSet);
            }
          }
          const seed = 1;
          const retrievedCollectibleType = itemPool.GetCollectible(itemPoolType, false, seed, COLLECTIBLE_TYPE_THAT_IS_NOT_IN_ANY_POOLS);
          const collectibleUnlocked = retrievedCollectibleType === collectibleType;
          itemPool.ResetRoomBlacklist();
          restoreItemsAndTrinketsThatAffectItemPools(removedItemsMap, removedTrinketsMap);
          if (changedPlayerTypes) {
            for (const player of taintedLosts) {
              player.ChangePlayerType(isaac_typescript_definitions_1.PlayerType.LOST_B);
            }
          }
          return collectibleUnlocked;
        }
        /**
         * Helper function to see if the given collectible is unlocked on the current save file. This
         * requires providing the corresponding item pool that the collectible is normally located in.
         *
         * - If any player currently has the collectible, then it is assumed to be unlocked. (This is
         *   because in almost all cases, when a collectible is added to a player's inventory, it is
         *   subsequently removed from all pools.)
         * - If the collectible is located in more than one item pool, then any item pool can be provided.
         * - If the collectible is not located in any item pools, then this function will always return
         *   false.
         * - If the collectible is non-offensive, any Tainted Losts will be temporarily changed to Isaac
         *   and then changed back. (This is because Tainted Lost is not able to retrieve non-offensive
         *   collectibles from item pools).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ITEM_POOL_DETECTION`.
         *
         * @public
         */
        isCollectibleUnlocked(collectibleType, itemPoolType) {
          if ((0, playerCollectibles_1.anyPlayerHasCollectible)(collectibleType)) {
            return true;
          }
          return this.isCollectibleInItemPool(collectibleType, itemPoolType);
        }
      };
      exports2.ItemPoolDetection = ItemPoolDetection;
      __decorate([
        decorators_1.Exported
      ], ItemPoolDetection.prototype, "getCollectiblesInItemPool", null);
      __decorate([
        decorators_1.Exported
      ], ItemPoolDetection.prototype, "isCollectibleInItemPool", null);
      __decorate([
        decorators_1.Exported
      ], ItemPoolDetection.prototype, "isCollectibleUnlocked", null);
      function removeItemsAndTrinketsThatAffectItemPools() {
        const removedItemsMap = /* @__PURE__ */ new Map();
        const removedTrinketsMap = /* @__PURE__ */ new Map();
        for (const player of (0, playerIndex_1.getAllPlayers)()) {
          const removedItems = [];
          for (const itemToRemove of COLLECTIBLES_THAT_AFFECT_ITEM_POOLS) {
            const numCollectibles = player.GetCollectibleNum(itemToRemove);
            (0, utils_1.repeat)(numCollectibles, () => {
              player.RemoveCollectible(itemToRemove);
              removedItems.push(itemToRemove);
            });
          }
          (0, playerDataStructures_1.mapSetPlayer)(removedItemsMap, player, removedItems);
          const removedTrinkets = [];
          for (const trinketToRemove of TRINKETS_THAT_AFFECT_ITEM_POOLS) {
            if (player.HasTrinket(trinketToRemove)) {
              const numTrinkets = player.GetTrinketMultiplier(trinketToRemove);
              (0, utils_1.repeat)(numTrinkets, () => {
                player.TryRemoveTrinket(trinketToRemove);
                removedTrinkets.push(trinketToRemove);
              });
            }
          }
          (0, playerDataStructures_1.mapSetPlayer)(removedTrinketsMap, player, removedTrinkets);
        }
        return { removedItemsMap, removedTrinketsMap };
      }
      function restoreItemsAndTrinketsThatAffectItemPools(removedItemsMap, removedTrinketsMap) {
        for (const player of (0, playerIndex_1.getAllPlayers)()) {
          const removedItems = (0, playerDataStructures_1.mapGetPlayer)(removedItemsMap, player);
          if (removedItems !== void 0) {
            for (const collectibleType of removedItems) {
              player.AddCollectible(collectibleType, 0, false);
            }
          }
          const removedTrinkets = (0, playerDataStructures_1.mapGetPlayer)(removedTrinketsMap, player);
          if (removedTrinkets !== void 0) {
            for (const trinketType of removedTrinkets) {
              player.AddTrinket(trinketType, false);
            }
          }
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/ModdedElementDetection.js
  var require_ModdedElementDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/ModdedElementDetection.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModdedElementDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constantsFirstLast_1 = require_constantsFirstLast();
      var decorators_1 = require_decorators();
      var Feature_1 = require_Feature();
      var FIRST_MODDED_COLLECTIBLE_TYPE = constantsFirstLast_1.LAST_VANILLA_COLLECTIBLE_TYPE + 1;
      var FIRST_MODDED_TRINKET_TYPE = constantsFirstLast_1.LAST_VANILLA_TRINKET_TYPE + 1;
      var FIRST_MODDED_CARD_TYPE = constantsFirstLast_1.LAST_VANILLA_CARD_TYPE + 1;
      var FIRST_MODDED_PILL_EFFECT = constantsFirstLast_1.LAST_VANILLA_PILL_EFFECT + 1;
      var ModdedElementDetection = class extends Feature_1.Feature {
        atLeastOneCallbackFired = false;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 9
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_INIT, this.postPlayerInit]
          ];
        }
        // ModCallback.POST_PLAYER_INIT (9)
        postPlayerInit = () => {
          this.atLeastOneCallbackFired = true;
        };
        errorIfNoCallbacksFired(constantType) {
          if (!this.atLeastOneCallbackFired) {
            error(`Failed to retrieve a ${constantType} constant. Since not all mods have been loaded yet, any constants of this type will be inaccurate. Thus, you must wait until at least one callback fires before retrieving these types of constants.`);
          }
        }
        // ------------
        // Collectibles
        // ------------
        /**
         * Returns the first modded collectible type, or undefined if there are no modded collectibles.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectibles will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getFirstModdedCollectibleType() {
          this.errorIfNoCallbacksFired("collectible");
          const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(FIRST_MODDED_COLLECTIBLE_TYPE);
          return itemConfigItem === void 0 ? void 0 : FIRST_MODDED_COLLECTIBLE_TYPE;
        }
        /**
         * Will change depending on how many modded collectibles there are.
         *
         * Equal to `itemConfig.GetCollectibles().Size - 1`. (`Size` includes invalid collectibles, like
         * 666. We subtract one to account for `CollectibleType.NULL`.)
         *
         * If there are no mods present that add any custom collectibles, this function will return
         * `CollectibleType.MOMS_RING` (732).
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectibles will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getLastCollectibleType() {
          this.errorIfNoCallbacksFired("collectible");
          return cachedClasses_1.itemConfig.GetCollectibles().Size - 1;
        }
        /**
         * Returns the total number of collectibles in the item config, including both vanilla and modded
         * collectibles. If you just need the number of vanilla collectible types, use the
         * `NUM_VANILLA_COLLECTIBLE_TYPES` constant.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectibles will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumCollectibleTypes() {
          this.errorIfNoCallbacksFired("collectible");
          return constantsFirstLast_1.NUM_VANILLA_COLLECTIBLE_TYPES + this.getNumModdedCollectibleTypes();
        }
        /**
         * Unlike vanilla collectible types, modded collectible types are always contiguous.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectibles will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumModdedCollectibleTypes() {
          this.errorIfNoCallbacksFired("collectible");
          return this.getLastCollectibleType() - constantsFirstLast_1.LAST_VANILLA_COLLECTIBLE_TYPE;
        }
        // --------
        // Trinkets
        // --------
        /**
         * Returns the first modded trinket type, or undefined if there are no modded trinkets.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinkets will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getFirstModdedTrinketType() {
          this.errorIfNoCallbacksFired("trinket");
          const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(FIRST_MODDED_TRINKET_TYPE);
          return itemConfigItem === void 0 ? void 0 : FIRST_MODDED_TRINKET_TYPE;
        }
        /**
         * Will change depending on how many modded trinkets there are.
         *
         * Equal to `itemConfig.GetTrinkets().Size - 1`. (`Size` includes invalid trinkets, like 47. We
         * subtract one to account for `TrinketType.NULL`.)
         *
         * If there are no mods present that add any custom trinkets, this function will return
         * `TrinketType.SIGIL_OF_BAPHOMET` (189).
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinkets will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getLastTrinketType() {
          this.errorIfNoCallbacksFired("trinket");
          return cachedClasses_1.itemConfig.GetTrinkets().Size - 1;
        }
        /**
         * Returns the total number of trinkets in the item config, including both vanilla and modded
         * trinkets. If you just need the number of vanilla trinket types, use the
         * `NUM_VANILLA_TRINKET_TYPES` constant.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinkets will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumTrinketTypes() {
          this.errorIfNoCallbacksFired("trinket");
          return constantsFirstLast_1.NUM_VANILLA_TRINKET_TYPES + this.getNumModdedTrinketTypes();
        }
        /**
         * Unlike vanilla trinket types, modded trinket types are always contiguous.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinkets will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumModdedTrinketTypes() {
          this.errorIfNoCallbacksFired("trinket");
          return this.getLastTrinketType() - constantsFirstLast_1.LAST_VANILLA_TRINKET_TYPE;
        }
        // -----
        // Cards
        // -----
        /**
         * Returns the first modded card sub-type, or undefined if there are no modded cards.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all cards will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getFirstModdedCardType() {
          this.errorIfNoCallbacksFired("card");
          const itemConfigCard = cachedClasses_1.itemConfig.GetCard(FIRST_MODDED_CARD_TYPE);
          return itemConfigCard === void 0 ? void 0 : FIRST_MODDED_CARD_TYPE;
        }
        /**
         * Will change depending on how many modded cards there are.
         *
         * Equal to `itemConfig.GetCards().Size - 1`. (`Size` includes invalid cards, but since cards are
         * contiguous, there are no invalid cards. We subtract one to account for `CardType.NULL`.)
         *
         * If there are no mods present that add any custom cards, this function will return
         * `CardType.SOUL_OF_JACOB_AND_ESAU` (97).
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinkets will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getLastCardType() {
          this.errorIfNoCallbacksFired("card");
          return cachedClasses_1.itemConfig.GetCards().Size - 1;
        }
        /**
         * Returns the total number of cards in the item config, including both vanilla and modded cards.
         * If you just need the number of vanilla card types, use the `NUM_VANILLA_CARD_TYPES` constant.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all cards will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumCardTypes() {
          this.errorIfNoCallbacksFired("card");
          return constantsFirstLast_1.NUM_VANILLA_CARD_TYPES + this.getNumModdedCardTypes();
        }
        /**
         * Like vanilla card types, modded card types are always contiguous.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all cards will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumModdedCardTypes() {
          this.errorIfNoCallbacksFired("card");
          return this.getLastCardType() - constantsFirstLast_1.LAST_VANILLA_CARD_TYPE;
        }
        // ------------
        // Pill Effects
        // ------------
        /**
         * Returns the first modded pill effect, or undefined if there are no modded pill effects.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all pill effects will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getFirstModdedPillEffect() {
          this.errorIfNoCallbacksFired("pill");
          const itemConfigPillEffect = cachedClasses_1.itemConfig.GetPillEffect(FIRST_MODDED_PILL_EFFECT);
          return itemConfigPillEffect === void 0 ? void 0 : FIRST_MODDED_PILL_EFFECT;
        }
        /**
         * Will change depending on how many modded pill effects there are.
         *
         * Equal to `itemConfig.GetPillEffects().Size - 1`. (`Size` includes invalid pill effects, but
         * since pill effects are contiguous, there are no invalid pill effects. We subtract one to
         * account for the enum starting at 0 instead of 1.)
         *
         * If there are no mods present that add any custom pill effects, this function will return
         * `PillEffect.EXPERIMENTAL` (49).
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all pill effects will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getLastPillEffect() {
          this.errorIfNoCallbacksFired("pill");
          return cachedClasses_1.itemConfig.GetPillEffects().Size - 1;
        }
        /**
         * Returns the total number of pill effects in the item config, including both vanilla and modded
         * pill effects. If you just need the number of vanilla pill effects, use the
         * `NUM_VANILLA_PILL_EFFECTS` constant.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all cards will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumPillEffects() {
          this.errorIfNoCallbacksFired("pill");
          return constantsFirstLast_1.NUM_VANILLA_PILL_EFFECTS + this.getNumModdedPillEffects();
        }
        /**
         * Like vanilla pill effects, modded pill effects are always contiguous.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all cards will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.MODDED_ELEMENT_DETECTION`.
         *
         * @public
         */
        getNumModdedPillEffects() {
          this.errorIfNoCallbacksFired("card");
          return this.getLastPillEffect() - constantsFirstLast_1.LAST_VANILLA_PILL_EFFECT;
        }
      };
      exports2.ModdedElementDetection = ModdedElementDetection;
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getFirstModdedCollectibleType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getLastCollectibleType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumModdedCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getFirstModdedTrinketType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getLastTrinketType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumTrinketTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumModdedTrinketTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getFirstModdedCardType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getLastCardType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumCardTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumModdedCardTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getFirstModdedPillEffect", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getLastPillEffect", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumPillEffects", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementDetection.prototype, "getNumModdedPillEffects", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/ModdedElementSets.js
  var require_ModdedElementSets = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/ModdedElementSets.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModdedElementSets = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var constantsVanilla_1 = require_constantsVanilla();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var array_1 = require_array();
      var cards_1 = require_cards();
      var collectibleTag_1 = require_collectibleTag();
      var collectibles_1 = require_collectibles();
      var flag_1 = require_flag();
      var set_1 = require_set();
      var trinkets_1 = require_trinkets();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var itemConfigCardTypesForCards_1 = require_itemConfigCardTypesForCards();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var Feature_1 = require_Feature();
      var CONDITIONAL_FLYING_COLLECTIBLE_TYPES = [
        isaac_typescript_definitions_1.CollectibleType.BIBLE,
        isaac_typescript_definitions_1.CollectibleType.EMPTY_VESSEL,
        isaac_typescript_definitions_1.CollectibleType.ASTRAL_PROJECTION,
        isaac_typescript_definitions_1.CollectibleType.RECALL
      ];
      var TRANSFORMATION_TO_TAG_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.PlayerForm.GUPPY, isaac_typescript_definitions_1.ItemConfigTag.GUPPY],
        [isaac_typescript_definitions_1.PlayerForm.BEELZEBUB, isaac_typescript_definitions_1.ItemConfigTag.FLY],
        [isaac_typescript_definitions_1.PlayerForm.FUN_GUY, isaac_typescript_definitions_1.ItemConfigTag.MUSHROOM],
        [isaac_typescript_definitions_1.PlayerForm.SERAPHIM, isaac_typescript_definitions_1.ItemConfigTag.ANGEL],
        [isaac_typescript_definitions_1.PlayerForm.BOB, isaac_typescript_definitions_1.ItemConfigTag.BOB],
        [isaac_typescript_definitions_1.PlayerForm.SPUN, isaac_typescript_definitions_1.ItemConfigTag.SYRINGE],
        [isaac_typescript_definitions_1.PlayerForm.YES_MOTHER, isaac_typescript_definitions_1.ItemConfigTag.MOM],
        [isaac_typescript_definitions_1.PlayerForm.CONJOINED, isaac_typescript_definitions_1.ItemConfigTag.BABY],
        [isaac_typescript_definitions_1.PlayerForm.LEVIATHAN, isaac_typescript_definitions_1.ItemConfigTag.DEVIL],
        [isaac_typescript_definitions_1.PlayerForm.OH_CRAP, isaac_typescript_definitions_1.ItemConfigTag.POOP],
        [isaac_typescript_definitions_1.PlayerForm.BOOKWORM, isaac_typescript_definitions_1.ItemConfigTag.BOOK],
        // PlayerForm.ADULTHOOD (11) is based on pill usage.
        [isaac_typescript_definitions_1.PlayerForm.SPIDER_BABY, isaac_typescript_definitions_1.ItemConfigTag.SPIDER]
        // 12
        // PlayerForm.STOMPY (13) is based on size.
      ]);
      var ModdedElementSets = class extends Feature_1.Feature {
        arraysInitialized = false;
        // ----------------
        // Main collections
        // ----------------
        allCollectibleTypesArray = [];
        allCollectibleTypesSet = /* @__PURE__ */ new Set();
        moddedCollectibleTypesArray = [];
        moddedCollectibleTypesSet = /* @__PURE__ */ new Set();
        allTrinketTypesArray = [];
        allTrinketTypesSet = /* @__PURE__ */ new Set();
        moddedTrinketTypesArray = [];
        moddedTrinketTypesSet = /* @__PURE__ */ new Set();
        allCardTypesArray = [];
        allCardTypesSet = /* @__PURE__ */ new Set();
        moddedCardTypesArray = [];
        moddedCardTypesSet = /* @__PURE__ */ new Set();
        allPillEffectsArray = [];
        allPillEffectsSet = /* @__PURE__ */ new Set();
        moddedPillEffectsArray = [];
        moddedPillEffectsSet = /* @__PURE__ */ new Set();
        // -----------------
        // Other collections
        // -----------------
        cacheFlagToCollectibleTypesMap = /* @__PURE__ */ new Map();
        cacheFlagToTrinketTypesMap = /* @__PURE__ */ new Map();
        flyingCollectibleTypes = [];
        permanentFlyingCollectibleTypes = [];
        flyingTrinketTypes = [];
        tagToCollectibleTypesMap = /* @__PURE__ */ new Map();
        edenActiveCollectibleTypesSet = /* @__PURE__ */ new Set();
        edenPassiveCollectibleTypesSet = /* @__PURE__ */ new Set();
        qualityToCollectibleTypesMap = /* @__PURE__ */ new Map();
        itemConfigCardTypeToCardTypeMap = /* @__PURE__ */ new Map();
        /**
         * The array of card types that are not:
         *
         * - ItemConfigCardType.RUNE
         * - ItemConfigCardType.SPECIAL_OBJECT
         */
        cardTypeCardArray = [];
        moddedElementDetection;
        /** @internal */
        constructor(moddedElementDetection) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.MODDED_ELEMENT_DETECTION];
          this.moddedElementDetection = moddedElementDetection;
        }
        lazyInit() {
          if (this.arraysInitialized) {
            return;
          }
          this.arraysInitialized = true;
          this.lazyInitModdedCollectibleTypes();
          this.lazyInitModdedTrinketTypes();
          this.lazyInitModdedCardTypes();
          this.lazyInitModdedPillEffects();
          this.lazyInitTagToCollectibleTypesMap();
          this.lazyInitCacheFlagToCollectibleTypesMap();
          this.lazyInitCacheFlagToTrinketTypesMap();
          this.lazyInitFlyingCollectibleTypesSet();
          this.lazyInitFlyingTrinketTypesSet();
          this.lazyInitEdenCollectibleTypesSet();
          this.lazyInitQualityToCollectibleTypesMap();
          this.lazyInitCardTypes();
        }
        lazyInitModdedCollectibleTypes() {
          for (const collectibleType of constantsVanilla_1.VANILLA_COLLECTIBLE_TYPES) {
            this.allCollectibleTypesArray.push(collectibleType);
            this.allCollectibleTypesSet.add(collectibleType);
          }
          const firstModdedCollectibleType = this.moddedElementDetection.getFirstModdedCollectibleType();
          if (firstModdedCollectibleType === void 0) {
            return;
          }
          const lastCollectibleType = this.moddedElementDetection.getLastCollectibleType();
          const moddedCollectibleTypes = (0, utils_1.iRange)(firstModdedCollectibleType, lastCollectibleType);
          for (const collectibleTypeInt of moddedCollectibleTypes) {
            const collectibleType = (0, types_1.asCollectibleType)(collectibleTypeInt);
            const itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
            if (itemConfigItem !== void 0) {
              this.moddedCollectibleTypesArray.push(collectibleType);
              this.moddedCollectibleTypesSet.add(collectibleType);
              this.allCollectibleTypesArray.push(collectibleType);
              this.allCollectibleTypesSet.add(collectibleType);
            }
          }
        }
        lazyInitModdedTrinketTypes() {
          for (const trinketType of constantsVanilla_1.VANILLA_TRINKET_TYPES) {
            this.allTrinketTypesArray.push(trinketType);
            this.allTrinketTypesSet.add(trinketType);
          }
          const firstModdedTrinketType = this.moddedElementDetection.getFirstModdedTrinketType();
          if (firstModdedTrinketType === void 0) {
            return;
          }
          const lastTrinketType = this.moddedElementDetection.getLastTrinketType();
          const moddedTrinketTypes = (0, utils_1.iRange)(firstModdedTrinketType, lastTrinketType);
          for (const trinketTypeInt of moddedTrinketTypes) {
            const trinketType = (0, types_1.asTrinketType)(trinketTypeInt);
            const itemConfigItem = cachedClasses_1.itemConfig.GetTrinket(trinketType);
            if (itemConfigItem !== void 0) {
              this.moddedTrinketTypesArray.push(trinketType);
              this.moddedTrinketTypesSet.add(trinketType);
              this.allTrinketTypesArray.push(trinketType);
              this.allTrinketTypesSet.add(trinketType);
            }
          }
        }
        lazyInitModdedCardTypes() {
          for (const cardType of constantsVanilla_1.VANILLA_CARD_TYPES) {
            this.allCardTypesArray.push(cardType);
            this.allCardTypesSet.add(cardType);
          }
          const firstModdedCardType = this.moddedElementDetection.getFirstModdedCardType();
          if (firstModdedCardType === void 0) {
            return;
          }
          const lastCardType = this.moddedElementDetection.getLastCardType();
          const moddedCardTypes = (0, utils_1.iRange)(firstModdedCardType, lastCardType);
          for (const cardTypeInt of moddedCardTypes) {
            const cardType = (0, types_1.asCardType)(cardTypeInt);
            const itemConfigCard = cachedClasses_1.itemConfig.GetCard(cardType);
            if (itemConfigCard !== void 0) {
              this.moddedCardTypesArray.push(cardType);
              this.moddedCardTypesSet.add(cardType);
              this.allCardTypesArray.push(cardType);
              this.allCardTypesSet.add(cardType);
            }
          }
        }
        lazyInitModdedPillEffects() {
          for (const pillEffect of constantsVanilla_1.VANILLA_PILL_EFFECTS) {
            this.allPillEffectsArray.push(pillEffect);
            this.allPillEffectsSet.add(pillEffect);
          }
          const firstModdedPillEffect = this.moddedElementDetection.getFirstModdedPillEffect();
          if (firstModdedPillEffect === void 0) {
            return;
          }
          const lastPillEffect = this.moddedElementDetection.getLastPillEffect();
          const moddedPillEffects = (0, utils_1.iRange)(firstModdedPillEffect, lastPillEffect);
          for (const pillEffectInt of moddedPillEffects) {
            const pillEffect = (0, types_1.asPillEffect)(pillEffectInt);
            const itemConfigPillEffect = cachedClasses_1.itemConfig.GetPillEffect(pillEffect);
            if (itemConfigPillEffect !== void 0) {
              this.moddedPillEffectsArray.push(pillEffect);
              this.moddedPillEffectsSet.add(pillEffect);
              this.allPillEffectsArray.push(pillEffect);
              this.allPillEffectsSet.add(pillEffect);
            }
          }
        }
        lazyInitTagToCollectibleTypesMap() {
          for (const itemConfigTag of cachedEnumValues_1.ITEM_CONFIG_TAG_VALUES) {
            this.tagToCollectibleTypesMap.set(itemConfigTag, []);
          }
          for (const collectibleType of this.getCollectibleTypes()) {
            for (const itemConfigTag of cachedEnumValues_1.ITEM_CONFIG_TAG_VALUES) {
              if (!(0, collectibleTag_1.collectibleHasTag)(collectibleType, itemConfigTag)) {
                continue;
              }
              const collectibleTypes = this.tagToCollectibleTypesMap.get(itemConfigTag);
              if (collectibleTypes === void 0) {
                const flagName = (0, flag_1.getFlagName)(itemConfigTag, isaac_typescript_definitions_1.ItemConfigTag);
                error(`Failed to get the collectible types for item tag: ${flagName}`);
              }
              collectibleTypes.push(collectibleType);
            }
          }
        }
        lazyInitCacheFlagToCollectibleTypesMap() {
          for (const cacheFlag of cachedEnumValues_1.CACHE_FLAG_VALUES) {
            const collectibleTypes = [];
            for (const collectibleType of this.getCollectibleTypes()) {
              if ((0, collectibles_1.collectibleHasCacheFlag)(collectibleType, cacheFlag)) {
                collectibleTypes.push(collectibleType);
              }
            }
            this.cacheFlagToCollectibleTypesMap.set(cacheFlag, collectibleTypes);
          }
        }
        lazyInitCacheFlagToTrinketTypesMap() {
          for (const cacheFlag of cachedEnumValues_1.CACHE_FLAG_VALUES) {
            const trinketTypes = [];
            for (const trinketType of this.getTrinketTypes()) {
              if ((0, trinkets_1.trinketHasCacheFlag)(trinketType, cacheFlag)) {
                trinketTypes.push(trinketType);
              }
            }
            this.cacheFlagToTrinketTypesMap.set(cacheFlag, trinketTypes);
          }
        }
        lazyInitFlyingCollectibleTypesSet() {
          const collectibleTypesWithFlyingCacheFlag = this.getCollectibleTypesWithCacheFlag(isaac_typescript_definitions_1.CacheFlag.FLYING);
          const collectibleTypesWithAllCacheFlag = this.getCollectibleTypesWithCacheFlag(isaac_typescript_definitions_1.CacheFlag.ALL);
          this.flyingCollectibleTypes = (0, array_1.arrayRemove)(collectibleTypesWithFlyingCacheFlag, ...collectibleTypesWithAllCacheFlag);
          this.permanentFlyingCollectibleTypes = (0, array_1.arrayRemove)(this.flyingCollectibleTypes, ...CONDITIONAL_FLYING_COLLECTIBLE_TYPES);
        }
        lazyInitFlyingTrinketTypesSet() {
          const trinketTypesWithFlyingCacheFlag = this.getTrinketsTypesWithCacheFlag(isaac_typescript_definitions_1.CacheFlag.FLYING);
          const trinketTypesWithAllCacheFlag = this.getTrinketsTypesWithCacheFlag(isaac_typescript_definitions_1.CacheFlag.ALL);
          const trinketTypesWithAllCacheFlagThatDontGrantFlying = (0, array_1.arrayRemove)(trinketTypesWithAllCacheFlag, isaac_typescript_definitions_1.TrinketType.AZAZELS_STUMP);
          this.flyingTrinketTypes = (0, array_1.arrayRemove)(trinketTypesWithFlyingCacheFlag, ...trinketTypesWithAllCacheFlagThatDontGrantFlying);
        }
        lazyInitEdenCollectibleTypesSet() {
          for (const collectibleType of this.getCollectibleTypes()) {
            if ((0, collectibles_1.isHiddenCollectible)(collectibleType) || (0, collectibleTag_1.collectibleHasTag)(collectibleType, isaac_typescript_definitions_1.ItemConfigTag.NO_EDEN)) {
              continue;
            }
            if ((0, collectibles_1.isActiveCollectible)(collectibleType)) {
              this.edenActiveCollectibleTypesSet.add(collectibleType);
            }
            if ((0, collectibles_1.isPassiveOrFamiliarCollectible)(collectibleType)) {
              this.edenPassiveCollectibleTypesSet.add(collectibleType);
            }
          }
        }
        lazyInitQualityToCollectibleTypesMap() {
          for (const quality of constants_1.QUALITIES) {
            const collectibleTypes = [];
            for (const collectibleType of this.getCollectibleTypes()) {
              const collectibleTypeQuality = (0, collectibles_1.getCollectibleQuality)(collectibleType);
              if (collectibleTypeQuality === quality) {
                collectibleTypes.push(collectibleType);
              }
            }
            this.qualityToCollectibleTypesMap.set(quality, collectibleTypes);
          }
        }
        lazyInitCardTypes() {
          for (const itemConfigCardType of cachedEnumValues_1.ITEM_CONFIG_CARD_TYPE_VALUES) {
            this.itemConfigCardTypeToCardTypeMap.set(itemConfigCardType, []);
          }
          for (const cardType of this.getCardTypes()) {
            const itemConfigCardType = (0, cards_1.getItemConfigCardType)(cardType);
            if (itemConfigCardType !== void 0) {
              const cardTypes = this.itemConfigCardTypeToCardTypeMap.get(itemConfigCardType);
              (0, utils_1.assertDefined)(cardTypes, `Failed to get the card types for item config card type: ${itemConfigCardType}`);
              cardTypes.push(cardType);
              if (itemConfigCardTypesForCards_1.ITEM_CONFIG_CARD_TYPES_FOR_CARDS.has(itemConfigCardType)) {
                this.cardTypeCardArray.push(cardType);
              }
            }
          }
        }
        // ------------
        // Collectibles
        // ------------
        /**
         * Returns an array containing every valid collectible type in the game, including modded
         * collectibles.
         *
         * Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups,
         * then use the `getCollectibleTypesSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCollectibleTypes() {
          this.lazyInit();
          return this.allCollectibleTypesArray;
        }
        /**
         * Returns a set containing every valid collectible type in the game, including modded
         * collectibles.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order,
         * then use the `getCollectibleTypes` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCollectibleTypeSet() {
          this.lazyInit();
          return this.allCollectibleTypesSet;
        }
        /**
         * Returns an array containing every modded collectible type in the game.
         *
         * Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups,
         * then use the `getModdedCollectibleTypesSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedCollectibleTypes() {
          this.lazyInit();
          return this.moddedCollectibleTypesArray;
        }
        /**
         * Returns a set containing every modded collectible type in the game.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order,
         * then use the `getModdedCollectibleTypes` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedCollectibleTypesSet() {
          this.lazyInit();
          return this.moddedCollectibleTypesSet;
        }
        /**
         * Iterates over every collectible in the game and returns a map containing the number of each
         * item that the player has.
         *
         * Note that this will filter out non-real collectibles like Lilith's Incubus.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPlayerCollectibleMap(player) {
          const collectibleArray = this.getCollectibleTypes();
          const collectibleMap = /* @__PURE__ */ new Map();
          for (const collectibleType of collectibleArray) {
            const numCollectibles = player.GetCollectibleNum(collectibleType, true);
            if (numCollectibles > 0) {
              collectibleMap.set(collectibleType, numCollectibles);
            }
          }
          if (player.HasCollectible(isaac_typescript_definitions_1.CollectibleType.TMTRAINER)) {
            let collectibleType = constants_1.FIRST_GLITCHED_COLLECTIBLE_TYPE;
            let itemConfigItem;
            do {
              itemConfigItem = cachedClasses_1.itemConfig.GetCollectible(collectibleType);
              if (itemConfigItem !== void 0) {
                const hasCollectibles = player.HasCollectible(collectibleType, true);
                if (hasCollectibles) {
                  collectibleMap.set(collectibleType, 1);
                }
              }
              collectibleType--;
            } while (itemConfigItem !== void 0);
          }
          return collectibleMap;
        }
        // --------
        // Trinkets
        // --------
        /**
         * Returns an array containing every modded trinket type in the game.
         *
         * Use this if you need to iterate over the trinkets in order. If you need to do O(1) lookups,
         * then use the `getModdedTrinketTypesSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getTrinketTypes() {
          this.lazyInit();
          return this.allTrinketTypesArray;
        }
        /**
         * Returns a set containing every modded trinket type in the game.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the trinkets in order,
         * then use the `getModdedTrinketTypes` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getTrinketTypesSet() {
          this.lazyInit();
          return this.allTrinketTypesSet;
        }
        /**
         * Returns an array containing every modded trinket type in the game.
         *
         * Use this if you need to iterate over the trinkets in order. If you need to do O(1) lookups,
         * then use the `getModdedTrinketTypesSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedTrinketTypes() {
          this.lazyInit();
          return this.moddedTrinketTypesArray;
        }
        /**
         * Returns a set containing every modded trinket type in the game.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the trinkets in order,
         * then use the `getModdedTrinketTypes` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedTrinketTypesSet() {
          this.lazyInit();
          return this.moddedTrinketTypesSet;
        }
        // -----
        // Cards
        // -----
        /**
         * Returns an array containing every valid card type in the game, including modded cards.
         *
         * Use this if you need to iterate over the cards in order. If you need to do O(1) lookups, then
         * use the `getCardTypesSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCardTypes() {
          this.lazyInit();
          return this.allCardTypesArray;
        }
        /**
         * Returns a set containing every valid card type in the game, including modded cards.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the cards in order, then
         * use the `getCardTypes` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCardTypesSet() {
          this.lazyInit();
          return this.allCardTypesSet;
        }
        /**
         * Returns an array containing every modded card type in the game.
         *
         * Use this if you need to iterate over the cards in order. If you need to do O(1) lookups, then
         * use the `getModdedCardTypesSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedCardTypes() {
          this.lazyInit();
          return this.moddedCardTypesArray;
        }
        /**
         * Returns a set containing every modded card type in the game.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the cards in order, then
         * use the `getModdedCardTypes` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedCardTypesSet() {
          this.lazyInit();
          return this.moddedCardTypesSet;
        }
        // ------------
        // Pill Effects
        // ------------
        /**
         * Returns an array containing every valid pill effect in the game, including modded pill effects.
         *
         * Use this if you need to iterate over the pill effects in order. If you need to do O(1) lookups,
         * then use the `getPillEffectSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all pill effects will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPillEffects() {
          this.lazyInit();
          return this.allPillEffectsArray;
        }
        /**
         * Returns a set containing every valid pill effect in the game, including modded pill effects.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the pill effects in order,
         * then use the `getPillEffects` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all pill effects will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPillEffectsSet() {
          this.lazyInit();
          return this.allPillEffectsSet;
        }
        /**
         * Returns an array containing every modded pill effect in the game.
         *
         * Use this if you need to iterate over the pill effects in order. If you need to do O(1) lookups,
         * then use the `getModdedPillEffectsSet` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all pill effects will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedPillEffects() {
          this.lazyInit();
          return this.moddedPillEffectsArray;
        }
        /**
         * Returns a set containing every modded pill effect in the game.
         *
         * Use this if you need to do O(1) lookups. If you need to iterate over the pill effects in order,
         * then use the `getModdedPillEffects` helper function instead.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all pill effects will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getModdedPillEffectsSet() {
          this.lazyInit();
          return this.moddedPillEffectsSet;
        }
        // -----------
        // Cache Flags
        // -----------
        /**
         * Returns a set containing every collectible type with the given cache flag, including modded
         * collectibles.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCollectibleTypesWithCacheFlag(cacheFlag) {
          this.lazyInit();
          const collectiblesSet = this.cacheFlagToCollectibleTypesMap.get(cacheFlag);
          if (collectiblesSet === void 0) {
            return [];
          }
          return collectiblesSet;
        }
        /**
         * Returns a set containing every trinket type with the given cache flag, including modded
         * trinkets.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getTrinketsTypesWithCacheFlag(cacheFlag) {
          this.lazyInit();
          const trinketTypes = this.cacheFlagToTrinketTypesMap.get(cacheFlag);
          if (trinketTypes === void 0) {
            return [];
          }
          return trinketTypes;
        }
        /**
         * Returns an array containing every collectible type that the player has that matches the
         * provided `CacheFlag`.
         *
         * For example, if the cache flag is `CacheFlag.FLYING`, and the player has one Lord of the Pit
         * and two Dead Doves, then this function would return:
         *
         * ```ts
         * [
         *   CollectibleType.LORD_OF_THE_PIT,
         *   CollectibleType.DEAD_DOVE,
         *   CollectibleType.DEAD_DOVE,
         * ]
         * ```
         *
         * Note that this array will not include collectibles that the player does not really have, like
         * Lilith's Incubus.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPlayerCollectiblesWithCacheFlag(player, cacheFlag) {
          const collectiblesWithCacheFlag = this.getCollectibleTypesWithCacheFlag(cacheFlag);
          const playerCollectibles = [];
          for (const collectibleType of collectiblesWithCacheFlag) {
            const numCollectibles = player.GetCollectibleNum(collectibleType, true);
            (0, utils_1.repeat)(numCollectibles, () => {
              playerCollectibles.push(collectibleType);
            });
          }
          return playerCollectibles;
        }
        /**
         * Returns a map containing every trinket type that the player has that matches the provided
         * `CacheFlag`. The values of the map correspond to the multiplier for that trinket.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPlayerTrinketsWithCacheFlag(player, cacheFlag) {
          const trinketTypesWithCacheFlag = this.getTrinketsTypesWithCacheFlag(cacheFlag);
          const playerTrinkets = /* @__PURE__ */ new Map();
          for (const trinketType of trinketTypesWithCacheFlag) {
            const trinketMultiplier = player.GetTrinketMultiplier(trinketType);
            if (trinketMultiplier > 0) {
              playerTrinkets.set(trinketType, trinketMultiplier);
            }
          }
          return playerTrinkets;
        }
        /**
         * Returns a set of all of the collectibles that grant flight. This is derived from collectibles
         * that have `CacheFlag.FLYING` set in the "items.xml" file.
         *
         * Vanilla collectibles that only grant flight conditionally are manually pruned. Collectibles
         * such as Empty Vessel should be checked for via the `hasFlyingTemporaryEffect` function.
         *
         * Under the hood, this is determined by looking at the collectibles that have `CacheFlag.FLYING`
         * and excluding the ones that have `CacheFlag.ALL`. (None of the collectibles with
         * `CacheFlag.ALL` grant flying, including all of the 3 Dollar Bill collectibles and all of the
         * Birthright effects.)
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @param includeConditionalItems Whether collectibles that only grant flight conditionally should
         *                                be included in the set (like Empty Vessel).
         * @public
         */
        getFlyingCollectibleTypes(includeConditionalItems) {
          this.lazyInit();
          return includeConditionalItems ? this.flyingCollectibleTypes : this.permanentFlyingCollectibleTypes;
        }
        /**
         * Returns a set of all of the trinkets that grant flight. (All vanilla trinkets that grant flight
         * do so conditionally, like Bat Wing and Azazel's Stump.)
         *
         * Under the hood, this is determined by looking at the trinkets that have `CacheFlag.FLYING` and
         * excluding the ones that have `CacheFlag.ALL`. (None of the trinket with `CacheFlag.ALL` grant
         * flying except for Azazel's Stump.)
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all trinket types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getFlyingTrinketTypes() {
          this.lazyInit();
          return this.flyingTrinketTypes;
        }
        // ----------------
        // Collectible Tags
        // ----------------
        /**
         * Returns a set containing every collectible type with the given tag.
         *
         * For example, to get all of the collectible types that count as offensive for the purposes of
         * Tainted Lost:
         *
         * ```ts
         * const offensiveCollectibleTypes = getCollectibleTypesWithTag(ItemConfigTag.OFFENSIVE);
         * ```
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCollectibleTypesWithTag(itemConfigTag) {
          this.lazyInit();
          const collectibleTypes = this.tagToCollectibleTypesMap.get(itemConfigTag);
          (0, utils_1.assertDefined)(collectibleTypes, `The item config tag of ${itemConfigTag} is not a valid value of the "ItemConfigTag" enum.`);
          return collectibleTypes;
        }
        /**
         * Returns an array of collectible types that a player has with a particular tag.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPlayerCollectiblesWithTag(player, itemConfigTag) {
          const collectibleTypesWithTag = this.getCollectibleTypesWithTag(itemConfigTag);
          const playerCollectibles = [];
          for (const collectibleType of collectibleTypesWithTag) {
            const numCollectibles = player.GetCollectibleNum(collectibleType, true);
            (0, utils_1.repeat)(numCollectibles, () => {
              playerCollectibles.push(collectibleType);
            });
          }
          return playerCollectibles;
        }
        /**
         * Helper function to get all of the collectible types in the game that count towards a particular
         * transformation.
         *
         * For example, to get all of the collectible types that count towards Guppy:
         *
         * ```ts
         * const guppyCollectibleTypes = getCollectiblesForTransformation(PlayerForm.GUPPY);
         * ```
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCollectibleTypesForTransformation(playerForm) {
          const itemConfigTag = TRANSFORMATION_TO_TAG_MAP.get(playerForm);
          (0, utils_1.assertDefined)(itemConfigTag, `Failed to get the collectible types for the transformation of ${playerForm} because that transformation is not based on collectibles.`);
          return this.getCollectibleTypesWithTag(itemConfigTag);
        }
        /**
         * Returns an array of collectible types that a player has that count towards a particular
         * transformation.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPlayerCollectiblesForTransformation(player, playerForm) {
          const collectibleForTransformation = this.getCollectibleTypesForTransformation(playerForm);
          const playerCollectibles = [];
          for (const collectibleType of collectibleForTransformation) {
            const numCollectibles = player.GetCollectibleNum(collectibleType, true);
            (0, utils_1.repeat)(numCollectibles, () => {
              playerCollectibles.push(collectibleType);
            });
          }
          return playerCollectibles;
        }
        /**
         * Returns a set containing every valid passive item that can be randomly granted to Eden as a
         * starting item.
         *
         * Under the hood, this is determined by looking at the "noeden" tag in "items_metadata.xml".
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getEdenActiveCollectibleTypes() {
          this.lazyInit();
          return this.edenActiveCollectibleTypesSet;
        }
        /**
         * Returns a set containing every valid passive item that can be randomly granted to Eden as a
         * starting item.
         *
         * Under the hood, this is determined by looking at the "noeden" tag in "items_metadata.xml".
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getEdenPassiveCollectibleTypes() {
          this.lazyInit();
          return this.edenPassiveCollectibleTypesSet;
        }
        /**
         * Returns a random active collectible type that that is a valid starting item for Eden.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * If you want to get an unseeded collectible type, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param exceptions Optional. An array of runes to not select.
         * @public
         */
        getRandomEdenActiveCollectibleType(seedOrRNG, exceptions = []) {
          this.lazyInit();
          return (0, set_1.getRandomSetElement)(this.edenPassiveCollectibleTypesSet, seedOrRNG, exceptions);
        }
        /**
         * Returns a random passive collectible type that that is a valid starting item for Eden
         * (including familiars).
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * If you want to get an unseeded collectible type, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param exceptions Optional. An array of runes to not select.
         * @public
         */
        getRandomEdenPassiveCollectibleType(seedOrRNG, exceptions = []) {
          this.lazyInit();
          return (0, set_1.getRandomSetElement)(this.edenPassiveCollectibleTypesSet, seedOrRNG, exceptions);
        }
        // -------------------
        // Collectible Quality
        // -------------------
        /**
         * Returns an array containing every collectible type with the given quality.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCollectibleTypesOfQuality(quality) {
          this.lazyInit();
          const collectibleTypes = this.qualityToCollectibleTypesMap.get(quality);
          (0, utils_1.assertDefined)(collectibleTypes, `The quality of ${quality} is not a valid quality.`);
          return collectibleTypes;
        }
        /**
         * Returns an array of collectible types that a player has that are of a particular quality.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all collectible types will necessarily be present when a mod first loads (due to mod load
         * order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getPlayerCollectiblesOfQuality(player, quality) {
          const collectibleTypesOfQuality = this.getCollectibleTypesOfQuality(quality);
          const playerCollectibleTypes = [];
          for (const collectibleType of collectibleTypesOfQuality) {
            const numCollectibles = player.GetCollectibleNum(collectibleType, true);
            (0, utils_1.repeat)(numCollectibles, () => {
              playerCollectibleTypes.push(collectibleType);
            });
          }
          return playerCollectibleTypes;
        }
        // ----------------------
        // Item Config Card Types
        // ----------------------
        /**
         * Helper function to get an array of card types matching the `ItemConfigCardType`.
         *
         * This function is variadic, meaning that you can you can specify N card types to get an array
         * containing cards that match any of the specified types.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @public
         */
        getCardTypesOfType(...itemConfigCardTypes) {
          this.lazyInit();
          const matchingCardTypes = [];
          for (const itemConfigCardType of itemConfigCardTypes) {
            const cardTypes = this.itemConfigCardTypeToCardTypeMap.get(itemConfigCardType);
            (0, utils_1.assertDefined)(cardTypes, `Failed to get the card types for item config type: ${itemConfigCardType}`);
            for (const cardType of cardTypes) {
              matchingCardTypes.push(cardType);
            }
          }
          return matchingCardTypes;
        }
        /**
         * Helper function to get a random card type that matches the provided `ItemConfigCardType`.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * If you want to get an unseeded card type, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @param itemConfigCardType The item config card type that represents the pool of cards to select
         *                           from.
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param exceptions Optional. An array of cards to not select.
         * @public
         */
        getRandomCardTypeOfType(itemConfigCardType, seedOrRNG, exceptions = []) {
          const cardTypes = this.getCardTypesOfType(itemConfigCardType);
          return (0, array_1.getRandomArrayElement)(cardTypes, seedOrRNG, exceptions);
        }
        /**
         * Has an equal chance of returning any card (e.g. Fool, Reverse Fool, Wild Card, etc.).
         *
         * This will not return:
         * - any runes
         * - any objects like Dice Shard
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * If you want to get an unseeded card type, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param exceptions Optional. An array of cards to not select.
         * @public
         */
        getRandomCard(seedOrRNG, exceptions = []) {
          this.lazyInit();
          return (0, array_1.getRandomArrayElement)(this.cardTypeCardArray, seedOrRNG, exceptions);
        }
        /**
         * Has an equal chance of returning any rune (e.g. Rune of Hagalaz, Blank Rune, Black Rune, Soul
         * of Isaac, etc.). This will never return a Rune Shard.
         *
         * This function can only be called if at least one callback has been executed. This is because
         * not all card types will necessarily be present when a mod first loads (due to mod load order).
         *
         * If you want to get an unseeded card type, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.MODDED_ELEMENT_SETS`.
         *
         * @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @param exceptions Optional. An array of runes to not select.
         * @public
         */
        getRandomRune(seedOrRNG, exceptions = []) {
          const runeCardTypes = this.getCardTypesOfType(isaac_typescript_definitions_1.ItemConfigCardType.RUNE);
          const runeExceptions = [...exceptions, isaac_typescript_definitions_1.CardType.RUNE_SHARD];
          return (0, array_1.getRandomArrayElement)(runeCardTypes, seedOrRNG, runeExceptions);
        }
      };
      exports2.ModdedElementSets = ModdedElementSets;
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCollectibleTypeSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedCollectibleTypesSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPlayerCollectibleMap", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getTrinketTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getTrinketTypesSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedTrinketTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedTrinketTypesSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCardTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCardTypesSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedCardTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedCardTypesSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPillEffects", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPillEffectsSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedPillEffects", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getModdedPillEffectsSet", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCollectibleTypesWithCacheFlag", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getTrinketsTypesWithCacheFlag", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPlayerCollectiblesWithCacheFlag", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPlayerTrinketsWithCacheFlag", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getFlyingCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getFlyingTrinketTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCollectibleTypesWithTag", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPlayerCollectiblesWithTag", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCollectibleTypesForTransformation", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPlayerCollectiblesForTransformation", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getEdenActiveCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getEdenPassiveCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getRandomEdenActiveCollectibleType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getRandomEdenPassiveCollectibleType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCollectibleTypesOfQuality", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getPlayerCollectiblesOfQuality", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getCardTypesOfType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getRandomCardTypeOfType", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getRandomCard", null);
      __decorate([
        decorators_1.Exported
      ], ModdedElementSets.prototype, "getRandomRune", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/NoSirenSteal.js
  var require_NoSirenSteal = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/NoSirenSteal.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.NoSirenSteal = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          familiarBlacklist: []
        }
      };
      var NoSirenSteal = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 27
            [
              isaac_typescript_definitions_1.ModCallback.POST_NPC_INIT,
              this.postNPCInitSirenHelper,
              [isaac_typescript_definitions_1.EntityType.SIREN_HELPER]
            ]
          ];
        }
        // ModCallback.POST_NPC_INIT (27)
        // EntityType.SIREN_HELPER (966)
        postNPCInitSirenHelper = (npc) => {
          this.checkReturnFamiliarToPlayer(npc);
        };
        checkReturnFamiliarToPlayer(npc) {
          if (npc.Target === void 0) {
            return;
          }
          const familiar = npc.Target.ToFamiliar();
          if (familiar === void 0) {
            return;
          }
          if (this.blacklistEntryExists(familiar.Variant, familiar.SubType)) {
            npc.Remove();
            familiar.AddToFollowers();
          }
        }
        blacklistEntryExists(incomingFamiliarVariant, incomingFamiliarSubType) {
          for (const familiarTuple of v.run.familiarBlacklist) {
            const [familiarVariant, familiarSubType] = familiarTuple;
            if (familiarVariant === incomingFamiliarVariant && familiarSubType === incomingFamiliarSubType) {
              return true;
            }
            if (familiarVariant === incomingFamiliarVariant && familiarSubType === void 0) {
              return true;
            }
          }
          return false;
        }
        /**
         * Blacklists a familiar from being stolen by The Siren boss. This should be called once at the
         * beginning of every run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.NO_SIREN_STEAL`.
         *
         * @param familiarVariant The familiar variant to blacklist.
         * @param familiarSubType The sub-type to blacklist. Optional. The default is to blacklist all
         *                        sub-types of the given variant.
         * @public
         */
        setFamiliarNoSirenSteal(familiarVariant, familiarSubType) {
          if (this.blacklistEntryExists(familiarVariant, familiarSubType)) {
            return;
          }
          v.run.familiarBlacklist.push([familiarVariant, familiarSubType]);
        }
      };
      exports2.NoSirenSteal = NoSirenSteal;
      __decorate([
        decorators_1.Exported
      ], NoSirenSteal.prototype, "setFamiliarNoSirenSteal", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/Pause.js
  var require_Pause = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/Pause.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.Pause = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var decorators_1 = require_decorators();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var isaacAPIClass_1 = require_isaacAPIClass();
      var log_1 = require_log();
      var playerCollectibles_1 = require_playerCollectibles();
      var playerIndex_1 = require_playerIndex();
      var tstlClass_1 = require_tstlClass();
      var utils_1 = require_utils();
      var ReadonlySet_1 = require_ReadonlySet();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          isPseudoPaused: false,
          shouldUnpause: false,
          initialDescriptions: /* @__PURE__ */ new Map()
        }
      };
      var Pause = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        disableInputs;
        /** @internal */
        constructor(disableInputs) {
          super();
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate],
            // 13
            [
              isaac_typescript_definitions_1.ModCallback.INPUT_ACTION,
              this.inputActionGetActionValue,
              [isaac_typescript_definitions_1.InputHook.GET_ACTION_VALUE]
            ]
          ];
          this.disableInputs = disableInputs;
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          if (!v.run.isPseudoPaused) {
            return;
          }
          const firstPlayer = Isaac.GetPlayer();
          (0, playerCollectibles_1.useActiveItemTemp)(firstPlayer, isaac_typescript_definitions_1.CollectibleType.PAUSE);
          this.stopTearsAndProjectilesFromMoving();
        };
        stopTearsAndProjectilesFromMoving() {
          const tearsAndProjectiles = [...(0, entitiesSpecific_1.getTears)(), ...(0, entitiesSpecific_1.getProjectiles)()];
          for (const tearOrProjectile of tearsAndProjectiles) {
            const ptrHash = GetPtrHash(tearOrProjectile);
            const initialDescription = v.run.initialDescriptions.get(ptrHash);
            if (initialDescription === void 0) {
              continue;
            }
            tearOrProjectile.Position = initialDescription.position;
            tearOrProjectile.PositionOffset = initialDescription.positionOffset;
            tearOrProjectile.Velocity = constants_1.VectorZero;
            tearOrProjectile.Height = initialDescription.height;
            tearOrProjectile.FallingSpeed = 0;
            if ((0, isaacAPIClass_1.isTear)(tearOrProjectile)) {
              tearOrProjectile.FallingAcceleration = initialDescription.fallingAcceleration;
            } else {
              tearOrProjectile.FallingAccel = initialDescription.fallingAcceleration;
            }
          }
        }
        // ModCallback.INPUT_ACTION (13)
        // InputHook.GET_ACTION_VALUE (2)
        inputActionGetActionValue = (_entity, _inputHook, buttonAction) => {
          if (buttonAction !== isaac_typescript_definitions_1.ButtonAction.SHOOT_RIGHT) {
            return void 0;
          }
          if (!v.run.shouldUnpause) {
            return void 0;
          }
          v.run.shouldUnpause = false;
          return 1;
        };
        /**
         * Helper function to check if the pause feature from `isaacscript-common` is currently
         * pseudo-pausing the game.
         *
         * @public
         */
        isPaused() {
          return v.run.isPseudoPaused;
        }
        /**
         * Helper function to emulate what happens when the player pauses the game. Use the `unpause`
         * function to return things back to normal.
         *
         * Under the hood, this function:
         * - uses the Pause collectible on every game frame
         * - disables any player inputs (except for `ButtonAction.MENU_CONFIRM` and
         *   `ButtonAction.CONSOLE`)
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PAUSE`.
         *
         * @public
         */
        pause() {
          if (v.run.isPseudoPaused) {
            (0, log_1.logError)("Failed to pseudo-pause the game, since it was already pseudo-paused.");
            return;
          }
          v.run.isPseudoPaused = true;
          v.run.initialDescriptions.clear();
          const tearsAndProjectiles = [...(0, entitiesSpecific_1.getTears)(), ...(0, entitiesSpecific_1.getProjectiles)()];
          for (const tearOrProjectile of tearsAndProjectiles) {
            const ptrHash = GetPtrHash(tearOrProjectile);
            const initialDescription = {
              position: tearOrProjectile.Position,
              positionOffset: tearOrProjectile.PositionOffset,
              velocity: tearOrProjectile.Velocity,
              height: tearOrProjectile.Height,
              fallingSpeed: tearOrProjectile.FallingSpeed,
              fallingAcceleration: (0, isaacAPIClass_1.isTear)(tearOrProjectile) ? tearOrProjectile.FallingAcceleration : tearOrProjectile.FallingAccel
            };
            v.run.initialDescriptions.set(ptrHash, initialDescription);
          }
          const firstPlayer = Isaac.GetPlayer();
          (0, playerCollectibles_1.useActiveItemTemp)(firstPlayer, isaac_typescript_definitions_1.CollectibleType.PAUSE);
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(this);
          (0, utils_1.assertDefined)(tstlClassName, "Failed to get the class name for the pause feature.");
          const whitelist = new ReadonlySet_1.ReadonlySet([
            isaac_typescript_definitions_1.ButtonAction.MENU_CONFIRM,
            isaac_typescript_definitions_1.ButtonAction.CONSOLE
          ]);
          this.disableInputs.disableAllInputsExceptFor(tstlClassName, whitelist);
          for (const player of (0, playerIndex_1.getAllPlayers)()) {
            player.ControlsEnabled = false;
            player.Velocity = constants_1.VectorZero;
          }
          this.stopTearsAndProjectilesFromMoving();
        }
        /**
         * Helper function to put things back to normal after the `pause` function was used.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PAUSE`.
         *
         * @public
         */
        unpause() {
          if (!v.run.isPseudoPaused) {
            (0, log_1.logError)("Failed to pseudo-unpause the game, since it was not already pseudo-paused.");
            return;
          }
          v.run.isPseudoPaused = false;
          v.run.shouldUnpause = true;
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(this);
          (0, utils_1.assertDefined)(tstlClassName, "Failed to find get the class name for the pause feature.");
          this.disableInputs.enableAllInputs(tstlClassName);
          for (const player of (0, playerIndex_1.getAllPlayers)()) {
            player.ControlsEnabled = true;
          }
          (0, entitiesSpecific_1.removeAllTears)();
          (0, entitiesSpecific_1.removeAllProjectiles)();
        }
      };
      exports2.Pause = Pause;
      __decorate([
        decorators_1.Exported
      ], Pause.prototype, "isPaused", null);
      __decorate([
        decorators_1.Exported
      ], Pause.prototype, "pause", null);
      __decorate([
        decorators_1.Exported
      ], Pause.prototype, "unpause", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PersistentEntities.js
  var require_PersistentEntities = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PersistentEntities.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PersistentEntities = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var entities_1 = require_entities();
      var roomData_1 = require_roomData();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          /** Iterates upward as new persistent entities are created. */
          persistentEntityIndexCounter: 0
        },
        level: {
          /**
           * Indexed by persistent entity index.
           *
           * When the entity is spawned in the currently room, its corresponding entry in this map will be
           * temporarily deleted (until the entity itself is despawned).
           */
          persistentEntities: /* @__PURE__ */ new Map()
        },
        room: {
          spawnedPersistentEntities: /* @__PURE__ */ new Map()
        }
      };
      var PersistentEntities = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        roomHistory;
        /** @internal */
        constructor(roomHistory) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ROOM_HISTORY];
          this.callbacksUsed = [
            // 67
            [isaac_typescript_definitions_1.ModCallback.POST_ENTITY_REMOVE, this.postEntityRemove]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
          this.roomHistory = roomHistory;
        }
        // ModCallback.POST_ENTITY_REMOVE (67)
        postEntityRemove = (entity) => {
          const ptrHash = GetPtrHash(entity);
          const tuple = v.room.spawnedPersistentEntities.get(ptrHash);
          if (tuple === void 0) {
            return;
          }
          const index = tuple[0];
          if (this.roomHistory.isLeavingRoom()) {
            this.trackDespawningPickupPosition(entity, index);
          } else {
            this.removePersistentEntity(index, false);
          }
        };
        /**
         * The persistent entity is despawning because the player is in the process of leaving the room.
         * Keep track of the position for later.
         */
        trackDespawningPickupPosition(entity, index) {
          const previousRoomDescription = this.roomHistory.getLatestRoomDescription();
          if (previousRoomDescription === void 0) {
            return;
          }
          const persistentEntityDescription = {
            entityType: entity.Type,
            variant: entity.Variant,
            subType: entity.SubType,
            dimension: previousRoomDescription.dimension,
            roomListIndex: previousRoomDescription.roomListIndex,
            position: entity.Position
          };
          v.level.persistentEntities.set(index, persistentEntityDescription);
        }
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const persistentEntities = [...v.level.persistentEntities.entries()];
          const persistentEntitiesInThisRoom = persistentEntities.filter(([_index, description]) => roomListIndex === description.roomListIndex);
          for (const [index, description] of persistentEntitiesInThisRoom) {
            v.level.persistentEntities.delete(index);
            this.spawnAndTrack(description.entityType, description.variant, description.subType, description.position, index, true);
          }
        };
        spawnAndTrack(entityType, variant, subType, position, index, respawning = false) {
          const entity = (0, entities_1.spawn)(entityType, variant, subType, position);
          if (respawning) {
            entity.ClearEntityFlags(isaac_typescript_definitions_1.EntityFlag.APPEAR);
          }
          const ptrHash = GetPtrHash(entity);
          const tuple = [index, EntityPtr(entity)];
          v.room.spawnedPersistentEntities.set(ptrHash, tuple);
          return entity;
        }
        /**
         * Helper function to stop an entity spawned with the `spawnPersistentEntity` helper function from
         * respawning.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PERSISTENT_ENTITIES`.
         *
         * @param persistentEntityIndex The index that was returned by the `spawnPersistentEntity`
         *                              function.
         * @param removeEntity Optional. True by default. Set to false if you want to stop an entity from
         *                     being persistent but you don't want to actually remove the
         *                     currently-spawned entity from the room.
         * @public
         */
        removePersistentEntity(persistentEntityIndex, removeEntity = true) {
          v.level.persistentEntities.delete(persistentEntityIndex);
          for (const [ptrHash, tuple] of v.room.spawnedPersistentEntities) {
            const [index, entityPtr] = tuple;
            if (index !== persistentEntityIndex) {
              continue;
            }
            v.room.spawnedPersistentEntities.delete(ptrHash);
            if (removeEntity && entityPtr.Ref !== void 0) {
              entityPtr.Ref.Remove();
            }
          }
        }
        /**
         * Helper function to spawn an entity that will have persistence similar to a pickup.
         *
         * By default, as soon as you leave a room, any spawned entities will be despawned and will not
         * return if the player revisits the room. This means that if you want to have an entity like a
         * pickup, you have to manually respawn it when the player re-enters the room. Use this helper
         * function to avoid having to do any tracking on your own.
         *
         * Conventionally, the word "persistent" refers to `EntityFlag.FLAG_PERSISTENT`, which is used on
         * e.g. familiars to make them appear in every room. On the other hand, pickups are also
         * persistent, but they are not present in every room, only one specific room. This function
         * spawns entities like pickups, not familiars.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PERSISTENT_ENTITIES`.
         *
         * @returns An object containing the entity and the persistent entity index. You can use the index
         *          with the `removePersistentEntity` function.
         * @public
         */
        spawnPersistentEntity(entityType, variant, subType, position) {
          v.run.persistentEntityIndexCounter++;
          const entity = this.spawnAndTrack(entityType, variant, subType, position, v.run.persistentEntityIndexCounter);
          return { entity, persistentIndex: v.run.persistentEntityIndexCounter };
        }
      };
      exports2.PersistentEntities = PersistentEntities;
      __decorate([
        decorators_1.Exported
      ], PersistentEntities.prototype, "removePersistentEntity", null);
      __decorate([
        decorators_1.Exported
      ], PersistentEntities.prototype, "spawnPersistentEntity", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PickupIndexCreation.js
  var require_PickupIndexCreation = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PickupIndexCreation.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PickupIndexCreation = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var entities_1 = require_entities();
      var frames_1 = require_frames();
      var roomData_1 = require_roomData();
      var stage_1 = require_stage();
      var vector_1 = require_vector();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          /** Is incremented before assignment. Thus, the first pickup will have an index of 1. */
          pickupCounter: 0,
          pickupDataTreasureRooms: /* @__PURE__ */ new Map(),
          pickupDataBossRooms: /* @__PURE__ */ new Map()
        },
        level: {
          /** Indexed by room list index. */
          pickupData: new DefaultMap_1.DefaultMap(() => /* @__PURE__ */ new Map())
        },
        room: {
          pickupIndexes: /* @__PURE__ */ new Map()
        }
      };
      var PickupIndexCreation = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        roomHistory;
        saveDataManager;
        /** @internal */
        constructor(roomHistory, saveDataManager) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ROOM_HISTORY, ISCFeature_1.ISCFeature.SAVE_DATA_MANAGER];
          this.callbacksUsed = [
            // 34
            [isaac_typescript_definitions_1.ModCallback.POST_PICKUP_INIT, this.postPickupInit],
            // 67
            [
              isaac_typescript_definitions_1.ModCallback.POST_ENTITY_REMOVE,
              this.postEntityRemovePickup,
              [isaac_typescript_definitions_1.EntityType.PICKUP]
            ]
          ];
          this.roomHistory = roomHistory;
          this.saveDataManager = saveDataManager;
        }
        // ModCallback.POST_PICKUP_INIT (34)
        postPickupInit = (pickup) => {
          this.setPickupIndex(pickup);
        };
        setPickupIndex(pickup) {
          const ptrHash = GetPtrHash(pickup);
          if (v.room.pickupIndexes.has(ptrHash)) {
            return;
          }
          const pickupIndexFromLevelData = this.getPickupIndexFromPreviousData(pickup);
          const room = cachedClasses_1.game.GetRoom();
          const isFirstVisit = room.IsFirstVisit();
          if (pickupIndexFromLevelData !== void 0 && !isFirstVisit && (0, frames_1.onOrBeforeRoomFrame)(0)) {
            v.room.pickupIndexes.set(ptrHash, pickupIndexFromLevelData);
            return;
          }
          v.run.pickupCounter++;
          v.room.pickupIndexes.set(ptrHash, v.run.pickupCounter);
        }
        getPickupIndexFromPreviousData(pickup) {
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const pickupDescriptions = v.level.pickupData.getAndSetDefault(roomListIndex);
          let pickupIndex = getStoredPickupIndex(pickup, pickupDescriptions);
          if (pickupIndex === void 0) {
            pickupIndex = this.getPostAscentPickupIndex(pickup);
          }
          return pickupIndex;
        }
        // ModCallback.POST_ENTITY_REMOVE (67)
        // EntityType.PICKUP (5)
        postEntityRemovePickup = (entity) => {
          this.checkDespawningFromPlayerLeavingRoom(entity);
        };
        checkDespawningFromPlayerLeavingRoom(entity) {
          const ptrHash = GetPtrHash(entity);
          const pickupIndex = v.room.pickupIndexes.get(ptrHash);
          if (pickupIndex === void 0) {
            return;
          }
          if (!this.roomHistory.isLeavingRoom()) {
            return;
          }
          this.trackDespawningPickupMetadata(entity, pickupIndex);
        }
        /**
         * This is a pickup that is despawning because the player is in the process of leaving the room.
         * Keep track of the metadata for later.
         */
        trackDespawningPickupMetadata(entity, pickupIndex) {
          const previousRoomDescription = this.roomHistory.getLatestRoomDescription();
          if (previousRoomDescription === void 0) {
            return;
          }
          const previousRoomListIndex = previousRoomDescription.roomListIndex;
          const pickupDescriptions = v.level.pickupData.getAndSetDefault(previousRoomListIndex);
          const pickupDescription = {
            position: entity.Position,
            initSeed: entity.InitSeed
          };
          pickupDescriptions.set(pickupIndex, pickupDescription);
          const pickupDataMapForCurrentRoom = this.getPickupDataMapForCurrentRoom();
          if (pickupDataMapForCurrentRoom !== void 0) {
            pickupDataMapForCurrentRoom.set(pickupIndex, pickupDescription);
          }
          if (this.saveDataManager.saveDataManagerInMenu()) {
            this.saveDataManager.saveDataManagerSave();
          }
        }
        /**
         * If the despawning pickup was in a Treasure Room or Boss Room, then it is possible that the
         * pickup could re-appear during The Ascent. If this is the case, we store the metadata on a
         * separate map to reference later.
         */
        getPickupDataMapForCurrentRoom() {
          if ((0, stage_1.onAscent)()) {
            return void 0;
          }
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          switch (roomType) {
            case isaac_typescript_definitions_1.RoomType.TREASURE: {
              return v.run.pickupDataTreasureRooms;
            }
            case isaac_typescript_definitions_1.RoomType.BOSS: {
              return v.run.pickupDataBossRooms;
            }
            default: {
              return void 0;
            }
          }
        }
        getPostAscentPickupIndex(pickup) {
          if (!(0, stage_1.onAscent)()) {
            return void 0;
          }
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          switch (roomType) {
            case isaac_typescript_definitions_1.RoomType.TREASURE: {
              return getStoredPickupIndex(pickup, v.run.pickupDataTreasureRooms);
            }
            case isaac_typescript_definitions_1.RoomType.BOSS: {
              return getStoredPickupIndex(pickup, v.run.pickupDataBossRooms);
            }
            default: {
              return void 0;
            }
          }
        }
        /**
         * Mods often have to track variables relating to a pickups. Finding an index for these kinds of
         * data structures is difficult, since pickups are respawned every time a player re-enters a room,
         * so the `PtrHash` will change.
         *
         * Use this function to get a unique index for a pickup to use in these data structures.
         *
         * Specifically, `PickupIndex` is a number that represents the spawn order of the pickup on the
         * current run. For example, the first pickup spawned will have an index of 1, the second one will
         * have an index of 2, and so on.
         *
         * Tracking pickups requires stateful tracking, so using pickup indexes requires an upgraded mod.
         *
         * Note that the pickup index will not change:
         * - When a pickup is rolled with e.g. D6 or D20.
         * - When an item is "rotated" via e.g. Tainted Isaac's mechanic.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.PICKUP_INDEX_CREATION`.
         */
        getPickupIndex(pickup) {
          const ptrHash = GetPtrHash(pickup);
          const pickupIndexInitial = v.room.pickupIndexes.get(ptrHash);
          if (pickupIndexInitial !== void 0) {
            return pickupIndexInitial;
          }
          this.setPickupIndex(pickup);
          const pickupIndex = v.room.pickupIndexes.get(ptrHash);
          if (pickupIndex !== void 0) {
            return pickupIndex;
          }
          const entityID = (0, entities_1.getEntityID)(pickup);
          error(`Failed to generate a new pickup index for pickup: ${entityID}`);
        }
      };
      exports2.PickupIndexCreation = PickupIndexCreation;
      __decorate([
        decorators_1.Exported
      ], PickupIndexCreation.prototype, "getPickupIndex", null);
      function getStoredPickupIndex(pickup, pickupDescriptions) {
        for (const [pickupIndex, pickupDescription] of pickupDescriptions) {
          if ((0, vector_1.vectorEquals)(pickupDescription.position, pickup.Position) && pickupDescription.initSeed === pickup.InitSeed) {
            return pickupIndex;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PlayerCollectibleTracking.js
  var require_PlayerCollectibleTracking = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PlayerCollectibleTracking.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PlayerCollectibleTracking = void 0;
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var collectibles_1 = require_collectibles();
      var playerDataStructures_1 = require_playerDataStructures();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          playersCollectibleTypes: new DefaultMap_1.DefaultMap(() => [])
        }
      };
      var PlayerCollectibleTracking = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED,
              this.postPlayerCollectibleAdded
            ],
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED,
              this.postPlayerCollectibleRemoved
            ]
          ];
        }
        // ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED
        postPlayerCollectibleAdded = (player, collectibleType) => {
          const collectibleTypes = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersCollectibleTypes, player, player);
          collectibleTypes.push(collectibleType);
        };
        // ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED
        postPlayerCollectibleRemoved = (player, collectibleType) => {
          const collectibleTypes = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersCollectibleTypes, player, player);
          (0, array_1.arrayRemoveInPlace)(collectibleTypes, collectibleType);
        };
        /**
         * Helper function to get all of the collectible types that the player has gotten so far on this
         * run, in order.
         *
         * In the case of items given on the first frame of the run or the case where the player rerolls
         * their build in the middle of the run (e.g. with D4), the order of the collectible types will
         * not correspond to the order that the items were actually given to the player. In this case, the
         * order will be from the lowest `CollectibleType` to the highest.
         *
         * Under the hood, this feature works by tracking the number of collectibles that a player has on
         * every frame. Thus, in a situation where a collectible was both added and removed to the player
         * on the same frame, the amount of total collectibles would stay the same, and the collectible
         * types would not be updated. In vanilla, this situation would never happen, but another mod
         * might do this for some reason. (With that said, the next time that a collectible is normally
         * added or removed, it would trigger a re-scan, and the previous changes would be picked up.)
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.PLAYER_COLLECTIBLE_TRACKING`.
         *
         * @param player The player to get the collectible types for.
         * @param includeActiveCollectibles Optional. If true, will include all active collectibles.
         *                                Default is true.
         * @public
         */
        getPlayerCollectibleTypes(player, includeActiveCollectibles = true) {
          const collectibleTypes = (0, playerDataStructures_1.defaultMapGetPlayer)(v.run.playersCollectibleTypes, player, player);
          if (includeActiveCollectibles) {
            return collectibleTypes;
          }
          return collectibleTypes.filter((collectibleType) => !(0, collectibles_1.isActiveCollectible)(collectibleType));
        }
        /**
         * Helper function to get the last passive collectible type that the player picked up. In most
         * cases, this will be the passive that would be removed if the player used Clicker.
         *
         * Returns undefined if the player does not have any passive collectibles.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.PLAYER_COLLECTIBLE_TRACKING`.
         *
         * @public
         */
        getPlayerLastPassiveCollectibleType(player) {
          const collectibleTypes = this.getPlayerCollectibleTypes(player, false);
          return collectibleTypes.at(-1);
        }
      };
      exports2.PlayerCollectibleTracking = PlayerCollectibleTracking;
      __decorate([
        decorators_1.Exported
      ], PlayerCollectibleTracking.prototype, "getPlayerCollectibleTypes", null);
      __decorate([
        decorators_1.Exported
      ], PlayerCollectibleTracking.prototype, "getPlayerLastPassiveCollectibleType", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PonyDetection.js
  var require_PonyDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PonyDetection.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PonyDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var flag_1 = require_flag();
      var playerDataStructures_1 = require_playerDataStructures();
      var playerIndex_1 = require_playerIndex();
      var Feature_1 = require_Feature();
      var FLAGS_WHEN_PONY_IS_ACTIVE = [
        isaac_typescript_definitions_1.EntityFlag.NO_KNOCKBACK,
        isaac_typescript_definitions_1.EntityFlag.NO_PHYSICS_KNOCKBACK,
        isaac_typescript_definitions_1.EntityFlag.NO_DAMAGE_BLINK
        // 1 << 36
      ];
      var v = {
        run: {
          playersIsPonyActive: /* @__PURE__ */ new Set()
        }
      };
      var PonyDetection = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED,
              this.postPEffectUpdateReordered
            ]
          ];
        }
        // ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED
        postPEffectUpdateReordered = (player) => {
          const effects = player.GetEffects();
          const entityFlags = player.GetEntityFlags();
          const hasPonyCollectibleEffect = effects.HasCollectibleEffect(isaac_typescript_definitions_1.CollectibleType.PONY) || effects.HasCollectibleEffect(isaac_typescript_definitions_1.CollectibleType.WHITE_PONY);
          const isPonyActiveOnPreviousFrame = (0, playerDataStructures_1.setHasPlayer)(v.run.playersIsPonyActive, player);
          const hasPonyFlags = (0, flag_1.hasFlag)(entityFlags, ...FLAGS_WHEN_PONY_IS_ACTIVE);
          const isPonyActiveNow = hasPonyCollectibleEffect || isPonyActiveOnPreviousFrame && hasPonyFlags;
          if (isPonyActiveNow) {
            (0, playerDataStructures_1.setAddPlayer)(v.run.playersIsPonyActive, player);
          } else {
            (0, playerDataStructures_1.setDeletePlayer)(v.run.playersIsPonyActive, player);
          }
        };
        /**
         * Helper function to see if the player is under the effects of A Pony or White Pony charge.
         * Detecting this is difficult, as the temporary effect will disappear upon entering a new room.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PONY_DETECTION`.
         *
         * @public
         */
        isPlayerUsingPony(player) {
          return (0, playerDataStructures_1.setHasPlayer)(v.run.playersIsPonyActive, player);
        }
        /**
         * Helper function to see if any player is under the effects of A Pony or White Pony charge.
         * Detecting this is difficult, as the temporary effect will disappear upon entering a new room.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PONY_DETECTION`.
         *
         * @public
         */
        anyPlayerUsingPony() {
          const players = (0, playerIndex_1.getPlayers)();
          return players.some((player) => this.isPlayerUsingPony(player));
        }
      };
      exports2.PonyDetection = PonyDetection;
      __decorate([
        decorators_1.Exported
      ], PonyDetection.prototype, "isPlayerUsingPony", null);
      __decorate([
        decorators_1.Exported
      ], PonyDetection.prototype, "anyPlayerUsingPony", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PressInput.js
  var require_PressInput = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PressInput.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PressInput = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var playerIndex_1 = require_playerIndex();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          buttonActionPairs: []
        }
      };
      var PressInput = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 13
            [
              isaac_typescript_definitions_1.ModCallback.INPUT_ACTION,
              this.isActionTriggered,
              [isaac_typescript_definitions_1.InputHook.IS_ACTION_TRIGGERED]
            ]
          ];
        }
        // ModCallback.INPUT_ACTION (13)
        // InputHook.IS_ACTION_TRIGGERED (1)
        isActionTriggered = (entity, _inputHook, buttonAction) => {
          if (entity === void 0) {
            return void 0;
          }
          const player = entity.ToPlayer();
          if (player === void 0) {
            return void 0;
          }
          const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
          for (let i = v.run.buttonActionPairs.length - 1; i >= 0; i--) {
            const pair = v.run.buttonActionPairs[i];
            if (pair.playerIndex === playerIndex && pair.buttonAction === buttonAction) {
              v.run.buttonActionPairs.splice(i);
              return true;
            }
          }
          return void 0;
        };
        /**
         * Helper function to press an arbitrary `ButtonAction` on the next possible input poll. In most
         * cases, this will be equivalent to if the first player pressed the corresponding input. It
         * usually takes 1 frame for the input to take effect.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.PRESS_INPUT`.
         */
        pressInput(player, buttonAction) {
          const playerIndex = (0, playerIndex_1.getPlayerIndex)(player);
          v.run.buttonActionPairs.push({ playerIndex, buttonAction });
        }
      };
      exports2.PressInput = PressInput;
      __decorate([
        decorators_1.Exported
      ], PressInput.prototype, "pressInput", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PreventChildEntities.js
  var require_PreventChildEntities = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PreventChildEntities.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreventChildEntities = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          preventingEntities: /* @__PURE__ */ new Set()
        }
      };
      var PreventChildEntities = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 27
            [isaac_typescript_definitions_1.ModCallback.POST_NPC_INIT, this.postNPCInit]
          ];
        }
        // ModCallback.POST_NPC_INIT (27)
        postNPCInit = (npc) => {
          const spawnerEntityMatch = npc.SpawnerEntity !== void 0 && v.room.preventingEntities.has(GetPtrHash(npc.SpawnerEntity));
          const parentMatch = npc.Parent !== void 0 && v.room.preventingEntities.has(GetPtrHash(npc.Parent));
          if (spawnerEntityMatch || parentMatch) {
            npc.Remove();
          }
        };
        /**
         * Helper function to prevent an entity from spawning any other entities. Meant to be used on NPCs
         * like Squirts. This behavior will only last for the current room.
         *
         * Under the hood, this function will remove any new NPCs spawned that have a
         * `Entity.SpawnerEntity` or `Entity.Parent` value that matches the provided entity. (They are
         * removed during the `POST_NPC_INIT` callback specifically.)
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.PREVENT_CHILD_ENTITIES`.
         *
         * @public
         */
        preventChildEntities(entity) {
          const ptrHash = GetPtrHash(entity);
          v.room.preventingEntities.add(ptrHash);
        }
      };
      exports2.PreventChildEntities = PreventChildEntities;
      __decorate([
        decorators_1.Exported
      ], PreventChildEntities.prototype, "preventChildEntities", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/PreventGridEntityRespawn.js
  var require_PreventGridEntityRespawn = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/PreventGridEntityRespawn.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PreventGridEntityRespawn = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var gridEntities_1 = require_gridEntities();
      var players_1 = require_players();
      var roomData_1 = require_roomData();
      var DefaultMap_1 = require_DefaultMap();
      var Feature_1 = require_Feature();
      var v = {
        level: {
          roomListIndexToDecorationGridIndexes: new DefaultMap_1.DefaultMap(() => [])
        },
        room: {
          manuallyUsingShovel: false
        }
      };
      var PreventGridEntityRespawn = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        runInNFrames;
        /** @internal */
        constructor(runInNFrames) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES];
          this.callbacksUsed = [
            // 23
            [
              isaac_typescript_definitions_1.ModCallback.PRE_USE_ITEM,
              this.preUseItemWeNeedToGoDeeper,
              [isaac_typescript_definitions_1.CollectibleType.WE_NEED_TO_GO_DEEPER]
            ]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
          this.runInNFrames = runInNFrames;
        }
        // ModCallback.PRE_USE_ITEM (23)
        // CollectibleType.WE_NEED_TO_GO_DEEPER (84)
        preUseItemWeNeedToGoDeeper = (_collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData) => {
          if (v.room.manuallyUsingShovel) {
            return void 0;
          }
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          if (!v.level.roomListIndexToDecorationGridIndexes.has(roomListIndex)) {
            return void 0;
          }
          const decorations = (0, gridEntities_1.getGridEntities)(isaac_typescript_definitions_1.GridEntityType.DECORATION);
          for (const decoration of decorations) {
            (0, gridEntities_1.removeGridEntity)(decoration, false);
          }
          const entityPtr = EntityPtr(player);
          this.runInNFrames.runNextGameFrame(() => {
            const futurePlayer = (0, players_1.getPlayerFromPtr)(entityPtr);
            if (futurePlayer === void 0) {
              return;
            }
            const futureRoomListIndex = (0, roomData_1.getRoomListIndex)();
            if (futureRoomListIndex !== roomListIndex) {
              return;
            }
            v.room.manuallyUsingShovel = true;
            futurePlayer.UseActiveItem(isaac_typescript_definitions_1.CollectibleType.WE_NEED_TO_GO_DEEPER);
            v.room.manuallyUsingShovel = false;
            const decorationGridIndexes = v.level.roomListIndexToDecorationGridIndexes.getAndSetDefault(roomListIndex);
            (0, array_1.emptyArray)(decorationGridIndexes);
            this.preventGridEntityRespawn();
          });
          return true;
        };
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          this.setDecorationsInvisible();
        };
        /**
         * Every time we re-enter the room, the sprites for all of the decorations will come back, so we
         * have to remove them again.
         */
        setDecorationsInvisible() {
          const room = cachedClasses_1.game.GetRoom();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const decorationGridIndexes = v.level.roomListIndexToDecorationGridIndexes.get(roomListIndex);
          if (decorationGridIndexes === void 0) {
            return;
          }
          for (const gridIndex of decorationGridIndexes) {
            const gridEntity = room.GetGridEntity(gridIndex);
            if (gridEntity !== void 0) {
              const gridEntityType = gridEntity.GetType();
              if (gridEntityType === isaac_typescript_definitions_1.GridEntityType.DECORATION) {
                (0, gridEntities_1.setGridEntityInvisible)(gridEntity);
              }
            }
          }
        }
        /**
         * Helper function to prevent any removed grid entities from respawning if the player re-enters
         * the current room.
         *
         * This is accomplished by spawning a new grid entity on every tile that does not already have a
         * grid entity. This will force the game to spawn the new grid entity instead of the old one. The
         * natural grid entity to choose for this purpose is a decoration, since it is non-interacting.
         * Then, the decorations are made invisible and any shovel uses are intercepted to avoid creating
         * a crawl space (instead of a trapdoor).
         *
         * Another option besides decorations would be to use a pressure plates with a state of 1, which
         * is a state that is normally unused by the game and makes it invisible & persistent. However,
         * pickups will not be able to spawn on pressure plates, which lead to various bugs (e.g. pickups
         * spawning on top of pits). Thus, using a decoration is preferable.
         *
         * Yet another option to accomplish this would be to replace the room data with that of an empty
         * room. However, the room data must exactly match the room type, the room shape, and the doors,
         * so this is not possible to do in a robust way without adding empty rooms to the mod's `content`
         * folder to draw the data from.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.PREVENT_GRID_ENTITY_RESPAWN`.
         */
        preventGridEntityRespawn() {
          const room = cachedClasses_1.game.GetRoom();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const decorationGridIndexes = v.level.roomListIndexToDecorationGridIndexes.getAndSetDefault(roomListIndex);
          for (const gridIndex of (0, gridEntities_1.getAllGridIndexes)()) {
            const existingGridEntity = room.GetGridEntity(gridIndex);
            if (existingGridEntity !== void 0) {
              continue;
            }
            const decoration = (0, gridEntities_1.spawnGridEntity)(isaac_typescript_definitions_1.GridEntityType.DECORATION, gridIndex);
            if (decoration !== void 0) {
              (0, gridEntities_1.setGridEntityInvisible)(decoration);
            }
            decorationGridIndexes.push(gridIndex);
          }
        }
      };
      exports2.PreventGridEntityRespawn = PreventGridEntityRespawn;
      __decorate([
        decorators_1.Exported
      ], PreventGridEntityRespawn.prototype, "preventGridEntityRespawn", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/RerunDetection.js
  var require_RerunDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/RerunDetection.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RerunDetection = void 0;
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var rooms_1 = require_rooms();
      var stage_1 = require_stage();
      var Feature_1 = require_Feature();
      var v = {
        // We cannot use a "run" object since the variables would be reset when a rerun starts.
        persistent: {
          pastFirstFloor: false,
          onRerun: false
        }
      };
      var RerunDetection = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED,
              this.postGameStartedReordered
            ],
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_LEVEL_REORDERED, this.postNewLevelReordered]
          ];
        }
        // ModCallbackCustom.POST_GAME_STARTED_REORDERED
        postGameStartedReordered = (isContinued) => {
          if (isContinued) {
            if ((0, stage_1.onFirstFloor)() && (0, rooms_1.inStartingRoom)() && v.persistent.pastFirstFloor) {
              v.persistent.onRerun = true;
            }
          } else {
            v.persistent.onRerun = false;
          }
        };
        // ModCallbackCustom.POST_NEW_LEVEL_REORDERED
        postNewLevelReordered = () => {
          v.persistent.pastFirstFloor = !(0, stage_1.onFirstFloor)();
        };
        /**
         * Helper function to detect if the current run was starting using the "Rerun" option from the
         * main menu.
         *
         * Under the hood, this assumes that any run that is past the first floor and continues in the
         * starting room of the run is a rerun.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RERUN_DETECTION`.
         *
         * @public
         */
        onRerun() {
          return v.persistent.onRerun;
        }
      };
      exports2.RerunDetection = RerunDetection;
      __decorate([
        decorators_1.Exported
      ], RerunDetection.prototype, "onRerun", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/RoomClearFrame.js
  var require_RoomClearFrame = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/RoomClearFrame.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomClearFrame = void 0;
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var Feature_1 = require_Feature();
      var v = {
        room: {
          roomClearGameFrame: void 0,
          roomClearRenderFrame: void 0,
          roomClearRoomFrame: void 0
        }
      };
      var RoomClearFrame = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_ROOM_CLEAR_CHANGED,
              this.postRoomClearChangedTrue
            ]
          ];
        }
        // ModCallbackCustom.POST_ROOM_CLEAR_CHANGED
        // true
        postRoomClearChangedTrue = () => {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const room = cachedClasses_1.game.GetRoom();
          const roomFrameCount = room.GetFrameCount();
          const renderFrameCount = Isaac.GetFrameCount();
          v.room.roomClearGameFrame = gameFrameCount;
          v.room.roomClearRenderFrame = renderFrameCount;
          v.room.roomClearRoomFrame = roomFrameCount;
        };
        /**
         * Helper function to get the game frame (i.e. `Game.GetFrameCount`) of the last time that this
         * room was cleared. Returns undefined if the room has never been cleared.
         *
         * Note that if the room is left, all room clear tracking for it will be discarded.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_CLEAR_FRAME`.
         *
         * @public
         */
        getRoomClearGameFrame() {
          return v.room.roomClearGameFrame;
        }
        /**
         * Helper function to get the render frame (i.e. `Isaac.GetFrameCount`) of the last time that this
         * room was cleared. Returns undefined if the room has never been cleared.
         *
         * Note that if the room is left, all room clear tracking for it will be discarded.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_CLEAR_FRAME`.
         *
         * @public
         */
        getRoomClearRenderFrame() {
          return v.room.roomClearRenderFrame;
        }
        /**
         * Helper function to get the room frame (i.e. `Room.GetFrameCount`) of the last time that this
         * room was cleared. Returns undefined if the room has never been cleared.
         *
         * Note that if the room is left, all room clear tracking for it will be discarded.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_CLEAR_FRAME`.
         *
         * @public
         */
        getRoomClearRoomFrame() {
          return v.room.roomClearRoomFrame;
        }
      };
      exports2.RoomClearFrame = RoomClearFrame;
      __decorate([
        decorators_1.Exported
      ], RoomClearFrame.prototype, "getRoomClearGameFrame", null);
      __decorate([
        decorators_1.Exported
      ], RoomClearFrame.prototype, "getRoomClearRenderFrame", null);
      __decorate([
        decorators_1.Exported
      ], RoomClearFrame.prototype, "getRoomClearRoomFrame", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/RoomHistory.js
  var require_RoomHistory = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/RoomHistory.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RoomHistory = void 0;
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var dimensions_1 = require_dimensions();
      var roomData_1 = require_roomData();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          roomHistory: []
        }
      };
      var RoomHistory = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_EARLY, this.postNewRoomEarly]
          ];
        }
        // ModCallbackCustom.POST_NEW_ROOM_EARLY
        postNewRoomEarly = () => {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const seeds = cachedClasses_1.game.GetSeeds();
          const startSeedString = seeds.GetStartSeedString();
          const stageID = (0, roomData_1.getRoomStageID)();
          const dimension = (0, dimensions_1.getDimension)();
          const roomVariant = (0, roomData_1.getRoomVariant)();
          const roomSubType = (0, roomData_1.getRoomSubType)();
          const roomName = (0, roomData_1.getRoomName)();
          const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const roomVisitedCount = (0, roomData_1.getRoomVisitedCount)();
          const roomDescription = {
            startSeedString,
            stage,
            stageType,
            stageID,
            dimension,
            roomType,
            roomVariant,
            roomSubType,
            roomName,
            roomGridIndex,
            roomListIndex,
            roomVisitedCount
          };
          v.run.roomHistory.push(roomDescription);
        };
        /**
         * Helper function to manually delete the last room description from the internal array. This is
         * useful if a mod needs to send the player to a room temporarily and the room should not count as
         * the player having traveled to that room.
         *
         * @public
         */
        deleteLastRoomDescription() {
          v.run.roomHistory.pop();
        }
        /**
         * Helper function to get the total number of rooms that the player has entered thus far on the
         * run. (Re-entering the same room will increment the number returned.)
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_HISTORY`.
         *
         * @public
         */
        getNumRoomsEntered() {
          return v.run.roomHistory.length;
        }
        /**
         * Helper function to get information about all of the rooms that a player has visited thus far on
         * this run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_HISTORY`.
         *
         * @public
         */
        getRoomHistory() {
          return v.run.roomHistory;
        }
        /**
         * Helper function to get information about the room that was previously visited.
         *
         * In the special case of only one room having been visited thus far (i.e. the starting room of
         * the run), the starting room will be returned.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_HISTORY`.
         *
         * @public
         */
        getPreviousRoomDescription() {
          const previousRoomDescription = v.run.roomHistory.at(-2);
          if (previousRoomDescription !== void 0) {
            return previousRoomDescription;
          }
          const startingRoomDescription = v.run.roomHistory[0];
          if (startingRoomDescription !== void 0) {
            return startingRoomDescription;
          }
          error("Failed to find a room description for any rooms thus far on this run.");
        }
        /**
         * Helper function to get information about the most recent room that is stored in the room
         * history array.
         *
         * This is useful in the `POST_ENTITY_REMOVE` callback; see the `isLeavingRoom` function.
         *
         * Note that this function can return undefined in the case where it is called on the first room
         * of the run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_HISTORY`.
         *
         * @public
         */
        getLatestRoomDescription() {
          return v.run.roomHistory.at(-1);
        }
        /**
         * Helper function to detect if the player is on the first room of the room.
         *
         * @public
         */
        inFirstRoom() {
          return v.run.roomHistory.length === 1;
        }
        /**
         * Helper function to detect if the game is in the state where the room index has changed to a new
         * room, but the entities from the previous room are currently in the process of despawning. (At
         * this point, the `POST_NEW_ROOM` callback and the `POST_NEW_ROOM_EARLY` callback will not have
         * fired yet, and there will not be an entry in the room history array for the current room.)
         *
         * This function is intended to be used in the `POST_ENTITY_REMOVE` callback to detect when an
         * entity is despawning.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.ROOM_HISTORY`.
         *
         * @public
         */
        isLeavingRoom() {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          const seeds = cachedClasses_1.game.GetSeeds();
          const startSeedString = seeds.GetStartSeedString();
          const roomListIndex = (0, roomData_1.getRoomListIndex)();
          const roomVisitedCount = (0, roomData_1.getRoomVisitedCount)();
          const latestRoomDescription = this.getLatestRoomDescription();
          if (latestRoomDescription === void 0) {
            return false;
          }
          return startSeedString !== latestRoomDescription.startSeedString || stage !== latestRoomDescription.stage || stageType !== latestRoomDescription.stageType || roomListIndex !== latestRoomDescription.roomListIndex || roomVisitedCount !== latestRoomDescription.roomVisitedCount;
        }
      };
      exports2.RoomHistory = RoomHistory;
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "deleteLastRoomDescription", null);
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "getNumRoomsEntered", null);
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "getRoomHistory", null);
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "getPreviousRoomDescription", null);
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "getLatestRoomDescription", null);
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "inFirstRoom", null);
      __decorate([
        decorators_1.Exported
      ], RoomHistory.prototype, "isLeavingRoom", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/RunInNFrames.js
  var require_RunInNFrames = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/RunInNFrames.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RunInNFrames = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var array_1 = require_array();
      var run_1 = require_run();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          queuedGameFunctions: [],
          queuedRenderFunctions: [],
          intervalGameFunctions: [],
          intervalRenderFunctions: []
        }
      };
      var RunInNFrames = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        vConditionalFunc = () => false;
        roomHistory;
        /** @internal */
        constructor(roomHistory) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ROOM_HISTORY];
          this.callbacksUsed = [
            // 1
            [isaac_typescript_definitions_1.ModCallback.POST_UPDATE, this.postUpdate],
            // 2
            [isaac_typescript_definitions_1.ModCallback.POST_RENDER, this.postRender]
          ];
          this.roomHistory = roomHistory;
        }
        // ModCallback.POST_UPDATE (1)
        postUpdate = () => {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const numRoomsEntered = this.roomHistory.getNumRoomsEntered();
          checkExecuteQueuedFunctions(v.run.queuedGameFunctions, gameFrameCount, numRoomsEntered);
          checkExecuteIntervalFunctions(v.run.intervalGameFunctions, gameFrameCount, numRoomsEntered);
        };
        // ModCallback.POST_RENDER (2)
        postRender = () => {
          const renderFrameCount = Isaac.GetFrameCount();
          const numRoomsEntered = this.roomHistory.getNumRoomsEntered();
          checkExecuteQueuedFunctions(v.run.queuedRenderFunctions, renderFrameCount, numRoomsEntered);
          checkExecuteIntervalFunctions(v.run.intervalRenderFunctions, renderFrameCount, numRoomsEntered);
        };
        /**
         * Helper function to restart on the next render frame. Useful because it is impossible to restart
         * the game inside of the `POST_NEW_ROOM`, `POST_NEW_LEVEL`, or `POST_GAME_STARTED` callbacks when
         * a run is first starting.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param character Optional. If specified, will restart the game as the specified character.
         * @public
         */
        restartNextRenderFrame(character) {
          this.runNextRenderFrame(() => {
            (0, run_1.restart)(character);
          });
        }
        /**
         * Supply a function to run N game frames from now in the `POST_UPDATE` callback.
         *
         * For a usage example, see the documentation for the `runNextGameFrame`, which is used in a
         * similar way.
         *
         * Note that this function will not handle saving and quitting. If a player saving and quitting
         * before the deferred function fires would cause a bug in your mod, then you should handle
         * deferred functions manually using serializable data.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param func The function to run.
         * @param numGameFrames The amount of game frames to wait before running the function.
         * @param cancelIfRoomChanges Optional. Whether to cancel running the function if a new room is
         *                            loaded in the interim. Default is false.
         * @public
         */
        runInNGameFrames(func, numGameFrames, cancelIfRoomChanges = false) {
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const numRoomsEntered = this.roomHistory.getNumRoomsEntered();
          const frameCountToFire = gameFrameCount + numGameFrames;
          const queuedFunction = {
            func,
            frameCountToFire,
            numRoomsEntered,
            cancelIfRoomChanges
          };
          v.run.queuedGameFunctions.push(queuedFunction);
        }
        /**
         * Supply a function to run N render frames from now in the `POST_RENDER` callback.
         *
         * For a usage example, see the documentation for the `runNextGameFrame`, which is used in a
         * similar way.
         *
         * Note that this function will not handle saving and quitting. If a player saving and quitting
         * before the deferred function fires would cause a bug in your mod, then you should handle
         * deferred functions manually using serializable data.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param func The function to run.
         * @param numRenderFrames The amount of render frames to wait before running the function.
         * @param cancelIfRoomChanges Optional. Whether to cancel running the function if a new room is
         *                            loaded in the interim. Default is false.
         * @public
         */
        runInNRenderFrames(func, numRenderFrames, cancelIfRoomChanges = false) {
          const renderFrameCount = Isaac.GetFrameCount();
          const numRoomsEntered = this.roomHistory.getNumRoomsEntered();
          const frameCountToFire = renderFrameCount + numRenderFrames;
          const queuedFunction = {
            func,
            frameCountToFire,
            numRoomsEntered,
            cancelIfRoomChanges
          };
          v.run.queuedRenderFunctions.push(queuedFunction);
        }
        /**
         * Supply a function to run on the next `POST_UPDATE` callback.
         *
         * For example:
         *
         * ```ts
         * const NUM_EXPLODER_EXPLOSIONS = 5;
         *
         * function useItemExploder(player: EntityPlayer) {
         *   playSound("exploderBegin");
         *   explode(player, NUM_EXPLODER_EXPLOSIONS);
         * }
         *
         * function explode(player: EntityPlayer, numFramesLeft: int) {
         *   Isaac.Explode(player, undefined, 1);
         *   numFramesLeft -= 1;
         *   if (numFramesLeft === 0) {
         *     runNextFrame(() => {
         *       explode(player, numFramesLeft);
         *     });
         *   }
         * }
         * ```
         *
         * Note that this function will not handle saving and quitting. If a player saving and quitting
         * before the deferred function fires would cause a bug in your mod, then you should handle
         * deferred functions manually using serializable data.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param func The function to run.
         * @param cancelIfRoomChanges Optional. Whether to cancel running the function if a new room is
         *                            loaded in the interim. Default is false.
         * @public
         */
        runNextGameFrame(func, cancelIfRoomChanges = false) {
          this.runInNGameFrames(func, 1, cancelIfRoomChanges);
        }
        /**
         * Supply a function to run on the next `POST_RENDER` callback.
         *
         * For a usage example, see the documentation for the `runNextGameFrame`, which is used in a
         * similar way.
         *
         * Note that this function will not handle saving and quitting.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param func The function to run.
         * @param cancelIfRoomChanges Optional. Whether to cancel running the function if a new room is
         *                            loaded in the interim. Default is false.
         * @public
         */
        runNextRenderFrame(func, cancelIfRoomChanges = false) {
          this.runInNRenderFrames(func, 1, cancelIfRoomChanges);
        }
        /**
         * Supply a function to be repeatedly run on an interval of N game frames in the `POST_UPDATE`
         * callback. The function will continue to be fired until `false` is returned from the function.
         *
         * This is similar to the `setInterval` vanilla JavaScript function, except there is no
         * corresponding `clearInterval` function. (Instead, the return value from the supplied function
         * is used to stop the interval.)
         *
         * Note that this function will not handle saving and quitting. You must manually restart any
         * intervals if the player saves and quits in the middle of a run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param func The function to repeatedly run on an interval.
         * @param numGameFrames The amount of game frames to wait between each run.
         * @param runImmediately Whether to execute the function right now before waiting for the
         *                       interval.
         * @param cancelIfRoomChanges Optional. Whether to cancel running the function if a new room is
         *                            loaded in the interim. Default is false.
         * @public
         */
        setIntervalGameFrames(func, numGameFrames, runImmediately, cancelIfRoomChanges = false) {
          if (runImmediately) {
            const returnValue = func();
            if (!returnValue) {
              return;
            }
          }
          const gameFrameCount = cachedClasses_1.game.GetFrameCount();
          const numRoomsEntered = this.roomHistory.getNumRoomsEntered();
          const intervalFunction = {
            func,
            frameCountToFire: gameFrameCount + numGameFrames,
            numRoomsEntered,
            cancelIfRoomChanges,
            numIntervalFrames: numGameFrames
          };
          v.run.intervalGameFunctions.push(intervalFunction);
        }
        /**
         * Supply a function to be repeatedly run on an interval of N render frames in the `POST_RENDER`
         * callback. The function will continue to be fired until `false` is returned from the function.
         *
         * This is similar to the `setInterval` vanilla JavaScript function, except there is no
         * corresponding `clearInterval` function. (Instead, the return value from the supplied function
         * is used to stop the interval.)
         *
         * Note that this function will not handle saving and quitting. You must manually restart any
         * intervals if the player saves and quits in the middle of a run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_IN_N_FRAMES`.
         *
         * @param func The function to repeatedly run on an interval.
         * @param numRenderFrames The amount of game frames to wait between each run.
         * @param runImmediately Whether to execute the function right now before waiting for the
         *                       interval.
         * @param cancelIfRoomChanges Optional. Whether to cancel running the function if a new room is
         *                            loaded in the interim. Default is false.
         * @public
         */
        setIntervalRenderFrames(func, numRenderFrames, runImmediately, cancelIfRoomChanges = false) {
          if (runImmediately) {
            const returnValue = func();
            if (!returnValue) {
              return;
            }
          }
          const renderFrameCount = Isaac.GetFrameCount();
          const numRoomsEntered = this.roomHistory.getNumRoomsEntered();
          const intervalFunction = {
            func,
            frameCountToFire: renderFrameCount + numRenderFrames,
            numRoomsEntered,
            cancelIfRoomChanges,
            numIntervalFrames: numRenderFrames
          };
          v.run.intervalRenderFunctions.push(intervalFunction);
        }
      };
      exports2.RunInNFrames = RunInNFrames;
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "restartNextRenderFrame", null);
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "runInNGameFrames", null);
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "runInNRenderFrames", null);
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "runNextGameFrame", null);
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "runNextRenderFrame", null);
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "setIntervalGameFrames", null);
      __decorate([
        decorators_1.Exported
      ], RunInNFrames.prototype, "setIntervalRenderFrames", null);
      function checkExecuteQueuedFunctions(queuedFunctions, frameCount, newNumRoomsEntered) {
        const firingFunctions = queuedFunctions.filter(({ frameCountToFire }) => frameCount >= frameCountToFire);
        for (const firingFunction of firingFunctions) {
          const { func, cancelIfRoomChanges, numRoomsEntered } = firingFunction;
          if (!cancelIfRoomChanges || numRoomsEntered === newNumRoomsEntered) {
            func();
          }
          (0, array_1.arrayRemoveInPlace)(queuedFunctions, firingFunction);
        }
      }
      function checkExecuteIntervalFunctions(intervalFunctions, frameCount, newNumRoomsEntered) {
        const firingFunctions = intervalFunctions.filter(({ frameCountToFire }) => frameCount >= frameCountToFire);
        for (const firingFunction of firingFunctions) {
          const { func, cancelIfRoomChanges, numRoomsEntered, numIntervalFrames } = firingFunction;
          let returnValue = false;
          if (!cancelIfRoomChanges || numRoomsEntered === newNumRoomsEntered) {
            returnValue = func();
          }
          (0, array_1.arrayRemoveInPlace)(intervalFunctions, firingFunction);
          if (returnValue) {
            const newIntervalFunction = {
              func,
              frameCountToFire: frameCount + numIntervalFrames,
              numRoomsEntered,
              cancelIfRoomChanges,
              numIntervalFrames
            };
            intervalFunctions.push(newIntervalFunction);
          }
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/RunNextRoom.js
  var require_RunNextRoom = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/RunNextRoom.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RunNextRoom = void 0;
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          queuedFunctions: []
        }
      };
      var RunNextRoom = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        vConditionalFunc = () => false;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED, this.postNewRoomReordered]
          ];
        }
        // ModCallbackCustom.POST_NEW_ROOM_REORDERED
        postNewRoomReordered = () => {
          for (const func of v.run.queuedFunctions) {
            func();
          }
          (0, array_1.emptyArray)(v.run.queuedFunctions);
        };
        /**
         * Supply a function to run on the next `POST_NEW_ROOM` callback.
         *
         * Note that this function will not handle saving and quitting. If a player saving and quitting
         * before the deferred function fires would cause a bug in your mod, then you should handle
         * deferred functions manually using serializable data.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_NEXT_ROOM`.
         */
        runNextRoom(func) {
          v.run.queuedFunctions.push(func);
        }
      };
      exports2.RunNextRoom = RunNextRoom;
      __decorate([
        decorators_1.Exported
      ], RunNextRoom.prototype, "runNextRoom", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/RunNextRun.js
  var require_RunNextRun = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/RunNextRun.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.RunNextRun = void 0;
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var array_1 = require_array();
      var Feature_1 = require_Feature();
      var v = {
        persistent: {
          queuedFunctions: []
        }
      };
      var RunNextRun = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        vConditionalFunc = () => false;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED,
              this.postGameStartedReorderedFalse,
              [false]
            ]
          ];
        }
        // ModCallbackCustom.POST_GAME_STARTED_REORDERED
        // false
        postGameStartedReorderedFalse = () => {
          for (const func of v.persistent.queuedFunctions) {
            func();
          }
          (0, array_1.emptyArray)(v.persistent.queuedFunctions);
        };
        /**
         * Supply a function to run on the next `POST_GAME_STARTED` callback.
         *
         * Note that this function will not handle saving and quitting. If a player saving and quitting
         * before the deferred function fires would cause a bug in your mod, then you should handle
         * deferred functions manually using serializable data.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.RUN_NEXT_ROOM`.
         *
         * @public
         */
        runNextRun(func) {
          v.persistent.queuedFunctions.push(func);
        }
      };
      exports2.RunNextRun = RunNextRun;
      __decorate([
        decorators_1.Exported
      ], RunNextRun.prototype, "runNextRun", null);
    }
  });

  // node_modules/isaacscript-common/dist/enums/SaveDataKey.js
  var require_SaveDataKey = __commonJS({
    "node_modules/isaacscript-common/dist/enums/SaveDataKey.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SaveDataKey = void 0;
      var SaveDataKey;
      (function(SaveDataKey2) {
        SaveDataKey2["PERSISTENT"] = "persistent";
        SaveDataKey2["RUN"] = "run";
        SaveDataKey2["LEVEL"] = "level";
        SaveDataKey2["ROOM"] = "room";
      })(SaveDataKey || (exports2.SaveDataKey = SaveDataKey = {}));
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/glowingHourGlass.js
  var require_glowingHourGlass = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/glowingHourGlass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.restoreGlowingHourGlassBackup = exports2.makeGlowingHourGlassBackup = void 0;
      var SaveDataKey_1 = require_SaveDataKey();
      var SerializationType_1 = require_SerializationType();
      var deepCopy_1 = require_deepCopy();
      var merge_1 = require_merge();
      var table_1 = require_table();
      var constants_1 = require_constants3();
      var GLOWING_HOUR_GLASS_BACKUP_KEYS = [
        SaveDataKey_1.SaveDataKey.RUN,
        SaveDataKey_1.SaveDataKey.LEVEL
      ];
      var IGNORE_GLOWING_HOUR_GLASS_KEY = "__ignoreGlowingHourGlass";
      var REWIND_WITH_GLOWING_HOUR_GLASS_KEY = "__rewindWithGlowingHourGlass";
      function makeGlowingHourGlassBackup(saveDataMap, saveDataConditionalFuncMap, saveDataGlowingHourGlassMap) {
        (0, table_1.iterateTableInOrder)(saveDataMap, (subscriberName, saveData) => {
          const conditionalFunc = saveDataConditionalFuncMap.get(subscriberName);
          if (conditionalFunc !== void 0) {
            const shouldSave = conditionalFunc();
            if (!shouldSave) {
              return;
            }
          }
          for (const saveDataKey of getKeysToBackup(saveData)) {
            const childTable = saveData[saveDataKey];
            if (childTable === void 0) {
              continue;
            }
            const childTableLuaMap = childTable;
            if (childTableLuaMap.has(IGNORE_GLOWING_HOUR_GLASS_KEY)) {
              continue;
            }
            let saveDataGlowingHourGlass = saveDataGlowingHourGlassMap.get(subscriberName);
            if (saveDataGlowingHourGlass === void 0) {
              saveDataGlowingHourGlass = new LuaMap();
              saveDataGlowingHourGlassMap.set(subscriberName, saveDataGlowingHourGlass);
            }
            const copiedChildTable = (0, deepCopy_1.deepCopy)(childTable, SerializationType_1.SerializationType.SERIALIZE);
            saveDataGlowingHourGlass[saveDataKey] = copiedChildTable;
          }
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
      }
      exports2.makeGlowingHourGlassBackup = makeGlowingHourGlassBackup;
      function restoreGlowingHourGlassBackup(saveDataMap, saveDataConditionalFuncMap, saveDataGlowingHourGlassMap, classConstructors) {
        (0, table_1.iterateTableInOrder)(saveDataMap, (subscriberName, saveData) => {
          const conditionalFunc = saveDataConditionalFuncMap.get(subscriberName);
          if (conditionalFunc !== void 0) {
            const shouldSave = conditionalFunc();
            if (!shouldSave) {
              return;
            }
          }
          for (const saveDataKey of getKeysToBackup(saveData)) {
            const childTable = saveData[saveDataKey];
            if (childTable === void 0) {
              continue;
            }
            const childTableLuaMap = childTable;
            if (childTableLuaMap.has(IGNORE_GLOWING_HOUR_GLASS_KEY)) {
              continue;
            }
            const saveDataGlowingHourGlass = saveDataGlowingHourGlassMap.get(subscriberName);
            if (saveDataGlowingHourGlass === void 0) {
              continue;
            }
            const childTableBackup = saveDataGlowingHourGlass[saveDataKey];
            if (childTableBackup === void 0) {
              continue;
            }
            (0, merge_1.merge)(
              childTable,
              childTableBackup,
              // Append an arbitrary suffix for better error messages.
              `${subscriberName}__glowingHourGlass`,
              classConstructors
            );
          }
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
      }
      exports2.restoreGlowingHourGlassBackup = restoreGlowingHourGlassBackup;
      function getKeysToBackup(saveData) {
        const shouldBackupPersistentObject = saveData.persistent !== void 0 && saveData.persistent.has(REWIND_WITH_GLOWING_HOUR_GLASS_KEY);
        return shouldBackupPersistentObject ? [...GLOWING_HOUR_GLASS_BACKUP_KEYS, SaveDataKey_1.SaveDataKey.PERSISTENT] : GLOWING_HOUR_GLASS_BACKUP_KEYS;
      }
    }
  });

  // node_modules/isaacscript-common/dist/lib/jsonLua.js
  var require_jsonLua = __commonJS({
    "node_modules/isaacscript-common/dist/lib/jsonLua.js"(exports, module) {
      var lua_print = function() {
        try {
          console.log.apply(console, arguments);
        } catch (a2) {
        }
        return [];
      };
      function lua_load(a, b) {
        if (!lua_parser)
          throw Error(
            "Lua parser not available, perhaps you're not using the lua+parser.js version of the library?"
          );
        eval(
          "fn = function " + (b || "load") + "() {\nreturn (function () {\n" + lua_parser.parse(a) + "\n})()[0];\n};"
        );
      }
      function slice(a2, b2) {
        return a2.slice ? a2.slice(b2) : Array.prototype.slice.call(a2, b2);
      }
      function not_supported() {
        throw Error("Not supported");
      }
      function ensure_arraymode(a2) {
        if (!a2.arraymode) {
          var b2 = [], c;
          for (c in a2.uints)
            null != a2.uints[c] && (b2[c - 1] = a2.uints[c]);
          a2.uints = b2;
          a2.arraymode = true;
        }
      }
      function ensure_notarraymode(a2) {
        if (a2.arraymode) {
          var b2 = {}, c;
          for (c in a2.uints)
            null != a2.uints[c] && (b2[c - -1] = a2.uints[c]);
          a2.uints = b2;
          delete a2.arraymode;
        }
      }
      function ReturnValues(a2) {
        this.vars = a2 || [];
      }
      function lua_true(a2) {
        return null != a2 && false !== a2;
      }
      function lua_not(a2) {
        return null == a2 || false === a2;
      }
      function lua_and(a2, b2) {
        return null == a2 || false === a2 ? a2 : b2();
      }
      function lua_or(a2, b2) {
        return null != a2 && false !== a2 ? a2 : b2();
      }
      function lua_assertfloat(a2) {
        var b2 = parseFloat(a2);
        if (isNaN(b2))
          throw Error("Invalid number: " + a2);
        return b2;
      }
      function lua_newtable(a2) {
        for (var b2 = { str: {}, uints: {}, floats: {}, bool: {}, objs: [] }, c = 1; c < arguments.length - 1; c += 2) {
          var d = arguments[c + 1];
          if (null != d) {
            var e = arguments[c];
            switch (typeof e) {
              case "string":
                b2.str[e] = d;
                break;
              case "number":
                if (e != e)
                  throw Error("Table index is NaN");
                0 < e && (e | 0) == e ? b2.uints[e] = d : b2.floats[e] = d;
                break;
              case "boolean":
                b2.bool[e] = d;
                break;
              case "object":
                if (null == e)
                  throw Error("Table index is nil");
                var f = false;
                for (c in b2.objs)
                  if (b2.objs[c][0] === e) {
                    null == d ? b2.objs.splice(c, 1) : (f = true, b2.objs[c][1] = d);
                    break;
                  }
                f || b2.objs.push([e, d]);
                break;
              default:
                throw Error("Unsupported type for table: " + typeof e);
            }
          }
        }
        if (a2)
          if (ensure_arraymode(b2), 0 == b2.uints.length)
            b2.uints = a2;
          else
            for (c = a2.length; 0 < c--; )
              b2.uints[c] = a2[c];
        return b2;
      }
      function lua_newtable2(a2) {
        var b2 = {}, c;
        for (c in a2)
          b2[c] = a2[c];
        return { str: b2, uints: {}, floats: {}, bool: {}, objs: {} };
      }
      function lua_len(a2) {
        if ("string" == typeof a2)
          return a2.length;
        if ("object" == typeof a2 && null != a2) {
          if (null == a2.length) {
            var b2 = 0;
            if (a2.arraymode)
              for (; null != a2.uints[b2++]; )
                ;
            else
              for (; null != a2.uints[++b2]; )
                ;
            return a2.length = b2 - 1;
          }
          return a2.length;
        }
        if (b2 = a2.metatable && a2.metatable.str.__len)
          return lua_rawcall(b2, [a2])[0];
        throw Error("Length of <" + a2 + "> not supported");
      }
      function lua_rawcall(a2, b2) {
        try {
          return a2.apply(null, b2);
        } catch (c) {
          if (c.constructor == ReturnValues)
            return c.vars;
          throw c;
        }
      }
      function lua_tablegetcall(a2, b2, c) {
        a2 = lua_tableget(a2, b2);
        if ("function" == typeof a2)
          return lua_rawcall(a2, c);
        if (null == a2)
          throw Error("attempt to call field '" + b2 + "' (a nil value)");
        b2 = a2.metatable && a2.metatable.str.__call;
        if (null != b2)
          return lua_rawcall(b2, [a2].concat(c));
        throw Error("Could not call " + a2 + " as function");
      }
      function lua_call(a2, b2) {
        if ("function" == typeof a2)
          return lua_rawcall(a2, b2);
        if (null == a2)
          throw Error("attempt to call function (a nil value)");
        var c = a2.metatable && a2.metatable.str.__call;
        if (null != c)
          return lua_rawcall(c, [a2].concat(b2));
        throw Error("Could not call " + a2 + " as function");
      }
      function lua_mcall(a2, b2, c) {
        var d = lua_tableget(a2, b2);
        if (null == d)
          throw Error("attempt to call method '" + b2 + "' (a nil value)");
        return lua_call(d, [a2].concat(c));
      }
      function lua_eq(a2, b2) {
        if (typeof a2 != typeof b2)
          return null == a2 && null == b2 ? true : false;
        if (a2 == b2)
          return true;
        if (null == a2 || null == b2)
          return false;
        var c = a2.metatable && a2.metatable.str.__eq;
        return c && c == (b2.metatable && b2.metatable.str.__eq) ? lua_true(lua_rawcall(c, [a2, b2])[0]) : false;
      }
      function lua_lt(a2, b2) {
        if ("number" == typeof a2 && "number" == typeof b2 || "string" == typeof a2 && "string" == typeof b2)
          return a2 < b2;
        var c = a2.metatable && a2.metatable.str.__lt;
        if (c && c == (b2.metatable && b2.metatable.str.__lt))
          return lua_true(lua_rawcall(c, [a2, b2])[0]);
        throw Error("Unable to compare " + a2 + " and " + b2);
      }
      function lua_lte(a2, b2) {
        if ("number" == typeof a2 && "number" == typeof b2 || "string" == typeof a2 && "string" == typeof b2)
          return a2 <= b2;
        var c = a2.metatable && a2.metatable.str.__le;
        if (c && c == (b2.metatable && b2.metatable.str.__le))
          return lua_true(lua_rawcall(c, [a2, b2])[0]);
        if ((c = a2.metatable && a2.metatable.str.__lt) && c == (b2.metatable && b2.metatable.str.__lt))
          return lua_not(lua_rawcall(c, [b2, a2])[0]);
        throw Error("Unable to compare " + a2 + " and " + b2);
      }
      function lua_unm(a2) {
        var b2 = parseFloat(a2);
        if (isNaN(b2)) {
          if (b2 = a2.metatable && a2.metatable.str.__unm)
            return lua_rawcall(b2, [a2])[0];
          throw Error("Inverting <" + a2 + "> not supported");
        }
        return -b2;
      }
      function lua_add(a2, b2) {
        var c = parseFloat(a2), d = parseFloat(b2);
        if (isNaN(c) || isNaN(d)) {
          if (c = a2.metatable && a2.metatable.str.__add || b2.metatable && b2.metatable.str.__add)
            return lua_rawcall(c, [a2, b2])[0];
          throw Error("Adding <" + a2 + "> and <" + b2 + "> not supported");
        }
        return c + d;
      }
      function lua_subtract(a2, b2) {
        var c = parseFloat(a2), d = parseFloat(b2);
        if (isNaN(c) || isNaN(d)) {
          if (c = a2.metatable && a2.metatable.str.__sub || b2.metatable && b2.metatable.str.__sub)
            return lua_rawcall(c, [a2, b2])[0];
          throw Error("Subtracting <" + a2 + "> and <" + b2 + "> not supported");
        }
        return c - d;
      }
      function lua_divide(a2, b2) {
        var c = parseFloat(a2), d = parseFloat(b2);
        if (isNaN(c) || isNaN(d)) {
          if (c = a2.metatable && a2.metatable.str.__div || b2.metatable && b2.metatable.str.__div)
            return lua_rawcall(c, [a2, b2])[0];
          throw Error("Dividing <" + a2 + "> and <" + b2 + "> not supported");
        }
        return c / d;
      }
      function lua_multiply(a2, b2) {
        var c = parseFloat(a2), d = parseFloat(b2);
        if (isNaN(c) || isNaN(d)) {
          if (c = a2.metatable && a2.metatable.str.__mul || b2.metatable && b2.metatable.str.__mul)
            return lua_rawcall(c, [a2, b2])[0];
          throw Error("Multiplying <" + a2 + "> and <" + b2 + "> not supported");
        }
        return c * d;
      }
      function lua_power(a2, b2) {
        var c = parseFloat(a2), d = parseFloat(b2);
        if (isNaN(c) || isNaN(d)) {
          if (c = a2.metatable && a2.metatable.str.__pow || b2.metatable && b2.metatable.str.__pow)
            return lua_rawcall(c, [a2, b2])[0];
          throw Error("<" + a2 + "> to the power of <" + b2 + "> not supported");
        }
        return Math.pow(c, d);
      }
      function lua_mod(a2, b2) {
        var c = parseFloat(a2), d = parseFloat(b2);
        if (isNaN(c) || isNaN(d)) {
          if (c = a2.metatable && a2.metatable.str.__mod || b2.metatable && b2.metatable.str.__mod)
            return lua_rawcall(c, [a2, b2])[0];
          throw Error("Modulo <" + a2 + "> and <" + b2 + "> not supported");
        }
        return 0 <= c ? 0 <= d ? c % d : (d + c % d) % d : 0 <= d ? (d + c % d) % d : c % d;
      }
      function lua_rawget(a2, b2) {
        switch (typeof b2) {
          case "string":
            return a2.str[b2];
          case "number":
            if (b2 != b2)
              throw Error("Table index is NaN");
            return 0 < b2 && (b2 | 0) == b2 ? a2.arraymode ? a2.uints[b2 - 1] : a2.uints[b2] : a2.floats[b2];
          case "boolean":
            return a2.bool[b2];
          case "object":
            if (null == b2)
              return null;
            for (var c in a2.objs)
              if (a2.objs[c][0] == b2)
                return a2.objs[c][1];
            break;
          default:
            throw Error("Unsupported key for table: " + typeof b2);
        }
      }
      function lua_rawset(a2, b2, c) {
        delete a2.length;
        switch (typeof b2) {
          case "string":
            null == c ? delete a2.str[b2] : a2.str[b2] = c;
            break;
          case "number":
            if (b2 != b2)
              throw Error("Table index is NaN");
            0 < b2 && (b2 | 0) == b2 ? (ensure_notarraymode(a2), null == c ? delete a2.uints[b2] : a2.uints[b2] = c) : null == c ? delete a2.floats[b2] : a2.floats[b2] = c;
            break;
          case "boolean":
            null == c ? delete a2.bool[b2] : a2.bool[b2] = c;
            break;
          case "object":
            if (null == b2)
              throw Error("Table index is nil");
            var d = false, e;
            for (e in a2.objs)
              if (a2.objs[e][0] == b2) {
                null == c ? a2.objs.splice(e, 1) : (d = true, a2.objs[e][1] = c);
                break;
              }
            d || a2.objs.push([b2, c]);
            break;
          default:
            throw Error("Unsupported key for table: " + typeof b2);
        }
      }
      function lua_tableget(a2, b2) {
        if (null == a2)
          throw Error("attempt to index field '" + b2 + "' in a nil value");
        if ("object" == typeof a2) {
          var c = lua_rawget(a2, b2);
          if (null != c)
            return c;
          c = a2.metatable && a2.metatable.str.__index;
          if (null == c)
            return null;
        } else if (c = a2.metatable && a2.metatable.str.__index, null == c)
          throw Error("Unable to index key " + b2 + " from " + a2);
        return "function" == typeof c ? lua_rawcall(c, [a2, b2])[0] : lua_tableget(c, b2);
      }
      function lua_tableset(a2, b2, c) {
        if (null == a2)
          throw Error("attempt to set field '" + b2 + "' in a nil value");
        if ("object" == typeof a2) {
          if (null != lua_rawget(a2, b2)) {
            lua_rawset(a2, b2, c);
            return;
          }
          var d = a2.metatable && a2.metatable.str.__newindex;
          if (null == d) {
            lua_rawset(a2, b2, c);
            return;
          }
        } else if (d = a2.metatable && a2.metatable.str.__newindex, null == d)
          throw Error("Unable to set key " + b2 + " in table " + a2);
        "function" == typeof d ? lua_rawcall(d, [a2, b2, c]) : lua_tableset(d, b2, c);
      }
      function lua_concat(a2, b2) {
        if ("number" == typeof a2 && "number" == typeof b2)
          throw Error("number concat not supported yet");
        if (("string" == typeof a2 || "number" == typeof a2) && ("string" == typeof b2 || "number" == typeof b2))
          return a2 + b2;
        var c = a2.metatable && a2.metatable.str.__concat || b2.metatable && b2.metatable.str.__concat;
        if (c)
          return lua_rawcall(c, [a2, b2])[0];
        throw Error("Unable to concat " + a2 + " and " + b2);
      }
      function _ipairs_next(a2, b2) {
        var c;
        c = a2.arraymode ? a2.uints[b2] : a2.uints[b2 + 1];
        return null == c ? [null, null] : [b2 + 1, c];
      }
      var lua_libs = {};
      var lua_core = {
        assert: function(a2, b2) {
          1 > arguments.length && (b2 = "assertion failed!");
          if (null != a2 && false !== a2)
            return [a2];
          throw Error(b2);
        },
        collectgarbage: function() {
        },
        dofile: function() {
          not_supported();
        },
        error: function(a2) {
          throw Error(a2);
        },
        getfenv: function() {
          not_supported();
        },
        getmetatable: function(a2) {
          return [a2.metatable && (a2.metatable.str.__metatable || a2.metatable)];
        },
        ipairs: function(a2) {
          return [_ipairs_next, a2, 0];
        },
        load: function(a2, b2) {
          for (var c = "", d; null != (d = a2()) && "" != d; )
            c += d;
          try {
            return [lua_load(c, b2)];
          } catch (e) {
            return [null, e.message];
          }
        },
        loadfile: function() {
          not_supported();
        },
        loadstring: function(a2, b2) {
          try {
            return [lua_load(a2, b2)];
          } catch (c) {
            return [null, c.message];
          }
        },
        next: function() {
          not_supported();
        },
        pairs: function(a2) {
          var b2 = [], c;
          for (c in a2.str)
            b2.push(c);
          if (a2.arraymode)
            for (var d = a2.uints.length; 0 < d--; )
              null != a2.uints[d] && b2.push(d + 1);
          else
            for (c in a2.uints)
              b2.push(parseFloat(c));
          for (c in a2.floats)
            b2.push(parseFloat(c));
          for (c in a2.bool)
            b2.push("true" === c ? true : false);
          for (c in a2.objs)
            b2.push(a2.objs[c][0]);
          c = 0;
          return [
            function(a3, d2) {
              var g2;
              do {
                if (c >= b2.length)
                  return [null, null];
                d2 = b2[c++];
                g2 = lua_rawget(a3, d2);
              } while (null == g2);
              return [d2, g2];
            },
            a2,
            null
          ];
        },
        pcall: function(a2) {
          try {
            return [true].concat(a2.apply(null, slice(arguments, 1)));
          } catch (b2) {
            return [false, b2.message];
          }
        },
        print: lua_print,
        rawequal: function(a2, b2) {
          return [a2 == b2 || null == a2 && null == b2];
        },
        rawget: function(a2, b2) {
          if ("object" == typeof a2 && null != a2)
            return [lua_rawget(a2, b2)];
          throw Error("Unable to index key " + b2 + " from " + a2);
        },
        rawset: function(a2, b2, c) {
          if ("object" == typeof a2 && null != a2 && null != b2)
            return lua_rawset(a2, b2, c), [a2];
          throw Error("Unable set key " + b2 + " in " + a2);
        },
        select: function(a2) {
          if ("#" === a2)
            return [arguments.length - 1];
          a2 = lua_assertfloat(a2);
          if (1 <= a2)
            return slice(arguments, lua_assertfloat(a2));
          throw Error("Index out of range");
        },
        setfenv: function() {
          not_supported();
        },
        setmetatable: function(a2, b2) {
          if ("object" != typeof a2 || null == a2)
            throw Error("table expected, got " + a2);
          if (null == b2)
            delete a2.metatable;
          else if ("object" === typeof b2)
            a2.metatable = b2;
          else
            throw Error("table or nil expected, got " + b2);
          return [a2];
        },
        tonumber: function(a2, b2) {
          return "number" == typeof a2 ? [a2] : 10 === b2 || null == b2 ? [parseFloat(a2)] : [parseInt(a2, b2)];
        },
        tostring: function(a2) {
          if (null == a2)
            return ["nil"];
          var b2 = a2.metatable && a2.metatable.str.__tostring;
          if (b2)
            return lua_rawcall(b2, [a2]);
          switch (typeof a2) {
            case "number":
            case "boolean":
              return [a2.toString()];
            case "string":
              return [a2];
            case "object":
              return ["table"];
            case "function":
              return ["function"];
            default:
              return ["nil"];
          }
        },
        type: function(a2) {
          switch (typeof a2) {
            case "number":
              return ["number"];
            case "string":
              return ["string"];
            case "boolean":
              return ["boolean"];
            case "function":
              return ["function"];
            case "object":
              return [null === a2 ? "nil" : "table"];
            case "undefined":
              return ["nil"];
            default:
              throw Error("Unepected value of type " + typeof a2);
          }
        },
        unpack: function(a2, b2, c) {
          ensure_arraymode(a2);
          if (null != a2.length)
            c = a2.length;
          else {
            for (c = 0; null != a2.uints[c++]; )
              ;
            a2.length = --c;
          }
          if (null == b2 || 1 > b2)
            b2 = 1;
          null == c && (c = a2.length);
          throw new ReturnValues(a2.uints.slice(b2 - 1, c));
        },
        _VERSION: "Lua 5.1",
        xpcall: function() {
          not_supported();
        }
      };
      var _lua_coroutine = lua_libs.coroutine = {};
      _lua_coroutine.resume = _lua_coroutine.running = _lua_coroutine.status = _lua_coroutine.wrap = _lua_coroutine.yield = _lua_coroutine.create = function() {
        not_supported();
      };
      var _lua_debug = lua_libs.debug = {
        getmetatable: function(a2) {
          return [a2.metatable];
        }
      };
      _lua_debug.traceback = _lua_debug.getfenv = _lua_debug.gethook = _lua_debug.getinfo = _lua_debug.getlocal = _lua_debug.getregistry = _lua_debug.getupvalue = _lua_debug.setfenv = _lua_debug.sethook = _lua_debug.setlocal = _lua_debug.setupvalue = _lua_debug.debug = function() {
        not_supported();
      };
      var _lua_write_buffer = "";
      var _lua_io = lua_libs.io = {
        write: function() {
          _lua_write_buffer += Array.prototype.join.call(arguments, "");
          for (var a2 = _lua_write_buffer.split("\n"); 1 < a2.length; )
            _lua_print(a2.shift());
          _lua_write_buffer = a2[0];
          return [];
        },
        flush: function() {
        },
        stderr: null,
        stdin: null,
        stdout: null
      };
      _lua_io.close = _lua_io.input = _lua_io.lines = _lua_io.output = _lua_io.popen = _lua_io.read = _lua_io.tmpfile = _lua_io.type = _lua_io.open = function() {
        not_supported();
      };
      var _lua_randmax = 4294967296;
      var _lua_randseed = Math.random() * _lua_randmax & _lua_randmax - 1;
      lua_libs.math = {
        abs: function(a2) {
          return [Math.abs(a2)];
        },
        acos: function(a2) {
          return [Math.acos(a2)];
        },
        asin: function(a2) {
          return [Math.asin(a2)];
        },
        atan: function(a2) {
          return [Math.atan(a2)];
        },
        atan2: function(a2, b2) {
          return [Math.atan2(a2, b2)];
        },
        ceil: function(a2) {
          return [Math.ceil(a2)];
        },
        cos: function(a2) {
          return [Math.cos(a2)];
        },
        cosh: function(a2) {
          return [(Math.exp(a2) + Math.exp(-a2)) / 2];
        },
        deg: function(a2) {
          return [a2 * (180 / Math.PI)];
        },
        exp: function(a2) {
          return [Math.exp(a2)];
        },
        floor: function(a2) {
          return [Math.floor(a2)];
        },
        fmod: function(a2, b2) {
          return [a2 % b2];
        },
        frexp: function() {
          not_supported();
        },
        huge: Infinity,
        ldexp: function(a2, b2) {
          return [a2 * Math.pow(2, b2)];
        },
        log: function(a2) {
          return [Math.log(a2)];
        },
        log10: function(a2) {
          return [Math.log(a2) / Math.LN10];
        },
        max: function() {
          return [Math.max.apply(null, arguments)];
        },
        min: function() {
          return [Math.min.apply(null, arguments)];
        },
        modf: function(a2) {
          var b2 = a2 % 1;
          return [a2 - b2, b2];
        },
        pi: Math.PI,
        pow: function(a2, b2) {
          return [Math.pow(a2, b2)];
        },
        rad: function(a2) {
          return [a2 * (Math.PI / 180)];
        },
        sin: function(a2) {
          return [Math.sin(a2)];
        },
        sinh: function(a2) {
          return [(Math.exp(a2) - Math.exp(-a2)) / 2];
        },
        sqrt: function(a2) {
          return [Math.sqrt(a2)];
        },
        tan: function(a2) {
          return [Math.tan(a2)];
        },
        tanh: function(a2) {
          var b2 = Math.exp(a2), a2 = Math.exp(-a2);
          return [(b2 - a2) / (b2 + a2)];
        },
        random: function(a2, b2) {
          _lua_randseed = ~_lua_randseed + (_lua_randseed << 15);
          _lua_randseed ^= _lua_randseed >>> 12;
          _lua_randseed += _lua_randseed << 2;
          _lua_randseed ^= _lua_randseed >>> 4;
          _lua_randseed *= 2057;
          _lua_randseed ^= _lua_randseed >>> 16;
          var c;
          c = 0 > _lua_randseed ? (_lua_randseed + _lua_randmax) / _lua_randmax % 1 : _lua_randseed / _lua_randmax % 1;
          if (2 <= arguments.length) {
            a2 |= 0;
            b2 |= 0;
            if (a2 >= b2)
              throw Error("Invalid range");
            return [Math.floor(c * (b2 - a2 + 1) + a2)];
          }
          return 1 == arguments.length ? [Math.floor(c * (a2 | 0) + 1)] : [c];
        },
        randomseed: function(a2) {
          _lua_randseed = a2 & _lua_randmax - 1;
        }
      };
      var _lua_clock_start = (/* @__PURE__ */ new Date()).getTime() / 1e3;
      lua_libs.os = {
        clock: function() {
          return [(/* @__PURE__ */ new Date()).getTime() / 1e3 - _lua_clock_script];
        },
        date: function(a2, b2) {
          return ["[" + b2 + "]" + a2];
        },
        difftime: function(a2, b2) {
          return [a2 - b2];
        },
        execute: function() {
          return 0;
        },
        exit: function() {
          not_supported();
        },
        getenv: function() {
          return [null];
        },
        remove: function() {
          not_supported();
        },
        rename: function() {
          not_supported();
        },
        setlocale: function() {
          not_supported();
        },
        time: function(a2) {
          if (a2)
            not_supported();
          else
            return [Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3)];
        }
      };
      var lua_packages = lua_newtable();
      function lua_createmodule(a2, b2, c) {
        var d = lua_tableget(lua_packages, b2) || lua_tableget(a2, b2) || lua_newtable();
        lua_tableset(a2, b2, d);
        lua_tableset(lua_packages, b2, d);
        lua_tableset(d, "_NAME", b2);
        lua_tableset(d, "_M", d);
        lua_tableset(d, "_PACKAGE", b2.split(".").slice(0, -1).join("."));
        for (a2 = 0; a2 < c.length; a2++)
          lua_call(c[a2], [d]);
        return d;
      }
      function lua_module(a2) {
        var b2 = lua_tableget(lua_packages, a2);
        if (null == b2)
          throw Error(
            "Module " + a2 + " not found. Module must be loaded before use."
          );
        return b2;
      }
      function lua_require(a2, b2) {
        for (var c = lua_module(b2), d = a2, e = b2.split("."), f = 0; f < e.length - 1; f++)
          if (!lua_tableget(d, e[f])) {
            var g2 = lua_newtable();
            lua_tableset(d, e[f], g2);
            d = g2;
          }
        lua_tableset(d, e[e.length - 1], c);
        return c;
      }
      lua_libs["package"] = {
        path: "",
        cpath: "",
        loaded: lua_packages,
        loaders: lua_newtable(),
        preload: lua_newtable(),
        loadlib: function() {
          not_supported();
        }
      };
      lua_libs.string = {
        byte: function(a2, b2, c) {
          null == b2 && (b2 = 0);
          null == c && (c = b2);
          for (var d = []; b2 < c && b2 < a2.length; )
            d.push(a2.charCodeAt(b2));
          return d;
        },
        char: function() {
          return [String.fromCharCode.apply(null, arguments)];
        },
        dump: function() {
          not_supported();
        },
        find: function() {
          not_supported();
        },
        format: function(a2) {
          return ["[" + slice(arguments, 1).join(", ") + "]" + arguments[0]];
        },
        gmatch: function() {
          not_supported();
        },
        gsub: function() {
          not_supported();
        },
        len: function(a2) {
          if ("string" == typeof a2)
            return [a2.length];
          throw Error("Input not string");
        },
        lower: function(a2) {
          if ("string" == typeof a2)
            return [a2.toLowerCase()];
          throw Error("Input not string");
        },
        match: function() {
          not_supported();
        },
        rep: function(a2, b2) {
          if ("string" == typeof a2 && "number" == typeof b2) {
            for (var c = []; 0 < b2--; )
              c.push(a2);
            return [c.join("")];
          }
          throw Error("Input not string and number");
        },
        reverse: function(a2) {
          if ("string" == typeof a2)
            return [a2.split("").reverse().join("")];
          throw Error("Input not string");
        },
        sub: function(a2, b2, c) {
          b2 = 0 > b2 ? b2 + a2.length + 1 : 0 <= b2 ? b2 : 0;
          null == c && (c = -1);
          c = 0 > c ? c + a2.length + 1 : 0 <= c ? c : 0;
          1 > b2 && (b2 = 1);
          c > a2.length && (c = a2.length);
          return b2 <= c ? [a2.substr(b2 - 1, c - b2 + 1)] : [""];
        },
        upper: function(a2) {
          if ("string" == typeof a2)
            return [a2.toUpperCase()];
          throw Error("Input not string");
        }
      };
      String.prototype.metatable = lua_newtable(
        null,
        "__index",
        lua_newtable2(lua_libs.string)
      );
      lua_libs.table = {
        concat: function(a2, b2, c, d) {
          ensure_arraymode(a2);
          null == b2 && (b2 = "");
          return null != c ? (null == d && (d = a2.uints.length), [a2.uints.slice(c - 1, d).join(b2)]) : [a2.uints.join(b2)];
        },
        insert: function(a2, b2, c) {
          ensure_arraymode(a2);
          2 == arguments.length && (c = b2, b2 = a2.uints.length + 1);
          a2.uints.splice(b2 - 1, 0, c);
          null != a2.length && a2.length++;
          return [];
        },
        maxn: function(a2) {
          if (a2.arraymode)
            return [a2.uints.length];
          var b2 = 0, c;
          for (c in a2.uints)
            a2 = parseFloat(c), a2 > b2 && (b2 = a2);
          return [b2];
        },
        remove: function(a2, b2) {
          ensure_arraymode(a2);
          b2 = null == b2 ? a2.uints.length : lua_assertfloat(b2);
          if (a2.uints.length) {
            var c = a2.uints[b2 - 1];
            a2.uints.splice(b2 - 1, 1);
            null != a2.length && a2.length--;
            return [c];
          }
          return [];
        },
        sort: function(a2, b2) {
          ensure_arraymode(a2);
          b2 ? a2.uints.sort(function(a3, d) {
            return b2(a3, d)[0] ? -1 : 1;
          }) : a2.uints.sort(function(a3, b3) {
            return lua_lt(a3, b3) ? -1 : 1;
          });
          return [];
        }
      };
      lua_libs.bit = {
        tobit: function(a2) {
          return [a2 << 0];
        },
        tohex: function(a2, b2) {
          if (0 < b2) {
            for (var c = a2.toString(16).substr(-b2); c.length < b2; )
              c = "0" + c;
            return [c];
          }
          if (0 > b2) {
            for (c = a2.toString(16).substr(b2).toUpperCase(); c.length < -b2; )
              c = "0" + c;
            return [c];
          }
          return [a2.toString(16)];
        },
        bnot: function(a2) {
          return [~a2];
        },
        bor: function(a2) {
          for (var a2 = lua_assertfloat(a2), b2 = 1; b2 < arguments.length; b2++)
            a2 |= arguments[b2];
          return [a2];
        },
        band: function(a2) {
          for (var a2 = lua_assertfloat(a2), b2 = 1; b2 < arguments.length; b2++)
            a2 &= arguments[b2];
          return [a2];
        },
        bxor: function(a2) {
          for (var a2 = lua_assertfloat(a2), b2 = 1; b2 < arguments.length; b2++)
            a2 ^= arguments[b2];
          return [a2];
        },
        lshift: function(a2, b2) {
          return [a2 << b2];
        },
        rshift: function(a2, b2) {
          return [a2 >>> b2];
        },
        arshift: function(a2, b2) {
          return [a2 >> b2];
        },
        rol: function(a2, b2) {
          b2 &= 15;
          return [a2 << b2 | a2 >>> -b2];
        },
        ror: function(a2, b2) {
          b2 &= 15;
          return [a2 >>> b2 | a2 << -b2];
        },
        bswap: function(a2) {
          a2 = a2 >> 1 & 1431655765 | (a2 & 1431655765) << 1;
          a2 = a2 >> 2 & 858993459 | (a2 & 858993459) << 2;
          a2 = a2 >> 4 & 252645135 | (a2 & 252645135) << 4;
          a2 = a2 >> 8 & 16711935 | (a2 & 16711935) << 8;
          return [a2 >> 16 | a2 << 16];
        }
      };
      var lua_script = function() {
        var tmp;
        var G = lua_newtable2(lua_core);
        for (var i in lua_libs) {
          G.str[i] = lua_newtable2(lua_libs[i]);
        }
        G.str["arg"] = lua_newtable();
        G.str["_G"] = G;
        G.str["module"] = function(name) {
          lua_createmodule(G, name, slice(arguments, 1));
        };
        G.str["require"] = function(name) {
          lua_require(G, name);
        };
        G.str["package"].str["seeall"] = function(module2) {
          if (!module2.metatable) {
            module2.metatable = lua_newtable();
          }
          module2.metatable.str["__index"] = G;
        };
        {
          var _json_1 = lua_newtable([], "_version", "0.1.2");
          var _encode_1;
          var _escape_char_map_1 = lua_newtable(
            [],
            "\\",
            "\\",
            '"',
            '"',
            "\b",
            "b",
            "\f",
            "f",
            "\n",
            "n",
            "\r",
            "r",
            "	",
            "t"
          );
          var _escape_char_map_inv_1 = lua_newtable([], "/", "/");
          tmp = lua_call(G.str["pairs"], [_escape_char_map_1]);
          var f_2 = tmp[0], s_2 = tmp[1], var_2 = tmp[2];
          while ((tmp = lua_call(f_2, [s_2, var_2]))[0] != null) {
            var_2 = tmp[0];
            var _k_2 = var_2, _v_2 = tmp[1];
            tmp = null;
            lua_tableset(_escape_char_map_inv_1, _v_2, _k_2);
          }
          tmp = null;
          var _escape_char_1 = function(_c) {
            var tmp2;
            return [
              lua_concat(
                "\\",
                lua_or(lua_tableget(_escape_char_map_1, _c), function() {
                  return lua_tablegetcall(
                    G.str["string"],
                    "format",
                    ["u%04x"].concat(lua_mcall(_c, "byte", []))
                  )[0];
                })
              )
            ];
            return [];
          };
          var _encode_nil_1 = function(_val) {
            var tmp2;
            return ["null"];
            return [];
          };
          var _encode_table_1 = function(_val, _stack, _traversalDescription) {
            var tmp2;
            var _res_6 = lua_newtable();
            _stack = lua_or(_stack, function() {
              return lua_newtable();
            });
            _traversalDescription = lua_or(_traversalDescription, function() {
              return "";
            });
            if (lua_true(lua_tableget(_stack, _val))) {
              lua_call(G.str["error"], ["circular reference"]);
            }
            lua_tableset(_stack, _val, true);
            if (!lua_eq(lua_call(G.str["rawget"], [_val, 1])[0], null) || lua_eq(lua_call(G.str["next"], [_val])[0], null)) {
              var _n_8 = 0;
              tmp2 = lua_call(G.str["pairs"], [_val]);
              var f_9 = tmp2[0], s_9 = tmp2[1], var_9 = tmp2[2];
              tmp2 = null;
              while ((var_9 = lua_call(f_9, [s_9, var_9])[0]) != null) {
                var _k_9 = var_9;
                if (!lua_eq(lua_call(G.str["type"], [_k_9])[0], "number")) {
                  lua_call(G.str["error"], [
                    lua_concat(
                      "invalid table: mixed or invalid key types for array, excepted number, got: ",
                      lua_call(G.str["tostring"], lua_call(G.str["type"], [_k_9]))[0]
                    )
                  ]);
                }
                _n_8 = lua_add(_n_8, 1);
              }
              if (!lua_eq(_n_8, lua_len(_val))) {
                lua_call(G.str["error"], ["invalid table: sparse array"]);
              }
              tmp2 = lua_call(G.str["ipairs"], [_val]);
              var f_13 = tmp2[0], s_13 = tmp2[1], var_13 = tmp2[2];
              while ((tmp2 = lua_call(f_13, [s_13, var_13]))[0] != null) {
                var_13 = tmp2[0];
                var _i_13 = var_13, _v_13 = tmp2[1];
                tmp2 = null;
                var _newTraversalDescription_14 = lua_concat(
                  _traversalDescription,
                  lua_concat(lua_call(G.str["tostring"], [_i_13])[0], " - ")
                );
                lua_tablegetcall(
                  G.str["table"],
                  "insert",
                  [_res_6].concat(
                    lua_call(_encode_1, [_v_13, _stack, _newTraversalDescription_14])
                  )
                );
              }
              tmp2 = null;
              lua_tableset(_stack, _val, null);
              return [
                lua_concat(
                  "[",
                  lua_concat(
                    lua_tablegetcall(G.str["table"], "concat", [_res_6, ","])[0],
                    "]"
                  )
                )
              ];
            } else {
              tmp2 = lua_call(G.str["pairs"], [_val]);
              var f_16 = tmp2[0], s_16 = tmp2[1], var_16 = tmp2[2];
              while ((tmp2 = lua_call(f_16, [s_16, var_16]))[0] != null) {
                var_16 = tmp2[0];
                var _k_16 = var_16, _v_16 = tmp2[1];
                tmp2 = null;
                var _newTraversalDescription_17 = lua_concat(
                  _traversalDescription,
                  lua_concat(lua_call(G.str["tostring"], [_k_16])[0], " - ")
                );
                if (!lua_eq(lua_call(G.str["type"], [_k_16])[0], "string")) {
                  lua_call(G.str["error"], [
                    lua_concat(
                      'invalid table: mixed or invalid key types for object "',
                      lua_concat(
                        _newTraversalDescription_17,
                        lua_concat(
                          '", ',
                          lua_concat(
                            "excepted string, got: ",
                            lua_call(
                              G.str["tostring"],
                              lua_call(G.str["type"], [_k_16])
                            )[0]
                          )
                        )
                      )
                    )
                  ]);
                }
                lua_tablegetcall(G.str["table"], "insert", [
                  _res_6,
                  lua_concat(
                    lua_call(_encode_1, [
                      _k_16,
                      _stack,
                      _newTraversalDescription_17
                    ])[0],
                    lua_concat(
                      ":",
                      lua_call(_encode_1, [
                        _v_16,
                        _stack,
                        _newTraversalDescription_17
                      ])[0]
                    )
                  )
                ]);
              }
              tmp2 = null;
              lua_tableset(_stack, _val, null);
              return [
                lua_concat(
                  "{",
                  lua_concat(
                    lua_tablegetcall(G.str["table"], "concat", [_res_6, ","])[0],
                    "}"
                  )
                )
              ];
            }
            return [];
          };
          var _encode_string_1 = function(_val) {
            var tmp2;
            return [
              lua_concat(
                '"',
                lua_concat(
                  lua_mcall(_val, "gsub", ['[%z-\\"]', _escape_char_1])[0],
                  '"'
                )
              )
            ];
            return [];
          };
          var _encode_number_1 = function(_val) {
            var tmp2;
            if (!lua_eq(_val, _val) || lua_lte(_val, lua_unm(lua_tableget(G.str["math"], "huge"))) || lua_lte(lua_tableget(G.str["math"], "huge"), _val)) {
              lua_call(G.str["error"], [
                lua_concat(
                  "unexpected number value '",
                  lua_concat(lua_call(G.str["tostring"], [_val])[0], "'")
                )
              ]);
            }
            return lua_tablegetcall(G.str["string"], "format", ["%.14g", _val]);
            return [];
          };
          var _type_func_map_1 = lua_newtable(
            [],
            "nil",
            _encode_nil_1,
            "table",
            _encode_table_1,
            "string",
            _encode_string_1,
            "number",
            _encode_number_1,
            "boolean",
            G.str["tostring"]
          );
          _encode_1 = function(_val, _stack, _traversalDescription) {
            var tmp2;
            var _t_22 = lua_call(G.str["type"], [_val])[0];
            var _f_22 = lua_tableget(_type_func_map_1, _t_22);
            if (lua_true(_f_22)) {
              return lua_call(_f_22, [_val, _stack, _traversalDescription]);
            }
            lua_call(G.str["error"], [
              lua_concat("unexpected type '", lua_concat(_t_22, "'"))
            ]);
            return [];
          };
          lua_tableset(_json_1, "encode", function(_val) {
            var tmp2;
            return [lua_call(_encode_1, [_val])[0]];
            return [];
          });
          var _parse_1;
          var _create_set_1 = function() {
            var tmp2;
            var varargs = slice(arguments, 0);
            var _res_25 = lua_newtable();
            var var_26 = 1, stop_26 = lua_assertfloat(
              lua_call(G.str["select"], ["#"].concat(varargs))[0]
            );
            for (; var_26 <= stop_26; var_26++) {
              var _i_26 = var_26;
              lua_tableset(
                _res_25,
                lua_call(G.str["select"], [_i_26].concat(varargs))[0],
                true
              );
            }
            return [_res_25];
            return [];
          };
          var _space_chars_1 = lua_call(_create_set_1, [" ", "	", "\r", "\n"])[0];
          var _delim_chars_1 = lua_call(_create_set_1, [
            " ",
            "	",
            "\r",
            "\n",
            "]",
            "}",
            ","
          ])[0];
          var _escape_chars_1 = lua_call(_create_set_1, [
            "\\",
            "/",
            '"',
            "b",
            "f",
            "n",
            "r",
            "t",
            "u"
          ])[0];
          var _literals_1 = lua_call(_create_set_1, ["true", "false", "null"])[0];
          var _literal_map_1 = lua_newtable(
            [],
            "true",
            true,
            "false",
            false,
            "null",
            null
          );
          var _next_char_1 = function(_str, _idx, _set, _negate) {
            var tmp2;
            var var_29 = lua_assertfloat(_idx), stop_29 = lua_assertfloat(lua_len(_str));
            for (; var_29 <= stop_29; var_29++) {
              var _i_29 = var_29;
              if (!lua_eq(
                lua_tableget(_set, lua_mcall(_str, "sub", [_i_29, _i_29])[0]),
                _negate
              )) {
                return [_i_29];
              }
            }
            return [lua_add(lua_len(_str), 1)];
            return [];
          };
          var _decode_error_1 = function(_str, _idx, _msg) {
            var tmp2;
            var _line_count_32 = 1;
            var _col_count_32 = 1;
            var var_33 = 1, stop_33 = lua_assertfloat(lua_subtract(_idx, 1));
            for (; var_33 <= stop_33; var_33++) {
              var _i_33 = var_33;
              _col_count_32 = lua_add(_col_count_32, 1);
              if (lua_eq(lua_mcall(_str, "sub", [_i_33, _i_33])[0], "\n")) {
                _line_count_32 = lua_add(_line_count_32, 1);
                _col_count_32 = 1;
              }
            }
            lua_call(
              G.str["error"],
              lua_tablegetcall(G.str["string"], "format", [
                "%s at line %d col %d",
                _msg,
                _line_count_32,
                _col_count_32
              ])
            );
            return [];
          };
          var _codepoint_to_utf8_1 = function(_n) {
            var tmp2;
            var _f_36 = lua_tableget(G.str["math"], "floor");
            if (lua_lte(_n, 127)) {
              return lua_tablegetcall(G.str["string"], "char", [_n]);
            } else if (lua_lte(_n, 2047)) {
              return lua_tablegetcall(G.str["string"], "char", [
                lua_add(lua_call(_f_36, [lua_divide(_n, 64)])[0], 192),
                lua_add(lua_mod(_n, 64), 128)
              ]);
            } else if (lua_lte(_n, 65535)) {
              return lua_tablegetcall(G.str["string"], "char", [
                lua_add(lua_call(_f_36, [lua_divide(_n, 4096)])[0], 224),
                lua_add(lua_call(_f_36, [lua_divide(lua_mod(_n, 4096), 64)])[0], 128),
                lua_add(lua_mod(_n, 64), 128)
              ]);
            } else if (lua_lte(_n, 1114111)) {
              return lua_tablegetcall(G.str["string"], "char", [
                lua_add(lua_call(_f_36, [lua_divide(_n, 262144)])[0], 240),
                lua_add(
                  lua_call(_f_36, [lua_divide(lua_mod(_n, 262144), 4096)])[0],
                  128
                ),
                lua_add(lua_call(_f_36, [lua_divide(lua_mod(_n, 4096), 64)])[0], 128),
                lua_add(lua_mod(_n, 64), 128)
              ]);
            }
            lua_call(
              G.str["error"],
              lua_tablegetcall(G.str["string"], "format", [
                "invalid unicode codepoint '%x'",
                _n
              ])
            );
            return [];
          };
          var _parse_unicode_escape_1 = function(_s) {
            var tmp2;
            var _n1_41 = lua_call(G.str["tonumber"], [
              lua_mcall(_s, "sub", [1, 4])[0],
              16
            ])[0];
            var _n2_41 = lua_call(G.str["tonumber"], [
              lua_mcall(_s, "sub", [7, 10])[0],
              16
            ])[0];
            if (lua_true(_n2_41)) {
              return lua_call(_codepoint_to_utf8_1, [
                lua_add(
                  lua_add(
                    lua_multiply(lua_subtract(_n1_41, 55296), 1024),
                    lua_subtract(_n2_41, 56320)
                  ),
                  65536
                )
              ]);
            } else {
              return lua_call(_codepoint_to_utf8_1, [_n1_41]);
            }
            return [];
          };
          var _parse_string_1 = function(_str, _i) {
            var tmp2;
            var _res_44 = "";
            var _j_44 = lua_add(_i, 1);
            var _k_44 = _j_44;
            while (lua_lte(_j_44, lua_len(_str))) {
              var _x_45 = lua_mcall(_str, "byte", [_j_44])[0];
              if (lua_lt(_x_45, 32)) {
                lua_call(_decode_error_1, [
                  _str,
                  _j_44,
                  "control character in string"
                ]);
              } else if (lua_eq(_x_45, 92)) {
                _res_44 = lua_concat(
                  _res_44,
                  lua_mcall(_str, "sub", [_k_44, lua_subtract(_j_44, 1)])[0]
                );
                _j_44 = lua_add(_j_44, 1);
                var _c_47 = lua_mcall(_str, "sub", [_j_44, _j_44])[0];
                if (lua_eq(_c_47, "u")) {
                  var _hex_48 = lua_or(
                    lua_or(
                      lua_mcall(_str, "match", [
                        "^[dD][89aAbB]%x%x\\u%x%x%x%x",
                        lua_add(_j_44, 1)
                      ])[0],
                      function() {
                        return lua_mcall(_str, "match", [
                          "^%x%x%x%x",
                          lua_add(_j_44, 1)
                        ])[0];
                      }
                    ),
                    function() {
                      return lua_call(_decode_error_1, [
                        _str,
                        lua_subtract(_j_44, 1),
                        "invalid unicode escape in string"
                      ])[0];
                    }
                  );
                  _res_44 = lua_concat(
                    _res_44,
                    lua_call(_parse_unicode_escape_1, [_hex_48])[0]
                  );
                  _j_44 = lua_add(_j_44, lua_len(_hex_48));
                } else {
                  if (lua_not(lua_tableget(_escape_chars_1, _c_47))) {
                    lua_call(_decode_error_1, [
                      _str,
                      lua_subtract(_j_44, 1),
                      lua_concat(
                        "invalid escape char '",
                        lua_concat(_c_47, "' in string")
                      )
                    ]);
                  }
                  _res_44 = lua_concat(
                    _res_44,
                    lua_tableget(_escape_char_map_inv_1, _c_47)
                  );
                }
                _k_44 = lua_add(_j_44, 1);
              } else if (lua_eq(_x_45, 34)) {
                _res_44 = lua_concat(
                  _res_44,
                  lua_mcall(_str, "sub", [_k_44, lua_subtract(_j_44, 1)])[0]
                );
                return [_res_44, lua_add(_j_44, 1)];
              }
              _j_44 = lua_add(_j_44, 1);
            }
            lua_call(_decode_error_1, [
              _str,
              _i,
              "expected closing quote for string"
            ]);
            return [];
          };
          var _parse_number_1 = function(_str, _i) {
            var tmp2;
            var _x_52 = lua_call(_next_char_1, [_str, _i, _delim_chars_1])[0];
            var _s_52 = lua_mcall(_str, "sub", [_i, lua_subtract(_x_52, 1)])[0];
            var _n_52 = lua_call(G.str["tonumber"], [_s_52])[0];
            if (lua_not(_n_52)) {
              lua_call(_decode_error_1, [
                _str,
                _i,
                lua_concat("invalid number '", lua_concat(_s_52, "'"))
              ]);
            }
            return [_n_52, _x_52];
            return [];
          };
          var _parse_literal_1 = function(_str, _i) {
            var tmp2;
            var _x_54 = lua_call(_next_char_1, [_str, _i, _delim_chars_1])[0];
            var _word_54 = lua_mcall(_str, "sub", [_i, lua_subtract(_x_54, 1)])[0];
            if (lua_not(lua_tableget(_literals_1, _word_54))) {
              lua_call(_decode_error_1, [
                _str,
                _i,
                lua_concat("invalid literal '", lua_concat(_word_54, "'"))
              ]);
            }
            return [lua_tableget(_literal_map_1, _word_54), _x_54];
            return [];
          };
          var _parse_array_1 = function(_str, _i) {
            var tmp2;
            var _res_56 = lua_newtable();
            var _n_56 = 1;
            _i = lua_add(_i, 1);
            while (lua_true(1)) {
              var _x_57;
              _i = lua_call(_next_char_1, [_str, _i, _space_chars_1, true])[0];
              if (lua_eq(lua_mcall(_str, "sub", [_i, _i])[0], "]")) {
                _i = lua_add(_i, 1);
                break;
              }
              tmp2 = lua_call(_parse_1, [_str, _i]);
              _x_57 = tmp2[0];
              _i = tmp2[1];
              tmp2 = null;
              lua_tableset(_res_56, _n_56, _x_57);
              _n_56 = lua_add(_n_56, 1);
              _i = lua_call(_next_char_1, [_str, _i, _space_chars_1, true])[0];
              var _chr_57 = lua_mcall(_str, "sub", [_i, _i])[0];
              _i = lua_add(_i, 1);
              if (lua_eq(_chr_57, "]")) {
                break;
              }
              if (!lua_eq(_chr_57, ",")) {
                lua_call(_decode_error_1, [_str, _i, "expected ']' or ','"]);
              }
            }
            return [_res_56, _i];
            return [];
          };
          var _parse_object_1 = function(_str, _i) {
            var tmp2;
            var _res_61 = lua_newtable();
            _i = lua_add(_i, 1);
            while (lua_true(1)) {
              var _key_62, _val_62;
              _i = lua_call(_next_char_1, [_str, _i, _space_chars_1, true])[0];
              if (lua_eq(lua_mcall(_str, "sub", [_i, _i])[0], "}")) {
                _i = lua_add(_i, 1);
                break;
              }
              if (!lua_eq(lua_mcall(_str, "sub", [_i, _i])[0], '"')) {
                lua_call(_decode_error_1, [_str, _i, "expected string for key"]);
              }
              tmp2 = lua_call(_parse_1, [_str, _i]);
              _key_62 = tmp2[0];
              _i = tmp2[1];
              tmp2 = null;
              _i = lua_call(_next_char_1, [_str, _i, _space_chars_1, true])[0];
              if (!lua_eq(lua_mcall(_str, "sub", [_i, _i])[0], ":")) {
                lua_call(_decode_error_1, [_str, _i, "expected ':' after key"]);
              }
              _i = lua_call(_next_char_1, [
                _str,
                lua_add(_i, 1),
                _space_chars_1,
                true
              ])[0];
              tmp2 = lua_call(_parse_1, [_str, _i]);
              _val_62 = tmp2[0];
              _i = tmp2[1];
              tmp2 = null;
              lua_tableset(_res_61, _key_62, _val_62);
              _i = lua_call(_next_char_1, [_str, _i, _space_chars_1, true])[0];
              var _chr_62 = lua_mcall(_str, "sub", [_i, _i])[0];
              _i = lua_add(_i, 1);
              if (lua_eq(_chr_62, "}")) {
                break;
              }
              if (!lua_eq(_chr_62, ",")) {
                lua_call(_decode_error_1, [_str, _i, "expected '}' or ','"]);
              }
            }
            return [_res_61, _i];
            return [];
          };
          var _char_func_map_1 = lua_newtable(
            [],
            '"',
            _parse_string_1,
            "0",
            _parse_number_1,
            "1",
            _parse_number_1,
            "2",
            _parse_number_1,
            "3",
            _parse_number_1,
            "4",
            _parse_number_1,
            "5",
            _parse_number_1,
            "6",
            _parse_number_1,
            "7",
            _parse_number_1,
            "8",
            _parse_number_1,
            "9",
            _parse_number_1,
            "-",
            _parse_number_1,
            "t",
            _parse_literal_1,
            "f",
            _parse_literal_1,
            "n",
            _parse_literal_1,
            "[",
            _parse_array_1,
            "{",
            _parse_object_1
          );
          _parse_1 = function(_str, _idx) {
            var tmp2;
            var _chr_68 = lua_mcall(_str, "sub", [_idx, _idx])[0];
            var _f_68 = lua_tableget(_char_func_map_1, _chr_68);
            if (lua_true(_f_68)) {
              return lua_call(_f_68, [_str, _idx]);
            }
            lua_call(_decode_error_1, [
              _str,
              _idx,
              lua_concat("unexpected character '", lua_concat(_chr_68, "'"))
            ]);
            return [];
          };
          lua_tableset(_json_1, "decode", function(_str) {
            var tmp2;
            if (!lua_eq(lua_call(G.str["type"], [_str])[0], "string")) {
              lua_call(G.str["error"], [
                lua_concat(
                  "expected argument of type string, got ",
                  lua_call(G.str["type"], [_str])[0]
                )
              ]);
            }
            tmp2 = lua_call(
              _parse_1,
              [_str].concat(lua_call(_next_char_1, [_str, 1, _space_chars_1, true]))
            );
            var _res_70 = tmp2[0];
            var _idx_70 = tmp2[1];
            tmp2 = null;
            _idx_70 = lua_call(_next_char_1, [
              _str,
              _idx_70,
              _space_chars_1,
              true
            ])[0];
            if (lua_lte(_idx_70, lua_len(_str))) {
              lua_call(_decode_error_1, [_str, _idx_70, "trailing garbage"]);
            }
            return [_res_70];
            return [];
          });
          return [_json_1];
        }
        return [G];
      }()[0];
    }
  });

  // node_modules/isaacscript-common/dist/functions/jsonHelpers.js
  var require_jsonHelpers = __commonJS({
    "node_modules/isaacscript-common/dist/functions/jsonHelpers.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.jsonEncode = exports2.jsonDecode = void 0;
      var jsonLua = __importStar(require_jsonLua());
      var log_1 = require_log();
      function tryDecode(jsonString) {
        return jsonLua.decode(jsonString);
      }
      function tryEncode(luaTable) {
        return jsonLua.encode(luaTable);
      }
      function jsonDecode(jsonString) {
        const [ok, luaTableOrErrMsg] = pcall(tryDecode, jsonString);
        if (!ok) {
          (0, log_1.logError)(`Failed to convert the JSON string to a Lua table: ${jsonString}`);
          return new LuaMap();
        }
        return luaTableOrErrMsg;
      }
      exports2.jsonDecode = jsonDecode;
      function jsonEncode(luaTable) {
        const [ok, jsonStringOrErrMsg] = pcall(tryEncode, luaTable);
        if (!ok) {
          error(`Failed to convert the Lua table to JSON: ${jsonStringOrErrMsg}`);
        }
        return jsonStringOrErrMsg;
      }
      exports2.jsonEncode = jsonEncode;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/loadFromDisk.js
  var require_loadFromDisk = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/loadFromDisk.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.loadFromDisk = void 0;
      var jsonHelpers_1 = require_jsonHelpers();
      var log_1 = require_log();
      var merge_1 = require_merge();
      var table_1 = require_table();
      var types_1 = require_types();
      var constants_1 = require_constants3();
      var DEFAULT_MOD_DATA = "{}";
      function loadFromDisk(mod, oldSaveData, classConstructors) {
        if (!mod.HasData()) {
          return;
        }
        const jsonString = readSaveDatFile(mod);
        const newSaveData = (0, jsonHelpers_1.jsonDecode)(jsonString);
        if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
          (0, log_1.log)('Converted data from the "save#.dat" to a Lua table.');
        }
        (0, table_1.iterateTableInOrder)(newSaveData, (subscriberName, saveData) => {
          if (!(0, types_1.isString)(subscriberName)) {
            return;
          }
          if (!(0, types_1.isTable)(saveData)) {
            return;
          }
          const oldSaveDataForSubscriber = oldSaveData.get(subscriberName);
          if (oldSaveDataForSubscriber === void 0) {
            return;
          }
          if (constants_1.SAVE_DATA_MANAGER_DEBUG) {
            (0, log_1.log)(`Merging in stored data for feature: ${subscriberName}`);
          }
          (0, merge_1.merge)(oldSaveDataForSubscriber, saveData, subscriberName, classConstructors);
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
        (0, log_1.log)(`The save data manager loaded data from the "save#.dat" file for mod: ${mod.Name}`);
      }
      exports2.loadFromDisk = loadFromDisk;
      function readSaveDatFile(mod) {
        const renderFrameCount = Isaac.GetFrameCount();
        const [ok, jsonStringOrErrMsg] = pcall(tryLoadModData, mod);
        if (!ok) {
          (0, log_1.logError)(`Failed to read from the "save#.dat" file on render frame ${renderFrameCount}: ${jsonStringOrErrMsg}`);
          return DEFAULT_MOD_DATA;
        }
        if (jsonStringOrErrMsg === void 0) {
          return DEFAULT_MOD_DATA;
        }
        const jsonStringTrimmed = jsonStringOrErrMsg.trim();
        if (jsonStringTrimmed === "") {
          return DEFAULT_MOD_DATA;
        }
        return jsonStringTrimmed;
      }
      function tryLoadModData(mod) {
        return mod.LoadData();
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/restoreDefaults.js
  var require_restoreDefaults = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/restoreDefaults.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.restoreDefaultForFeatureKey = exports2.restoreDefaultsForAllFeaturesKey = exports2.restoreDefaultsForAllFeaturesAndKeys = void 0;
      var SaveDataKey_1 = require_SaveDataKey();
      var SerializationType_1 = require_SerializationType();
      var deepCopy_1 = require_deepCopy();
      var log_1 = require_log();
      var table_1 = require_table();
      var ReadonlySet_1 = require_ReadonlySet();
      var constants_1 = require_constants3();
      var RESETTABLE_SAVE_DATA_KEYS = new ReadonlySet_1.ReadonlySet([
        SaveDataKey_1.SaveDataKey.RUN,
        SaveDataKey_1.SaveDataKey.LEVEL,
        SaveDataKey_1.SaveDataKey.ROOM
      ]);
      function restoreDefaultsForAllFeaturesAndKeys(saveDataMap, saveDataDefaultsMap) {
        for (const saveDataKey of RESETTABLE_SAVE_DATA_KEYS) {
          restoreDefaultsForAllFeaturesKey(saveDataMap, saveDataDefaultsMap, saveDataKey);
        }
      }
      exports2.restoreDefaultsForAllFeaturesAndKeys = restoreDefaultsForAllFeaturesAndKeys;
      function restoreDefaultsForAllFeaturesKey(saveDataMap, saveDataDefaultsMap, saveDataKey) {
        (0, table_1.iterateTableInOrder)(saveDataMap, (subscriberName, saveData) => {
          restoreDefaultForFeatureKey(saveDataDefaultsMap, subscriberName, saveData, saveDataKey);
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
      }
      exports2.restoreDefaultsForAllFeaturesKey = restoreDefaultsForAllFeaturesKey;
      function restoreDefaultForFeatureKey(saveDataDefaultsMap, subscriberName, saveData, saveDataKey) {
        if (!RESETTABLE_SAVE_DATA_KEYS.has(saveDataKey)) {
          error(`Failed to restore default values for a save data key of "${saveDataKey}", since it is not on the allowed list of resettable save data keys.`);
        }
        const childTable = saveData[saveDataKey];
        if (childTable === void 0) {
          return;
        }
        const saveDataDefaults = saveDataDefaultsMap.get(subscriberName);
        if (saveDataDefaults === void 0) {
          (0, log_1.logError)(`Failed to find the default copy of the save data for subscriber: ${subscriberName}`);
          return;
        }
        const childTableDefaults = saveDataDefaults[saveDataKey];
        if (childTableDefaults === void 0) {
          (0, log_1.logError)(`Failed to find the default copy of the child table "${saveDataKey}" for subscriber "${subscriberName}". This error usually means that your mod-specific save data is out of date. You can try purging all of your mod-specific save data by deleting the following directory: C:\\Program Files (x86)\\Steam\\steamapps\\common\\The Binding of Isaac Rebirth\\data`);
          return;
        }
        const childTableDefaultsCopy = (0, deepCopy_1.deepCopy)(childTableDefaults, SerializationType_1.SerializationType.NONE, `${subscriberName} --> ${saveDataKey}`);
        clearAndCopyAllElements(childTable, childTableDefaultsCopy);
      }
      exports2.restoreDefaultForFeatureKey = restoreDefaultForFeatureKey;
      function clearAndCopyAllElements(oldTable, newTable) {
        (0, table_1.clearTable)(oldTable);
        for (const [key, value] of newTable) {
          oldTable.set(key, value);
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/saveToDisk.js
  var require_saveToDisk = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/saveDataManager/saveToDisk.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.saveToDisk = void 0;
      var SerializationType_1 = require_SerializationType();
      var deepCopy_1 = require_deepCopy();
      var jsonHelpers_1 = require_jsonHelpers();
      var log_1 = require_log();
      var table_1 = require_table();
      var constants_1 = require_constants3();
      function saveToDisk(mod, saveDataMap, saveDataConditionalFuncMap) {
        const allSaveData = getAllSaveDataToWriteToDisk(saveDataMap, saveDataConditionalFuncMap);
        const jsonString = (0, jsonHelpers_1.jsonEncode)(allSaveData);
        mod.SaveData(jsonString);
        (0, log_1.log)(`The save data manager wrote data to the "save#.dat" file for mod: ${mod.Name}`);
      }
      exports2.saveToDisk = saveToDisk;
      function getAllSaveDataToWriteToDisk(saveDataMap, saveDataConditionalFuncMap) {
        const allSaveData = new LuaMap();
        (0, table_1.iterateTableInOrder)(saveDataMap, (subscriberName, saveData) => {
          const conditionalFunc = saveDataConditionalFuncMap.get(subscriberName);
          if (conditionalFunc !== void 0) {
            const shouldSave = conditionalFunc();
            if (!shouldSave) {
              return;
            }
          }
          const saveDataWithoutRoom = {
            persistent: saveData.persistent,
            run: saveData.run,
            level: saveData.level
          };
          if ((0, table_1.isTableEmpty)(saveDataWithoutRoom)) {
            return;
          }
          const saveDataCopy = (0, deepCopy_1.deepCopy)(saveDataWithoutRoom, SerializationType_1.SerializationType.SERIALIZE, subscriberName);
          allSaveData.set(subscriberName, saveDataCopy);
        }, constants_1.SAVE_DATA_MANAGER_DEBUG);
        return allSaveData;
      }
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/SaveDataManager.js
  var require_SaveDataManager = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/SaveDataManager.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SaveDataManager = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var SaveDataKey_1 = require_SaveDataKey();
      var SerializationType_1 = require_SerializationType();
      var deepCopy_1 = require_deepCopy();
      var frames_1 = require_frames();
      var log_1 = require_log();
      var stage_1 = require_stage();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var ReadonlySet_1 = require_ReadonlySet();
      var Feature_1 = require_Feature();
      var glowingHourGlass_1 = require_glowingHourGlass();
      var loadFromDisk_1 = require_loadFromDisk();
      var restoreDefaults_1 = require_restoreDefaults();
      var saveToDisk_1 = require_saveToDisk();
      var NON_USER_DEFINED_CLASS_NAMES = new ReadonlySet_1.ReadonlySet([
        "Map",
        "Set",
        "DefaultMap"
      ]);
      var SaveDataManager = class extends Feature_1.Feature {
        /**
         * We store a local reference to the mod object so that we can access the corresponding methods
         * that read and write to the "save#.dat" file.
         */
        mod;
        /**
         * The save data map is indexed by subscriber name. We use Lua tables instead of TypeScriptToLua
         * Maps for the master map so that we can access the variables via the in-game console when
         * debugging. (TSTL Maps don't expose the map keys as normal keys.)
         */
        saveDataMap = new LuaMap();
        /**
         * When mod feature data is initialized, we copy the initial values into a separate map so that we
         * can restore them later on.
         */
        saveDataDefaultsMap = new LuaMap();
        /**
         * Each mod feature can optionally provide a function that can control whether the save data is
         * written to disk.
         */
        saveDataConditionalFuncMap = new LuaMap();
        /**
         * We backup some save data keys on every new room for the purposes of restoring it when Glowing
         * Hour Glass is used.
         *
         * Note that the save data is backed up in serialized form so that we can use the `merge` function
         * to restore it.
         */
        saveDataGlowingHourGlassMap = new LuaMap();
        /**
         * End-users can register their classes with the save data manager for proper serialization when
         * contained in nested maps, sets, and arrays.
         */
        classConstructors = new LuaMap();
        // Other variables
        inARun = false;
        restoreGlowingHourGlassDataOnNextRoom = false;
        /** @internal */
        constructor(mod) {
          super();
          this.callbacksUsed = [
            // 3
            [
              isaac_typescript_definitions_1.ModCallback.POST_USE_ITEM,
              this.postUseItemGlowingHourGlass,
              [isaac_typescript_definitions_1.CollectibleType.GLOWING_HOUR_GLASS]
            ],
            // 9
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_INIT, this.postPlayerInit],
            // 17
            [isaac_typescript_definitions_1.ModCallback.PRE_GAME_EXIT, this.preGameExit],
            // 18
            // We want to avoid a needless dependency on the `GameReorderedCallbacks` feature.
            // eslint-disable-next-line deprecation/deprecation
            [isaac_typescript_definitions_1.ModCallback.POST_NEW_LEVEL, this.postNewLevel]
          ];
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_EARLY, this.postNewRoomEarly]
          ];
          this.mod = mod;
        }
        // ModCallback.POST_USE_ITEM (3)
        // CollectibleType.GLOWING_HOUR_GLASS (422)
        postUseItemGlowingHourGlass = (_collectibleType, _rng, _player, _useFlags, _activeSlot, _customVarData) => {
          this.restoreGlowingHourGlassDataOnNextRoom = true;
          return void 0;
        };
        // ModCallback.POST_PLAYER_INIT (9)
        postPlayerInit = (_player) => {
          if (this.inARun) {
            return;
          }
          this.inARun = true;
          this.restoreGlowingHourGlassDataOnNextRoom = false;
          (0, loadFromDisk_1.loadFromDisk)(this.mod, this.saveDataMap, this.classConstructors);
          const isContinued = (0, frames_1.isAfterGameFrame)(0);
          if (!isContinued) {
            (0, restoreDefaults_1.restoreDefaultsForAllFeaturesAndKeys)(this.saveDataMap, this.saveDataDefaultsMap);
          }
        };
        // ModCallback.PRE_GAME_EXIT (17)
        preGameExit = () => {
          (0, saveToDisk_1.saveToDisk)(this.mod, this.saveDataMap, this.saveDataConditionalFuncMap);
          this.inARun = false;
        };
        // ModCallback.POST_NEW_LEVEL (18)
        postNewLevel = () => {
          (0, restoreDefaults_1.restoreDefaultsForAllFeaturesKey)(this.saveDataMap, this.saveDataDefaultsMap, SaveDataKey_1.SaveDataKey.LEVEL);
          if (!(0, stage_1.onFirstFloor)()) {
            (0, saveToDisk_1.saveToDisk)(this.mod, this.saveDataMap, this.saveDataConditionalFuncMap);
          }
        };
        // ModCallbackCustom.POST_NEW_ROOM_EARLY
        postNewRoomEarly = () => {
          (0, restoreDefaults_1.restoreDefaultsForAllFeaturesKey)(this.saveDataMap, this.saveDataDefaultsMap, SaveDataKey_1.SaveDataKey.ROOM);
          if (this.restoreGlowingHourGlassDataOnNextRoom) {
            this.restoreGlowingHourGlassDataOnNextRoom = false;
            (0, glowingHourGlass_1.restoreGlowingHourGlassBackup)(this.saveDataMap, this.saveDataConditionalFuncMap, this.saveDataGlowingHourGlassMap, this.classConstructors);
          } else {
            (0, glowingHourGlass_1.makeGlowingHourGlassBackup)(this.saveDataMap, this.saveDataConditionalFuncMap, this.saveDataGlowingHourGlassMap);
          }
        };
        saveDataManager(key, v, conditionalFunc) {
          if ((0, tstlClass_1.isTSTLClass)(key)) {
            const className = (0, tstlClass_1.getTSTLClassName)(key);
            (0, utils_1.assertDefined)(className, 'Failed to get the class name for the submitted class (as part of the "key" parameter) when registering new data with the save data manager.');
            key = className;
          }
          if (!(0, types_1.isString)(key)) {
            error(`The save data manager requires that keys are strings or TSTL classes. You tried to use a key of type: ${typeof key}`);
          }
          if (this.saveDataMap.has(key)) {
            error(`The save data manager is already managing save data for a key of: ${key}`);
          }
          this.storeClassConstructorsFromObject(v);
          this.saveDataMap.set(key, v);
          if (conditionalFunc === false) {
            conditionalFunc = () => false;
          }
          const saveDataKeys = Object.keys(v);
          if (saveDataKeys.length === 1 && saveDataKeys[0] === "room") {
            conditionalFunc = () => false;
          }
          const saveDataCopy = (0, deepCopy_1.deepCopy)(v, SerializationType_1.SerializationType.NONE, key);
          this.saveDataDefaultsMap.set(key, saveDataCopy);
          if (conditionalFunc !== void 0) {
            this.saveDataConditionalFuncMap.set(key, conditionalFunc);
          }
        }
        /**
         * Recursively traverses an object, collecting all of the class constructors that it encounters.
         */
        storeClassConstructorsFromObject(luaMap) {
          const tstlClassName = (0, tstlClass_1.getTSTLClassName)(luaMap);
          if (tstlClassName !== void 0 && !NON_USER_DEFINED_CLASS_NAMES.has(tstlClassName)) {
            this.classConstructors.set(tstlClassName, luaMap);
          }
          for (const [_key, value] of luaMap) {
            if ((0, types_1.isTable)(value)) {
              this.storeClassConstructorsFromObject(value);
            }
          }
        }
        /**
         * The save data manager will automatically load variables from disk at the appropriate times
         * (i.e. when a new run is started). Use this function to explicitly force the save data manager
         * to load all of its variables from disk immediately.
         *
         * Obviously, doing this will overwrite the current data, so using this function can potentially
         * result in lost state.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerLoad() {
          (0, loadFromDisk_1.loadFromDisk)(this.mod, this.saveDataMap, this.classConstructors);
        }
        /**
         * The save data manager will automatically save variables to disk at the appropriate times (i.e.
         * when the run is exited). Use this function to explicitly force the save data manager to write
         * all of its variables to disk immediately.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerSave() {
          (0, saveToDisk_1.saveToDisk)(this.mod, this.saveDataMap, this.saveDataConditionalFuncMap);
        }
        /**
         * Sets the global variable of "g" equal to all of the save data variables for this mod.
         *
         * This can make debugging easier, as you can access the variables from the game's debug console.
         * e.g. `l print(g.feature1.run.foo)`
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerSetGlobal() {
          g = this.saveDataMap;
        }
        /**
         * By default, the save data manager will not be able to serialize/deserialize classes that are
         * nested inside of maps, sets, and arrays, because it does not have access to the corresponding
         * class constructor. If you want to use nested classes in this way, then use this function to
         * register the class constructor with the save data manager. Once registered, the save data
         * manager will automatically run the constructor when deserializing (in addition to copying over
         * the data fields).
         *
         * This function is variadic, which means you can pass as many classes as you want to register.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerRegisterClass(...tstlClasses) {
          for (const tstlClass of tstlClasses) {
            const { name } = tstlClass;
            (0, utils_1.assertDefined)(
              // Since we are accepting untrusted user input, this might not be a real TSTL class.
              name,
              "Failed to register a class with the save data manager due to not being able to derive the name of the class."
            );
            this.classConstructors.set(name, tstlClass);
          }
        }
        /**
         * Removes a previously registered key from the save data manager. This is the opposite of the
         * "saveDataManager" method.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerRemove(key) {
          if (!(0, types_1.isString)(key)) {
            error(`The save data manager requires that keys are strings. You tried to use a key of type: ${typeof key}`);
          }
          if (!this.saveDataMap.has(key)) {
            error(`The save data manager is not managing save data for a key of: ${key}`);
          }
          this.saveDataMap.delete(key);
          this.saveDataDefaultsMap.delete(key);
          this.saveDataConditionalFuncMap.delete(key);
          this.saveDataGlowingHourGlassMap.delete(key);
        }
        /**
         * The save data manager will automatically reset variables at the appropriate times, like when a
         * player enters a new room. Use this function to explicitly force the save data manager to reset
         * a specific variable group.
         *
         * For example:
         *
         * ```ts
         * const v = {
         *   room: {
         *     foo: 123,
         *   },
         * };
         *
         * mod.saveDataManager("file1", v);
         *
         * // Then, later on, to explicit reset all of the "room" variables:
         * mod.saveDataManagerReset("file1", "room");
         * ```
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerReset(key, childObjectKey) {
          if (!(0, types_1.isString)(key)) {
            error(`The save data manager requires that keys are strings. You tried to use a key of type: ${typeof key}`);
          }
          const saveData = this.saveDataMap.get(key);
          (0, utils_1.assertDefined)(saveData, `The save data manager is not managing save data for a key of: ${key}`);
          (0, restoreDefaults_1.restoreDefaultForFeatureKey)(this.saveDataDefaultsMap, key, saveData, childObjectKey);
        }
        /**
         * Helper function to check to see if the game is in the menu, as far as the save data manager is
         * concerned. This function will return true when the game is first opened until the
         * `POST_PLAYER_INIT` callback fires. It will also return true in between the `PRE_GAME_EXIT`
         * callback firing and the `POST_PLAYER_INIT` callback firing.
         *
         * This function is useful because the `POST_ENTITY_REMOVE` callback fires after the
         * `PRE_GAME_EXIT` callback. Thus, if save data needs to be updated from the `POST_ENTITY_REMOVE`
         * callback and the player is in the process of saving and quitting, the feature will have to
         * explicitly call the `saveDataManagerSave` function.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.SAVE_DATA_MANAGER`.
         *
         * @public
         */
        saveDataManagerInMenu() {
          return !this.inARun;
        }
        /**
         * Helper function to see all of the mod features that are using the save data manager. Useful for
         * debugging if a certain mod feature is not getting its data saved correctly.
         *
         * @public
         */
        saveDataManagerLogSubscribers() {
          (0, log_1.log)("List of save data manager subscribers:");
          const keys = Object.keys(this.saveDataMap);
          keys.sort();
          for (const key of keys) {
            (0, log_1.log)(`- ${key}`);
          }
        }
      };
      exports2.SaveDataManager = SaveDataManager;
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManager", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerLoad", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerSave", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerSetGlobal", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerRegisterClass", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerRemove", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerReset", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerInMenu", null);
      __decorate([
        decorators_1.Exported
      ], SaveDataManager.prototype, "saveDataManagerLogSubscribers", null);
    }
  });

  // node_modules/isaacscript-common/dist/functions/projectiles.js
  var require_projectiles = __commonJS({
    "node_modules/isaacscript-common/dist/functions/projectiles.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.fireProjectilesInCircle = exports2.fireProjectiles = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var entities_1 = require_entities();
      var entitiesSpecific_1 = require_entitiesSpecific();
      function fireProjectiles(npc, position, velocity, projectilesMode = isaac_typescript_definitions_1.ProjectilesMode.ONE_PROJECTILE, projectileParams = ProjectileParams()) {
        const oldProjectiles = (0, entitiesSpecific_1.getProjectiles)(projectileParams.Variant);
        let spawnedFly = false;
        if (npc === void 0) {
          spawnedFly = true;
          npc = (0, entitiesSpecific_1.spawnNPC)(isaac_typescript_definitions_1.EntityType.FLY, 0, 0, position);
          npc.Visible = false;
          npc.ClearEntityFlags(isaac_typescript_definitions_1.EntityFlag.APPEAR);
        }
        npc.FireProjectiles(position, velocity, projectilesMode, projectileParams);
        const newProjectiles = (0, entitiesSpecific_1.getProjectiles)(projectileParams.Variant);
        if (spawnedFly) {
          npc.Remove();
        }
        return (0, entities_1.getFilteredNewEntities)(oldProjectiles, newProjectiles);
      }
      exports2.fireProjectiles = fireProjectiles;
      function fireProjectilesInCircle(npc, position, speed, numProjectiles) {
        const velocity = Vector(speed, numProjectiles);
        return fireProjectiles(npc, position, velocity, isaac_typescript_definitions_1.ProjectilesMode.N_PROJECTILES_IN_CIRCLE);
      }
      exports2.fireProjectilesInCircle = fireProjectilesInCircle;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/SpawnRockAltRewards.js
  var require_SpawnRockAltRewards = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/SpawnRockAltRewards.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.SpawnRockAltRewards = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var constants_1 = require_constants();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var RockAltType_1 = require_RockAltType();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var pickupsSpecific_1 = require_pickupsSpecific();
      var projectiles_1 = require_projectiles();
      var random_1 = require_random();
      var rng_1 = require_rng();
      var spawnCollectible_1 = require_spawnCollectible();
      var utils_1 = require_utils();
      var vector_1 = require_vector();
      var Feature_1 = require_Feature();
      var ROCK_ALT_CHANCES = {
        NOTHING: 0.68,
        BASIC_DROP: 0.0967,
        /** Also used for e.g. black hearts from skulls. */
        TRINKET: 0.025,
        COLLECTIBLE: 5e-3
      };
      var COIN_VELOCITY_MULTIPLIER = 2;
      var FIND_FREE_INITIAL_STEP = 70;
      var FART_RADIUS = constants_1.DISTANCE_OF_GRID_TILE * 3;
      var POLYP_PROJECTILE_SPEED = 10;
      var POLYP_NUM_PROJECTILES = 6;
      var SpawnRockAltRewards = class extends Feature_1.Feature {
        itemPoolDetection;
        /** @internal */
        constructor(itemPoolDetection) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.ITEM_POOL_DETECTION];
          this.itemPoolDetection = itemPoolDetection;
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks.
         *
         * Most of the time, this function will do nothing, similar to how most of the time, when an
         * individual urn is destroyed, nothing will spawn.
         *
         * Note that in vanilla, trinkets will not spawn if they have already been removed from the
         * trinket pool. This function cannot replicate that behavior because there is no way to check to
         * see if a trinket is still in the pool. Thus, it will always have a chance to spawn the
         * respective trinket
         * (e.g. Swallowed Penny from urns).
         *
         * When filled buckets are destroyed, 6 projectiles will always spawn in a random pattern (in
         * addition to any other rewards that are spawned). This function does not account for this, so if
         * you want to specifically emulate destroying a filled bucket, you have to account for the
         * projectiles yourself.
         *
         * The logic in this function is based on the rewards listed on the wiki:
         * https://bindingofisaacrebirth.fandom.com/wiki/Rocks
         *
         * If you want to spawn an unseeded reward, you must explicitly pass `undefined` to the
         * `seedOrRNG` parameter.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         *
         * @param positionOrGridIndex The position or grid index to spawn the reward.
         * @param rockAltType The type of reward to spawn. For example, `RockAltType.URN` will have a
         *                    chance at spawning coins and spiders.
         * @param seedOrRNG The `Seed` or `RNG` object to use. Normally, you should pass the `InitSeed` of
         *                  the grid entity that was broken. If an `RNG` object is provided, the
         *                  `RNG.Next` method will be called. If `undefined` is provided, it will default
         *                  to a random seed.
         * @returns Whether this function spawned something.
         * @public
         */
        spawnRockAltReward(positionOrGridIndex, rockAltType, seedOrRNG) {
          const room = cachedClasses_1.game.GetRoom();
          const position = (0, vector_1.isVector)(positionOrGridIndex) ? positionOrGridIndex : room.GetGridPosition(positionOrGridIndex);
          const rng = (0, rng_1.isRNG)(seedOrRNG) ? seedOrRNG : (0, rng_1.newRNG)(seedOrRNG);
          switch (rockAltType) {
            case RockAltType_1.RockAltType.URN: {
              return this.spawnRockAltRewardUrn(position, rng);
            }
            case RockAltType_1.RockAltType.MUSHROOM: {
              return this.spawnRockAltRewardMushroom(position, rng);
            }
            case RockAltType_1.RockAltType.SKULL: {
              return this.spawnRockAltRewardSkull(position, rng);
            }
            case RockAltType_1.RockAltType.POLYP: {
              return this.spawnRockAltRewardPolyp(position, rng);
            }
            case RockAltType_1.RockAltType.BUCKET_DOWNPOUR: {
              return this.spawnRockAltRewardBucketDownpour(position, rng);
            }
            case RockAltType_1.RockAltType.BUCKET_DROSS: {
              return this.spawnRockAltRewardBucketDross(position, rng);
            }
          }
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks of `RockAltType.URN`.
         *
         * For more information, see the documentation for the `spawnRockAltReward` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         */
        spawnRockAltRewardUrn(position, rng) {
          const room = cachedClasses_1.game.GetRoom();
          const chance = (0, random_1.getRandom)(rng);
          let totalChance = 0;
          totalChance += ROCK_ALT_CHANCES.NOTHING;
          if (chance < totalChance) {
            return false;
          }
          totalChance += ROCK_ALT_CHANCES.BASIC_DROP;
          if (chance < totalChance) {
            const numCoinsChance = (0, random_1.getRandom)(rng);
            const numCoins = numCoinsChance < 0.5 ? 1 : 2;
            (0, utils_1.repeat)(numCoins, () => {
              const randomVector = (0, vector_1.getRandomVector)(rng);
              const velocity = randomVector.mul(COIN_VELOCITY_MULTIPLIER);
              (0, pickupsSpecific_1.spawnCoinWithSeed)(isaac_typescript_definitions_1.CoinSubType.NULL, position, rng, velocity);
            });
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.TRINKET;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnTrinketWithSeed)(isaac_typescript_definitions_1.TrinketType.SWALLOWED_PENNY, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.COLLECTIBLE;
          if (chance < totalChance) {
            const stillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.QUARTER, isaac_typescript_definitions_1.ItemPoolType.DEVIL);
            if (stillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.QUARTER, position, rng);
              return true;
            }
            return false;
          }
          const numEnemiesChance = (0, random_1.getRandom)(rng);
          const numEnemies = numEnemiesChance < 0.5 ? 1 : 2;
          (0, utils_1.repeat)(numEnemies, () => {
            const targetPos = room.FindFreePickupSpawnPosition(position, FIND_FREE_INITIAL_STEP);
            EntityNPC.ThrowSpider(position, void 0, targetPos, false, 0);
          });
          return true;
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks of `RockAltType.MUSHROOM`.
         *
         * For more information, see the documentation for the `spawnRockAltReward` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         */
        spawnRockAltRewardMushroom(position, rng) {
          const room = cachedClasses_1.game.GetRoom();
          const roomType = room.GetType();
          const chance = (0, random_1.getRandom)(rng);
          let totalChance = 0;
          totalChance += ROCK_ALT_CHANCES.NOTHING;
          if (chance < totalChance) {
            return false;
          }
          totalChance += ROCK_ALT_CHANCES.BASIC_DROP;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnPillWithSeed)(isaac_typescript_definitions_1.PillColor.NULL, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.TRINKET;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnTrinketWithSeed)(isaac_typescript_definitions_1.TrinketType.LIBERTY_CAP, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.COLLECTIBLE;
          if (chance < totalChance) {
            if (roomType === isaac_typescript_definitions_1.RoomType.SECRET) {
              const wavyCapChance = (0, random_1.getRandom)(rng);
              if (wavyCapChance < 0.0272) {
                const stillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.WAVY_CAP, isaac_typescript_definitions_1.ItemPoolType.SECRET);
                if (stillInPools) {
                  (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.WAVY_CAP, position, rng);
                  return true;
                }
              }
            }
            const magicMushroomStillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.MAGIC_MUSHROOM, isaac_typescript_definitions_1.ItemPoolType.TREASURE);
            const miniMushStillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.MINI_MUSH, isaac_typescript_definitions_1.ItemPoolType.TREASURE);
            if (magicMushroomStillInPools && miniMushStillInPools) {
              const collectibleChance = (0, random_1.getRandom)(rng);
              const collectibleType = collectibleChance < 0.5 ? isaac_typescript_definitions_1.CollectibleType.MAGIC_MUSHROOM : isaac_typescript_definitions_1.CollectibleType.MINI_MUSH;
              (0, spawnCollectible_1.spawnCollectible)(collectibleType, position, rng);
              return true;
            }
            if (magicMushroomStillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.MINI_MUSH, position, rng);
              return true;
            }
            if (miniMushStillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.MAGIC_MUSHROOM, position, rng);
              return true;
            }
            return false;
          }
          cachedClasses_1.game.Fart(position);
          cachedClasses_1.game.ButterBeanFart(position, FART_RADIUS, void 0);
          return true;
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks of `RockAltType.SKULL`.
         *
         * For more information, see the documentation for the `spawnRockAltReward` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         */
        spawnRockAltRewardSkull(position, rng) {
          const chance = (0, random_1.getRandom)(rng);
          let totalChance = 0;
          totalChance += ROCK_ALT_CHANCES.NOTHING;
          if (chance < totalChance) {
            return false;
          }
          totalChance += ROCK_ALT_CHANCES.BASIC_DROP;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnCardWithSeed)(isaac_typescript_definitions_1.CardType.NULL, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.TRINKET;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnHeartWithSeed)(isaac_typescript_definitions_1.HeartSubType.BLACK, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.COLLECTIBLE;
          if (chance < totalChance) {
            const ghostBabyStillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.GHOST_BABY, isaac_typescript_definitions_1.ItemPoolType.TREASURE);
            const dryBabyStillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.DRY_BABY, isaac_typescript_definitions_1.ItemPoolType.TREASURE);
            if (ghostBabyStillInPools && dryBabyStillInPools) {
              const collectibleChance = (0, random_1.getRandom)(rng);
              const collectibleType = collectibleChance < 0.5 ? isaac_typescript_definitions_1.CollectibleType.GHOST_BABY : isaac_typescript_definitions_1.CollectibleType.DRY_BABY;
              (0, spawnCollectible_1.spawnCollectible)(collectibleType, position, rng);
              return true;
            }
            if (ghostBabyStillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.DRY_BABY, position, rng);
              return true;
            }
            if (dryBabyStillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.GHOST_BABY, position, rng);
              return true;
            }
            return false;
          }
          (0, entitiesSpecific_1.spawnNPCWithSeed)(isaac_typescript_definitions_1.EntityType.HOST, 0, 0, position, rng);
          return true;
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks of `RockAltType.POLYP`.
         *
         * For more information, see the documentation for the `spawnRockAltReward` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         */
        spawnRockAltRewardPolyp(position, rng) {
          const chance = (0, random_1.getRandom)(rng);
          let totalChance = 0;
          totalChance += ROCK_ALT_CHANCES.NOTHING;
          if (chance < totalChance) {
            return false;
          }
          totalChance += ROCK_ALT_CHANCES.BASIC_DROP;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnHeartWithSeed)(isaac_typescript_definitions_1.HeartSubType.NULL, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.TRINKET;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnTrinketWithSeed)(isaac_typescript_definitions_1.TrinketType.UMBILICAL_CORD, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.COLLECTIBLE;
          if (chance < totalChance) {
            const placentaStillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.PLACENTA, isaac_typescript_definitions_1.ItemPoolType.BOSS);
            const bloodClotStillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.BLOOD_CLOT, isaac_typescript_definitions_1.ItemPoolType.BOSS);
            if (placentaStillInPools && bloodClotStillInPools) {
              const collectibleChance = (0, random_1.getRandom)(rng);
              const collectibleType = collectibleChance < 0.5 ? isaac_typescript_definitions_1.CollectibleType.PLACENTA : isaac_typescript_definitions_1.CollectibleType.BLOOD_CLOT;
              (0, spawnCollectible_1.spawnCollectible)(collectibleType, position, rng);
              return true;
            }
            if (placentaStillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.PLACENTA, position, rng);
              return true;
            }
            if (bloodClotStillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.BLOOD_CLOT, position, rng);
              return true;
            }
            return false;
          }
          (0, entitiesSpecific_1.spawnEffectWithSeed)(isaac_typescript_definitions_1.EffectVariant.CREEP_RED, 0, position, rng);
          (0, projectiles_1.fireProjectilesInCircle)(void 0, position, POLYP_PROJECTILE_SPEED, POLYP_NUM_PROJECTILES);
          return true;
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks of `RockAltType.BUCKET_DOWNPOUR`.
         *
         * For more information, see the documentation for the `spawnRockAltReward` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         */
        spawnRockAltRewardBucketDownpour(position, rng) {
          const room = cachedClasses_1.game.GetRoom();
          const chance = (0, random_1.getRandom)(rng);
          let totalChance = 0;
          totalChance += ROCK_ALT_CHANCES.NOTHING;
          if (chance < totalChance) {
            return false;
          }
          totalChance += ROCK_ALT_CHANCES.BASIC_DROP;
          if (chance < totalChance) {
            const numCoinsChance = (0, random_1.getRandom)(rng);
            const numCoins = numCoinsChance < 0.5 ? 1 : 2;
            (0, utils_1.repeat)(numCoins, () => {
              const randomVector = (0, vector_1.getRandomVector)(rng);
              const velocity = randomVector.mul(COIN_VELOCITY_MULTIPLIER);
              (0, pickupsSpecific_1.spawnCoinWithSeed)(isaac_typescript_definitions_1.CoinSubType.NULL, position, rng, velocity);
            });
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.TRINKET;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnTrinketWithSeed)(isaac_typescript_definitions_1.TrinketType.SWALLOWED_PENNY, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.COLLECTIBLE;
          if (chance < totalChance) {
            const stillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.LEECH, isaac_typescript_definitions_1.ItemPoolType.TREASURE);
            if (stillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.LEECH, position, rng);
              return true;
            }
            return false;
          }
          const enemiesChance = (0, random_1.getRandom)(rng);
          const entityType = enemiesChance < 0.5 ? isaac_typescript_definitions_1.EntityType.SPIDER : isaac_typescript_definitions_1.EntityType.SMALL_LEECH;
          const numEnemiesChance = (0, random_1.getRandom)(rng);
          const numEnemies = numEnemiesChance < 0.5 ? 1 : 2;
          (0, utils_1.repeat)(numEnemies, () => {
            const targetPos = room.FindFreePickupSpawnPosition(position, FIND_FREE_INITIAL_STEP);
            const spider = EntityNPC.ThrowSpider(position, void 0, targetPos, false, 0);
            if (entityType === isaac_typescript_definitions_1.EntityType.SMALL_LEECH && spider.Type !== entityType) {
              spider.Morph(entityType, 0, 0, -1);
            }
          });
          return true;
        }
        /**
         * Helper function for emulating what happens when a vanilla `GridEntityType.ROCK_ALT` grid entity
         * breaks of `RockAltType.BUCKET_DROSS`.
         *
         * For more information, see the documentation for the `spawnRockAltReward` function.
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.SPAWN_ALT_ROCK_REWARDS`.
         */
        spawnRockAltRewardBucketDross(position, rng) {
          const room = cachedClasses_1.game.GetRoom();
          const chance = (0, random_1.getRandom)(rng);
          let totalChance = 0;
          totalChance += ROCK_ALT_CHANCES.NOTHING;
          if (chance < totalChance) {
            return false;
          }
          totalChance += ROCK_ALT_CHANCES.BASIC_DROP;
          if (chance < totalChance) {
            const numCoinsChance = (0, random_1.getRandom)(rng);
            const numCoins = numCoinsChance < 0.5 ? 1 : 2;
            (0, utils_1.repeat)(numCoins, () => {
              const randomVector = (0, vector_1.getRandomVector)(rng);
              const velocity = randomVector.mul(COIN_VELOCITY_MULTIPLIER);
              (0, pickupsSpecific_1.spawnCoinWithSeed)(isaac_typescript_definitions_1.CoinSubType.NULL, position, rng, velocity);
            });
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.TRINKET;
          if (chance < totalChance) {
            (0, pickupsSpecific_1.spawnTrinketWithSeed)(isaac_typescript_definitions_1.TrinketType.BUTT_PENNY, position, rng);
            return true;
          }
          totalChance += ROCK_ALT_CHANCES.COLLECTIBLE;
          if (chance < totalChance) {
            const stillInPools = this.itemPoolDetection.isCollectibleInItemPool(isaac_typescript_definitions_1.CollectibleType.POOP, isaac_typescript_definitions_1.ItemPoolType.TREASURE);
            if (stillInPools) {
              (0, spawnCollectible_1.spawnCollectible)(isaac_typescript_definitions_1.CollectibleType.POOP, position, rng);
              return true;
            }
            return false;
          }
          const enemiesChance = (0, random_1.getRandom)(rng);
          const entityType = enemiesChance < 0.5 ? isaac_typescript_definitions_1.EntityType.DRIP : isaac_typescript_definitions_1.EntityType.SMALL_LEECH;
          const numEnemiesChance = (0, random_1.getRandom)(rng);
          const numEnemies = numEnemiesChance < 0.5 ? 1 : 2;
          (0, utils_1.repeat)(numEnemies, () => {
            const targetPos = room.FindFreePickupSpawnPosition(position, FIND_FREE_INITIAL_STEP);
            const spider = EntityNPC.ThrowSpider(position, void 0, targetPos, false, 0);
            spider.Morph(entityType, 0, 0, -1);
          });
          return true;
        }
      };
      exports2.SpawnRockAltRewards = SpawnRockAltRewards;
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltReward", null);
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltRewardUrn", null);
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltRewardMushroom", null);
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltRewardSkull", null);
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltRewardPolyp", null);
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltRewardBucketDownpour", null);
      __decorate([
        decorators_1.Exported
      ], SpawnRockAltRewards.prototype, "spawnRockAltRewardBucketDross", null);
    }
  });

  // node_modules/isaacscript-common/dist/functions/curses.js
  var require_curses = __commonJS({
    "node_modules/isaacscript-common/dist/functions/curses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.hasCurse = exports2.getCurseIDByName = void 0;
      var cachedClasses_1 = require_cachedClasses();
      var flag_1 = require_flag();
      function getCurseIDByName(name) {
        const curseID = Isaac.GetCurseIdByName(name);
        if (curseID === -1) {
          error(`Failed to get the curse ID corresponding to the curse name of "${curseID}". Does this name match what you put in the "content/curses.xml" file?`);
        }
        return 1 << curseID - 1;
      }
      exports2.getCurseIDByName = getCurseIDByName;
      function hasCurse(...curses) {
        const level = cachedClasses_1.game.GetLevel();
        const levelCurses = level.GetCurses();
        return curses.some((curse) => (0, flag_1.hasFlag)(levelCurses, curse));
      }
      exports2.hasCurse = hasCurse;
    }
  });

  // node_modules/isaacscript-common/dist/functions/nextStage.js
  var require_nextStage = __commonJS({
    "node_modules/isaacscript-common/dist/functions/nextStage.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getNextStageType = exports2.getNextStage = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var curses_1 = require_curses();
      var roomData_1 = require_roomData();
      var stage_1 = require_stage();
      function getNextStage() {
        const level = cachedClasses_1.game.GetLevel();
        const backwardsPath = cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH);
        const mausoleumHeartKilled = cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.MAUSOLEUM_HEART_KILLED);
        const stage = level.GetStage();
        const repentanceStage = (0, stage_1.onRepentanceStage)();
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        if (backwardsPath) {
          const nextStage = stage - 1;
          return nextStage === 0 ? isaac_typescript_definitions_1.LevelStage.HOME : nextStage;
        }
        switch (roomGridIndex) {
          case isaac_typescript_definitions_1.GridRoom.BLUE_WOMB: {
            return isaac_typescript_definitions_1.LevelStage.BLUE_WOMB;
          }
          case isaac_typescript_definitions_1.GridRoom.VOID: {
            return isaac_typescript_definitions_1.LevelStage.VOID;
          }
          case isaac_typescript_definitions_1.GridRoom.SECRET_EXIT: {
            if (repentanceStage) {
              return stage + 1;
            }
            if (stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_2 || stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_1 && (0, curses_1.hasCurse)(isaac_typescript_definitions_1.LevelCurse.LABYRINTH)) {
              return isaac_typescript_definitions_1.LevelStage.DEPTHS_2;
            }
            return stage;
          }
        }
        if (repentanceStage && stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_2) {
          return isaac_typescript_definitions_1.LevelStage.CAVES_2;
        }
        if (repentanceStage && stage === isaac_typescript_definitions_1.LevelStage.CAVES_2) {
          return isaac_typescript_definitions_1.LevelStage.DEPTHS_2;
        }
        if (repentanceStage && stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_2) {
          if (mausoleumHeartKilled) {
            return isaac_typescript_definitions_1.LevelStage.WOMB_1;
          }
          return isaac_typescript_definitions_1.LevelStage.WOMB_2;
        }
        if (stage === isaac_typescript_definitions_1.LevelStage.WOMB_2) {
          return isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL;
        }
        if (stage === isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST) {
          return isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST;
        }
        if (stage === isaac_typescript_definitions_1.LevelStage.VOID) {
          return isaac_typescript_definitions_1.LevelStage.VOID;
        }
        return stage + 1;
      }
      exports2.getNextStage = getNextStage;
      function getNextStageType(upwards = false) {
        const backwardsPath = cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH);
        const mausoleumHeartKilled = cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.MAUSOLEUM_HEART_KILLED);
        const level = cachedClasses_1.game.GetLevel();
        const stage = level.GetStage();
        const stageType = level.GetStageType();
        const repentanceStage = (0, stage_1.onRepentanceStage)();
        const roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        const nextStage = getNextStage();
        if (backwardsPath) {
          return (0, stage_1.calculateStageType)(nextStage);
        }
        if (roomGridIndex === isaac_typescript_definitions_1.GridRoom.SECRET_EXIT) {
          return (0, stage_1.calculateStageTypeRepentance)(nextStage);
        }
        if (repentanceStage && (stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_1 || // 1
        stage === isaac_typescript_definitions_1.LevelStage.CAVES_1 || // 3
        stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_1 || // 5
        stage === isaac_typescript_definitions_1.LevelStage.WOMB_1)) {
          return (0, stage_1.calculateStageTypeRepentance)(nextStage);
        }
        if (repentanceStage && stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_2 && mausoleumHeartKilled) {
          return (0, stage_1.calculateStageTypeRepentance)(nextStage);
        }
        if (nextStage === isaac_typescript_definitions_1.LevelStage.BLUE_WOMB) {
          return isaac_typescript_definitions_1.StageType.ORIGINAL;
        }
        if (nextStage === isaac_typescript_definitions_1.LevelStage.SHEOL_CATHEDRAL) {
          if (upwards) {
            return isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB;
          }
          return isaac_typescript_definitions_1.StageType.ORIGINAL;
        }
        if (nextStage === isaac_typescript_definitions_1.LevelStage.DARK_ROOM_CHEST) {
          if (stageType === isaac_typescript_definitions_1.StageType.ORIGINAL) {
            return isaac_typescript_definitions_1.StageType.ORIGINAL;
          }
          return isaac_typescript_definitions_1.StageType.WRATH_OF_THE_LAMB;
        }
        if (nextStage === isaac_typescript_definitions_1.LevelStage.VOID) {
          return isaac_typescript_definitions_1.StageType.ORIGINAL;
        }
        if (nextStage === isaac_typescript_definitions_1.LevelStage.HOME) {
          return isaac_typescript_definitions_1.StageType.ORIGINAL;
        }
        return (0, stage_1.calculateStageType)(nextStage);
      }
      exports2.getNextStageType = getNextStageType;
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/StageHistory.js
  var require_StageHistory = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/StageHistory.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StageHistory = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var nextStage_1 = require_nextStage();
      var stage_1 = require_stage();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          stageHistory: []
        }
      };
      var StageHistory = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [ModCallbackCustom_1.ModCallbackCustom.POST_NEW_LEVEL_REORDERED, this.postNewLevelReordered]
          ];
        }
        // ModCallbackCustom.POST_NEW_LEVEL_REORDERED
        postNewLevelReordered = () => {
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const stageType = level.GetStageType();
          v.run.stageHistory.push({ stage, stageType });
        };
        /**
         * Helper function to get the stage type that a trapdoor or heaven door would take the player to,
         * based on the current stage, room, and game state flags.
         *
         * This function accounts for the previous floors that a player has visited thus far on the run so
         * that the next stage type can be properly calculated on The Ascent (which makes it unlike the
         * `getNextStageType` function).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.STAGE_HISTORY`.
         *
         * @param upwards Whether the player should go up to Cathedral in the case of being on Womb 2.
         *                Default is false.
         * @public
         */
        getNextStageTypeWithHistory(upwards = false) {
          const backwardsPath = cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH);
          if (!backwardsPath) {
            return (0, nextStage_1.getNextStageType)(upwards);
          }
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const repentanceStage = (0, stage_1.onRepentanceStage)();
          const visitedDownpour1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_1, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedDross1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_1, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          const visitedDownpour2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_2, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedDross2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_2, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          const visitedMines1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.CAVES_1, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedAshpit1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.CAVES_1, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          const visitedMines2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.DEPTHS_2, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedAshpit2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.DEPTHS_2, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          if (stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_2 && repentanceStage) {
            if (visitedDownpour1) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE;
            }
            if (visitedDross1) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE_B;
            }
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.CAVES_1 && repentanceStage) {
            if (visitedDownpour2) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE;
            }
            if (visitedDross2) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE_B;
            }
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.CAVES_2 && !repentanceStage) {
            if (visitedDownpour2) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE;
            }
            if (visitedDross2) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE_B;
            }
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.CAVES_2 && repentanceStage) {
            if (visitedMines1) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE;
            }
            if (visitedAshpit1) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE_B;
            }
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_2 && !repentanceStage) {
            if (visitedAshpit2) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE_B;
            }
            if (visitedMines2) {
              return isaac_typescript_definitions_1.StageType.REPENTANCE;
            }
          }
          const nextStage = this.getNextStageWithHistory();
          return (0, stage_1.calculateStageType)(nextStage);
        }
        /**
         * Helper function to get the stage that a trapdoor or heaven door would take the player to, based
         * on the current stage, room, and game state flags.
         *
         * This function accounts for the previous floors that a player has visited thus far on the run so
         * that the next stage can be properly calculated on The Ascent (which makes it unlike the
         * `getNextStage` function).
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.STAGE_HISTORY`.
         */
        getNextStageWithHistory() {
          const backwardsPath = cachedClasses_1.game.GetStateFlag(isaac_typescript_definitions_1.GameStateFlag.BACKWARDS_PATH);
          if (!backwardsPath) {
            return (0, nextStage_1.getNextStage)();
          }
          const level = cachedClasses_1.game.GetLevel();
          const stage = level.GetStage();
          const repentanceStage = (0, stage_1.onRepentanceStage)();
          const visitedDownpour1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_1, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedDross1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_1, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          const visitedDownpour2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_2, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedDross2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.BASEMENT_2, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          const visitedMines1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.CAVES_1, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedAshpit1 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.CAVES_1, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          const visitedMines2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.DEPTHS_2, isaac_typescript_definitions_1.StageType.REPENTANCE);
          const visitedAshpit2 = this.hasVisitedStage(isaac_typescript_definitions_1.LevelStage.DEPTHS_2, isaac_typescript_definitions_1.StageType.REPENTANCE_B);
          if (stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_1) {
            if (repentanceStage) {
              return isaac_typescript_definitions_1.LevelStage.BASEMENT_1;
            }
            return isaac_typescript_definitions_1.LevelStage.HOME;
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.BASEMENT_2) {
            if (repentanceStage) {
              if (visitedDownpour1 || visitedDross1) {
                return isaac_typescript_definitions_1.LevelStage.BASEMENT_1;
              }
              return isaac_typescript_definitions_1.LevelStage.BASEMENT_2;
            }
            return isaac_typescript_definitions_1.LevelStage.BASEMENT_1;
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.CAVES_1) {
            if (repentanceStage) {
              if (visitedDownpour2 || visitedDross2) {
                return isaac_typescript_definitions_1.LevelStage.BASEMENT_2;
              }
              return isaac_typescript_definitions_1.LevelStage.CAVES_1;
            }
            return isaac_typescript_definitions_1.LevelStage.BASEMENT_2;
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.CAVES_2) {
            if (repentanceStage) {
              if (visitedMines1 || visitedAshpit1) {
                return isaac_typescript_definitions_1.LevelStage.CAVES_1;
              }
              return isaac_typescript_definitions_1.LevelStage.CAVES_2;
            }
            return isaac_typescript_definitions_1.LevelStage.CAVES_1;
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_1) {
            if (repentanceStage) {
              if (visitedMines2 || visitedAshpit2) {
                return isaac_typescript_definitions_1.LevelStage.CAVES_2;
              }
              return isaac_typescript_definitions_1.LevelStage.DEPTHS_1;
            }
            return isaac_typescript_definitions_1.LevelStage.CAVES_2;
          }
          if (stage === isaac_typescript_definitions_1.LevelStage.DEPTHS_2) {
            if (repentanceStage) {
              return isaac_typescript_definitions_1.LevelStage.DEPTHS_2;
            }
            return isaac_typescript_definitions_1.LevelStage.DEPTHS_1;
          }
          return stage - 1;
        }
        /**
         * Helper function to get all of the stages that a player has visited thus far on this run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.STAGE_HISTORY`.
         *
         * @public
         */
        getStageHistory() {
          return v.run.stageHistory;
        }
        /**
         * Helper function to check if a player has previous visited a particular stage (or stage + stage
         * type combination) on this run.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.STAGE_HISTORY`.
         *
         * @param stage The stage to check for.
         * @param stageType Optional. If provided, will check for a specific stage and stage type
         *                  combination.
         */
        hasVisitedStage(stage, stageType) {
          if (stageType === void 0) {
            return v.run.stageHistory.some((stageHistoryEntry) => stageHistoryEntry.stage === stage);
          }
          return v.run.stageHistory.some((stageHistoryEntry) => stageHistoryEntry.stage === stage && stageHistoryEntry.stageType === stageType);
        }
      };
      exports2.StageHistory = StageHistory;
      __decorate([
        decorators_1.Exported
      ], StageHistory.prototype, "getNextStageTypeWithHistory", null);
      __decorate([
        decorators_1.Exported
      ], StageHistory.prototype, "getNextStageWithHistory", null);
      __decorate([
        decorators_1.Exported
      ], StageHistory.prototype, "getStageHistory", null);
      __decorate([
        decorators_1.Exported
      ], StageHistory.prototype, "hasVisitedStage", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/StartAmbush.js
  var require_StartAmbush = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/StartAmbush.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.StartAmbush = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var entities_1 = require_entities();
      var pickupsSpecific_1 = require_pickupsSpecific();
      var Feature_1 = require_Feature();
      var SACK_SEED_THAT_SPAWNS_TWO_COINS = 6;
      var StartAmbush = class extends Feature_1.Feature {
        runInNFrames;
        /** @internal */
        constructor(runInNFrames) {
          super();
          this.featuresUsed = [ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES];
          this.runInNFrames = runInNFrames;
        }
        /**
         * Helper function to start a Challenge Room or the Boss Rush.
         *
         * Specifically, this is performed by spawning a sack on top of the player, waiting a game frame,
         * and then removing the sack and the pickups that the sack dropped.
         *
         * In order to use this function, you must upgrade your mod with `ISCFeature.START_AMBUSH`.
         *
         * @public
         */
        startAmbush() {
          const player = Isaac.GetPlayer();
          const sack = (0, pickupsSpecific_1.spawnSackWithSeed)(isaac_typescript_definitions_1.SackSubType.NULL, player.Position, SACK_SEED_THAT_SPAWNS_TWO_COINS);
          const sprite = sack.GetSprite();
          sprite.Stop();
          const sackPtr = EntityPtr(sack);
          this.runInNFrames.runNextGameFrame(() => {
            const futureSack = sackPtr.Ref;
            if (futureSack === void 0) {
              return;
            }
            futureSack.Remove();
            const sackPtrHash = GetPtrHash(futureSack);
            const coins = (0, pickupsSpecific_1.getCoins)();
            const coinsFromSack = coins.filter((pickup) => pickup.SpawnerEntity !== void 0 && GetPtrHash(pickup.SpawnerEntity) === sackPtrHash);
            (0, entities_1.removeEntities)(coinsFromSack);
          });
        }
      };
      exports2.StartAmbush = StartAmbush;
      __decorate([
        decorators_1.Exported
      ], StartAmbush.prototype, "startAmbush", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/TaintedLazarusPlayers.js
  var require_TaintedLazarusPlayers = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/TaintedLazarusPlayers.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TaintedLazarusPlayers = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var decorators_1 = require_decorators();
      var log_1 = require_log();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          queuedTaintedLazarus: [],
          queuedDeadTaintedLazarus: [],
          /**
           * The `POST_PLAYER_INIT` callback fires for Dead Tainted Lazarus at the beginning of the run.
           * However, the player index for the Dead Tainted Lazarus player object at that time does not
           * actually correspond to the player index for the real player once Flip has been used. Thus, we
           * revert to using PtrHash as an index for our map, which is consistent between the Dead Tainted
           * Lazarus object in the `POST_PLAYER_INIT` callback and the "real" Dead Tainted Lazarus.
           *
           * We use `EntityPlayer` as the value for the map instead of `EntityPtr` because using the
           * pointer does not work for some reason. (When we unwrap it after one or more flips have been
           * used, the pointers no longer point to the original objects, even if we manually update the
           * pointers in the `POST_FLIP` callback.)
           */
          subPlayerMap: /* @__PURE__ */ new Map()
        }
      };
      var TaintedLazarusPlayers = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        vConditionalFunc = () => false;
        /** @internal */
        constructor() {
          super();
          this.callbacksUsed = [
            // 9
            [isaac_typescript_definitions_1.ModCallback.POST_PLAYER_INIT, this.postPlayerInit]
          ];
        }
        // ModCallback.POST_PLAYER_INIT (9)
        postPlayerInit = (player) => {
          const character = player.GetPlayerType();
          if (character === isaac_typescript_definitions_1.PlayerType.LAZARUS_B) {
            v.run.queuedTaintedLazarus.push(player);
          } else if (character === isaac_typescript_definitions_1.PlayerType.LAZARUS_2_B) {
            v.run.queuedDeadTaintedLazarus.push(player);
          } else {
            return;
          }
          this.checkDequeue();
        };
        /**
         * Indexes are the `PtrHash`, values are the `EntityPtr` of the *other* Lazarus.
         *
         * When starting a run, the `POST_PLAYER_INIT` callback will fire first for Dead Tainted Lazarus,
         * then for Tainted Lazarus. When continuing a run, the `POST_PLAYER_INIT` callback will fire
         * first for the character that is currently active. Thus, since the order of the characters is
         * not certain, we insert each of their pointers into a queue, and then only populate the map when
         * we have one Tainted Lazarus and one Dead Tainted Lazarus.
         */
        checkDequeue() {
          if (v.run.queuedTaintedLazarus.length === 0 || v.run.queuedDeadTaintedLazarus.length === 0) {
            return;
          }
          const taintedLazarus = v.run.queuedTaintedLazarus.shift();
          const deadTaintedLazarus = v.run.queuedDeadTaintedLazarus.shift();
          if (taintedLazarus === void 0 || deadTaintedLazarus === void 0) {
            return;
          }
          const taintedLazarusPtrHash = GetPtrHash(taintedLazarus);
          const deadTaintedLazarusPtrHash = GetPtrHash(deadTaintedLazarus);
          if (taintedLazarusPtrHash === deadTaintedLazarusPtrHash) {
            (0, log_1.logError)("Failed to cache the Tainted Lazarus player objects, since the hash for Tainted Lazarus and Dead Tainted Lazarus were the same.");
            return;
          }
          v.run.subPlayerMap.set(taintedLazarusPtrHash, deadTaintedLazarus);
          v.run.subPlayerMap.set(deadTaintedLazarusPtrHash, taintedLazarus);
        }
        /**
         * Helper function to get the other version of Tainted Lazarus.
         *
         * - On Tainted Lazarus, returns the player object for Dead Tainted Lazarus.
         * - On Dead Tainted Lazarus, returns the player object for Tainted Lazarus.
         * - Returns undefined if player object retrieval failed for any reason.
         *
         * If you call the `EntityPlayer.Exists` method on the returned object, it will return false.
         * However, you can still call the other methods like you normally would (e.g.
         * `EntityPlayer.AddCollectible`).
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.CHARACTER_HEALTH_CONVERSION`.
         *
         * @public
         */
        getTaintedLazarusSubPlayer(player) {
          const ptrHash = GetPtrHash(player);
          return v.run.subPlayerMap.get(ptrHash);
        }
      };
      exports2.TaintedLazarusPlayers = TaintedLazarusPlayers;
      __decorate([
        decorators_1.Exported
      ], TaintedLazarusPlayers.prototype, "getTaintedLazarusSubPlayer", null);
    }
  });

  // node_modules/isaacscript-common/dist/classes/features/other/UnlockAchievementsDetection.js
  var require_UnlockAchievementsDetection = __commonJS({
    "node_modules/isaacscript-common/dist/classes/features/other/UnlockAchievementsDetection.js"(exports2) {
      "use strict";
      var __decorate = exports2 && exports2.__decorate || function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.UnlockAchievementsDetection = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var constants_1 = require_constants();
      var decorators_1 = require_decorators();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var entitiesSpecific_1 = require_entitiesSpecific();
      var Feature_1 = require_Feature();
      var v = {
        run: {
          canRunUnlockAchievements: true
        }
      };
      var UnlockAchievementsDetection = class extends Feature_1.Feature {
        /** @internal */
        v = v;
        /** @internal */
        constructor() {
          super();
          this.customCallbacksUsed = [
            [
              ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED,
              this.postGameStartedReordered
            ]
          ];
        }
        // ModCallbackCustom.POST_GAME_STARTED_REORDERED
        postGameStartedReordered = () => {
          const greedDonationMachine = (0, entitiesSpecific_1.spawnSlot)(isaac_typescript_definitions_1.SlotVariant.GREED_DONATION_MACHINE, 0, constants_1.VectorZero);
          v.run.canRunUnlockAchievements = greedDonationMachine.Exists();
          greedDonationMachine.Remove();
        };
        /**
         * Helper function to see if the current run can unlock achievements. For example, if playing on a
         * set seed or in a victory lap, achievements are disabled.
         *
         * Under the hood, this is determined by spawning a Greed Donation Machine at the beginning of the
         * run and then seeing if it exists before removing it. (The results are cached for the entire
         * run.)
         *
         * In order to use this function, you must upgrade your mod with
         * `ISCFeature.UNLOCK_ACHIEVEMENTS_DETECTION`.
         *
         * @public
         */
        canRunUnlockAchievements() {
          return v.run.canRunUnlockAchievements;
        }
      };
      exports2.UnlockAchievementsDetection = UnlockAchievementsDetection;
      __decorate([
        decorators_1.Exported
      ], UnlockAchievementsDetection.prototype, "canRunUnlockAchievements", null);
    }
  });

  // node_modules/isaacscript-common/dist/features.js
  var require_features = __commonJS({
    "node_modules/isaacscript-common/dist/features.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getFeatures = void 0;
      var CustomGridEntities_1 = require_CustomGridEntities();
      var CustomRevive_1 = require_CustomRevive();
      var EsauJrDetection_1 = require_EsauJrDetection();
      var FlipDetection_1 = require_FlipDetection();
      var GameReorderedCallbacks_1 = require_GameReorderedCallbacks();
      var GridEntityCollisionDetection_1 = require_GridEntityCollisionDetection();
      var GridEntityRenderDetection_1 = require_GridEntityRenderDetection();
      var GridEntityUpdateDetection_1 = require_GridEntityUpdateDetection();
      var ItemPickupDetection_1 = require_ItemPickupDetection();
      var PickupChangeDetection_1 = require_PickupChangeDetection();
      var PlayerCollectibleDetection_1 = require_PlayerCollectibleDetection();
      var PlayerReorderedCallbacks_1 = require_PlayerReorderedCallbacks();
      var SlotDestroyedDetection_1 = require_SlotDestroyedDetection();
      var SlotRenderDetection_1 = require_SlotRenderDetection();
      var SlotUpdateDetection_1 = require_SlotUpdateDetection();
      var CharacterHealthConversion_1 = require_CharacterHealthConversion();
      var CharacterStats_1 = require_CharacterStats();
      var CollectibleItemPoolType_1 = require_CollectibleItemPoolType();
      var CustomHotkeys_1 = require_CustomHotkeys();
      var CustomItemPools_1 = require_CustomItemPools();
      var CustomPickups_1 = require_CustomPickups();
      var CustomStages_1 = require_CustomStages();
      var CustomTrapdoors_1 = require_CustomTrapdoors();
      var DebugDisplay_1 = require_DebugDisplay();
      var DeployJSONRoom_1 = require_DeployJSONRoom();
      var DisableAllSound_1 = require_DisableAllSound();
      var DisableInputs_1 = require_DisableInputs();
      var EdenStartingStatsHealth_1 = require_EdenStartingStatsHealth();
      var ExtraConsoleCommands_1 = require_ExtraConsoleCommands();
      var FadeInRemover_1 = require_FadeInRemover();
      var FastReset_1 = require_FastReset();
      var FlyingDetection_1 = require_FlyingDetection();
      var ForgottenSwitch_1 = require_ForgottenSwitch();
      var ItemPoolDetection_1 = require_ItemPoolDetection();
      var ModdedElementDetection_1 = require_ModdedElementDetection();
      var ModdedElementSets_1 = require_ModdedElementSets();
      var NoSirenSteal_1 = require_NoSirenSteal();
      var Pause_1 = require_Pause();
      var PersistentEntities_1 = require_PersistentEntities();
      var PickupIndexCreation_1 = require_PickupIndexCreation();
      var PlayerCollectibleTracking_1 = require_PlayerCollectibleTracking();
      var PonyDetection_1 = require_PonyDetection();
      var PressInput_1 = require_PressInput();
      var PreventChildEntities_1 = require_PreventChildEntities();
      var PreventGridEntityRespawn_1 = require_PreventGridEntityRespawn();
      var RerunDetection_1 = require_RerunDetection();
      var RoomClearFrame_1 = require_RoomClearFrame();
      var RoomHistory_1 = require_RoomHistory();
      var RunInNFrames_1 = require_RunInNFrames();
      var RunNextRoom_1 = require_RunNextRoom();
      var RunNextRun_1 = require_RunNextRun();
      var SaveDataManager_1 = require_SaveDataManager();
      var SpawnRockAltRewards_1 = require_SpawnRockAltRewards();
      var StageHistory_1 = require_StageHistory();
      var StartAmbush_1 = require_StartAmbush();
      var TaintedLazarusPlayers_1 = require_TaintedLazarusPlayers();
      var UnlockAchievementsDetection_1 = require_UnlockAchievementsDetection();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var enums_1 = require_enums();
      (0, enums_1.validateInterfaceMatchesEnum)();
      function getFeatures(mod, callbacks) {
        const gameReorderedCallbacks = new GameReorderedCallbacks_1.GameReorderedCallbacks(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_NEW_LEVEL_REORDERED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_NEW_ROOM_REORDERED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GAME_STARTED_REORDERED_LAST]);
        const disableAllSound = new DisableAllSound_1.DisableAllSound();
        const disableInputs = new DisableInputs_1.DisableInputs();
        const moddedElementDetection = new ModdedElementDetection_1.ModdedElementDetection();
        const ponyDetection = new PonyDetection_1.PonyDetection();
        const pressInput = new PressInput_1.PressInput();
        const roomClearFrame = new RoomClearFrame_1.RoomClearFrame();
        const roomHistory = new RoomHistory_1.RoomHistory();
        const runNextRoom = new RunNextRoom_1.RunNextRoom();
        const saveDataManager = new SaveDataManager_1.SaveDataManager(mod);
        const stageHistory = new StageHistory_1.StageHistory();
        const runInNFrames = new RunInNFrames_1.RunInNFrames(roomHistory);
        const pickupIndexCreation = new PickupIndexCreation_1.PickupIndexCreation(roomHistory, saveDataManager);
        const customGridEntities = new CustomGridEntities_1.CustomGridEntities(runInNFrames);
        const moddedElementSets = new ModdedElementSets_1.ModdedElementSets(moddedElementDetection);
        const itemPoolDetection = new ItemPoolDetection_1.ItemPoolDetection(moddedElementSets);
        const pause = new Pause_1.Pause(disableInputs);
        const preventGridEntityRespawn = new PreventGridEntityRespawn_1.PreventGridEntityRespawn(runInNFrames);
        const customTrapdoors = new CustomTrapdoors_1.CustomTrapdoors(customGridEntities, disableInputs, ponyDetection, roomClearFrame, runInNFrames, runNextRoom, stageHistory);
        const features = {
          // Callback logic
          [ISCFeature_1.ISCFeature.CUSTOM_REVIVE]: new CustomRevive_1.CustomRevive(callbacks[ModCallbackCustom_1.ModCallbackCustom.PRE_CUSTOM_REVIVE], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_CUSTOM_REVIVE], runInNFrames),
          [ISCFeature_1.ISCFeature.ESAU_JR_DETECTION]: new EsauJrDetection_1.EsauJrDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_ESAU_JR], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_FIRST_ESAU_JR]),
          [ISCFeature_1.ISCFeature.FLIP_DETECTION]: new FlipDetection_1.FlipDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_FLIP], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_FIRST_FLIP]),
          [ISCFeature_1.ISCFeature.GRID_ENTITY_COLLISION_DETECTION]: new GridEntityCollisionDetection_1.GridEntityCollisionDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_COLLISION], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_COLLISION], customGridEntities),
          [ISCFeature_1.ISCFeature.GRID_ENTITY_UPDATE_DETECTION]: new GridEntityUpdateDetection_1.GridEntityUpdateDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_INIT], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_INIT], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_UPDATE], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_UPDATE], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_REMOVE], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_REMOVE], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_STATE_CHANGED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_STATE_CHANGED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_BROKEN], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_BROKEN], customGridEntities),
          [ISCFeature_1.ISCFeature.GRID_ENTITY_RENDER_DETECTION]: new GridEntityRenderDetection_1.GridEntityRenderDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_RENDER], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_GRID_ENTITY_CUSTOM_RENDER], customGridEntities),
          [ISCFeature_1.ISCFeature.GAME_REORDERED_CALLBACKS]: gameReorderedCallbacks,
          [ISCFeature_1.ISCFeature.ITEM_PICKUP_DETECTION]: new ItemPickupDetection_1.ItemPickupDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_ITEM_PICKUP], callbacks[ModCallbackCustom_1.ModCallbackCustom.PRE_ITEM_PICKUP]),
          [ISCFeature_1.ISCFeature.PICKUP_CHANGE_DETECTION]: new PickupChangeDetection_1.PickupChangeDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_PICKUP_CHANGED], pickupIndexCreation),
          [ISCFeature_1.ISCFeature.PLAYER_COLLECTIBLE_DETECTION]: new PlayerCollectibleDetection_1.PlayerCollectibleDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED], moddedElementSets, runInNFrames),
          [ISCFeature_1.ISCFeature.PLAYER_REORDERED_CALLBACKS]: new PlayerReorderedCallbacks_1.PlayerReorderedCallbacks(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED]),
          [ISCFeature_1.ISCFeature.SLOT_DESTROYED_DETECTION]: new SlotDestroyedDetection_1.SlotDestroyedDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_DESTROYED], roomHistory),
          [ISCFeature_1.ISCFeature.SLOT_RENDER_DETECTION]: new SlotRenderDetection_1.SlotRenderDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_RENDER], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED]),
          [ISCFeature_1.ISCFeature.SLOT_UPDATE_DETECTION]: new SlotUpdateDetection_1.SlotUpdateDetection(callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_INIT], callbacks[ModCallbackCustom_1.ModCallbackCustom.POST_SLOT_UPDATE]),
          // Extra features
          [ISCFeature_1.ISCFeature.CHARACTER_HEALTH_CONVERSION]: new CharacterHealthConversion_1.CharacterHealthConversion(),
          [ISCFeature_1.ISCFeature.CHARACTER_STATS]: new CharacterStats_1.CharacterStats(),
          [ISCFeature_1.ISCFeature.COLLECTIBLE_ITEM_POOL_TYPE]: new CollectibleItemPoolType_1.CollectibleItemPoolType(pickupIndexCreation),
          [ISCFeature_1.ISCFeature.CUSTOM_GRID_ENTITIES]: customGridEntities,
          [ISCFeature_1.ISCFeature.CUSTOM_ITEM_POOLS]: new CustomItemPools_1.CustomItemPools(),
          [ISCFeature_1.ISCFeature.CUSTOM_HOTKEYS]: new CustomHotkeys_1.CustomHotkeys(),
          [ISCFeature_1.ISCFeature.CUSTOM_PICKUPS]: new CustomPickups_1.CustomPickups(),
          [ISCFeature_1.ISCFeature.CUSTOM_STAGES]: new CustomStages_1.CustomStages(customGridEntities, customTrapdoors, disableAllSound, gameReorderedCallbacks, pause, runInNFrames),
          [ISCFeature_1.ISCFeature.CUSTOM_TRAPDOORS]: customTrapdoors,
          [ISCFeature_1.ISCFeature.DEBUG_DISPLAY]: new DebugDisplay_1.DebugDisplay(mod),
          [ISCFeature_1.ISCFeature.DEPLOY_JSON_ROOM]: new DeployJSONRoom_1.DeployJSONRoom(preventGridEntityRespawn),
          [ISCFeature_1.ISCFeature.DISABLE_ALL_SOUND]: disableAllSound,
          [ISCFeature_1.ISCFeature.DISABLE_INPUTS]: disableInputs,
          [ISCFeature_1.ISCFeature.EDEN_STARTING_STATS_HEALTH]: new EdenStartingStatsHealth_1.EdenStartingStatsHealth(),
          [ISCFeature_1.ISCFeature.FADE_IN_REMOVER]: new FadeInRemover_1.FadeInRemover(),
          [ISCFeature_1.ISCFeature.FAST_RESET]: new FastReset_1.FastReset(),
          [ISCFeature_1.ISCFeature.FLYING_DETECTION]: new FlyingDetection_1.FlyingDetection(moddedElementSets),
          [ISCFeature_1.ISCFeature.FORGOTTEN_SWITCH]: new ForgottenSwitch_1.ForgottenSwitch(pressInput),
          [ISCFeature_1.ISCFeature.EXTRA_CONSOLE_COMMANDS]: new ExtraConsoleCommands_1.ExtraConsoleCommands(),
          [ISCFeature_1.ISCFeature.ITEM_POOL_DETECTION]: itemPoolDetection,
          [ISCFeature_1.ISCFeature.MODDED_ELEMENT_DETECTION]: moddedElementDetection,
          [ISCFeature_1.ISCFeature.MODDED_ELEMENT_SETS]: moddedElementSets,
          [ISCFeature_1.ISCFeature.NO_SIREN_STEAL]: new NoSirenSteal_1.NoSirenSteal(),
          [ISCFeature_1.ISCFeature.PAUSE]: pause,
          [ISCFeature_1.ISCFeature.PERSISTENT_ENTITIES]: new PersistentEntities_1.PersistentEntities(roomHistory),
          [ISCFeature_1.ISCFeature.PICKUP_INDEX_CREATION]: pickupIndexCreation,
          [ISCFeature_1.ISCFeature.PLAYER_COLLECTIBLE_TRACKING]: new PlayerCollectibleTracking_1.PlayerCollectibleTracking(),
          [ISCFeature_1.ISCFeature.PONY_DETECTION]: ponyDetection,
          [ISCFeature_1.ISCFeature.PRESS_INPUT]: pressInput,
          [ISCFeature_1.ISCFeature.PREVENT_CHILD_ENTITIES]: new PreventChildEntities_1.PreventChildEntities(),
          [ISCFeature_1.ISCFeature.PREVENT_GRID_ENTITY_RESPAWN]: preventGridEntityRespawn,
          [ISCFeature_1.ISCFeature.RERUN_DETECTION]: new RerunDetection_1.RerunDetection(),
          [ISCFeature_1.ISCFeature.ROOM_CLEAR_FRAME]: roomClearFrame,
          [ISCFeature_1.ISCFeature.ROOM_HISTORY]: roomHistory,
          [ISCFeature_1.ISCFeature.RUN_IN_N_FRAMES]: runInNFrames,
          [ISCFeature_1.ISCFeature.RUN_NEXT_ROOM]: runNextRoom,
          [ISCFeature_1.ISCFeature.RUN_NEXT_RUN]: new RunNextRun_1.RunNextRun(),
          [ISCFeature_1.ISCFeature.SAVE_DATA_MANAGER]: saveDataManager,
          [ISCFeature_1.ISCFeature.SPAWN_ALT_ROCK_REWARDS]: new SpawnRockAltRewards_1.SpawnRockAltRewards(itemPoolDetection),
          [ISCFeature_1.ISCFeature.STAGE_HISTORY]: stageHistory,
          [ISCFeature_1.ISCFeature.START_AMBUSH]: new StartAmbush_1.StartAmbush(runInNFrames),
          [ISCFeature_1.ISCFeature.TAINTED_LAZARUS_PLAYERS]: new TaintedLazarusPlayers_1.TaintedLazarusPlayers(),
          [ISCFeature_1.ISCFeature.UNLOCK_ACHIEVEMENTS_DETECTION]: new UnlockAchievementsDetection_1.UnlockAchievementsDetection()
        };
        return features;
      }
      exports2.getFeatures = getFeatures;
    }
  });

  // node_modules/isaacscript-common/dist/classes/ModUpgraded.js
  var require_ModUpgraded = __commonJS({
    "node_modules/isaacscript-common/dist/classes/ModUpgraded.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.ModUpgraded = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var callbacks_1 = require_callbacks();
      var decorators_1 = require_decorators();
      var ISCFeature_1 = require_ISCFeature();
      var ModCallbackCustom_1 = require_ModCallbackCustom();
      var features_1 = require_features();
      var debugFunctions_1 = require_debugFunctions();
      var enums_1 = require_enums();
      var log_1 = require_log();
      var tstlClass_1 = require_tstlClass();
      var types_1 = require_types();
      var utils_1 = require_utils();
      var ModUpgraded = class {
        // -----------------
        // Vanilla variables
        // -----------------
        Name;
        // ----------------
        // Custom variables
        // ----------------
        /** We store a copy of the original mod object so that we can re-implement its functions. */
        mod;
        debug;
        timeThreshold;
        callbacks;
        features;
        // -----------
        // Constructor
        // -----------
        constructor(mod, debug2, timeThreshold) {
          this.Name = mod.Name;
          this.mod = mod;
          this.debug = debug2;
          this.timeThreshold = timeThreshold;
          this.callbacks = (0, callbacks_1.getCallbacks)();
          this.features = (0, features_1.getFeatures)(this, this.callbacks);
        }
        // ---------------
        // Vanilla methods
        // ---------------
        AddCallback(modCallback, ...args) {
          this.AddPriorityCallback(modCallback, isaac_typescript_definitions_1.CallbackPriority.DEFAULT, ...args);
        }
        AddPriorityCallback(modCallback, priority, ...args) {
          if (this.debug) {
            const callback = args[0];
            const optionalArg = args[1];
            const parentFunctionDescription = (0, log_1.getParentFunctionDescription)();
            const customCallback = type(modCallback) === "string";
            const callbackName = customCallback ? `${modCallback} (custom callback)` : `ModCallback.${isaac_typescript_definitions_1.ModCallback[modCallback]}`;
            const signature = parentFunctionDescription === void 0 ? callbackName : `${parentFunctionDescription} - ${callbackName}`;
            const callbackWithLogger = (...callbackArgs) => {
              const startTime = (0, debugFunctions_1.getTime)();
              Isaac.DebugString(`${signature} - START`);
              const returnValue = callback(...callbackArgs);
              const elapsedTime = (0, debugFunctions_1.getElapsedTimeSince)(startTime);
              if (this.timeThreshold === void 0 || this.timeThreshold <= elapsedTime) {
                Isaac.DebugString(`${signature} - END - time: ${elapsedTime}`);
              } else {
                Isaac.DebugString(`${signature} - END`);
              }
              return returnValue;
            };
            const newArgs = [callbackWithLogger, optionalArg];
            this.mod.AddPriorityCallback(modCallback, priority, ...newArgs);
          } else {
            this.mod.AddPriorityCallback(modCallback, priority, ...args);
          }
        }
        HasData() {
          return this.mod.HasData();
        }
        LoadData() {
          return this.mod.LoadData();
        }
        RemoveCallback(modCallback, callback) {
          this.mod.RemoveCallback(modCallback, callback);
        }
        RemoveData() {
          this.mod.RemoveData();
        }
        SaveData(data) {
          this.mod.SaveData(data);
        }
        // ---------------------
        // Custom public methods
        // ---------------------
        /**
         * Registers a function to be executed when an in-game event happens.
         *
         * This method is specifically for events that are provided by the IsaacScript standard library.
         * For example, the `ModCallbackCustom.POST_BOMB_EXPLODE` event corresponds to when a bomb
         * explodes.
         */
        AddCallbackCustom(modCallbackCustom, ...args) {
          this.AddPriorityCallbackCustom(modCallbackCustom, isaac_typescript_definitions_1.CallbackPriority.DEFAULT, ...args);
        }
        /**
         * The same as the `ModUpgraded.AddCallbackCustom` method, but allows setting a custom priority.
         * By default, callbacks are added with a priority of 0, so this allows you to add early or late
         * callbacks as necessary. See the `CallbackPriority` enum.
         */
        AddPriorityCallbackCustom(modCallbackCustom, priority, ...args) {
          const callbackClass = this.callbacks[modCallbackCustom];
          callbackClass.addSubscriber(priority, ...args);
          this.initFeature(callbackClass);
        }
        /**
         * Unregisters a function that was previously registered with the `AddCallbackCustom` method.
         *
         * This method is specifically for events that are provided by the IsaacScript standard library.
         * For example, the `ModCallbackCustom.POST_BOMB_EXPLODE` event corresponds to when a bomb
         * explodes.
         *
         * This method does not care about the tertiary argument. In other words, regardless of the
         * conditions of how you registered the callback, it will be removed.
         */
        RemoveCallbackCustom(modCallbackCustom, callback) {
          const callbackClass = this.callbacks[modCallbackCustom];
          callbackClass.removeSubscriber(callback);
          this.uninitFeature(callbackClass);
        }
        /**
         * Logs every custom callback or extra feature that is currently enabled. Useful for debugging or
         * profiling.
         */
        logUsedFeatures() {
          for (const [modCallbackCustomString, callbackClass] of Object.entries(this.callbacks)) {
            if (callbackClass.numConsumers === 0) {
              continue;
            }
            const modCallbackCustom = (0, types_1.parseIntSafe)(modCallbackCustomString);
            (0, utils_1.assertDefined)(modCallbackCustom, `Failed to convert the string "${modCallbackCustomString}" representing a "ModCallbackCustom" value to a number.`);
            if (!(0, enums_1.isEnumValue)(modCallbackCustom, ModCallbackCustom_1.ModCallbackCustom)) {
              error(`Failed to convert the number ${modCallbackCustom} to a "ModCallbackCustom" value.`);
            }
            (0, log_1.log)(`- ModCallbackCustom.${ModCallbackCustom_1.ModCallbackCustom[modCallbackCustom]} (${modCallbackCustom})`);
          }
          for (const [iscFeatureString, featureClass] of Object.entries(this.features)) {
            if (featureClass.numConsumers === 0) {
              continue;
            }
            const iscFeature = (0, types_1.parseIntSafe)(iscFeatureString);
            (0, utils_1.assertDefined)(iscFeature, `Failed to convert the string "${iscFeatureString}" representing a "ISCFeature" value to a number.`);
            if (!(0, enums_1.isEnumValue)(iscFeature, ISCFeature_1.ISCFeature)) {
              error(`Failed to convert the number ${iscFeature} to a "ISCFeature" value.`);
            }
            (0, log_1.log)(`- ISCFeature.${ISCFeature_1.ISCFeature[iscFeature]} (${iscFeature})`);
          }
        }
        // ----------------------
        // Custom private methods
        // ----------------------
        /**
         * This is used to initialize both custom callbacks and "extra features".
         *
         * This mirrors the `uninitFeature` method.
         */
        initFeature(feature) {
          feature.numConsumers++;
          if (feature.initialized) {
            return;
          }
          feature.initialized = true;
          if (feature.v !== void 0) {
            if (feature.featuresUsed === void 0) {
              feature.featuresUsed = [];
            }
            if (!feature.featuresUsed.includes(ISCFeature_1.ISCFeature.SAVE_DATA_MANAGER)) {
              feature.featuresUsed.unshift(ISCFeature_1.ISCFeature.SAVE_DATA_MANAGER);
            }
          }
          if (feature.featuresUsed !== void 0) {
            for (const featureUsed of feature.featuresUsed) {
              const featureClass = this.features[featureUsed];
              this.initFeature(featureClass);
            }
          }
          if (feature.callbacksUsed !== void 0) {
            for (const callbackTuple of feature.callbacksUsed) {
              const [modCallback, callbackFunc, optionalArgs] = callbackTuple;
              this.AddPriorityCallback(modCallback, isaac_typescript_definitions_1.CallbackPriority.IMPORTANT, callbackFunc, ...optionalArgs ?? []);
            }
          }
          if (feature.customCallbacksUsed !== void 0) {
            for (const callbackTuple of feature.customCallbacksUsed) {
              const [modCallback, callbackFunc, optionalArgs] = callbackTuple;
              this.AddPriorityCallbackCustom(modCallback, isaac_typescript_definitions_1.CallbackPriority.IMPORTANT, callbackFunc, ...optionalArgs ?? []);
            }
          }
          if (feature.v !== void 0) {
            const className = (0, tstlClass_1.getTSTLClassName)(feature);
            (0, utils_1.assertDefined)(className, "Failed to get the name of a feature.");
            const saveDataManagerClass = this.features[ISCFeature_1.ISCFeature.SAVE_DATA_MANAGER];
            saveDataManagerClass.saveDataManager(className, feature.v, feature.vConditionalFunc);
          }
        }
        /**
         * This is used to uninitialize both custom callbacks and "extra features".
         *
         * This mirrors the `initFeature` method.
         */
        uninitFeature(feature) {
          if (feature.numConsumers <= 0) {
            const className = (0, tstlClass_1.getTSTLClassName)(feature) ?? "unknown";
            error(`Failed to uninit feature "${className}" since it has ${feature.numConsumers} consumers, which should never happen.`);
          }
          if (!feature.initialized) {
            const className = (0, tstlClass_1.getTSTLClassName)(feature) ?? "unknown";
            error(`Failed to uninit feature "${className}" since it was not initialized, which should never happen.`);
          }
          feature.numConsumers--;
          if (feature.numConsumers > 0) {
            return;
          }
          feature.initialized = false;
          if (feature.featuresUsed !== void 0) {
            for (const featureUsed of feature.featuresUsed) {
              const featureClass = this.features[featureUsed];
              this.uninitFeature(featureClass);
            }
          }
          if (feature.callbacksUsed !== void 0) {
            for (const callbackTuple of feature.callbacksUsed) {
              const [modCallback, callbackFunc] = callbackTuple;
              this.RemoveCallback(modCallback, callbackFunc);
            }
          }
          if (feature.customCallbacksUsed !== void 0) {
            for (const callbackTuple of feature.customCallbacksUsed) {
              const [modCallback, callbackFunc] = callbackTuple;
              this.RemoveCallbackCustom(modCallback, callbackFunc);
            }
          }
          if (feature.v !== void 0) {
            const className = (0, tstlClass_1.getTSTLClassName)(feature);
            (0, utils_1.assertDefined)(className, "Failed to get the name of a feature.");
            const saveDataManagerClass = this.features[ISCFeature_1.ISCFeature.SAVE_DATA_MANAGER];
            saveDataManagerClass.saveDataManagerRemove(className);
          }
        }
        /**
         * Returns the names of the exported class methods from the features that were added. This is
         * called from the "upgradeMod" function, but we want to mark it as private so that end-users
         * don't have access to it.
         */
        initOptionalFeature(feature) {
          const featureClass = this.features[feature];
          this.initFeature(featureClass);
          return getExportedMethodsFromFeature(featureClass);
        }
      };
      exports2.ModUpgraded = ModUpgraded;
      function getExportedMethodsFromFeature(featureClass) {
        const constructor = (0, tstlClass_1.getTSTLClassConstructor)(featureClass);
        const exportedMethodNames = constructor[decorators_1.EXPORTED_METHOD_NAMES_KEY];
        if (exportedMethodNames === void 0) {
          return [];
        }
        return exportedMethodNames.map((name) => {
          const featureClassRecord = featureClass;
          if (featureClassRecord[name] === void 0) {
            error(`Failed to find a decorated exported method: ${name}`);
          }
          const wrappedMethod = (...args) => (
            // We use a non-null assertion since we have already validated that the function exists. (See
            // the above comment.)
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            featureClassRecord[name](...args)
          );
          return [name, wrappedMethod];
        });
      }
    }
  });

  // node_modules/isaacscript-common/dist/patchErrorFunctions.js
  var require_patchErrorFunctions = __commonJS({
    "node_modules/isaacscript-common/dist/patchErrorFunctions.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.patchErrorFunction = void 0;
      var debugFunctions_1 = require_debugFunctions();
      var LINE_SEPARATOR = "\n";
      var USELESS_TRACEBACK_MESSAGES = [
        // The second line of the traceback will always be the "getTraceback" function.
        "in upvalue 'getTraceback'",
        "in function 'sandbox.GetTraceback'",
        // The third line of the traceback will always be a line within the "errorWithTraceback" function.
        "in function 'error'"
      ];
      var vanillaError;
      function patchErrorFunction() {
        if (!(0, debugFunctions_1.isLuaDebugEnabled)()) {
          return;
        }
        if (__PATCHED_ERROR !== void 0) {
          return;
        }
        __PATCHED_ERROR = true;
        vanillaError = error;
        error = errorWithTraceback;
      }
      exports2.patchErrorFunction = patchErrorFunction;
      function errorWithTraceback(message, level = 1) {
        if (vanillaError === void 0) {
          error(message, level);
        }
        const tracebackOutput = (0, debugFunctions_1.getTraceback)();
        const slimmedTracebackOutput = slimTracebackOutput(tracebackOutput);
        message += "\n";
        message += slimmedTracebackOutput;
        return vanillaError(message, level + 1);
      }
      function slimTracebackOutput(tracebackOutput) {
        for (const msg of USELESS_TRACEBACK_MESSAGES) {
          tracebackOutput = removeLinesContaining(tracebackOutput, msg);
        }
        return tracebackOutput;
      }
      function removeLinesContaining(msg, containsMsg) {
        const lines = msg.split(LINE_SEPARATOR);
        const linesThatDontContain = lines.filter((line) => !line.includes(containsMsg));
        return linesThatDontContain.join(LINE_SEPARATOR);
      }
    }
  });

  // node_modules/isaacscript-common/dist/shaderCrashFix.js
  var require_shaderCrashFix = __commonJS({
    "node_modules/isaacscript-common/dist/shaderCrashFix.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.applyShaderCrashFix = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      function applyShaderCrashFix(mod) {
        mod.AddCallback(isaac_typescript_definitions_1.ModCallback.POST_PLAYER_INIT, postPlayerInit);
      }
      exports2.applyShaderCrashFix = applyShaderCrashFix;
      function postPlayerInit(_player) {
        const players = Isaac.FindByType(isaac_typescript_definitions_1.EntityType.PLAYER);
        if (players.length === 0) {
          Isaac.ExecuteCommand("reloadshaders");
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/core/upgradeMod.js
  var require_upgradeMod = __commonJS({
    "node_modules/isaacscript-common/dist/core/upgradeMod.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.upgradeMod = void 0;
      var ModUpgraded_1 = require_ModUpgraded();
      var patchErrorFunctions_1 = require_patchErrorFunctions();
      var shaderCrashFix_1 = require_shaderCrashFix();
      function upgradeMod(modVanilla, features = [], debug2 = false, timeThreshold) {
        for (const feature of features) {
          const featureType = type(feature);
          if (featureType !== "number") {
            error(`Failed to upgrade the mod due to one of the specified features being of type "${featureType}". (All of the features should be numbers represented by the "ISCFeature" enum.)`);
          }
        }
        const featureSet = new Set(features);
        if (featureSet.size !== features.length) {
          error('Failed to upgrade the mod since there are two or more of the same features specified in the "features" array. When you pass the array of features to the "upgradeMod" function, all of the elements should be unique.');
        }
        (0, patchErrorFunctions_1.patchErrorFunction)();
        const mod = new ModUpgraded_1.ModUpgraded(modVanilla, debug2, timeThreshold);
        (0, shaderCrashFix_1.applyShaderCrashFix)(mod);
        initOptionalFeatures(mod, features);
        return mod;
      }
      exports2.upgradeMod = upgradeMod;
      function initOptionalFeatures(mod, features) {
        for (const feature of features) {
          const exportedMethodTuples = mod["initOptionalFeature"](feature);
          const modRecord = mod;
          for (const [funcName, func] of exportedMethodTuples) {
            if (modRecord[funcName] !== void 0) {
              error(`Failed to upgrade the mod since two or more features share the name function name of "${funcName}". This should never happen, so report this error to the library authors.`);
            }
            modRecord[funcName] = func;
          }
        }
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/arrayLua.js
  var require_arrayLua = __commonJS({
    "node_modules/isaacscript-common/dist/functions/arrayLua.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.some = exports2.map = exports2.join = exports2.forEach = exports2.find = exports2.filter = exports2.every = void 0;
      function every(array, func) {
        return array.every(func);
      }
      exports2.every = every;
      function filter(array, func) {
        return array.filter(func);
      }
      exports2.filter = filter;
      function find(array, func) {
        return array.find(func);
      }
      exports2.find = find;
      function forEach(array, func) {
        array.forEach(func);
      }
      exports2.forEach = forEach;
      function join(array, separator) {
        return array.join(separator);
      }
      exports2.join = join;
      function map(array, func) {
        return array.map(func);
      }
      exports2.map = map;
      function some(array, func) {
        return array.some(func);
      }
      exports2.some = some;
    }
  });

  // node_modules/isaacscript-common/dist/functions/benchmark.js
  var require_benchmark = __commonJS({
    "node_modules/isaacscript-common/dist/functions/benchmark.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.benchmark = void 0;
      var log_1 = require_log();
      function benchmark(numTrials, ...functions) {
        (0, log_1.log)(`Benchmarking ${functions.length} function(s) with ${numTrials} trials.`);
        const averages = [];
        for (const [i, func] of functions.entries()) {
          let totalTimeMilliseconds = 0;
          for (let j = 0; j < numTrials; j++) {
            const startTimeMilliseconds = Isaac.GetTime();
            func();
            const endTimeMilliseconds = Isaac.GetTime();
            const elapsedTimeMilliseconds = endTimeMilliseconds - startTimeMilliseconds;
            totalTimeMilliseconds += elapsedTimeMilliseconds;
          }
          const averageTimeMilliseconds = totalTimeMilliseconds / numTrials;
          (0, log_1.log)(`The average time of the function at index ${i} is: ${averageTimeMilliseconds} milliseconds`);
          averages.push(averageTimeMilliseconds);
        }
        return averages;
      }
      exports2.benchmark = benchmark;
    }
  });

  // node_modules/isaacscript-common/dist/functions/bombs.js
  var require_bombs = __commonJS({
    "node_modules/isaacscript-common/dist/functions/bombs.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getBombRadiusFromDamage = void 0;
      function getBombRadiusFromDamage(damage) {
        if (damage > 175) {
          return 105;
        }
        if (damage <= 140) {
          return 75;
        }
        return 90;
      }
      exports2.getBombRadiusFromDamage = getBombRadiusFromDamage;
    }
  });

  // node_modules/isaacscript-common/dist/objects/challengeBosses.js
  var require_challengeBosses = __commonJS({
    "node_modules/isaacscript-common/dist/objects/challengeBosses.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHALLENGE_BOSSES = exports2.DEFAULT_CHALLENGE_BOSS_ID = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_CHALLENGE_BOSS_ID = isaac_typescript_definitions_1.BossID.MOM;
      exports2.CHALLENGE_BOSSES = {
        [isaac_typescript_definitions_1.Challenge.NULL]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.PITCH_BLACK]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.HIGH_BROW]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.HEAD_TRAUMA]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.DARKNESS_FALLS]: isaac_typescript_definitions_1.BossID.SATAN,
        [isaac_typescript_definitions_1.Challenge.TANK]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.SOLAR_SYSTEM]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.SUICIDE_KING]: isaac_typescript_definitions_1.BossID.ISAAC,
        [isaac_typescript_definitions_1.Challenge.CAT_GOT_YOUR_TONGUE]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.DEMO_MAN]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.CURSED]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.GLASS_CANNON]: isaac_typescript_definitions_1.BossID.SATAN,
        [isaac_typescript_definitions_1.Challenge.WHEN_LIFE_GIVES_YOU_LEMONS]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.BEANS]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.ITS_IN_THE_CARDS]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.SLOW_ROLL]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.COMPUTER_SAVY]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.WAKA_WAKA]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.HOST]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.FAMILY_MAN]: isaac_typescript_definitions_1.BossID.ISAAC,
        [isaac_typescript_definitions_1.Challenge.PURIST]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.XXXXXXXXL]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.SPEED]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.BLUE_BOMBER]: isaac_typescript_definitions_1.BossID.SATAN,
        [isaac_typescript_definitions_1.Challenge.PAY_TO_PLAY]: isaac_typescript_definitions_1.BossID.ISAAC,
        [isaac_typescript_definitions_1.Challenge.HAVE_A_HEART]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.I_RULE]: isaac_typescript_definitions_1.BossID.MEGA_SATAN,
        [isaac_typescript_definitions_1.Challenge.BRAINS]: isaac_typescript_definitions_1.BossID.BLUE_BABY,
        [isaac_typescript_definitions_1.Challenge.PRIDE_DAY]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.ONANS_STREAK]: isaac_typescript_definitions_1.BossID.ISAAC,
        [isaac_typescript_definitions_1.Challenge.GUARDIAN]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.BACKASSWARDS]: isaac_typescript_definitions_1.BossID.MEGA_SATAN,
        [isaac_typescript_definitions_1.Challenge.APRILS_FOOL]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.POKEY_MANS]: isaac_typescript_definitions_1.BossID.ISAAC,
        [isaac_typescript_definitions_1.Challenge.ULTRA_HARD]: isaac_typescript_definitions_1.BossID.MEGA_SATAN,
        [isaac_typescript_definitions_1.Challenge.PONG]: isaac_typescript_definitions_1.BossID.BLUE_BABY,
        [isaac_typescript_definitions_1.Challenge.SCAT_MAN]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.BLOODY_MARY]: isaac_typescript_definitions_1.BossID.SATAN,
        [isaac_typescript_definitions_1.Challenge.BAPTISM_BY_FIRE]: isaac_typescript_definitions_1.BossID.SATAN,
        [isaac_typescript_definitions_1.Challenge.ISAACS_AWAKENING]: isaac_typescript_definitions_1.BossID.MOTHER,
        [isaac_typescript_definitions_1.Challenge.SEEING_DOUBLE]: isaac_typescript_definitions_1.BossID.MOMS_HEART,
        [isaac_typescript_definitions_1.Challenge.PICA_RUN]: isaac_typescript_definitions_1.BossID.ISAAC,
        [isaac_typescript_definitions_1.Challenge.HOT_POTATO]: isaac_typescript_definitions_1.BossID.SATAN,
        [isaac_typescript_definitions_1.Challenge.CANTRIPPED]: isaac_typescript_definitions_1.BossID.MOM,
        [isaac_typescript_definitions_1.Challenge.RED_REDEMPTION]: isaac_typescript_definitions_1.BossID.MOTHER,
        [isaac_typescript_definitions_1.Challenge.DELETE_THIS]: isaac_typescript_definitions_1.BossID.BLUE_BABY
        // 45
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/challengeCharacters.js
  var require_challengeCharacters = __commonJS({
    "node_modules/isaacscript-common/dist/objects/challengeCharacters.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHALLENGE_CHARACTERS = exports2.DEFAULT_CHALLENGE_CHARACTER = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_CHALLENGE_CHARACTER = isaac_typescript_definitions_1.PlayerType.ISAAC;
      exports2.CHALLENGE_CHARACTERS = {
        [isaac_typescript_definitions_1.Challenge.NULL]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.PITCH_BLACK]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.HIGH_BROW]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.HEAD_TRAUMA]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.DARKNESS_FALLS]: isaac_typescript_definitions_1.PlayerType.EVE,
        [isaac_typescript_definitions_1.Challenge.TANK]: isaac_typescript_definitions_1.PlayerType.MAGDALENE,
        [isaac_typescript_definitions_1.Challenge.SOLAR_SYSTEM]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.SUICIDE_KING]: isaac_typescript_definitions_1.PlayerType.LAZARUS,
        [isaac_typescript_definitions_1.Challenge.CAT_GOT_YOUR_TONGUE]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.DEMO_MAN]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.CURSED]: isaac_typescript_definitions_1.PlayerType.MAGDALENE,
        [isaac_typescript_definitions_1.Challenge.GLASS_CANNON]: isaac_typescript_definitions_1.PlayerType.JUDAS,
        [isaac_typescript_definitions_1.Challenge.WHEN_LIFE_GIVES_YOU_LEMONS]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.BEANS]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.ITS_IN_THE_CARDS]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.SLOW_ROLL]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.COMPUTER_SAVY]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.WAKA_WAKA]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.HOST]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.FAMILY_MAN]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.PURIST]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.XXXXXXXXL]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.SPEED]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.BLUE_BOMBER]: isaac_typescript_definitions_1.PlayerType.BLUE_BABY,
        [isaac_typescript_definitions_1.Challenge.PAY_TO_PLAY]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.HAVE_A_HEART]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.I_RULE]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.BRAINS]: isaac_typescript_definitions_1.PlayerType.BLUE_BABY,
        [isaac_typescript_definitions_1.Challenge.PRIDE_DAY]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.ONANS_STREAK]: isaac_typescript_definitions_1.PlayerType.JUDAS,
        [isaac_typescript_definitions_1.Challenge.GUARDIAN]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.BACKASSWARDS]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.APRILS_FOOL]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.POKEY_MANS]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.ULTRA_HARD]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.PONG]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.SCAT_MAN]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.BLOODY_MARY]: isaac_typescript_definitions_1.PlayerType.BETHANY,
        [isaac_typescript_definitions_1.Challenge.BAPTISM_BY_FIRE]: isaac_typescript_definitions_1.PlayerType.BETHANY,
        [isaac_typescript_definitions_1.Challenge.ISAACS_AWAKENING]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.SEEING_DOUBLE]: isaac_typescript_definitions_1.PlayerType.JACOB,
        [isaac_typescript_definitions_1.Challenge.PICA_RUN]: exports2.DEFAULT_CHALLENGE_CHARACTER,
        [isaac_typescript_definitions_1.Challenge.HOT_POTATO]: isaac_typescript_definitions_1.PlayerType.FORGOTTEN_B,
        [isaac_typescript_definitions_1.Challenge.CANTRIPPED]: isaac_typescript_definitions_1.PlayerType.CAIN_B,
        [isaac_typescript_definitions_1.Challenge.RED_REDEMPTION]: isaac_typescript_definitions_1.PlayerType.JACOB_B,
        [isaac_typescript_definitions_1.Challenge.DELETE_THIS]: exports2.DEFAULT_CHALLENGE_CHARACTER
        // 45
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/challengeCollectibleTypes.js
  var require_challengeCollectibleTypes = __commonJS({
    "node_modules/isaacscript-common/dist/objects/challengeCollectibleTypes.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHALLENGE_COLLECTIBLE_TYPES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHALLENGE_COLLECTIBLE_TYPES = {
        // 0
        [isaac_typescript_definitions_1.Challenge.NULL]: [],
        // 1
        [isaac_typescript_definitions_1.Challenge.PITCH_BLACK]: [],
        // 2
        [isaac_typescript_definitions_1.Challenge.HIGH_BROW]: [
          isaac_typescript_definitions_1.CollectibleType.NUMBER_ONE,
          isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS,
          isaac_typescript_definitions_1.CollectibleType.E_COLI,
          isaac_typescript_definitions_1.CollectibleType.FLUSH
          // 291
        ],
        // 3
        [isaac_typescript_definitions_1.Challenge.HEAD_TRAUMA]: [
          isaac_typescript_definitions_1.CollectibleType.SMALL_ROCK,
          isaac_typescript_definitions_1.CollectibleType.IRON_BAR,
          isaac_typescript_definitions_1.CollectibleType.TINY_PLANET,
          isaac_typescript_definitions_1.CollectibleType.SOY_MILK
          // 330
        ],
        // 4
        [isaac_typescript_definitions_1.Challenge.DARKNESS_FALLS]: [
          isaac_typescript_definitions_1.CollectibleType.PENTAGRAM,
          isaac_typescript_definitions_1.CollectibleType.RAZOR_BLADE,
          isaac_typescript_definitions_1.CollectibleType.SACRIFICIAL_DAGGER,
          isaac_typescript_definitions_1.CollectibleType.DARK_MATTER
          // 259
        ],
        // 5
        [isaac_typescript_definitions_1.Challenge.TANK]: [
          isaac_typescript_definitions_1.CollectibleType.BUCKET_OF_LARD,
          isaac_typescript_definitions_1.CollectibleType.INFAMY,
          isaac_typescript_definitions_1.CollectibleType.THUNDER_THIGHS
          // 314
        ],
        // 6
        [isaac_typescript_definitions_1.Challenge.SOLAR_SYSTEM]: [
          isaac_typescript_definitions_1.CollectibleType.HALO_OF_FLIES,
          isaac_typescript_definitions_1.CollectibleType.TRANSCENDENCE,
          isaac_typescript_definitions_1.CollectibleType.DISTANT_ADMIRATION,
          isaac_typescript_definitions_1.CollectibleType.FOREVER_ALONE
          // 128
        ],
        // 7
        [isaac_typescript_definitions_1.Challenge.SUICIDE_KING]: [
          isaac_typescript_definitions_1.CollectibleType.MY_REFLECTION,
          isaac_typescript_definitions_1.CollectibleType.MR_MEGA,
          isaac_typescript_definitions_1.CollectibleType.IPECAC
          // 149
        ],
        // 8
        [isaac_typescript_definitions_1.Challenge.CAT_GOT_YOUR_TONGUE]: [
          isaac_typescript_definitions_1.CollectibleType.GUPPYS_TAIL,
          isaac_typescript_definitions_1.CollectibleType.GUPPYS_HEAD,
          isaac_typescript_definitions_1.CollectibleType.GUPPYS_HAIRBALL
          // 187
        ],
        // 9
        [isaac_typescript_definitions_1.Challenge.DEMO_MAN]: [
          isaac_typescript_definitions_1.CollectibleType.DR_FETUS,
          isaac_typescript_definitions_1.CollectibleType.REMOTE_DETONATOR
          // 137
        ],
        // 10
        [isaac_typescript_definitions_1.Challenge.CURSED]: [
          isaac_typescript_definitions_1.CollectibleType.RAW_LIVER,
          isaac_typescript_definitions_1.CollectibleType.COMPASS,
          isaac_typescript_definitions_1.CollectibleType.TREASURE_MAP,
          isaac_typescript_definitions_1.CollectibleType.BLUE_MAP
          // 246
        ],
        // 11
        [isaac_typescript_definitions_1.Challenge.GLASS_CANNON]: [
          isaac_typescript_definitions_1.CollectibleType.LOKIS_HORNS,
          isaac_typescript_definitions_1.CollectibleType.EPIC_FETUS
          // 168
        ],
        // 12
        [isaac_typescript_definitions_1.Challenge.WHEN_LIFE_GIVES_YOU_LEMONS]: [
          isaac_typescript_definitions_1.CollectibleType.LEMON_MISHAP,
          isaac_typescript_definitions_1.CollectibleType.NINE_VOLT,
          isaac_typescript_definitions_1.CollectibleType.HABIT
          // 156
        ],
        // 13
        [isaac_typescript_definitions_1.Challenge.BEANS]: [
          isaac_typescript_definitions_1.CollectibleType.BEAN,
          isaac_typescript_definitions_1.CollectibleType.NINE_VOLT,
          isaac_typescript_definitions_1.CollectibleType.BLACK_BEAN,
          isaac_typescript_definitions_1.CollectibleType.PYRO,
          isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS
          // 209
        ],
        // 14
        [isaac_typescript_definitions_1.Challenge.ITS_IN_THE_CARDS]: [
          isaac_typescript_definitions_1.CollectibleType.BATTERY,
          isaac_typescript_definitions_1.CollectibleType.DECK_OF_CARDS,
          isaac_typescript_definitions_1.CollectibleType.NINE_VOLT,
          isaac_typescript_definitions_1.CollectibleType.STARTER_DECK
          // 251
        ],
        // 15
        [isaac_typescript_definitions_1.Challenge.SLOW_ROLL]: [
          isaac_typescript_definitions_1.CollectibleType.MY_REFLECTION,
          isaac_typescript_definitions_1.CollectibleType.CUPIDS_ARROW,
          isaac_typescript_definitions_1.CollectibleType.POLYPHEMUS
          // 169
        ],
        // 16
        [isaac_typescript_definitions_1.Challenge.COMPUTER_SAVY]: [
          isaac_typescript_definitions_1.CollectibleType.SPOON_BENDER,
          isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY,
          isaac_typescript_definitions_1.CollectibleType.TECHNOLOGY_2
          // 152
        ],
        // 17
        [isaac_typescript_definitions_1.Challenge.WAKA_WAKA]: [
          isaac_typescript_definitions_1.CollectibleType.ANTI_GRAVITY,
          isaac_typescript_definitions_1.CollectibleType.STRANGE_ATTRACTOR
          // 315
        ],
        // 18
        [isaac_typescript_definitions_1.Challenge.HOST]: [
          isaac_typescript_definitions_1.CollectibleType.MULLIGAN,
          isaac_typescript_definitions_1.CollectibleType.SPIDERBABY
          // 211
        ],
        // 19
        [isaac_typescript_definitions_1.Challenge.FAMILY_MAN]: [
          isaac_typescript_definitions_1.CollectibleType.BROTHER_BOBBY,
          isaac_typescript_definitions_1.CollectibleType.SISTER_MAGGY,
          isaac_typescript_definitions_1.CollectibleType.DADS_KEY,
          isaac_typescript_definitions_1.CollectibleType.BFFS,
          isaac_typescript_definitions_1.CollectibleType.ROTTEN_BABY
          // 268
        ],
        // 20
        [isaac_typescript_definitions_1.Challenge.PURIST]: [],
        // 21
        [isaac_typescript_definitions_1.Challenge.XXXXXXXXL]: [],
        // 22
        [isaac_typescript_definitions_1.Challenge.SPEED]: [],
        // 23
        [isaac_typescript_definitions_1.Challenge.BLUE_BOMBER]: [
          isaac_typescript_definitions_1.CollectibleType.BROTHER_BOBBY,
          isaac_typescript_definitions_1.CollectibleType.KAMIKAZE,
          isaac_typescript_definitions_1.CollectibleType.MR_MEGA,
          isaac_typescript_definitions_1.CollectibleType.PYROMANIAC
          // 223
        ],
        // 24
        [isaac_typescript_definitions_1.Challenge.PAY_TO_PLAY]: [
          isaac_typescript_definitions_1.CollectibleType.SACK_OF_PENNIES,
          isaac_typescript_definitions_1.CollectibleType.MONEY_EQUALS_POWER
          // 109
        ],
        // 25
        [isaac_typescript_definitions_1.Challenge.HAVE_A_HEART]: [
          isaac_typescript_definitions_1.CollectibleType.CHARM_OF_THE_VAMPIRE
          // 62
        ],
        // 26
        [isaac_typescript_definitions_1.Challenge.I_RULE]: [
          isaac_typescript_definitions_1.CollectibleType.LADDER,
          isaac_typescript_definitions_1.CollectibleType.MOMS_KNIFE,
          isaac_typescript_definitions_1.CollectibleType.TRINITY_SHIELD,
          isaac_typescript_definitions_1.CollectibleType.BOOMERANG
          // 338
        ],
        // 27
        [isaac_typescript_definitions_1.Challenge.BRAINS]: [
          isaac_typescript_definitions_1.CollectibleType.BOBS_BRAIN,
          isaac_typescript_definitions_1.CollectibleType.BOBS_BRAIN,
          isaac_typescript_definitions_1.CollectibleType.BOBS_BRAIN,
          isaac_typescript_definitions_1.CollectibleType.THUNDER_THIGHS
          // 314
        ],
        // 28
        [isaac_typescript_definitions_1.Challenge.PRIDE_DAY]: [
          isaac_typescript_definitions_1.CollectibleType.RAINBOW_BABY,
          isaac_typescript_definitions_1.CollectibleType.THREE_DOLLAR_BILL
          // 191
        ],
        // 29
        [isaac_typescript_definitions_1.Challenge.ONANS_STREAK]: [
          isaac_typescript_definitions_1.CollectibleType.CHOCOLATE_MILK
          // 69
        ],
        // 30
        [isaac_typescript_definitions_1.Challenge.GUARDIAN]: [
          isaac_typescript_definitions_1.CollectibleType.HOLY_GRAIL,
          isaac_typescript_definitions_1.CollectibleType.ISAACS_HEART,
          isaac_typescript_definitions_1.CollectibleType.PUNCHING_BAG,
          isaac_typescript_definitions_1.CollectibleType.SPEAR_OF_DESTINY
          // 400
        ],
        // 31
        [isaac_typescript_definitions_1.Challenge.BACKASSWARDS]: [],
        // 32
        [isaac_typescript_definitions_1.Challenge.APRILS_FOOL]: [],
        // 33
        [isaac_typescript_definitions_1.Challenge.POKEY_MANS]: [
          isaac_typescript_definitions_1.CollectibleType.MOMS_EYESHADOW,
          isaac_typescript_definitions_1.CollectibleType.FRIEND_BALL
          // 382
        ],
        // 34
        [isaac_typescript_definitions_1.Challenge.ULTRA_HARD]: [
          isaac_typescript_definitions_1.CollectibleType.BOOK_OF_REVELATIONS,
          isaac_typescript_definitions_1.CollectibleType.CAFFEINE_PILL
          // 340
        ],
        // 35
        [isaac_typescript_definitions_1.Challenge.PONG]: [
          isaac_typescript_definitions_1.CollectibleType.CUPIDS_ARROW,
          isaac_typescript_definitions_1.CollectibleType.RUBBER_CEMENT
          // 221
        ],
        // 36
        [isaac_typescript_definitions_1.Challenge.SCAT_MAN]: [
          isaac_typescript_definitions_1.CollectibleType.SKATOLE,
          isaac_typescript_definitions_1.CollectibleType.POOP,
          isaac_typescript_definitions_1.CollectibleType.NINE_VOLT,
          isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS,
          isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS,
          isaac_typescript_definitions_1.CollectibleType.BUTT_BOMBS,
          isaac_typescript_definitions_1.CollectibleType.E_COLI,
          isaac_typescript_definitions_1.CollectibleType.BFFS,
          isaac_typescript_definitions_1.CollectibleType.THUNDER_THIGHS,
          isaac_typescript_definitions_1.CollectibleType.DIRTY_MIND
          // 576
        ],
        // 37
        [isaac_typescript_definitions_1.Challenge.BLOODY_MARY]: [
          // Note that in "challenges.xml", it also includes "-584", which removes Book of Virtues from
          // Bethany.
          isaac_typescript_definitions_1.CollectibleType.BOOK_OF_BELIAL,
          isaac_typescript_definitions_1.CollectibleType.BLOOD_BAG,
          isaac_typescript_definitions_1.CollectibleType.ANEMIC,
          isaac_typescript_definitions_1.CollectibleType.BLOOD_OATH
          // 569
        ],
        // 38
        [isaac_typescript_definitions_1.Challenge.BAPTISM_BY_FIRE]: [
          // Note that in "challenges.xml", it also includes "-584", which removes Book of Virtues from
          // Bethany.
          isaac_typescript_definitions_1.CollectibleType.GUPPYS_PAW,
          isaac_typescript_definitions_1.CollectibleType.SCHOOLBAG,
          isaac_typescript_definitions_1.CollectibleType.URN_OF_SOULS
          // 640
        ],
        // 39
        [isaac_typescript_definitions_1.Challenge.ISAACS_AWAKENING]: [
          isaac_typescript_definitions_1.CollectibleType.TRINITY_SHIELD,
          isaac_typescript_definitions_1.CollectibleType.SPIRIT_SWORD,
          isaac_typescript_definitions_1.CollectibleType.MOMS_BRACELET
          // 604
        ],
        // 40
        [isaac_typescript_definitions_1.Challenge.SEEING_DOUBLE]: [245],
        // 41
        [isaac_typescript_definitions_1.Challenge.PICA_RUN]: [
          isaac_typescript_definitions_1.CollectibleType.MOMS_PURSE,
          isaac_typescript_definitions_1.CollectibleType.MOMS_BOX,
          isaac_typescript_definitions_1.CollectibleType.MARBLES
          // 538
        ],
        // 42
        [isaac_typescript_definitions_1.Challenge.HOT_POTATO]: [],
        // 43
        [isaac_typescript_definitions_1.Challenge.CANTRIPPED]: [],
        // 44
        [isaac_typescript_definitions_1.Challenge.RED_REDEMPTION]: [
          isaac_typescript_definitions_1.CollectibleType.DADS_KEY
          // 175
        ],
        // 45
        [isaac_typescript_definitions_1.Challenge.DELETE_THIS]: [isaac_typescript_definitions_1.CollectibleType.TMTRAINER]
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/challengeNames.js
  var require_challengeNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/challengeNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHALLENGE_NAMES = exports2.DEFAULT_CHALLENGE_NAME = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.DEFAULT_CHALLENGE_NAME = "Unknown";
      exports2.CHALLENGE_NAMES = {
        [isaac_typescript_definitions_1.Challenge.NULL]: exports2.DEFAULT_CHALLENGE_NAME,
        [isaac_typescript_definitions_1.Challenge.PITCH_BLACK]: "Pitch Black",
        [isaac_typescript_definitions_1.Challenge.HIGH_BROW]: "High Brow",
        [isaac_typescript_definitions_1.Challenge.HEAD_TRAUMA]: "Head Trauma",
        [isaac_typescript_definitions_1.Challenge.DARKNESS_FALLS]: "Darkness Falls",
        [isaac_typescript_definitions_1.Challenge.TANK]: "The Tank",
        [isaac_typescript_definitions_1.Challenge.SOLAR_SYSTEM]: "Solar System",
        [isaac_typescript_definitions_1.Challenge.SUICIDE_KING]: "Suicide King",
        [isaac_typescript_definitions_1.Challenge.CAT_GOT_YOUR_TONGUE]: "Cat Got Your Tongue",
        [isaac_typescript_definitions_1.Challenge.DEMO_MAN]: "Demo Man",
        [isaac_typescript_definitions_1.Challenge.CURSED]: "Cursed!",
        [isaac_typescript_definitions_1.Challenge.GLASS_CANNON]: "Glass Cannon",
        [isaac_typescript_definitions_1.Challenge.WHEN_LIFE_GIVES_YOU_LEMONS]: "When Life Gives You Lemons",
        [isaac_typescript_definitions_1.Challenge.BEANS]: "Beans!",
        [isaac_typescript_definitions_1.Challenge.ITS_IN_THE_CARDS]: "It's In The Cards",
        [isaac_typescript_definitions_1.Challenge.SLOW_ROLL]: "Slow Roll",
        [isaac_typescript_definitions_1.Challenge.COMPUTER_SAVY]: "Computer Savvy",
        [isaac_typescript_definitions_1.Challenge.WAKA_WAKA]: "Waka Waka",
        [isaac_typescript_definitions_1.Challenge.HOST]: "The Host",
        [isaac_typescript_definitions_1.Challenge.FAMILY_MAN]: "The Family Man",
        [isaac_typescript_definitions_1.Challenge.PURIST]: "Purist",
        [isaac_typescript_definitions_1.Challenge.XXXXXXXXL]: "XXXXXXXXL",
        [isaac_typescript_definitions_1.Challenge.SPEED]: "SPEED!",
        [isaac_typescript_definitions_1.Challenge.BLUE_BOMBER]: "Blue Bomber",
        [isaac_typescript_definitions_1.Challenge.PAY_TO_PLAY]: "PAY TO PLAY",
        [isaac_typescript_definitions_1.Challenge.HAVE_A_HEART]: "Have a Heart",
        [isaac_typescript_definitions_1.Challenge.I_RULE]: "I RULE!",
        [isaac_typescript_definitions_1.Challenge.BRAINS]: "BRAINS!",
        [isaac_typescript_definitions_1.Challenge.PRIDE_DAY]: "PRIDE DAY!",
        [isaac_typescript_definitions_1.Challenge.ONANS_STREAK]: "Onan's Streak",
        [isaac_typescript_definitions_1.Challenge.GUARDIAN]: "The Guardian",
        [isaac_typescript_definitions_1.Challenge.BACKASSWARDS]: "Backasswards",
        [isaac_typescript_definitions_1.Challenge.APRILS_FOOL]: "Aprils Fool",
        [isaac_typescript_definitions_1.Challenge.POKEY_MANS]: "Pokey Mans",
        [isaac_typescript_definitions_1.Challenge.ULTRA_HARD]: "Ultra Hard",
        [isaac_typescript_definitions_1.Challenge.PONG]: "Pong",
        [isaac_typescript_definitions_1.Challenge.SCAT_MAN]: "Scat Man",
        [isaac_typescript_definitions_1.Challenge.BLOODY_MARY]: "Bloody Mary",
        [isaac_typescript_definitions_1.Challenge.BAPTISM_BY_FIRE]: "Baptism By Fire",
        [isaac_typescript_definitions_1.Challenge.ISAACS_AWAKENING]: "Isaac's Awakening",
        [isaac_typescript_definitions_1.Challenge.SEEING_DOUBLE]: "Seeing Double",
        [isaac_typescript_definitions_1.Challenge.PICA_RUN]: "Pica Run",
        [isaac_typescript_definitions_1.Challenge.HOT_POTATO]: "Hot Potato",
        [isaac_typescript_definitions_1.Challenge.CANTRIPPED]: "Cantripped!",
        [isaac_typescript_definitions_1.Challenge.RED_REDEMPTION]: "Red Redemption",
        [isaac_typescript_definitions_1.Challenge.DELETE_THIS]: "DELETE THIS"
        // 45
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/challengeTrinketType.js
  var require_challengeTrinketType = __commonJS({
    "node_modules/isaacscript-common/dist/objects/challengeTrinketType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.CHALLENGE_TRINKET_TYPE = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.CHALLENGE_TRINKET_TYPE = {
        [isaac_typescript_definitions_1.Challenge.NULL]: void 0,
        [isaac_typescript_definitions_1.Challenge.PITCH_BLACK]: void 0,
        [isaac_typescript_definitions_1.Challenge.HIGH_BROW]: isaac_typescript_definitions_1.TrinketType.PETRIFIED_POOP,
        [isaac_typescript_definitions_1.Challenge.HEAD_TRAUMA]: void 0,
        [isaac_typescript_definitions_1.Challenge.DARKNESS_FALLS]: void 0,
        [isaac_typescript_definitions_1.Challenge.TANK]: void 0,
        [isaac_typescript_definitions_1.Challenge.SOLAR_SYSTEM]: void 0,
        [isaac_typescript_definitions_1.Challenge.SUICIDE_KING]: void 0,
        [isaac_typescript_definitions_1.Challenge.CAT_GOT_YOUR_TONGUE]: void 0,
        [isaac_typescript_definitions_1.Challenge.DEMO_MAN]: isaac_typescript_definitions_1.TrinketType.MATCH_STICK,
        [isaac_typescript_definitions_1.Challenge.CURSED]: isaac_typescript_definitions_1.TrinketType.CHILDS_HEART,
        [isaac_typescript_definitions_1.Challenge.GLASS_CANNON]: void 0,
        [isaac_typescript_definitions_1.Challenge.WHEN_LIFE_GIVES_YOU_LEMONS]: void 0,
        [isaac_typescript_definitions_1.Challenge.BEANS]: void 0,
        [isaac_typescript_definitions_1.Challenge.ITS_IN_THE_CARDS]: void 0,
        [isaac_typescript_definitions_1.Challenge.SLOW_ROLL]: void 0,
        [isaac_typescript_definitions_1.Challenge.COMPUTER_SAVY]: void 0,
        [isaac_typescript_definitions_1.Challenge.WAKA_WAKA]: void 0,
        [isaac_typescript_definitions_1.Challenge.HOST]: isaac_typescript_definitions_1.TrinketType.TICK,
        [isaac_typescript_definitions_1.Challenge.FAMILY_MAN]: void 0,
        [isaac_typescript_definitions_1.Challenge.PURIST]: void 0,
        [isaac_typescript_definitions_1.Challenge.XXXXXXXXL]: void 0,
        [isaac_typescript_definitions_1.Challenge.SPEED]: void 0,
        [isaac_typescript_definitions_1.Challenge.BLUE_BOMBER]: void 0,
        [isaac_typescript_definitions_1.Challenge.PAY_TO_PLAY]: void 0,
        [isaac_typescript_definitions_1.Challenge.HAVE_A_HEART]: void 0,
        [isaac_typescript_definitions_1.Challenge.I_RULE]: void 0,
        [isaac_typescript_definitions_1.Challenge.BRAINS]: void 0,
        [isaac_typescript_definitions_1.Challenge.PRIDE_DAY]: isaac_typescript_definitions_1.TrinketType.RAINBOW_WORM,
        [isaac_typescript_definitions_1.Challenge.ONANS_STREAK]: void 0,
        [isaac_typescript_definitions_1.Challenge.GUARDIAN]: void 0,
        [isaac_typescript_definitions_1.Challenge.BACKASSWARDS]: void 0,
        [isaac_typescript_definitions_1.Challenge.APRILS_FOOL]: void 0,
        [isaac_typescript_definitions_1.Challenge.POKEY_MANS]: void 0,
        [isaac_typescript_definitions_1.Challenge.ULTRA_HARD]: void 0,
        [isaac_typescript_definitions_1.Challenge.PONG]: void 0,
        [isaac_typescript_definitions_1.Challenge.SCAT_MAN]: isaac_typescript_definitions_1.TrinketType.MYSTERIOUS_CANDY,
        [isaac_typescript_definitions_1.Challenge.BLOODY_MARY]: isaac_typescript_definitions_1.TrinketType.CHILDS_HEART,
        [isaac_typescript_definitions_1.Challenge.BAPTISM_BY_FIRE]: isaac_typescript_definitions_1.TrinketType.MAGGYS_FAITH,
        [isaac_typescript_definitions_1.Challenge.ISAACS_AWAKENING]: void 0,
        [isaac_typescript_definitions_1.Challenge.SEEING_DOUBLE]: void 0,
        [isaac_typescript_definitions_1.Challenge.PICA_RUN]: void 0,
        [isaac_typescript_definitions_1.Challenge.HOT_POTATO]: void 0,
        [isaac_typescript_definitions_1.Challenge.CANTRIPPED]: void 0,
        [isaac_typescript_definitions_1.Challenge.RED_REDEMPTION]: void 0,
        [isaac_typescript_definitions_1.Challenge.DELETE_THIS]: void 0
        // 45
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/challenges.js
  var require_challenges = __commonJS({
    "node_modules/isaacscript-common/dist/functions/challenges.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setChallenge = exports2.onChallenge = exports2.onAnyChallenge = exports2.getChallengeTrinketType = exports2.getChallengeName = exports2.getChallengeCollectibleTypes = exports2.getChallengeCharacter = exports2.getChallengeBoss = exports2.clearChallenge = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var challengeBosses_1 = require_challengeBosses();
      var challengeCharacters_1 = require_challengeCharacters();
      var challengeCollectibleTypes_1 = require_challengeCollectibleTypes();
      var challengeNames_1 = require_challengeNames();
      var challengeTrinketType_1 = require_challengeTrinketType();
      var log_1 = require_log();
      function clearChallenge() {
        if (onAnyChallenge()) {
          const command = `challenge ${isaac_typescript_definitions_1.Challenge.NULL}`;
          (0, log_1.log)(`Restarting the run to clear the current challenge with a console command of: ${command}`);
          Isaac.ExecuteCommand(command);
        }
      }
      exports2.clearChallenge = clearChallenge;
      function getChallengeBoss(challenge) {
        const challengeBossID = challengeBosses_1.CHALLENGE_BOSSES[challenge];
        return challengeBossID ?? challengeBosses_1.DEFAULT_CHALLENGE_BOSS_ID;
      }
      exports2.getChallengeBoss = getChallengeBoss;
      function getChallengeCharacter(challenge) {
        const challengeCharacter = challengeCharacters_1.CHALLENGE_CHARACTERS[challenge];
        return challengeCharacter ?? challengeCharacters_1.DEFAULT_CHALLENGE_CHARACTER;
      }
      exports2.getChallengeCharacter = getChallengeCharacter;
      function getChallengeCollectibleTypes(challenge) {
        return challengeCollectibleTypes_1.CHALLENGE_COLLECTIBLE_TYPES[challenge];
      }
      exports2.getChallengeCollectibleTypes = getChallengeCollectibleTypes;
      function getChallengeName2(challenge) {
        const challengeName = challengeNames_1.CHALLENGE_NAMES[challenge];
        return challengeName ?? challengeNames_1.DEFAULT_CHALLENGE_NAME;
      }
      exports2.getChallengeName = getChallengeName2;
      function getChallengeTrinketType(challenge) {
        return challengeTrinketType_1.CHALLENGE_TRINKET_TYPE[challenge];
      }
      exports2.getChallengeTrinketType = getChallengeTrinketType;
      function onAnyChallenge() {
        const challenge = Isaac.GetChallenge();
        return challenge !== isaac_typescript_definitions_1.Challenge.NULL;
      }
      exports2.onAnyChallenge = onAnyChallenge;
      function onChallenge(...challenges) {
        const challenge = Isaac.GetChallenge();
        return challenges.includes(challenge);
      }
      exports2.onChallenge = onChallenge;
      function setChallenge(challenge) {
        if (!onChallenge(challenge)) {
          const command = `challenge ${challenge}`;
          (0, log_1.log)(`Restarting the run to set a challenge with a console command of: ${command}`);
          Isaac.ExecuteCommand(command);
        }
      }
      exports2.setChallenge = setChallenge;
    }
  });

  // node_modules/isaacscript-common/dist/functions/chargeBar.js
  var require_chargeBar = __commonJS({
    "node_modules/isaacscript-common/dist/functions/chargeBar.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.renderChargeBar = exports2.newChargeBarSprites = void 0;
      var CHARGE_BAR_ANM2 = "gfx/ui/ui_chargebar.anm2";
      function newChargeBarSprites(maxCharges) {
        const back = Sprite();
        back.Load(CHARGE_BAR_ANM2, true);
        back.Play("BarEmpty", true);
        const meter = Sprite();
        meter.Load(CHARGE_BAR_ANM2, true);
        meter.Play("BarFull", true);
        const meterBattery = Sprite();
        meterBattery.Load(CHARGE_BAR_ANM2, true);
        meterBattery.Play("BarFull", true);
        const lines = Sprite();
        lines.Load(CHARGE_BAR_ANM2, true);
        lines.Play(`BarOverlay${maxCharges}`, true);
        return {
          back,
          meter,
          meterBattery,
          lines,
          maxCharges
        };
      }
      exports2.newChargeBarSprites = newChargeBarSprites;
      function renderChargeBar(sprites, position, normalCharges, batteryCharges) {
        sprites.back.Render(position);
        const normalChargesClamp = getChargeBarClamp(normalCharges, sprites.maxCharges);
        sprites.meter.Render(position, normalChargesClamp);
        const batteryChargesClamp = getChargeBarClamp(batteryCharges, sprites.maxCharges);
        sprites.meterBattery.Render(position, batteryChargesClamp);
        sprites.lines.Render(position);
      }
      exports2.renderChargeBar = renderChargeBar;
      function getChargeBarClamp(charges, maxCharges) {
        const meterMultiplier = 24 / maxCharges;
        const meterClip = 26 - charges * meterMultiplier;
        return Vector(0, meterClip);
      }
    }
  });

  // node_modules/isaacscript-common/dist/functions/decorators.js
  var require_decorators2 = __commonJS({
    "node_modules/isaacscript-common/dist/functions/decorators.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.PriorityCallbackCustom = exports2.PriorityCallback = exports2.CallbackCustom = exports2.Callback = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ModFeature_1 = require_ModFeature();
      var tstlClass_1 = require_tstlClass();
      function Callback(modCallback, ...optionalArgs) {
        return PriorityCallback(modCallback, isaac_typescript_definitions_1.CallbackPriority.DEFAULT, ...optionalArgs);
      }
      exports2.Callback = Callback;
      function CallbackCustom(modCallbackCustom, ...optionalArgs) {
        return PriorityCallbackCustom(modCallbackCustom, isaac_typescript_definitions_1.CallbackPriority.DEFAULT, ...optionalArgs);
      }
      exports2.CallbackCustom = CallbackCustom;
      function PriorityCallback(modCallback, priority, ...optionalArgs) {
        return (target, propertyKey, _descriptor) => {
          const methodName = propertyKey;
          const method = target[methodName];
          const callbackTuple = [modCallback, priority, method, optionalArgs];
          const constructor = target.constructor;
          if (constructor === void 0) {
            const tstlClassName = (0, tstlClass_1.getTSTLClassName)(target) ?? "Unknown";
            error(`Failed to get the constructor for class "${tstlClassName}". Did you decorate a static method? You can only decorate non-static class methods, because the "Mod" object is not present before the class is instantiated.`);
          }
          const key = ModFeature_1.MOD_FEATURE_CALLBACKS_KEY;
          let callbackTuples = constructor[key];
          if (callbackTuples === void 0) {
            callbackTuples = [];
            constructor[key] = callbackTuples;
          }
          callbackTuples.push(callbackTuple);
        };
      }
      exports2.PriorityCallback = PriorityCallback;
      function PriorityCallbackCustom(modCallbackCustom, priority, ...optionalArgs) {
        return (target, propertyKey, _descriptor) => {
          const methodName = propertyKey;
          const method = target[methodName];
          const callbackTuple = [modCallbackCustom, priority, method, optionalArgs];
          const constructor = target.constructor;
          if (constructor === void 0) {
            const tstlClassName = (0, tstlClass_1.getTSTLClassName)(target) ?? "Unknown";
            error(`Failed to get the constructor for class "${tstlClassName}". Did you decorate a static method? You can only decorate non-static class methods, because the "Mod" object is not present before the class is instantiated.`);
          }
          const key = ModFeature_1.MOD_FEATURE_CUSTOM_CALLBACKS_KEY;
          let callbackTuples = constructor[key];
          if (callbackTuples === void 0) {
            callbackTuples = [];
            constructor[key] = callbackTuples;
          }
          callbackTuples.push(callbackTuple);
        };
      }
      exports2.PriorityCallbackCustom = PriorityCallbackCustom;
    }
  });

  // node_modules/isaacscript-common/dist/functions/globals.js
  var require_globals = __commonJS({
    "node_modules/isaacscript-common/dist/functions/globals.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports2 && exports2.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setTracebackFunctionsGlobal = exports2.setLogFunctionsGlobal = exports2.logNewGlobals = exports2.getNewGlobals = exports2.getDefaultGlobals = void 0;
      var ReadonlySet_1 = require_ReadonlySet();
      var debugFunctions_1 = require_debugFunctions();
      var logExports = __importStar(require_log());
      var log_1 = require_log();
      var logEntitiesExports = __importStar(require_logEntities());
      var logMiscExports = __importStar(require_logMisc());
      var set_1 = require_set();
      var sort_1 = require_sort();
      var DEFAULT_GLOBALS = new ReadonlySet_1.ReadonlySet([
        "ActionTriggers",
        "ActiveSlot",
        "BabySubType",
        "BackdropType",
        "BatterySubType",
        "BedSubType",
        "BitSet128",
        "BombSubType",
        "BombVariant",
        "ButtonAction",
        "CacheFlag",
        "Card",
        "Challenge",
        "ChampionColor",
        "ChestSubType",
        "CoinSubType",
        "CollectibleType",
        "Color",
        "CppContainer",
        "DamageFlag",
        "Difficulty",
        "Direction",
        "DoorSlot",
        "DoorState",
        "DoorVariant",
        "EffectVariant",
        "Entity",
        "EntityBomb",
        "EntityCollisionClass",
        "EntityEffect",
        "EntityFamiliar",
        "EntityFlag",
        "EntityGridCollisionClass",
        "EntityKnife",
        "EntityLaser",
        "EntityNPC",
        "EntityPartition",
        "EntityPickup",
        "EntityPlayer",
        "EntityProjectile",
        "EntityPtr",
        "EntityRef",
        "EntityTear",
        "EntityType",
        "FamiliarVariant",
        "Font",
        "Game",
        "GameStateFlag",
        "GetPtrHash",
        "GridCollisionClass",
        "GridEntity",
        "GridEntityDesc",
        "GridEntityDoor",
        "GridEntityPit",
        "GridEntityPoop",
        "GridEntityPressurePlate",
        "GridEntityRock",
        "GridEntitySpikes",
        "GridEntityTNT",
        "GridEntityType",
        "GridRooms",
        "HUD",
        "HeartSubType",
        "Input",
        "InputHook",
        "Isaac",
        "ItemConfig",
        "ItemPool",
        "ItemPoolType",
        "ItemType",
        "KColor",
        "KeySubType",
        "Keyboard",
        "LaserOffset",
        "LaserSubType",
        "Level",
        "LevelCurse",
        "LevelStage",
        "LevelStateFlag",
        "LocustSubtypes",
        "ModCallbacks",
        "Mouse",
        "Music",
        "MusicManager",
        "NpcState",
        "NullItemID",
        "Options",
        "PathFinder",
        "PickupPrice",
        "PickupVariant",
        "PillColor",
        "PillEffect",
        "PlayerForm",
        "PlayerSpriteLayer",
        "PlayerType",
        "PlayerTypes",
        "PoopPickupSubType",
        "PoopSpellType",
        "ProjectileFlags",
        "ProjectileParams",
        "ProjectileVariant",
        "QueueItemData",
        "REPENTANCE",
        "RNG",
        "Random",
        "RandomVector",
        "RegisterMod",
        "RenderMode",
        "Room",
        "RoomConfig",
        "RoomDescriptor",
        "RoomShape",
        "RoomTransitionAnim",
        "RoomType",
        "SFXManager",
        "SackSubType",
        "SeedEffect",
        "Seeds",
        "SkinColor",
        "SortingLayer",
        "SoundEffect",
        "Sprite",
        "StageType",
        "StartDebug",
        "TearFlags",
        "TearParams",
        "TearVariant",
        "TemporaryEffect",
        "TemporaryEffects",
        "TrinketType",
        "UseFlag",
        "Vector",
        "WeaponType",
        "_G",
        "_VERSION",
        "assert",
        "collectgarbage",
        "coroutine",
        "error",
        "getmetatable",
        "include",
        "ipairs",
        "load",
        "math",
        "next",
        "pairs",
        "pcall",
        "print",
        "rawequal",
        "rawget",
        "rawlen",
        "rawset",
        "require",
        "select",
        "setmetatable",
        "string",
        "table",
        "tonumber",
        "tostring",
        "type",
        "utf8",
        "xpcall"
      ]);
      var LUA_DEBUG_ADDED_GLOBALS = new ReadonlySet_1.ReadonlySet([
        "debug",
        "dofile",
        "loadfile",
        "io",
        "os",
        "package"
      ]);
      var RACING_PLUS_SANDBOX_ADDED_GLOBALS = new ReadonlySet_1.ReadonlySet([
        "sandboxTraceback",
        "sandboxGetTraceback",
        "getParentFunctionDescription"
      ]);
      function getDefaultGlobals() {
        const defaultGlobals = (0, set_1.copySet)(DEFAULT_GLOBALS);
        if ((0, debugFunctions_1.isLuaDebugEnabled)()) {
          (0, set_1.addSetsToSet)(defaultGlobals, LUA_DEBUG_ADDED_GLOBALS);
        }
        if (isRacingPlusSandboxEnabled()) {
          (0, set_1.addSetsToSet)(defaultGlobals, RACING_PLUS_SANDBOX_ADDED_GLOBALS);
        }
        return defaultGlobals;
      }
      exports2.getDefaultGlobals = getDefaultGlobals;
      function isRacingPlusSandboxEnabled() {
        return SandboxGetParentFunctionDescription !== void 0;
      }
      function getNewGlobals() {
        const defaultGlobals = getDefaultGlobals();
        const newGlobals = [];
        for (const [key, value] of pairs(_G)) {
          if (!defaultGlobals.has(key)) {
            const keyValueTuple = [key, value];
            newGlobals.push(keyValueTuple);
          }
        }
        newGlobals.sort(sort_1.sortTwoDimensionalArray);
        return newGlobals;
      }
      exports2.getNewGlobals = getNewGlobals;
      function logNewGlobals() {
        const newGlobals = getNewGlobals();
        (0, log_1.log)("List of added global variables in the Isaac environment:");
        if (newGlobals.length === 0) {
          (0, log_1.log)("- n/a (no extra global variables found)");
        } else {
          for (const [i, tuple] of newGlobals.entries()) {
            const [key, value] = tuple;
            (0, log_1.log)(`${i + 1}) ${key} - ${value}`);
          }
        }
      }
      exports2.logNewGlobals = logNewGlobals;
      function setLogFunctionsGlobal() {
        const globals = _G;
        for (const exports3 of [logExports, logMiscExports, logEntitiesExports]) {
          for (const [logFuncName, logFunc] of Object.entries(exports3)) {
            globals[logFuncName] = logFunc;
          }
        }
      }
      exports2.setLogFunctionsGlobal = setLogFunctionsGlobal;
      function setTracebackFunctionsGlobal() {
        const globals = _G;
        globals["getTraceback"] = debugFunctions_1.getTraceback;
        globals["traceback"] = debugFunctions_1.traceback;
      }
      exports2.setTracebackFunctionsGlobal = setTracebackFunctionsGlobal;
    }
  });

  // node_modules/isaacscript-common/dist/functions/hash.js
  var require_hash = __commonJS({
    "node_modules/isaacscript-common/dist/functions/hash.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.crc32 = void 0;
      var CRC32 = [
        0,
        1996959894,
        3993919788,
        2567524794,
        124634137,
        1886057615,
        3915621685,
        2657392035,
        249268274,
        2044508324,
        3772115230,
        2547177864,
        162941995,
        2125561021,
        3887607047,
        2428444049,
        498536548,
        1789927666,
        4089016648,
        2227061214,
        450548861,
        1843258603,
        4107580753,
        2211677639,
        325883990,
        1684777152,
        4251122042,
        2321926636,
        335633487,
        1661365465,
        4195302755,
        2366115317,
        997073096,
        1281953886,
        3579855332,
        2724688242,
        1006888145,
        1258607687,
        3524101629,
        2768942443,
        901097722,
        1119000684,
        3686517206,
        2898065728,
        853044451,
        1172266101,
        3705015759,
        2882616665,
        651767980,
        1373503546,
        3369554304,
        3218104598,
        565507253,
        1454621731,
        3485111705,
        3099436303,
        671266974,
        1594198024,
        3322730930,
        2970347812,
        795835527,
        1483230225,
        3244367275,
        3060149565,
        1994146192,
        31158534,
        2563907772,
        4023717930,
        1907459465,
        112637215,
        2680153253,
        3904427059,
        2013776290,
        251722036,
        2517215374,
        3775830040,
        2137656763,
        141376813,
        2439277719,
        3865271297,
        1802195444,
        476864866,
        2238001368,
        4066508878,
        1812370925,
        453092731,
        2181625025,
        4111451223,
        1706088902,
        314042704,
        2344532202,
        4240017532,
        1658658271,
        366619977,
        2362670323,
        4224994405,
        1303535960,
        984961486,
        2747007092,
        3569037538,
        1256170817,
        1037604311,
        2765210733,
        3554079995,
        1131014506,
        879679996,
        2909243462,
        3663771856,
        1141124467,
        855842277,
        2852801631,
        3708648649,
        1342533948,
        654459306,
        3188396048,
        3373015174,
        1466479909,
        544179635,
        3110523913,
        3462522015,
        1591671054,
        702138776,
        2966460450,
        3352799412,
        1504918807,
        783551873,
        3082640443,
        3233442989,
        3988292384,
        2596254646,
        62317068,
        1957810842,
        3939845945,
        2647816111,
        81470997,
        1943803523,
        3814918930,
        2489596804,
        225274430,
        2053790376,
        3826175755,
        2466906013,
        167816743,
        2097651377,
        4027552580,
        2265490386,
        503444072,
        1762050814,
        4150417245,
        2154129355,
        426522225,
        1852507879,
        4275313526,
        2312317920,
        282753626,
        1742555852,
        4189708143,
        2394877945,
        397917763,
        1622183637,
        3604390888,
        2714866558,
        953729732,
        1340076626,
        3518719985,
        2797360999,
        1068828381,
        1219638859,
        3624741850,
        2936675148,
        906185462,
        1090812512,
        3747672003,
        2825379669,
        829329135,
        1181335161,
        3412177804,
        3160834842,
        628085408,
        1382605366,
        3423369109,
        3138078467,
        570562233,
        1426400815,
        3317316542,
        2998733608,
        733239954,
        1555261956,
        3268935591,
        3050360625,
        752459403,
        1541320221,
        2607071920,
        3965973030,
        1969922972,
        40735498,
        2617837225,
        3943577151,
        1913087877,
        83908371,
        2512341634,
        3803740692,
        2075208622,
        213261112,
        2463272603,
        3855990285,
        2094854071,
        198958881,
        2262029012,
        4057260610,
        1759359992,
        534414190,
        2176718541,
        4139329115,
        1873836001,
        414664567,
        2282248934,
        4279200368,
        1711684554,
        285281116,
        2405801727,
        4167216745,
        1634467795,
        376229701,
        2685067896,
        3608007406,
        1308918612,
        956543938,
        2808555105,
        3495958263,
        1231636301,
        1047427035,
        2932959818,
        3654703836,
        1088359270,
        936918e3,
        2847714899,
        3736837829,
        1202900863,
        817233897,
        3183342108,
        3401237130,
        1404277552,
        615818150,
        3134207493,
        3453421203,
        1423857449,
        601450431,
        3009837614,
        3294710456,
        1567103746,
        711928724,
        3020668471,
        3272380065,
        1510334235,
        755167117
      ];
      function crc32(str) {
        let count = str.length;
        let crc = 4294967295;
        let i = 1;
        while (count > 0) {
          const byte = string.byte(str, i);
          const left = crc >>> 8;
          const crcIndex = (crc & 255 ^ byte) + 1;
          const right = CRC32[crcIndex] ?? 0;
          crc = left ^ right;
          i++;
          count--;
        }
        crc ^= 4294967295;
        return crc;
      }
      exports2.crc32 = crc32;
    }
  });

  // node_modules/isaacscript-common/dist/functions/hex.js
  var require_hex = __commonJS({
    "node_modules/isaacscript-common/dist/functions/hex.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.hexToKColor = exports2.hexToColor = void 0;
      var log_1 = require_log();
      var HEX_STRING_LENGTH = 6;
      function hexToColor(hexString, alpha = 1) {
        const { r, g: g2, b: b2 } = hexToRGB(hexString);
        const base = 255;
        return Color(r / base, g2 / base, b2 / base, alpha);
      }
      exports2.hexToColor = hexToColor;
      function hexToKColor(hexString, alpha = 1) {
        const { r, g: g2, b: b2 } = hexToRGB(hexString);
        const base = 255;
        return KColor(r / base, g2 / base, b2 / base, alpha);
      }
      exports2.hexToKColor = hexToKColor;
      function hexToRGB(hexString) {
        hexString = hexString.replace("#", "");
        if (hexString.length !== HEX_STRING_LENGTH) {
          (0, log_1.logError)(`Hex strings must be of length: ${HEX_STRING_LENGTH}`);
          return { r: 0, g: 0, b: 0 };
        }
        const rString = hexString.slice(0, 2);
        const r = tonumber(`0x${rString}`);
        if (r === void 0) {
          (0, log_1.logError)(`Failed to convert \`0x${rString}\` to a number.`);
          return { r: 0, g: 0, b: 0 };
        }
        const gString = hexString.slice(2, 4);
        const g2 = tonumber(`0x${gString}`);
        if (g2 === void 0) {
          (0, log_1.logError)(`Failed to convert \`0x${gString}\` to a number.`);
          return { r: 0, g: 0, b: 0 };
        }
        const bString = hexString.slice(4, 6);
        const b2 = tonumber(`0x${bString}`);
        if (b2 === void 0) {
          (0, log_1.logError)(`Failed to convert \`0x${bString}\` to a number.`);
          return { r: 0, g: 0, b: 0 };
        }
        return { r, g: g2, b: b2 };
      }
    }
  });

  // node_modules/isaacscript-common/dist/objects/languageNames.js
  var require_languageNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/languageNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.LANGUAGE_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.LANGUAGE_NAMES = {
        [isaac_typescript_definitions_1.LanguageAbbreviation.ENGLISH]: "English",
        [isaac_typescript_definitions_1.LanguageAbbreviation.JAPANESE]: "Japanese",
        [isaac_typescript_definitions_1.LanguageAbbreviation.KOREAN]: "Korean",
        [isaac_typescript_definitions_1.LanguageAbbreviation.CHINESE_SIMPLE]: "Chinese (Simple)",
        [isaac_typescript_definitions_1.LanguageAbbreviation.RUSSIAN]: "Russian",
        [isaac_typescript_definitions_1.LanguageAbbreviation.GERMAN]: "German",
        [isaac_typescript_definitions_1.LanguageAbbreviation.SPANISH]: "Spanish"
        // "es"
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/language.js
  var require_language = __commonJS({
    "node_modules/isaacscript-common/dist/functions/language.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.getLanguageName = void 0;
      var languageNames_1 = require_languageNames();
      function getLanguageName() {
        const languageAbbreviation = Options.Language;
        return languageNames_1.LANGUAGE_NAMES[languageAbbreviation];
      }
      exports2.getLanguageName = getLanguageName;
    }
  });

  // node_modules/isaacscript-common/dist/functions/level.js
  var require_level = __commonJS({
    "node_modules/isaacscript-common/dist/functions/level.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.levelHasRoomType = exports2.levelHasBossID = exports2.getLevelBossIDs = exports2.fillLevelWithRedRooms = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var array_1 = require_array();
      var levelGrid_1 = require_levelGrid();
      var rooms_1 = require_rooms();
      function fillLevelWithRedRooms() {
        const level = cachedClasses_1.game.GetLevel();
        let numRoomsInGrid;
        do {
          const roomsInGrid = (0, rooms_1.getRoomsInsideGrid)();
          numRoomsInGrid = roomsInGrid.length;
          for (const roomDescriptor of roomsInGrid) {
            for (const doorSlot of cachedEnumValues_1.DOOR_SLOT_VALUES) {
              if ((0, levelGrid_1.isDoorSlotValidAtGridIndexForRedRoom)(doorSlot, roomDescriptor.GridIndex)) {
                level.MakeRedRoomDoor(roomDescriptor.GridIndex, doorSlot);
              }
            }
          }
        } while (numRoomsInGrid !== (0, rooms_1.getNumRooms)());
      }
      exports2.fillLevelWithRedRooms = fillLevelWithRedRooms;
      function getLevelBossIDs() {
        const roomsInsideGrid = (0, rooms_1.getRoomsInsideGrid)();
        return (0, array_1.filterMap)(roomsInsideGrid, (roomDescriptor) => roomDescriptor.Data !== void 0 && roomDescriptor.Data.Type === isaac_typescript_definitions_1.RoomType.BOSS && roomDescriptor.Data.StageID === isaac_typescript_definitions_1.StageID.SPECIAL_ROOMS ? roomDescriptor.Data.Subtype : void 0);
      }
      exports2.getLevelBossIDs = getLevelBossIDs;
      function levelHasBossID(...bossIDs) {
        const levelBossIDs = getLevelBossIDs();
        const levelBossIDsSet = new Set(levelBossIDs);
        return bossIDs.some((bossID) => levelBossIDsSet.has(bossID));
      }
      exports2.levelHasBossID = levelHasBossID;
      function levelHasRoomType(...roomTypes) {
        const roomDescriptors = (0, levelGrid_1.getRoomDescriptorsForType)(...roomTypes);
        return roomDescriptors.length > 0;
      }
      exports2.levelHasRoomType = levelHasRoomType;
    }
  });

  // node_modules/isaacscript-common/dist/functions/minimap.js
  var require_minimap = __commonJS({
    "node_modules/isaacscript-common/dist/functions/minimap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setRoomDisplayFlags = exports2.setFloorDisplayFlags = exports2.setAllDisplayFlags = exports2.isRoomVisible = exports2.hideRoomOnMinimap = exports2.getRoomDisplayFlags = exports2.getFloorDisplayFlags = exports2.clearRoomDisplayFlags = exports2.clearFloorDisplayFlags = exports2.addRoomDisplayFlag = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var flag_1 = require_flag();
      var roomData_1 = require_roomData();
      var rooms_1 = require_rooms();
      var types_1 = require_types();
      var utils_1 = require_utils();
      function addRoomDisplayFlag(roomGridIndex, displayFlag, updateVisibility = true) {
        const oldDisplayFlags = getRoomDisplayFlags(roomGridIndex);
        const newDisplayFlags = (0, flag_1.addFlag)(oldDisplayFlags, displayFlag);
        setRoomDisplayFlags(roomGridIndex, newDisplayFlags, updateVisibility);
      }
      exports2.addRoomDisplayFlag = addRoomDisplayFlag;
      function clearFloorDisplayFlags() {
        setAllDisplayFlags(isaac_typescript_definitions_1.DisplayFlagZero);
      }
      exports2.clearFloorDisplayFlags = clearFloorDisplayFlags;
      function clearRoomDisplayFlags(roomGridIndex) {
        setRoomDisplayFlags(roomGridIndex, isaac_typescript_definitions_1.DisplayFlagZero);
      }
      exports2.clearRoomDisplayFlags = clearRoomDisplayFlags;
      function getFloorDisplayFlags(minimapAPI = true) {
        const displayFlagsMap = /* @__PURE__ */ new Map();
        for (const roomDescriptor of (0, rooms_1.getRoomsInsideGrid)()) {
          const roomGridIndex = roomDescriptor.SafeGridIndex;
          const displayFlags = getRoomDisplayFlags(roomGridIndex, minimapAPI);
          displayFlagsMap.set(roomGridIndex, displayFlags);
        }
        return displayFlagsMap;
      }
      exports2.getFloorDisplayFlags = getFloorDisplayFlags;
      function getRoomDisplayFlags(roomGridIndex, minimapAPI = true) {
        if (roomGridIndex === void 0) {
          roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        }
        if (MinimapAPI === void 0 || !minimapAPI) {
          const roomDescriptor = (0, roomData_1.getRoomDescriptor)(roomGridIndex);
          return roomDescriptor.DisplayFlags;
        }
        const minimapAPIRoomDescriptor = MinimapAPI.GetRoomByIdx(roomGridIndex);
        (0, utils_1.assertDefined)(minimapAPIRoomDescriptor, `Failed to get the MinimapAPI room descriptor for the room at grid index: ${roomGridIndex}`);
        return minimapAPIRoomDescriptor.GetDisplayFlags();
      }
      exports2.getRoomDisplayFlags = getRoomDisplayFlags;
      function hideRoomOnMinimap(roomGridIndex) {
        clearRoomDisplayFlags(roomGridIndex);
        if (MinimapAPI !== void 0) {
          const minimapAPIRoomDescriptor = MinimapAPI.GetRoomByIdx(roomGridIndex);
          (0, utils_1.assertDefined)(minimapAPIRoomDescriptor, `Failed to get the MinimapAPI room descriptor for the room at grid index: ${roomGridIndex}`);
          minimapAPIRoomDescriptor.Hidden = true;
        }
      }
      exports2.hideRoomOnMinimap = hideRoomOnMinimap;
      function isRoomVisible(roomGridIndexOrRoomDescriptor, minimapAPI = true) {
        const roomGridIndex = (0, types_1.isInteger)(roomGridIndexOrRoomDescriptor) ? roomGridIndexOrRoomDescriptor : roomGridIndexOrRoomDescriptor.SafeGridIndex;
        const roomDisplayFlags = getRoomDisplayFlags(roomGridIndex, minimapAPI);
        return roomDisplayFlags !== isaac_typescript_definitions_1.DisplayFlagZero;
      }
      exports2.isRoomVisible = isRoomVisible;
      function setAllDisplayFlags(displayFlags) {
        for (const room of (0, rooms_1.getRoomsInsideGrid)()) {
          setRoomDisplayFlags(room.SafeGridIndex, displayFlags, false);
        }
        if (MinimapAPI === void 0) {
          const level = cachedClasses_1.game.GetLevel();
          level.UpdateVisibility();
        }
      }
      exports2.setAllDisplayFlags = setAllDisplayFlags;
      function setFloorDisplayFlags(displayFlagsMap) {
        for (const [roomGridIndex, displayFlags] of displayFlagsMap) {
          setRoomDisplayFlags(roomGridIndex, displayFlags, false);
        }
        if (MinimapAPI === void 0) {
          const level = cachedClasses_1.game.GetLevel();
          level.UpdateVisibility();
        }
      }
      exports2.setFloorDisplayFlags = setFloorDisplayFlags;
      function setRoomDisplayFlags(roomGridIndex, displayFlags, updateVisibility = true) {
        if (roomGridIndex === void 0) {
          roomGridIndex = (0, roomData_1.getRoomGridIndex)();
        }
        if (MinimapAPI === void 0) {
          const roomDescriptor = (0, roomData_1.getRoomDescriptor)(roomGridIndex);
          roomDescriptor.DisplayFlags = displayFlags;
          if (updateVisibility) {
            const level = cachedClasses_1.game.GetLevel();
            level.UpdateVisibility();
          }
        } else {
          const minimapAPIRoomDescriptor = MinimapAPI.GetRoomByIdx(roomGridIndex);
          (0, utils_1.assertDefined)(minimapAPIRoomDescriptor, `Failed to get the MinimapAPI room descriptor for the room at grid index: ${roomGridIndex}`);
          minimapAPIRoomDescriptor.SetDisplayFlags(displayFlags);
        }
      }
      exports2.setRoomDisplayFlags = setRoomDisplayFlags;
    }
  });

  // node_modules/isaacscript-common/dist/functions/modFeatures.js
  var require_modFeatures = __commonJS({
    "node_modules/isaacscript-common/dist/functions/modFeatures.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.initModFeatures = void 0;
      function initModFeatures(mod, modFeatures, init = true) {
        const instantiatedModFeatures = [];
        for (const modFeature of modFeatures) {
          const instantiatedModFeature = new modFeature(mod, false);
          instantiatedModFeature.init(init);
          instantiatedModFeatures.push(instantiatedModFeature);
        }
        return instantiatedModFeatures;
      }
      exports2.initModFeatures = initModFeatures;
    }
  });

  // node_modules/isaacscript-common/dist/functions/newArray.js
  var require_newArray = __commonJS({
    "node_modules/isaacscript-common/dist/functions/newArray.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.newArray = void 0;
      var deepCopy_1 = require_deepCopy();
      var utils_1 = require_utils();
      function newArray(defaultValue, size) {
        const array = [];
        (0, utils_1.repeat)(size, () => {
          const copy = (0, deepCopy_1.deepCopy)(defaultValue);
          array.push(copy);
        });
        return array;
      }
      exports2.newArray = newArray;
    }
  });

  // node_modules/isaacscript-common/dist/functions/npcDataStructures.js
  var require_npcDataStructures = __commonJS({
    "node_modules/isaacscript-common/dist/functions/npcDataStructures.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.setHasNPC = exports2.setDeleteNPC = exports2.setAddNPC = exports2.mapSetNPC = exports2.mapHasNPC = exports2.mapGetNPC = exports2.mapDeleteNPC = exports2.defaultMapSetNPC = exports2.defaultMapGetNPC = void 0;
      function defaultMapGetNPC(map, npc, ...extraArgs) {
        const ptrHash = GetPtrHash(npc);
        return map.getAndSetDefault(ptrHash, ...extraArgs);
      }
      exports2.defaultMapGetNPC = defaultMapGetNPC;
      function defaultMapSetNPC(map, npc, value) {
        mapSetNPC(map, npc, value);
      }
      exports2.defaultMapSetNPC = defaultMapSetNPC;
      function mapDeleteNPC(map, npc) {
        const ptrHash = GetPtrHash(npc);
        return map.delete(ptrHash);
      }
      exports2.mapDeleteNPC = mapDeleteNPC;
      function mapGetNPC(map, npc) {
        const ptrHash = GetPtrHash(npc);
        return map.get(ptrHash);
      }
      exports2.mapGetNPC = mapGetNPC;
      function mapHasNPC(map, npc) {
        const ptrHash = GetPtrHash(npc);
        return map.has(ptrHash);
      }
      exports2.mapHasNPC = mapHasNPC;
      function mapSetNPC(map, npc, value) {
        const ptrHash = GetPtrHash(npc);
        map.set(ptrHash, value);
      }
      exports2.mapSetNPC = mapSetNPC;
      function setAddNPC(set, npc) {
        const ptrHash = GetPtrHash(npc);
        set.add(ptrHash);
      }
      exports2.setAddNPC = setAddNPC;
      function setDeleteNPC(set, npc) {
        const ptrHash = GetPtrHash(npc);
        return set.delete(ptrHash);
      }
      exports2.setDeleteNPC = setDeleteNPC;
      function setHasNPC(set, npc) {
        const ptrHash = GetPtrHash(npc);
        return set.has(ptrHash);
      }
      exports2.setHasNPC = setHasNPC;
    }
  });

  // node_modules/isaacscript-common/dist/functions/playerTrinkets.js
  var require_playerTrinkets = __commonJS({
    "node_modules/isaacscript-common/dist/functions/playerTrinkets.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.removeTrinketCostume = exports2.removeAllPlayerTrinkets = exports2.hasTrinket = exports2.hasOpenTrinketSlot = exports2.hasAnyTrinket = exports2.getPlayersWithTrinket = exports2.getPlayerTrinkets = exports2.getOpenTrinketSlot = exports2.anyPlayerHasTrinket = exports2.addTrinketCostume = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var cachedClasses_1 = require_cachedClasses();
      var playerIndex_1 = require_playerIndex();
      var players_1 = require_players();
      function addTrinketCostume(player, trinketType) {
        const itemConfigTrinket = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        if (itemConfigTrinket === void 0) {
          return;
        }
        player.AddCostume(itemConfigTrinket, false);
      }
      exports2.addTrinketCostume = addTrinketCostume;
      function anyPlayerHasTrinket(trinketType, ignoreModifiers) {
        const players = (0, playerIndex_1.getAllPlayers)();
        return players.some((player) => player.HasTrinket(trinketType, ignoreModifiers));
      }
      exports2.anyPlayerHasTrinket = anyPlayerHasTrinket;
      function getOpenTrinketSlot(player) {
        const maxTrinkets = player.GetMaxTrinkets();
        const trinketType1 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_1);
        const trinketType2 = player.GetTrinket(isaac_typescript_definitions_1.TrinketSlot.SLOT_2);
        if (maxTrinkets === 1) {
          return trinketType1 === isaac_typescript_definitions_1.TrinketType.NULL ? 0 : void 0;
        }
        if (maxTrinkets === 2) {
          if (trinketType1 === isaac_typescript_definitions_1.TrinketType.NULL) {
            return 0;
          }
          return trinketType2 === isaac_typescript_definitions_1.TrinketType.NULL ? 1 : void 0;
        }
        error(`The player has an unknown number of trinket slots: ${maxTrinkets}`);
      }
      exports2.getOpenTrinketSlot = getOpenTrinketSlot;
      function getPlayerTrinkets(player) {
        const trinketTypes = [];
        for (const trinketSlot of cachedEnumValues_1.TRINKET_SLOT_VALUES) {
          const trinketType = player.GetTrinket(trinketSlot);
          if (trinketType !== isaac_typescript_definitions_1.TrinketType.NULL) {
            trinketTypes.push(trinketType);
          }
        }
        return trinketTypes;
      }
      exports2.getPlayerTrinkets = getPlayerTrinkets;
      function getPlayersWithTrinket(...trinketTypes) {
        const players = (0, playerIndex_1.getPlayers)();
        return players.filter((player) => trinketTypes.every((trinketType) => player.HasTrinket(trinketType)));
      }
      exports2.getPlayersWithTrinket = getPlayersWithTrinket;
      function hasAnyTrinket(player) {
        const playerTrinketTypes = cachedEnumValues_1.TRINKET_SLOT_VALUES.map((trinketSlot) => player.GetTrinket(trinketSlot));
        return playerTrinketTypes.some((trinketType) => trinketType !== isaac_typescript_definitions_1.TrinketType.NULL);
      }
      exports2.hasAnyTrinket = hasAnyTrinket;
      function hasOpenTrinketSlot(player) {
        if ((0, players_1.isCharacter)(player, isaac_typescript_definitions_1.PlayerType.SOUL_B)) {
          return false;
        }
        const openTrinketSlot = getOpenTrinketSlot(player);
        return openTrinketSlot !== void 0;
      }
      exports2.hasOpenTrinketSlot = hasOpenTrinketSlot;
      function hasTrinket(player, ...trinketTypes) {
        return trinketTypes.some((trinketType) => player.HasTrinket(trinketType));
      }
      exports2.hasTrinket = hasTrinket;
      function removeAllPlayerTrinkets(player) {
        for (const trinketSlot of cachedEnumValues_1.TRINKET_SLOT_VALUES) {
          const trinketType = player.GetTrinket(trinketSlot);
          if (trinketType === isaac_typescript_definitions_1.TrinketType.NULL) {
            continue;
          }
          let alreadyHasTrinket;
          do {
            player.TryRemoveTrinket(trinketType);
            alreadyHasTrinket = player.HasTrinket(trinketType);
          } while (alreadyHasTrinket);
        }
      }
      exports2.removeAllPlayerTrinkets = removeAllPlayerTrinkets;
      function removeTrinketCostume(player, trinketType) {
        const itemConfigTrinket = cachedClasses_1.itemConfig.GetTrinket(trinketType);
        if (itemConfigTrinket === void 0) {
          return;
        }
        player.RemoveCostume(itemConfigTrinket);
      }
      exports2.removeTrinketCostume = removeTrinketCostume;
    }
  });

  // node_modules/isaacscript-common/dist/functions/pressurePlate.js
  var require_pressurePlate = __commonJS({
    "node_modules/isaacscript-common/dist/functions/pressurePlate.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isAllPressurePlatesPushed = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedClasses_1 = require_cachedClasses();
      var gridEntitiesSpecific_1 = require_gridEntitiesSpecific();
      function isAllPressurePlatesPushed() {
        const room = cachedClasses_1.game.GetRoom();
        const hasPressurePlates = room.HasTriggerPressurePlates();
        if (!hasPressurePlates) {
          return true;
        }
        const pressurePlates = (0, gridEntitiesSpecific_1.getPressurePlates)(isaac_typescript_definitions_1.PressurePlateVariant.PRESSURE_PLATE);
        return pressurePlates.every((pressurePlate) => pressurePlate.State === isaac_typescript_definitions_1.PressurePlateState.PRESSURE_PLATE_PRESSED);
      }
      exports2.isAllPressurePlatesPushed = isAllPressurePlatesPushed;
    }
  });

  // node_modules/isaacscript-common/dist/functions/seeds.js
  var require_seeds = __commonJS({
    "node_modules/isaacscript-common/dist/functions/seeds.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.nextSeed = exports2.getStartSeedString = void 0;
      var cachedClasses_1 = require_cachedClasses();
      var rng_1 = require_rng();
      function getStartSeedString() {
        const seeds = cachedClasses_1.game.GetSeeds();
        return seeds.GetStartSeedString();
      }
      exports2.getStartSeedString = getStartSeedString;
      function nextSeed(seed) {
        const rng = (0, rng_1.newRNG)(seed);
        rng.Next();
        return rng.GetSeed();
      }
      exports2.nextSeed = nextSeed;
    }
  });

  // node_modules/isaacscript-common/dist/objects/transformationNames.js
  var require_transformationNames = __commonJS({
    "node_modules/isaacscript-common/dist/objects/transformationNames.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TRANSFORMATION_NAMES = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      exports2.TRANSFORMATION_NAMES = {
        [isaac_typescript_definitions_1.PlayerForm.GUPPY]: "Guppy",
        [isaac_typescript_definitions_1.PlayerForm.BEELZEBUB]: "Beelzebub",
        [isaac_typescript_definitions_1.PlayerForm.FUN_GUY]: "Fun Guy",
        [isaac_typescript_definitions_1.PlayerForm.SERAPHIM]: "Seraphim",
        [isaac_typescript_definitions_1.PlayerForm.BOB]: "Bob",
        [isaac_typescript_definitions_1.PlayerForm.SPUN]: "Spun",
        [isaac_typescript_definitions_1.PlayerForm.YES_MOTHER]: "Yes Mother?",
        [isaac_typescript_definitions_1.PlayerForm.CONJOINED]: "Conjoined",
        [isaac_typescript_definitions_1.PlayerForm.LEVIATHAN]: "Leviathan",
        [isaac_typescript_definitions_1.PlayerForm.OH_CRAP]: "Oh Crap",
        [isaac_typescript_definitions_1.PlayerForm.BOOKWORM]: "Bookworm",
        [isaac_typescript_definitions_1.PlayerForm.ADULT]: "Adult",
        [isaac_typescript_definitions_1.PlayerForm.SPIDER_BABY]: "Spider Baby",
        [isaac_typescript_definitions_1.PlayerForm.STOMPY]: "Stompy"
        // 13
      };
    }
  });

  // node_modules/isaacscript-common/dist/functions/transformations.js
  var require_transformations = __commonJS({
    "node_modules/isaacscript-common/dist/functions/transformations.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.isTransformationFlying = exports2.hasFlyingTransformation = exports2.getTransformationsForCollectibleType = exports2.getTransformationName = exports2.getPlayerTransformations = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var cachedEnumValues_1 = require_cachedEnumValues();
      var transformationNames_1 = require_transformationNames();
      var ReadonlyMap_1 = require_ReadonlyMap();
      var ReadonlySet_1 = require_ReadonlySet();
      var collectibles_1 = require_collectibles();
      var flag_1 = require_flag();
      var TRANSFORMATION_TO_TAG_MAP = new ReadonlyMap_1.ReadonlyMap([
        [isaac_typescript_definitions_1.PlayerForm.GUPPY, isaac_typescript_definitions_1.ItemConfigTag.GUPPY],
        [isaac_typescript_definitions_1.PlayerForm.BEELZEBUB, isaac_typescript_definitions_1.ItemConfigTag.FLY],
        [isaac_typescript_definitions_1.PlayerForm.FUN_GUY, isaac_typescript_definitions_1.ItemConfigTag.MUSHROOM],
        [isaac_typescript_definitions_1.PlayerForm.SERAPHIM, isaac_typescript_definitions_1.ItemConfigTag.ANGEL],
        [isaac_typescript_definitions_1.PlayerForm.BOB, isaac_typescript_definitions_1.ItemConfigTag.BOB],
        [isaac_typescript_definitions_1.PlayerForm.SPUN, isaac_typescript_definitions_1.ItemConfigTag.SYRINGE],
        [isaac_typescript_definitions_1.PlayerForm.YES_MOTHER, isaac_typescript_definitions_1.ItemConfigTag.MOM],
        [isaac_typescript_definitions_1.PlayerForm.CONJOINED, isaac_typescript_definitions_1.ItemConfigTag.BABY],
        [isaac_typescript_definitions_1.PlayerForm.LEVIATHAN, isaac_typescript_definitions_1.ItemConfigTag.DEVIL],
        [isaac_typescript_definitions_1.PlayerForm.OH_CRAP, isaac_typescript_definitions_1.ItemConfigTag.POOP],
        [isaac_typescript_definitions_1.PlayerForm.BOOKWORM, isaac_typescript_definitions_1.ItemConfigTag.BOOK],
        // PlayerForm.ADULTHOOD (11) is based on pill usage.
        [isaac_typescript_definitions_1.PlayerForm.SPIDER_BABY, isaac_typescript_definitions_1.ItemConfigTag.SPIDER]
        // 12
        // PlayerForm.STOMPY (13) is based on size.
      ]);
      var TRANSFORMATIONS_THAT_GRANT_FLYING = new ReadonlySet_1.ReadonlySet([
        isaac_typescript_definitions_1.PlayerForm.GUPPY,
        isaac_typescript_definitions_1.PlayerForm.BEELZEBUB,
        isaac_typescript_definitions_1.PlayerForm.SERAPHIM,
        isaac_typescript_definitions_1.PlayerForm.LEVIATHAN
        // 8
      ]);
      function getPlayerTransformations(player) {
        const transformations = /* @__PURE__ */ new Set();
        for (const playerForm of cachedEnumValues_1.PLAYER_FORM_VALUES) {
          if (player.HasPlayerForm(playerForm)) {
            transformations.add(playerForm);
          }
        }
        return transformations;
      }
      exports2.getPlayerTransformations = getPlayerTransformations;
      function getTransformationName(playerForm) {
        return transformationNames_1.TRANSFORMATION_NAMES[playerForm];
      }
      exports2.getTransformationName = getTransformationName;
      function getTransformationsForCollectibleType(collectibleType) {
        const itemConfigTags = (0, collectibles_1.getCollectibleTags)(collectibleType);
        const transformationSet = /* @__PURE__ */ new Set();
        for (const playerForm of cachedEnumValues_1.PLAYER_FORM_VALUES) {
          const itemConfigTag = TRANSFORMATION_TO_TAG_MAP.get(playerForm);
          if (itemConfigTag === void 0) {
            continue;
          }
          if ((0, flag_1.hasFlag)(itemConfigTags, itemConfigTag)) {
            transformationSet.add(playerForm);
          }
        }
        return transformationSet;
      }
      exports2.getTransformationsForCollectibleType = getTransformationsForCollectibleType;
      function hasFlyingTransformation(player) {
        for (const playerForm of TRANSFORMATIONS_THAT_GRANT_FLYING) {
          if (player.HasPlayerForm(playerForm)) {
            return true;
          }
        }
        return false;
      }
      exports2.hasFlyingTransformation = hasFlyingTransformation;
      function isTransformationFlying(playerForm) {
        return TRANSFORMATIONS_THAT_GRANT_FLYING.has(playerForm);
      }
      exports2.isTransformationFlying = isTransformationFlying;
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/ChargeBarSprites.js
  var require_ChargeBarSprites = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/ChargeBarSprites.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/Corner.js
  var require_Corner = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/Corner.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/CustomStageTSConfig.js
  var require_CustomStageTSConfig = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/CustomStageTSConfig.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/GridEntityCustomData.js
  var require_GridEntityCustomData = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/GridEntityCustomData.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/JSONRoomsFile.js
  var require_JSONRoomsFile = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/JSONRoomsFile.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/PlayerHealth.js
  var require_PlayerHealth = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/PlayerHealth.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/PlayerStats.js
  var require_PlayerStats = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/PlayerStats.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var enums_1 = require_enums();
      (0, enums_1.validateInterfaceMatchesEnum)();
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/PocketItemDescription.js
  var require_PocketItemDescription = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/PocketItemDescription.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/RoomDescription.js
  var require_RoomDescription = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/RoomDescription.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/SaveData.js
  var require_SaveData = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/SaveData.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      function test(_saveData) {
      }
      {
        const saveDataWithPrimitives = {
          run: {
            foo: 123,
            bar: "bar",
            baz: true,
            nested: {
              foo: 123,
              bar: "bar",
              baz: true
            }
          }
        };
        test(saveDataWithPrimitives);
      }
      {
        const saveDataWithEntity = {
          run: {
            foo: {}
          }
        };
        test(saveDataWithEntity);
      }
      {
        const saveDataWithMap = {
          run: {
            foo: /* @__PURE__ */ new Map()
          }
        };
        test(saveDataWithMap);
      }
      {
        const saveDataWithMap = {
          run: {
            foo: /* @__PURE__ */ new Map()
          }
        };
        test(saveDataWithMap);
      }
      {
        const saveDataWithMap = {
          run: {
            foo: /* @__PURE__ */ new Map()
          }
        };
        test(saveDataWithMap);
      }
      {
        class Foo {
          someField = 123;
        }
        const saveDataWithClass = {
          run: {
            foo: new Foo()
          }
        };
        test(saveDataWithClass);
      }
      {
        class Foo {
          someField = 123;
          someMethod() {
          }
        }
        const saveDataWithClassWithMethod = {
          run: {
            foo: new Foo()
          }
        };
        test(saveDataWithClassWithMethod);
      }
      {
        class Foo {
          someField = 123;
        }
        const saveDataWithNestedClass = {
          run: {
            fooMap: /* @__PURE__ */ new Map()
          }
        };
        test(saveDataWithNestedClass);
      }
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/StageHistoryEntry.js
  var require_StageHistoryEntry = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/StageHistoryEntry.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/TSTLClassMetatable.js
  var require_TSTLClassMetatable = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/TSTLClassMetatable.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/interfaces/TrinketSituation.js
  var require_TrinketSituation = __commonJS({
    "node_modules/isaacscript-common/dist/interfaces/TrinketSituation.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/maps/transformationNameToPlayerFormMap.js
  var require_transformationNameToPlayerFormMap = __commonJS({
    "node_modules/isaacscript-common/dist/maps/transformationNameToPlayerFormMap.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.TRANSFORMATION_NAME_TO_PLAYER_FORM_MAP = void 0;
      var isaac_typescript_definitions_1 = require_dist();
      var ReadonlyMap_1 = require_ReadonlyMap();
      exports2.TRANSFORMATION_NAME_TO_PLAYER_FORM_MAP = new ReadonlyMap_1.ReadonlyMap([
        ["guppy", isaac_typescript_definitions_1.PlayerForm.GUPPY],
        ["cat", isaac_typescript_definitions_1.PlayerForm.GUPPY],
        ["beelzebub", isaac_typescript_definitions_1.PlayerForm.BEELZEBUB],
        ["fly", isaac_typescript_definitions_1.PlayerForm.BEELZEBUB],
        ["funGuy", isaac_typescript_definitions_1.PlayerForm.FUN_GUY],
        ["mushroom", isaac_typescript_definitions_1.PlayerForm.FUN_GUY],
        ["seraphim", isaac_typescript_definitions_1.PlayerForm.SERAPHIM],
        ["angel", isaac_typescript_definitions_1.PlayerForm.SERAPHIM],
        ["bob", isaac_typescript_definitions_1.PlayerForm.BOB],
        ["poison", isaac_typescript_definitions_1.PlayerForm.BOB],
        ["spun", isaac_typescript_definitions_1.PlayerForm.SPUN],
        ["drugs", isaac_typescript_definitions_1.PlayerForm.SPUN],
        ["needles", isaac_typescript_definitions_1.PlayerForm.SPUN],
        ["yesMother", isaac_typescript_definitions_1.PlayerForm.YES_MOTHER],
        ["mother", isaac_typescript_definitions_1.PlayerForm.YES_MOTHER],
        ["mom", isaac_typescript_definitions_1.PlayerForm.YES_MOTHER],
        ["conjoined", isaac_typescript_definitions_1.PlayerForm.CONJOINED],
        ["triple", isaac_typescript_definitions_1.PlayerForm.CONJOINED],
        ["leviathan", isaac_typescript_definitions_1.PlayerForm.LEVIATHAN],
        ["devil", isaac_typescript_definitions_1.PlayerForm.LEVIATHAN],
        ["ohCrap", isaac_typescript_definitions_1.PlayerForm.OH_CRAP],
        ["crap", isaac_typescript_definitions_1.PlayerForm.OH_CRAP],
        ["poop", isaac_typescript_definitions_1.PlayerForm.OH_CRAP],
        ["bookWorm", isaac_typescript_definitions_1.PlayerForm.BOOKWORM],
        ["adult", isaac_typescript_definitions_1.PlayerForm.ADULT],
        ["spiderBaby", isaac_typescript_definitions_1.PlayerForm.SPIDER_BABY],
        ["stompy", isaac_typescript_definitions_1.PlayerForm.STOMPY]
        // 13
      ]);
    }
  });

  // node_modules/isaacscript-common/dist/objects/colors.js
  var require_colors = __commonJS({
    "node_modules/isaacscript-common/dist/objects/colors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.COLORS = void 0;
      exports2.COLORS = {
        Black: Color(0, 0, 0),
        Red: Color(1, 0, 0),
        Green: Color(0, 1, 0),
        Blue: Color(0, 0, 1),
        Yellow: Color(1, 1, 0),
        Cyan: Color(0, 1, 1),
        Magenta: Color(1, 0, 1),
        White: Color(1, 1, 1),
        Brown: Color(0.588, 0.294, 0),
        Gray: Color(0.5, 0.5, 0.5),
        Orange: Color(1, 0.647, 0),
        Purple: Color(0.5, 0, 0.5)
      };
    }
  });

  // node_modules/isaacscript-common/dist/objects/kColors.js
  var require_kColors = __commonJS({
    "node_modules/isaacscript-common/dist/objects/kColors.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.K_COLORS = void 0;
      exports2.K_COLORS = {
        Black: KColor(0, 0, 0, 1),
        Red: KColor(1, 0, 0, 1),
        Green: KColor(0, 1, 0, 1),
        Blue: KColor(0, 0, 1, 1),
        Yellow: KColor(1, 1, 0, 1),
        Cyan: KColor(0, 1, 1, 1),
        Magenta: KColor(1, 0, 1, 1),
        White: KColor(1, 1, 1, 1),
        Transparent: KColor(0, 0, 0, 0),
        Brown: KColor(0.588, 0.294, 0, 1),
        Gray: KColor(0.5, 0.5, 0.5, 1),
        Orange: KColor(1, 0.647, 0, 1),
        Purple: KColor(0.5, 0, 0.5, 1)
      };
    }
  });

  // node_modules/isaacscript-common/dist/types/AddSubtract.js
  var require_AddSubtract = __commonJS({
    "node_modules/isaacscript-common/dist/types/AddSubtract.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/AllButFirst.js
  var require_AllButFirst = __commonJS({
    "node_modules/isaacscript-common/dist/types/AllButFirst.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/AllButLast.js
  var require_AllButLast = __commonJS({
    "node_modules/isaacscript-common/dist/types/AllButLast.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/AnyClass.js
  var require_AnyClass = __commonJS({
    "node_modules/isaacscript-common/dist/types/AnyClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/AnyEntity.js
  var require_AnyEntity = __commonJS({
    "node_modules/isaacscript-common/dist/types/AnyEntity.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/AnyFunction.js
  var require_AnyFunction = __commonJS({
    "node_modules/isaacscript-common/dist/types/AnyFunction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/AnyGridEntity.js
  var require_AnyGridEntity = __commonJS({
    "node_modules/isaacscript-common/dist/types/AnyGridEntity.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/CompositionTypeSatisfiesEnum.js
  var require_CompositionTypeSatisfiesEnum = __commonJS({
    "node_modules/isaacscript-common/dist/types/CompositionTypeSatisfiesEnum.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      var ObjectiveType2;
      (function(ObjectiveType3) {
        ObjectiveType3[ObjectiveType3["FOO"] = 0] = "FOO";
        ObjectiveType3[ObjectiveType3["BAR"] = 1] = "BAR";
        ObjectiveType3[ObjectiveType3["BAZ"] = 2] = "BAZ";
      })(ObjectiveType2 || (ObjectiveType2 = {}));
    }
  });

  // node_modules/isaacscript-common/dist/types/ConversionHeartSubType.js
  var require_ConversionHeartSubType = __commonJS({
    "node_modules/isaacscript-common/dist/types/ConversionHeartSubType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/Decrement.js
  var require_Decrement = __commonJS({
    "node_modules/isaacscript-common/dist/types/Decrement.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/ERange.js
  var require_ERange = __commonJS({
    "node_modules/isaacscript-common/dist/types/ERange.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/EntityID.js
  var require_EntityID = __commonJS({
    "node_modules/isaacscript-common/dist/types/EntityID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/FunctionTuple.js
  var require_FunctionTuple = __commonJS({
    "node_modules/isaacscript-common/dist/types/FunctionTuple.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/GridEntityID.js
  var require_GridEntityID = __commonJS({
    "node_modules/isaacscript-common/dist/types/GridEntityID.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/HasFunction.js
  var require_HasFunction = __commonJS({
    "node_modules/isaacscript-common/dist/types/HasFunction.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/IRange.js
  var require_IRange = __commonJS({
    "node_modules/isaacscript-common/dist/types/IRange.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/Immutable.js
  var require_Immutable = __commonJS({
    "node_modules/isaacscript-common/dist/types/Immutable.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/Increment.js
  var require_Increment = __commonJS({
    "node_modules/isaacscript-common/dist/types/Increment.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/LowercaseKeys.js
  var require_LowercaseKeys = __commonJS({
    "node_modules/isaacscript-common/dist/types/LowercaseKeys.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/NaturalNumbersLessThan.js
  var require_NaturalNumbersLessThan = __commonJS({
    "node_modules/isaacscript-common/dist/types/NaturalNumbersLessThan.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/NaturalNumbersLessThanOrEqualTo.js
  var require_NaturalNumbersLessThanOrEqualTo = __commonJS({
    "node_modules/isaacscript-common/dist/types/NaturalNumbersLessThanOrEqualTo.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/PickupIndex.js
  var require_PickupIndex = __commonJS({
    "node_modules/isaacscript-common/dist/types/PickupIndex.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/PlayerIndex.js
  var require_PlayerIndex = __commonJS({
    "node_modules/isaacscript-common/dist/types/PlayerIndex.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/PossibleStatType.js
  var require_PossibleStatType = __commonJS({
    "node_modules/isaacscript-common/dist/types/PossibleStatType.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/PublicInterface.js
  var require_PublicInterface = __commonJS({
    "node_modules/isaacscript-common/dist/types/PublicInterface.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/ReadonlyRecord.js
  var require_ReadonlyRecord = __commonJS({
    "node_modules/isaacscript-common/dist/types/ReadonlyRecord.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/StartsWithLowercase.js
  var require_StartsWithLowercase = __commonJS({
    "node_modules/isaacscript-common/dist/types/StartsWithLowercase.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/StartsWithUppercase.js
  var require_StartsWithUppercase = __commonJS({
    "node_modules/isaacscript-common/dist/types/StartsWithUppercase.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/TSTLClass.js
  var require_TSTLClass = __commonJS({
    "node_modules/isaacscript-common/dist/types/TSTLClass.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/Tuple.js
  var require_Tuple = __commonJS({
    "node_modules/isaacscript-common/dist/types/Tuple.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/TupleKeys.js
  var require_TupleKeys = __commonJS({
    "node_modules/isaacscript-common/dist/types/TupleKeys.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/TupleToIntersection.js
  var require_TupleToIntersection = __commonJS({
    "node_modules/isaacscript-common/dist/types/TupleToIntersection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/TupleToUnion.js
  var require_TupleToUnion = __commonJS({
    "node_modules/isaacscript-common/dist/types/TupleToUnion.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/TupleWithLengthBetween.js
  var require_TupleWithLengthBetween = __commonJS({
    "node_modules/isaacscript-common/dist/types/TupleWithLengthBetween.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/TupleWithMaxLength.js
  var require_TupleWithMaxLength = __commonJS({
    "node_modules/isaacscript-common/dist/types/TupleWithMaxLength.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/UnionToIntersection.js
  var require_UnionToIntersection = __commonJS({
    "node_modules/isaacscript-common/dist/types/UnionToIntersection.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/UppercaseKeys.js
  var require_UppercaseKeys = __commonJS({
    "node_modules/isaacscript-common/dist/types/UppercaseKeys.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/WeightedArray.js
  var require_WeightedArray = __commonJS({
    "node_modules/isaacscript-common/dist/types/WeightedArray.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/WidenLiteral.js
  var require_WidenLiteral = __commonJS({
    "node_modules/isaacscript-common/dist/types/WidenLiteral.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/types/Writable.js
  var require_Writable = __commonJS({
    "node_modules/isaacscript-common/dist/types/Writable.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
    }
  });

  // node_modules/isaacscript-common/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/isaacscript-common/dist/index.js"(exports2) {
      "use strict";
      var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
            __createBinding(exports3, m, p);
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      __exportStar(require_DefaultMap(), exports2);
      __exportStar(require_ModFeature(), exports2);
      __exportStar(require_ModUpgraded(), exports2);
      __exportStar(require_cachedClasses(), exports2);
      __exportStar(require_constants(), exports2);
      __exportStar(require_constantsFirstLast(), exports2);
      __exportStar(require_constantsVanilla(), exports2);
      __exportStar(require_upgradeMod(), exports2);
      __exportStar(require_AmbushType(), exports2);
      __exportStar(require_CornerType(), exports2);
      __exportStar(require_HealthType(), exports2);
      __exportStar(require_ISCFeature(), exports2);
      __exportStar(require_LadderSubTypeCustom(), exports2);
      __exportStar(require_ModCallbackCustom(), exports2);
      __exportStar(require_MysteriousPaperEffect(), exports2);
      __exportStar(require_PlayerStat(), exports2);
      __exportStar(require_PocketItemType(), exports2);
      __exportStar(require_RockAltType(), exports2);
      __exportStar(require_SaveDataKey(), exports2);
      __exportStar(require_SerializationType(), exports2);
      __exportStar(require_SlotDestructionType(), exports2);
      __exportStar(require_ambush(), exports2);
      __exportStar(require_array(), exports2);
      __exportStar(require_arrayLua(), exports2);
      __exportStar(require_benchmark(), exports2);
      __exportStar(require_bitSet128(), exports2);
      __exportStar(require_bitwise(), exports2);
      __exportStar(require_bombs(), exports2);
      __exportStar(require_bosses(), exports2);
      __exportStar(require_cards(), exports2);
      __exportStar(require_challenges(), exports2);
      __exportStar(require_characters(), exports2);
      __exportStar(require_charge(), exports2);
      __exportStar(require_chargeBar(), exports2);
      __exportStar(require_collectibleTag(), exports2);
      __exportStar(require_collectibles(), exports2);
      __exportStar(require_color(), exports2);
      __exportStar(require_console(), exports2);
      __exportStar(require_curses(), exports2);
      __exportStar(require_debugFunctions(), exports2);
      __exportStar(require_decorators2(), exports2);
      __exportStar(require_deepCopy(), exports2);
      __exportStar(require_deepCopyTests(), exports2);
      __exportStar(require_dimensions(), exports2);
      __exportStar(require_direction(), exports2);
      __exportStar(require_doors(), exports2);
      __exportStar(require_easing(), exports2);
      __exportStar(require_effects(), exports2);
      __exportStar(require_emptyRoom(), exports2);
      __exportStar(require_entities(), exports2);
      __exportStar(require_entitiesSpecific(), exports2);
      __exportStar(require_entityTypes(), exports2);
      __exportStar(require_enums(), exports2);
      __exportStar(require_external(), exports2);
      __exportStar(require_familiars(), exports2);
      __exportStar(require_flag(), exports2);
      __exportStar(require_frames(), exports2);
      __exportStar(require_globals(), exports2);
      __exportStar(require_gridEntities(), exports2);
      __exportStar(require_gridEntitiesSpecific(), exports2);
      __exportStar(require_gridIndex(), exports2);
      __exportStar(require_hash(), exports2);
      __exportStar(require_hex(), exports2);
      __exportStar(require_input(), exports2);
      __exportStar(require_isaacAPIClass(), exports2);
      __exportStar(require_itemPool(), exports2);
      __exportStar(require_jsonHelpers(), exports2);
      __exportStar(require_jsonRoom(), exports2);
      __exportStar(require_kColor(), exports2);
      __exportStar(require_language(), exports2);
      __exportStar(require_level(), exports2);
      __exportStar(require_levelGrid(), exports2);
      __exportStar(require_log(), exports2);
      __exportStar(require_logEntities(), exports2);
      __exportStar(require_logMisc(), exports2);
      __exportStar(require_map(), exports2);
      __exportStar(require_math(), exports2);
      __exportStar(require_merge(), exports2);
      __exportStar(require_mergeTests(), exports2);
      __exportStar(require_minimap(), exports2);
      __exportStar(require_modFeatures(), exports2);
      __exportStar(require_newArray(), exports2);
      __exportStar(require_nextStage(), exports2);
      __exportStar(require_npcDataStructures(), exports2);
      __exportStar(require_npcs(), exports2);
      __exportStar(require_pickupVariants(), exports2);
      __exportStar(require_pickups(), exports2);
      __exportStar(require_pickupsSpecific(), exports2);
      __exportStar(require_pills(), exports2);
      __exportStar(require_playerCenter(), exports2);
      __exportStar(require_playerCollectibles(), exports2);
      __exportStar(require_playerDataStructures(), exports2);
      __exportStar(require_playerEffects(), exports2);
      __exportStar(require_playerHealth(), exports2);
      __exportStar(require_playerIndex(), exports2);
      __exportStar(require_playerTrinkets(), exports2);
      __exportStar(require_players(), exports2);
      __exportStar(require_pocketItems(), exports2);
      __exportStar(require_positionVelocity(), exports2);
      __exportStar(require_pressurePlate(), exports2);
      __exportStar(require_projectiles(), exports2);
      __exportStar(require_random(), exports2);
      __exportStar(require_readOnly(), exports2);
      __exportStar(require_render(), exports2);
      __exportStar(require_revive(), exports2);
      __exportStar(require_rng(), exports2);
      __exportStar(require_rockAlt(), exports2);
      __exportStar(require_roomData(), exports2);
      __exportStar(require_roomGrid(), exports2);
      __exportStar(require_roomShape(), exports2);
      __exportStar(require_roomShapeWalls(), exports2);
      __exportStar(require_roomTransition(), exports2);
      __exportStar(require_rooms(), exports2);
      __exportStar(require_run(), exports2);
      __exportStar(require_seeds(), exports2);
      __exportStar(require_serialization2(), exports2);
      __exportStar(require_set(), exports2);
      __exportStar(require_slots(), exports2);
      __exportStar(require_sort(), exports2);
      __exportStar(require_sound(), exports2);
      __exportStar(require_spawnCollectible(), exports2);
      __exportStar(require_sprites(), exports2);
      __exportStar(require_stage(), exports2);
      __exportStar(require_stats(), exports2);
      __exportStar(require_storyBosses(), exports2);
      __exportStar(require_string(), exports2);
      __exportStar(require_table(), exports2);
      __exportStar(require_tears(), exports2);
      __exportStar(require_transformations(), exports2);
      __exportStar(require_trinketGive(), exports2);
      __exportStar(require_trinkets(), exports2);
      __exportStar(require_tstlClass(), exports2);
      __exportStar(require_types(), exports2);
      __exportStar(require_ui(), exports2);
      __exportStar(require_utils(), exports2);
      __exportStar(require_vector(), exports2);
      __exportStar(require_versusScreen(), exports2);
      __exportStar(require_weighted(), exports2);
      __exportStar(require_ChargeBarSprites(), exports2);
      __exportStar(require_Corner(), exports2);
      __exportStar(require_CustomStageTSConfig(), exports2);
      __exportStar(require_GridEntityCustomData(), exports2);
      __exportStar(require_JSONRoomsFile(), exports2);
      __exportStar(require_PlayerHealth(), exports2);
      __exportStar(require_PlayerStats(), exports2);
      __exportStar(require_PocketItemDescription(), exports2);
      __exportStar(require_RoomDescription(), exports2);
      __exportStar(require_SaveData(), exports2);
      __exportStar(require_StageHistoryEntry(), exports2);
      __exportStar(require_TSTLClassMetatable(), exports2);
      __exportStar(require_TrinketSituation(), exports2);
      __exportStar(require_cardNameToTypeMap(), exports2);
      __exportStar(require_characterNameToTypeMap(), exports2);
      __exportStar(require_collectibleNameToTypeMap(), exports2);
      __exportStar(require_pillNameToEffectMap(), exports2);
      __exportStar(require_roomNameToTypeMap(), exports2);
      __exportStar(require_transformationNameToPlayerFormMap(), exports2);
      __exportStar(require_trinketNameToTypeMap(), exports2);
      __exportStar(require_colors(), exports2);
      __exportStar(require_kColors(), exports2);
      __exportStar(require_AddSubtract(), exports2);
      __exportStar(require_AllButFirst(), exports2);
      __exportStar(require_AllButLast(), exports2);
      __exportStar(require_AnyClass(), exports2);
      __exportStar(require_AnyEntity(), exports2);
      __exportStar(require_AnyFunction(), exports2);
      __exportStar(require_AnyGridEntity(), exports2);
      __exportStar(require_CompositionTypeSatisfiesEnum(), exports2);
      __exportStar(require_ConversionHeartSubType(), exports2);
      __exportStar(require_Decrement(), exports2);
      __exportStar(require_ERange(), exports2);
      __exportStar(require_EntityID(), exports2);
      __exportStar(require_FunctionTuple(), exports2);
      __exportStar(require_GridEntityID(), exports2);
      __exportStar(require_HasFunction(), exports2);
      __exportStar(require_IRange(), exports2);
      __exportStar(require_Immutable(), exports2);
      __exportStar(require_Increment(), exports2);
      __exportStar(require_LowercaseKeys(), exports2);
      __exportStar(require_NaturalNumbersLessThan(), exports2);
      __exportStar(require_NaturalNumbersLessThanOrEqualTo(), exports2);
      __exportStar(require_PickingUpItem(), exports2);
      __exportStar(require_PickupIndex(), exports2);
      __exportStar(require_PlayerIndex(), exports2);
      __exportStar(require_PossibleStatType(), exports2);
      __exportStar(require_PublicInterface(), exports2);
      __exportStar(require_ReadonlyMap(), exports2);
      __exportStar(require_ReadonlyRecord(), exports2);
      __exportStar(require_ReadonlySet(), exports2);
      __exportStar(require_StartsWithLowercase(), exports2);
      __exportStar(require_StartsWithUppercase(), exports2);
      __exportStar(require_TSTLClass(), exports2);
      __exportStar(require_Tuple(), exports2);
      __exportStar(require_TupleKeys(), exports2);
      __exportStar(require_TupleToIntersection(), exports2);
      __exportStar(require_TupleToUnion(), exports2);
      __exportStar(require_TupleWithLengthBetween(), exports2);
      __exportStar(require_TupleWithMaxLength(), exports2);
      __exportStar(require_UnionToIntersection(), exports2);
      __exportStar(require_UppercaseKeys(), exports2);
      __exportStar(require_WeightedArray(), exports2);
      __exportStar(require_WidenLiteral(), exports2);
      __exportStar(require_Writable(), exports2);
    }
  });

  // node_modules/isaacscript-common-ts/dist/constants.js
  var SECOND_IN_MILLISECONDS = 1e3;
  var MINUTE_IN_MILLISECONDS = 60 * SECOND_IN_MILLISECONDS;
  var HOUR_IN_MILLISECONDS = 60 * MINUTE_IN_MILLISECONDS;

  // node_modules/isaacscript-common-ts/dist/functions/utils.js
  var INTEGER_REGEX = /^-?\d+$/;
  function parseIntSafe(string2) {
    if (typeof string2 !== "string") {
      return void 0;
    }
    const trimmedString = string2.trim();
    if (INTEGER_REGEX.exec(trimmedString) === null) {
      return void 0;
    }
    const number = Number.parseInt(trimmedString, 10);
    return Number.isNaN(number) ? void 0 : number;
  }

  // node_modules/isaacscript-common-ts/dist/functions/set.js
  function objectKeysToSet(object) {
    const set = /* @__PURE__ */ new Set();
    for (const key of Object.keys(object)) {
      set.add(key);
    }
    return set;
  }

  // node_modules/isaacscript-common-ts/dist/functions/types.js
  function isObject(variable) {
    return typeof variable === "object" && variable !== null && !Array.isArray(variable);
  }

  // node_modules/isaac-lua-polyfill/dist/index.js
  function error2(msg) {
    throw new Error(`Lua error: ${msg}`);
  }
  globalThis.error = error2;
  function pairs2(object) {
    return Object.entries(object);
  }
  globalThis.pairs = pairs2;
  function tonumber2(num) {
    return parseIntSafe(num);
  }
  globalThis.tonumber = tonumber2;
  globalThis.string = {
    gsub: (_s, _pattern, _repl) => []
  };
  globalThis.Isaac = {
    GetItemConfig: () => ({
      GetCard: (_cardType) => {
      },
      GetCollectible: (_collectibleType) => {
      },
      GetPillEffect: (_pillEffect) => {
      },
      GetTrinket: (_trinketType) => {
      }
    }),
    GetTime: () => 0
  };
  function BitSet1282(low = 0, high = 0) {
    return Number((BigInt(high) << 64n) + BigInt(low));
  }
  globalThis.BitSet128 = BitSet1282;
  function Color2() {
    return {};
  }
  globalThis.Color = Color2;
  function Font2() {
    return {
      Load: (_filePath) => {
      }
    };
  }
  globalThis.Font = Font2;
  function Game2() {
    return {};
  }
  globalThis.Game = Game2;
  function KColor2() {
    return {};
  }
  globalThis.KColor = KColor2;
  function MusicManager2() {
    return {};
  }
  globalThis.MusicManager = MusicManager2;
  function Random2() {
    return 1;
  }
  globalThis.Random = Random2;
  function RNG2() {
    return {
      SetSeed: (_seed, _shiftIdx) => {
      }
    };
  }
  globalThis.RNG = RNG2;
  function SFXManager2() {
    return {};
  }
  globalThis.SFXManager = SFXManager2;
  function Sprite2() {
    return {
      Load: (_filePath, _loadGraphics) => {
      },
      LoadGraphics: () => {
      },
      ReplaceSpritesheet: (_layerID, _pngPath) => {
      }
    };
  }
  globalThis.Sprite = Sprite2;
  function Vector2() {
    return {};
  }
  globalThis.Vector = Vector2;

  // src/cachedEnumValues.ts
  var import_isaac_typescript_definitions2 = __toESM(require_dist(), 1);
  var import_isaacscript_common = __toESM(require_dist2(), 1);

  // src/enums/CharacterObjectiveKind.ts
  var CharacterObjectiveKind = /* @__PURE__ */ ((CharacterObjectiveKind2) => {
    CharacterObjectiveKind2[CharacterObjectiveKind2["MOM"] = 0] = "MOM";
    CharacterObjectiveKind2[CharacterObjectiveKind2["IT_LIVES"] = 1] = "IT_LIVES";
    CharacterObjectiveKind2[CharacterObjectiveKind2["ISAAC"] = 2] = "ISAAC";
    CharacterObjectiveKind2[CharacterObjectiveKind2["BLUE_BABY"] = 3] = "BLUE_BABY";
    CharacterObjectiveKind2[CharacterObjectiveKind2["SATAN"] = 4] = "SATAN";
    CharacterObjectiveKind2[CharacterObjectiveKind2["LAMB"] = 5] = "LAMB";
    CharacterObjectiveKind2[CharacterObjectiveKind2["MEGA_SATAN"] = 6] = "MEGA_SATAN";
    CharacterObjectiveKind2[CharacterObjectiveKind2["BOSS_RUSH"] = 7] = "BOSS_RUSH";
    CharacterObjectiveKind2[CharacterObjectiveKind2["HUSH"] = 8] = "HUSH";
    CharacterObjectiveKind2[CharacterObjectiveKind2["MOTHER"] = 9] = "MOTHER";
    CharacterObjectiveKind2[CharacterObjectiveKind2["BEAST"] = 10] = "BEAST";
    CharacterObjectiveKind2[CharacterObjectiveKind2["ULTRA_GREED"] = 11] = "ULTRA_GREED";
    CharacterObjectiveKind2[CharacterObjectiveKind2["NO_HIT_BASEMENT"] = 12] = "NO_HIT_BASEMENT";
    CharacterObjectiveKind2[CharacterObjectiveKind2["NO_HIT_CAVES"] = 13] = "NO_HIT_CAVES";
    CharacterObjectiveKind2[CharacterObjectiveKind2["NO_HIT_DEPTHS"] = 14] = "NO_HIT_DEPTHS";
    CharacterObjectiveKind2[CharacterObjectiveKind2["NO_HIT_WOMB"] = 15] = "NO_HIT_WOMB";
    return CharacterObjectiveKind2;
  })(CharacterObjectiveKind || {});

  // src/enums/ObjectiveType.ts
  var ObjectiveType = /* @__PURE__ */ ((ObjectiveType2) => {
    ObjectiveType2[ObjectiveType2["CHARACTER"] = 0] = "CHARACTER";
    ObjectiveType2[ObjectiveType2["BOSS"] = 1] = "BOSS";
    ObjectiveType2[ObjectiveType2["CHALLENGE"] = 2] = "CHALLENGE";
    return ObjectiveType2;
  })(ObjectiveType || {});

  // src/enums/OtherUnlockKind.ts
  var OtherUnlockKind = /* @__PURE__ */ ((OtherUnlockKind2) => {
    OtherUnlockKind2[OtherUnlockKind2["SHOPKEEPERS"] = 0] = "SHOPKEEPERS";
    OtherUnlockKind2[OtherUnlockKind2["GOLD_TRINKETS"] = 1] = "GOLD_TRINKETS";
    OtherUnlockKind2[OtherUnlockKind2["GOLD_PILLS"] = 2] = "GOLD_PILLS";
    OtherUnlockKind2[OtherUnlockKind2["HORSE_PILLS"] = 3] = "HORSE_PILLS";
    OtherUnlockKind2[OtherUnlockKind2["GOLDEN_POOP"] = 4] = "GOLDEN_POOP";
    OtherUnlockKind2[OtherUnlockKind2["RAINBOW_POOP"] = 5] = "RAINBOW_POOP";
    OtherUnlockKind2[OtherUnlockKind2["BLACK_POOP"] = 6] = "BLACK_POOP";
    OtherUnlockKind2[OtherUnlockKind2["CHARMING_POOP"] = 7] = "CHARMING_POOP";
    return OtherUnlockKind2;
  })(OtherUnlockKind || {});

  // src/enums/RandomizerMode.ts
  var RandomizerMode = /* @__PURE__ */ ((RandomizerMode2) => {
    RandomizerMode2["CASUAL"] = "casual";
    RandomizerMode2["HARDCORE"] = "hardcore";
    RandomizerMode2["NIGHTMARE"] = "nightmare";
    return RandomizerMode2;
  })(RandomizerMode || {});

  // src/enums/UnlockType.ts
  var UnlockType = /* @__PURE__ */ ((UnlockType2) => {
    UnlockType2[UnlockType2["CHARACTER"] = 0] = "CHARACTER";
    UnlockType2[UnlockType2["AREA"] = 1] = "AREA";
    UnlockType2[UnlockType2["ROOM"] = 2] = "ROOM";
    UnlockType2[UnlockType2["CHALLENGE"] = 3] = "CHALLENGE";
    UnlockType2[UnlockType2["COLLECTIBLE"] = 4] = "COLLECTIBLE";
    UnlockType2[UnlockType2["TRINKET"] = 5] = "TRINKET";
    UnlockType2[UnlockType2["CARD"] = 6] = "CARD";
    UnlockType2[UnlockType2["PILL_EFFECT"] = 7] = "PILL_EFFECT";
    UnlockType2[UnlockType2["HEART"] = 8] = "HEART";
    UnlockType2[UnlockType2["COIN"] = 9] = "COIN";
    UnlockType2[UnlockType2["BOMB"] = 10] = "BOMB";
    UnlockType2[UnlockType2["KEY"] = 11] = "KEY";
    UnlockType2[UnlockType2["BATTERY"] = 12] = "BATTERY";
    UnlockType2[UnlockType2["SACK"] = 13] = "SACK";
    UnlockType2[UnlockType2["CHEST"] = 14] = "CHEST";
    UnlockType2[UnlockType2["SLOT"] = 15] = "SLOT";
    UnlockType2[UnlockType2["GRID_ENTITY"] = 16] = "GRID_ENTITY";
    UnlockType2[UnlockType2["OTHER"] = 17] = "OTHER";
    return UnlockType2;
  })(UnlockType || {});

  // src/enums/UnlockableArea.ts
  var import_isaac_typescript_definitions = __toESM(require_dist(), 1);
  var UnlockableArea = /* @__PURE__ */ ((UnlockableArea2) => {
    UnlockableArea2[UnlockableArea2["WOMB"] = 0] = "WOMB";
    UnlockableArea2[UnlockableArea2["CATHEDRAL"] = 1] = "CATHEDRAL";
    UnlockableArea2[UnlockableArea2["SHEOL"] = 2] = "SHEOL";
    UnlockableArea2[UnlockableArea2["CHEST"] = 3] = "CHEST";
    UnlockableArea2[UnlockableArea2["DARK_ROOM"] = 4] = "DARK_ROOM";
    UnlockableArea2[UnlockableArea2["MEGA_SATAN"] = 5] = "MEGA_SATAN";
    UnlockableArea2[UnlockableArea2["BOSS_RUSH"] = 6] = "BOSS_RUSH";
    UnlockableArea2[UnlockableArea2["BLUE_WOMB"] = 7] = "BLUE_WOMB";
    UnlockableArea2[UnlockableArea2["REPENTANCE_FLOORS"] = 8] = "REPENTANCE_FLOORS";
    UnlockableArea2[UnlockableArea2["ASCENT"] = 9] = "ASCENT";
    UnlockableArea2[UnlockableArea2["GREED_MODE"] = 10] = "GREED_MODE";
    return UnlockableArea2;
  })(UnlockableArea || {});
  var STORY_BOSS_TO_UNLOCKABLE_AREA = {
    [import_isaac_typescript_definitions.BossID.MOM]: void 0,
    // 6
    [import_isaac_typescript_definitions.BossID.MOMS_HEART]: 0 /* WOMB */,
    // 8
    [import_isaac_typescript_definitions.BossID.SATAN]: 2 /* SHEOL */,
    // 24
    [import_isaac_typescript_definitions.BossID.IT_LIVES]: 0 /* WOMB */,
    // 25
    [import_isaac_typescript_definitions.BossID.ISAAC]: 1 /* CATHEDRAL */,
    // 39
    [import_isaac_typescript_definitions.BossID.BLUE_BABY]: 3 /* CHEST */,
    // 40
    [import_isaac_typescript_definitions.BossID.LAMB]: 4 /* DARK_ROOM */,
    // 54
    [import_isaac_typescript_definitions.BossID.MEGA_SATAN]: 5 /* MEGA_SATAN */,
    // 55
    [import_isaac_typescript_definitions.BossID.ULTRA_GREED]: 10 /* GREED_MODE */,
    // 62
    [import_isaac_typescript_definitions.BossID.HUSH]: 7 /* BLUE_WOMB */,
    // 63
    [import_isaac_typescript_definitions.BossID.DELIRIUM]: void 0,
    // 70
    [import_isaac_typescript_definitions.BossID.ULTRA_GREEDIER]: 10 /* GREED_MODE */,
    // 71
    [import_isaac_typescript_definitions.BossID.MOTHER]: 8 /* REPENTANCE_FLOORS */,
    // 88
    [import_isaac_typescript_definitions.BossID.MAUSOLEUM_MOM]: 8 /* REPENTANCE_FLOORS */,
    // 89
    [import_isaac_typescript_definitions.BossID.MAUSOLEUM_MOMS_HEART]: 8 /* REPENTANCE_FLOORS */,
    // 90
    [import_isaac_typescript_definitions.BossID.DOGMA]: 9 /* ASCENT */,
    // 99
    [import_isaac_typescript_definitions.BossID.BEAST]: 9 /* ASCENT */
    // 100
  };
  var CHARACTER_OBJECTIVE_KIND_TO_UNLOCKABLE_AREA = {
    [0 /* MOM */]: void 0,
    [1 /* IT_LIVES */]: 0 /* WOMB */,
    [2 /* ISAAC */]: 1 /* CATHEDRAL */,
    [4 /* SATAN */]: 2 /* SHEOL */,
    [3 /* BLUE_BABY */]: 3 /* CHEST */,
    [5 /* LAMB */]: 4 /* DARK_ROOM */,
    [6 /* MEGA_SATAN */]: 5 /* MEGA_SATAN */,
    [7 /* BOSS_RUSH */]: 6 /* BOSS_RUSH */,
    [8 /* HUSH */]: 7 /* BLUE_WOMB */,
    [9 /* MOTHER */]: 8 /* REPENTANCE_FLOORS */,
    [10 /* BEAST */]: 9 /* ASCENT */,
    [11 /* ULTRA_GREED */]: 10 /* GREED_MODE */,
    [12 /* NO_HIT_BASEMENT */]: void 0,
    [13 /* NO_HIT_CAVES */]: void 0,
    [14 /* NO_HIT_DEPTHS */]: void 0,
    [15 /* NO_HIT_WOMB */]: 0 /* WOMB */
  };

  // src/cachedEnumValues.ts
  var BOSS_ID_VALUES = (0, import_isaacscript_common.getEnumValues)(import_isaac_typescript_definitions2.BossID);
  var CHALLENGE_VALUES = (0, import_isaacscript_common.getEnumValues)(import_isaac_typescript_definitions2.Challenge);
  var CHARACTER_OBJECTIVE_KIND_VALUES = (0, import_isaacscript_common.getEnumValues)(
    CharacterObjectiveKind
  );
  var OBJECTIVE_TYPE_VALUES = (0, import_isaacscript_common.getEnumValues)(ObjectiveType);
  var OTHER_UNLOCK_KIND_VALUES = (0, import_isaacscript_common.getEnumValues)(OtherUnlockKind);
  var POCKET_ITEM_SLOT_VALUES = (0, import_isaacscript_common.getEnumValues)(import_isaac_typescript_definitions2.PocketItemSlot);
  var RANDOMIZER_MODE_VALUES = (0, import_isaacscript_common.getEnumValues)(RandomizerMode);
  var TRINKET_SLOT_VALUES = (0, import_isaacscript_common.getEnumValues)(import_isaac_typescript_definitions2.TrinketSlot);
  var UNLOCKABLE_AREA_VALUES = (0, import_isaacscript_common.getEnumValues)(UnlockableArea);
  var UNLOCK_TYPE_VALUES = (0, import_isaacscript_common.getEnumValues)(UnlockType);

  // src/constants.ts
  var import_isaac_typescript_definitions3 = __toESM(require_dist(), 1);
  var STARTING_CHARACTER = import_isaac_typescript_definitions3.PlayerType.ISAAC;
  var DIFFICULTIES = [import_isaac_typescript_definitions3.Difficulty.NORMAL, import_isaac_typescript_definitions3.Difficulty.HARD];

  // src/types/Objective.ts
  var import_isaac_typescript_definitions4 = __toESM(require_dist(), 1);
  var import_isaacscript_common2 = __toESM(require_dist2(), 1);
  var OBJECTIVE_TYPES_SET = new import_isaacscript_common2.ReadonlySet(OBJECTIVE_TYPE_VALUES);
  var OBJECTIVE_TYPE_TO_OBJECTIVE_CONSTRUCTOR = {
    [0 /* CHARACTER */]: (arg1, arg2, arg3) => ({
      type: 0 /* CHARACTER */,
      character: arg1,
      kind: arg2,
      difficulty: arg3
    }),
    [1 /* BOSS */]: (arg1) => ({
      type: 1 /* BOSS */,
      bossID: arg1
    }),
    [2 /* CHALLENGE */]: (arg1) => ({
      type: 2 /* CHALLENGE */,
      challenge: arg1
    })
  };
  function getObjective(type2, arg1, arg2, arg3) {
    const constructor = OBJECTIVE_TYPE_TO_OBJECTIVE_CONSTRUCTOR[type2];
    return constructor(arg1, arg2 ?? -1, arg3 ?? -1);
  }

  // src/types/ObjectiveID.ts
  var OBJECTIVE_TYPE_TO_ID_CONSTRUCTOR = {
    [0 /* CHARACTER */]: (objective) => {
      const characterObjective = objective;
      return `${characterObjective.type}.${characterObjective.character}.${characterObjective.kind}.${characterObjective.difficulty}`;
    },
    [1 /* BOSS */]: (objective) => {
      const bossObjective = objective;
      return `${bossObjective.type}.${bossObjective.bossID}`;
    },
    [2 /* CHALLENGE */]: (objective) => {
      const challengeObjective = objective;
      return `${challengeObjective.type}.${challengeObjective.challenge}`;
    }
  };
  function getObjectiveID(objective) {
    const constructor = OBJECTIVE_TYPE_TO_ID_CONSTRUCTOR[objective.type];
    return constructor(objective);
  }

  // src/arrays/bosses.ts
  var import_isaac_typescript_definitions5 = __toESM(require_dist(), 1);
  var import_isaacscript_common3 = __toESM(require_dist2(), 1);
  var RARE_BOSSES = new import_isaacscript_common3.ReadonlySet([
    import_isaac_typescript_definitions5.BossID.GISH,
    // 19
    import_isaac_typescript_definitions5.BossID.CHAD,
    // 21
    import_isaac_typescript_definitions5.BossID.TRIACHNID
    // 42
  ]);
  var BOSS_OBJECTIVE_BOSS_IDS = BOSS_ID_VALUES.filter(
    (bossID) => !(0, import_isaacscript_common3.isStoryBossID)(bossID) && !RARE_BOSSES.has(bossID) && bossID !== import_isaac_typescript_definitions5.BossID.RAGLICH
  );
  var BOSS_OBJECTIVE_BOSS_IDS_SET = new import_isaacscript_common3.ReadonlySet(
    BOSS_OBJECTIVE_BOSS_IDS
  );
  var STAGE_IDS_FOR_BOSS_OBJECTIVES = [
    import_isaac_typescript_definitions5.StageID.BASEMENT,
    // 1
    import_isaac_typescript_definitions5.StageID.CELLAR,
    // 2
    import_isaac_typescript_definitions5.StageID.BURNING_BASEMENT,
    // 3
    import_isaac_typescript_definitions5.StageID.DOWNPOUR,
    // 27
    import_isaac_typescript_definitions5.StageID.DROSS,
    // 28
    import_isaac_typescript_definitions5.StageID.CAVES,
    // 4
    import_isaac_typescript_definitions5.StageID.CATACOMBS,
    // 5
    import_isaac_typescript_definitions5.StageID.FLOODED_CAVES,
    // 6
    import_isaac_typescript_definitions5.StageID.MINES,
    // 29
    import_isaac_typescript_definitions5.StageID.ASHPIT,
    // 30
    import_isaac_typescript_definitions5.StageID.DEPTHS,
    // 7
    import_isaac_typescript_definitions5.StageID.NECROPOLIS,
    // 8
    import_isaac_typescript_definitions5.StageID.DANK_DEPTHS,
    // 9
    import_isaac_typescript_definitions5.StageID.MAUSOLEUM,
    // 31
    import_isaac_typescript_definitions5.StageID.GEHENNA,
    // 32
    import_isaac_typescript_definitions5.StageID.WOMB,
    // 10
    import_isaac_typescript_definitions5.StageID.UTERO,
    // 11
    import_isaac_typescript_definitions5.StageID.SCARRED_WOMB,
    // 12
    import_isaac_typescript_definitions5.StageID.CORPSE
    // 33
  ];

  // src/arrays/unlockableChallenges.ts
  var import_isaac_typescript_definitions6 = __toESM(require_dist(), 1);
  var import_isaacscript_common4 = __toESM(require_dist2(), 1);
  var BANNED_CHALLENGES = new import_isaacscript_common4.ReadonlySet([
    import_isaac_typescript_definitions6.Challenge.CANTRIPPED,
    // 43
    import_isaac_typescript_definitions6.Challenge.DELETE_THIS
    // 45
  ]);
  var UNLOCKABLE_CHALLENGES = CHALLENGE_VALUES.filter(
    (challenge) => challenge !== import_isaac_typescript_definitions6.Challenge.NULL && !BANNED_CHALLENGES.has(challenge)
  );
  var UNLOCKABLE_CHALLENGES_SET = new import_isaacscript_common4.ReadonlySet(UNLOCKABLE_CHALLENGES);

  // src/arrays/unlockableCharacters.ts
  var import_isaac_typescript_definitions7 = __toESM(require_dist(), 1);
  var import_isaacscript_common5 = __toESM(require_dist2(), 1);
  var BANNED_CHARACTERS = new import_isaacscript_common5.ReadonlySet([
    import_isaac_typescript_definitions7.PlayerType.CAIN_B
  ]);
  var PLAYABLE_CHARACTERS = import_isaacscript_common5.MAIN_CHARACTERS.filter((character) => !BANNED_CHARACTERS.has(character));
  var UNLOCKABLE_CHARACTERS = PLAYABLE_CHARACTERS.filter((character) => character !== STARTING_CHARACTER);
  var UNLOCKABLE_CHARACTERS_SET = new import_isaacscript_common5.ReadonlySet(UNLOCKABLE_CHARACTERS);
  var HARD_CHARACTERS = [
    import_isaac_typescript_definitions7.PlayerType.BLUE_BABY,
    // 4
    import_isaac_typescript_definitions7.PlayerType.EVE,
    // 5
    import_isaac_typescript_definitions7.PlayerType.LOST,
    // 10
    import_isaac_typescript_definitions7.PlayerType.KEEPER,
    // 14
    import_isaac_typescript_definitions7.PlayerType.JACOB,
    // 19
    import_isaac_typescript_definitions7.PlayerType.JUDAS_B,
    // 24
    import_isaac_typescript_definitions7.PlayerType.BLUE_BABY_B,
    // 25
    import_isaac_typescript_definitions7.PlayerType.LAZARUS_B,
    // 29
    import_isaac_typescript_definitions7.PlayerType.LOST_B,
    // 31
    import_isaac_typescript_definitions7.PlayerType.KEEPER_B,
    // 33
    import_isaac_typescript_definitions7.PlayerType.APOLLYON_B,
    // 34
    import_isaac_typescript_definitions7.PlayerType.FORGOTTEN_B,
    // 35
    import_isaac_typescript_definitions7.PlayerType.BETHANY_B,
    // 36
    import_isaac_typescript_definitions7.PlayerType.JACOB_B
    // 37
  ];

  // src/arrays/allObjectives.ts
  var ALL_OBJECTIVES = (() => {
    const objectives = [];
    for (const objectiveType of OBJECTIVE_TYPE_VALUES) {
      switch (objectiveType) {
        case 0 /* CHARACTER */: {
          for (const character of PLAYABLE_CHARACTERS) {
            const characterObjectives = getAllCharacterObjectives(character);
            objectives.push(...characterObjectives);
          }
          break;
        }
        case 1 /* BOSS */: {
          for (const bossID of BOSS_OBJECTIVE_BOSS_IDS) {
            const objective = {
              type: 1 /* BOSS */,
              bossID
            };
            objectives.push(objective);
          }
          break;
        }
        case 2 /* CHALLENGE */: {
          for (const challenge of UNLOCKABLE_CHALLENGES) {
            const challengeObjective = getObjective(
              2 /* CHALLENGE */,
              challenge
            );
            objectives.push(challengeObjective);
          }
          break;
        }
      }
    }
    return objectives;
  })();
  function getAllCharacterObjectives(character) {
    const characterObjectives = [];
    for (const kind of CHARACTER_OBJECTIVE_KIND_VALUES) {
      for (const difficulty of DIFFICULTIES) {
        const characterObjective = getObjective(
          0 /* CHARACTER */,
          character,
          kind,
          difficulty
        );
        characterObjectives.push(characterObjective);
      }
    }
    return characterObjectives;
  }
  var ALL_OBJECTIVE_IDS = ALL_OBJECTIVES.map(
    (objective) => getObjectiveID(objective)
  );

  // website/src/utils.ts
  var DISPLAY_VISIBLE = "block";
  var DISPLAY_HIDDEN = "none";
  function getElement(id) {
    const element = document.querySelector(`#${id}`);
    if (element === null) {
      throw new Error(`Failed to find the element with ID: ${id}`);
    }
    if (!(element instanceof HTMLElement)) {
      throw new TypeError(`The "#${id}" element is not an HTMLElement.`);
    }
    return element;
  }
  function setElement(id, content) {
    const element = getElement(id);
    const contentString = typeof content === "string" ? content : content.toString();
    element.innerHTML = contentString;
  }
  function hide(element) {
    element.style.display = DISPLAY_HIDDEN;
  }
  function show(element) {
    element.style.display = DISPLAY_VISIBLE;
  }
  function toggle(element) {
    if (element.style.display === DISPLAY_HIDDEN) {
      show(element);
    } else {
      hide(element);
    }
  }

  // website/src/fillPage.ts
  var SAVE_FILE_STATS_ID = "save-file-stats";
  var HIDE_TEXT = "Hide";
  var SHOW_TEXT = "Show";
  var CHOOSE_SAVE_FILE_COLUMN_ID = "choose-save-file-column";
  function fillPage(saveFile) {
    const completedObjectiveIDs = objectKeysToSet(
      saveFile.AchievementTracker.persistent.completedObjectiveIDs
    );
    completedObjectiveIDs.delete("__TSTL_SET");
    setElement("seed", saveFile.AchievementTracker.persistent.seed);
    setElement(
      "randomizerMode",
      saveFile.AchievementTracker.persistent.randomizerMode
    );
    setElement(
      "header-objectives",
      `(${completedObjectiveIDs.size} / ${ALL_OBJECTIVES.length})`
    );
    setElement(
      "header-total-time",
      `(${completedObjectiveIDs.size} / ${ALL_OBJECTIVES.length})`
    );
    initToggleForSection("stats");
    hideSelectSaveFileArea();
    const saveFileStats = getElement(SAVE_FILE_STATS_ID);
    show(saveFileStats);
  }
  function hideSelectSaveFileArea() {
    const saveFileArea = getElement(CHOOSE_SAVE_FILE_COLUMN_ID);
    hide(saveFileArea);
  }
  function initToggleForSection(prefix) {
    const toggleElement = getElement(`${prefix}-toggle`);
    const sectionElement = getElement(`${prefix}-section`);
    toggleElement.addEventListener("click", () => {
      toggle(sectionElement);
      swapLinkText(toggleElement);
    });
  }
  function swapLinkText(element) {
    const newLinkText = element.innerHTML === HIDE_TEXT ? SHOW_TEXT : HIDE_TEXT;
    element.innerHTML = newLinkText;
  }

  // node_modules/zod/lib/index.mjs
  var util;
  (function(util2) {
    util2.assertEqual = (val) => val;
    function assertIs(_arg) {
    }
    util2.assertIs = assertIs;
    function assertNever(_x) {
      throw new Error();
    }
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
      const filtered = {};
      for (const k of validKeys) {
        filtered[k] = obj[k];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e) {
        return obj[e];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
    util2.find = (arr, checker) => {
      for (const item of arr) {
        if (checker(item))
          return item;
      }
      return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util || (util = {}));
  var objectUtil;
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second) => {
      return {
        ...first,
        ...second
        // second overwrites first
      };
    };
  })(objectUtil || (objectUtil = {}));
  var ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  var getParsedType = (data) => {
    const t = typeof data;
    switch (t) {
      case "undefined":
        return ZodParsedType.undefined;
      case "string":
        return ZodParsedType.string;
      case "number":
        return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
      case "boolean":
        return ZodParsedType.boolean;
      case "function":
        return ZodParsedType.function;
      case "bigint":
        return ZodParsedType.bigint;
      case "symbol":
        return ZodParsedType.symbol;
      case "object":
        if (Array.isArray(data)) {
          return ZodParsedType.array;
        }
        if (data === null) {
          return ZodParsedType.null;
        }
        if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
          return ZodParsedType.promise;
        }
        if (typeof Map !== "undefined" && data instanceof Map) {
          return ZodParsedType.map;
        }
        if (typeof Set !== "undefined" && data instanceof Set) {
          return ZodParsedType.set;
        }
        if (typeof Date !== "undefined" && data instanceof Date) {
          return ZodParsedType.date;
        }
        return ZodParsedType.object;
      default:
        return ZodParsedType.unknown;
    }
  };
  var ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  var quotelessJson = (obj) => {
    const json = JSON.stringify(obj, null, 2);
    return json.replace(/"([^"]+)":/g, "$1:");
  };
  var ZodError = class extends Error {
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    get errors() {
      return this.issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = (error3) => {
        for (const issue of error3.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i = 0;
            while (i < issue.path.length) {
              const el = issue.path[i];
              const terminal = i === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i++;
            }
          }
        }
      };
      processError(this);
      return fieldErrors;
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  ZodError.create = (issues) => {
    const error3 = new ZodError(issues);
    return error3;
  };
  var errorMap = (issue, _ctx) => {
    let message;
    switch (issue.code) {
      case ZodIssueCode.invalid_type:
        if (issue.received === ZodParsedType.undefined) {
          message = "Required";
        } else {
          message = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodIssueCode.invalid_literal:
        message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
        break;
      case ZodIssueCode.unrecognized_keys:
        message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
        break;
      case ZodIssueCode.invalid_union:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_union_discriminator:
        message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
        break;
      case ZodIssueCode.invalid_enum_value:
        message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodIssueCode.invalid_arguments:
        message = `Invalid function arguments`;
        break;
      case ZodIssueCode.invalid_return_type:
        message = `Invalid function return type`;
        break;
      case ZodIssueCode.invalid_date:
        message = `Invalid date`;
        break;
      case ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message = `Invalid ${issue.validation}`;
        } else {
          message = "Invalid";
        }
        break;
      case ZodIssueCode.too_small:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.too_big:
        if (issue.type === "array")
          message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
        else if (issue.type === "string")
          message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
        else if (issue.type === "number")
          message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "bigint")
          message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "date")
          message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
        else
          message = "Invalid input";
        break;
      case ZodIssueCode.custom:
        message = `Invalid input`;
        break;
      case ZodIssueCode.invalid_intersection_types:
        message = `Intersection results could not be merged`;
        break;
      case ZodIssueCode.not_multiple_of:
        message = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodIssueCode.not_finite:
        message = "Number must be finite";
        break;
      default:
        message = _ctx.defaultError;
        util.assertNever(issue);
    }
    return { message };
  };
  var overrideErrorMap = errorMap;
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  function getErrorMap() {
    return overrideErrorMap;
  }
  var makeIssue = (params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...issueData.path || []];
    const fullIssue = {
      ...issueData,
      path: fullPath
    };
    let errorMessage = "";
    const maps = errorMaps.filter((m) => !!m).slice().reverse();
    for (const map of maps) {
      errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message || errorMessage
    };
  };
  var EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        ctx.schemaErrorMap,
        getErrorMap(),
        errorMap
        // then global default map
      ].filter((x) => !!x)
    });
    ctx.common.issues.push(issue);
  }
  var ParseStatus = class _ParseStatus {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      if (this.value === "valid")
        this.value = "dirty";
    }
    abort() {
      if (this.value !== "aborted")
        this.value = "aborted";
    }
    static mergeArray(status, results) {
      const arrayValue = [];
      for (const s of results) {
        if (s.status === "aborted")
          return INVALID;
        if (s.status === "dirty")
          status.dirty();
        arrayValue.push(s.value);
      }
      return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs3) {
      const syncPairs = [];
      for (const pair of pairs3) {
        syncPairs.push({
          key: await pair.key,
          value: await pair.value
        });
      }
      return _ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs3) {
      const finalObject = {};
      for (const pair of pairs3) {
        const { key, value } = pair;
        if (key.status === "aborted")
          return INVALID;
        if (value.status === "aborted")
          return INVALID;
        if (key.status === "dirty")
          status.dirty();
        if (value.status === "dirty")
          status.dirty();
        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
          finalObject[key.value] = value.value;
        }
      }
      return { status: status.value, value: finalObject };
    }
  };
  var INVALID = Object.freeze({
    status: "aborted"
  });
  var DIRTY = (value) => ({ status: "dirty", value });
  var OK = (value) => ({ status: "valid", value });
  var isAborted = (x) => x.status === "aborted";
  var isDirty = (x) => x.status === "dirty";
  var isValid = (x) => x.status === "valid";
  var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
  var errorUtil;
  (function(errorUtil2) {
    errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
    errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
  })(errorUtil || (errorUtil = {}));
  var ParseInputLazyPath = class {
    constructor(parent, value, path, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (this._key instanceof Array) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  };
  var handleResult = (ctx, result) => {
    if (isValid(result)) {
      return { success: true, data: result.value };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error)
            return this._error;
          const error3 = new ZodError(ctx.common.issues);
          this._error = error3;
          return this._error;
        }
      };
    }
  };
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = (iss, ctx) => {
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      if (typeof ctx.data === "undefined") {
        return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };
      }
      return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };
    };
    return { errorMap: customMap, description };
  }
  var ZodType = class {
    constructor(def) {
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
    }
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if (isAsync(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data, params) {
      const result = this.safeParse(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    safeParse(data, params) {
      var _a;
      const ctx = {
        common: {
          issues: [],
          async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const result = this._parseSync({ data, path: ctx.path, parent: ctx });
      return handleResult(ctx, result);
    }
    async parseAsync(data, params) {
      const result = await this.safeParseAsync(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    async safeParseAsync(data, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
          async: true
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message) {
      const getIssueProperties = (val) => {
        if (typeof message === "string" || typeof message === "undefined") {
          return { message };
        } else if (typeof message === "function") {
          return message(val);
        } else {
          return message;
        }
      };
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = () => ctx.addIssue({
          code: ZodIssueCode.custom,
          ...getIssueProperties(val)
        });
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then((data) => {
            if (!data) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "refinement", refinement }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this, this._def);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects({
        ...processCreateParams(this._def),
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "transform", transform }
      });
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault({
        ...processCreateParams(this._def),
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      });
    }
    brand() {
      return new ZodBranded({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this,
        ...processCreateParams(this._def)
      });
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch({
        ...processCreateParams(this._def),
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      });
    }
    describe(description) {
      const This = this.constructor;
      return new This({
        ...this._def,
        description
      });
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  };
  var cuidRegex = /^c[^\s-]{8,}$/i;
  var cuid2Regex = /^[a-z][a-z0-9]*$/;
  var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
  var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_+-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
  var emojiRegex;
  var ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;
  var ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
  var datetimeRegex = (args) => {
    if (args.precision) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{${args.precision}}Z$`);
      }
    } else if (args.precision === 0) {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$`);
      }
    } else {
      if (args.offset) {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}(:?\\d{2})?)|Z)$`);
      } else {
        return new RegExp(`^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$`);
      }
    }
  };
  function isValidIP(ip, version) {
    if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  var ZodString = class _ZodString extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(
          ctx2,
          {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          }
          //
        );
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex) {
            emojiRegex = new RegExp(_emojiRegex, "u");
          }
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message) {
      return this.refinement((data) => regex.test(data), {
        validation,
        code: ZodIssueCode.invalid_string,
        ...errorUtil.errToObj(message)
      });
    }
    _addCheck(check) {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    email(message) {
      return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
    }
    url(message) {
      return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
    }
    emoji(message) {
      return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
    }
    uuid(message) {
      return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
    }
    cuid(message) {
      return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
    }
    cuid2(message) {
      return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
    }
    ulid(message) {
      return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
    }
    ip(options) {
      return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
    }
    datetime(options) {
      var _a;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          message: options
        });
      }
      return this._addCheck({
        kind: "datetime",
        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
        offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    regex(regex, message) {
      return this._addCheck({
        kind: "regex",
        regex,
        ...errorUtil.errToObj(message)
      });
    }
    includes(value, options) {
      return this._addCheck({
        kind: "includes",
        value,
        position: options === null || options === void 0 ? void 0 : options.position,
        ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
      });
    }
    startsWith(value, message) {
      return this._addCheck({
        kind: "startsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    endsWith(value, message) {
      return this._addCheck({
        kind: "endsWith",
        value,
        ...errorUtil.errToObj(message)
      });
    }
    min(minLength, message) {
      return this._addCheck({
        kind: "min",
        value: minLength,
        ...errorUtil.errToObj(message)
      });
    }
    max(maxLength, message) {
      return this._addCheck({
        kind: "max",
        value: maxLength,
        ...errorUtil.errToObj(message)
      });
    }
    length(len, message) {
      return this._addCheck({
        kind: "length",
        value: len,
        ...errorUtil.errToObj(message)
      });
    }
    /**
     * @deprecated Use z.string().min(1) instead.
     * @see {@link ZodString.min}
     */
    nonempty(message) {
      return this.min(1, errorUtil.errToObj(message));
    }
    trim() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "trim" }]
      });
    }
    toLowerCase() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      });
    }
    toUpperCase() {
      return new _ZodString({
        ...this._def,
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      });
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get minLength() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxLength() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodString.create = (params) => {
    var _a;
    return new ZodString({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  var ZodNumber = class _ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodNumber({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodNumber({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    int(message) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message)
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    finite(message) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message)
      });
    }
    safe(message) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
      let max = null, min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        } else if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return Number.isFinite(min) && Number.isFinite(max);
    }
  };
  ZodNumber.create = (params) => {
    return new ZodNumber({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  var ZodBigInt = class _ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = BigInt(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.bigint,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message) {
      return this.setLimit("min", value, true, errorUtil.toString(message));
    }
    gt(value, message) {
      return this.setLimit("min", value, false, errorUtil.toString(message));
    }
    lte(value, message) {
      return this.setLimit("max", value, true, errorUtil.toString(message));
    }
    lt(value, message) {
      return this.setLimit("max", value, false, errorUtil.toString(message));
    }
    setLimit(kind, value, inclusive, message) {
      return new _ZodBigInt({
        ...this._def,
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message)
          }
        ]
      });
    }
    _addCheck(check) {
      return new _ZodBigInt({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    positive(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    negative(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message)
      });
    }
    nonpositive(message) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    nonnegative(message) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message)
      });
    }
    multipleOf(value, message) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message)
      });
    }
    get minValue() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min;
    }
    get maxValue() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max;
    }
  };
  ZodBigInt.create = (params) => {
    var _a;
    return new ZodBigInt({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
      ...processCreateParams(params)
    });
  };
  var ZodBoolean = class extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodBoolean.create = (params) => {
    return new ZodBoolean({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      ...processCreateParams(params)
    });
  };
  var ZodDate = class _ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new _ZodDate({
        ...this._def,
        checks: [...this._def.checks, check]
      });
    }
    min(minDate, message) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    max(maxDate, message) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message)
      });
    }
    get minDate() {
      let min = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min === null || ch.value > min)
            min = ch.value;
        }
      }
      return min != null ? new Date(min) : null;
    }
    get maxDate() {
      let max = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max === null || ch.value < max)
            max = ch.value;
        }
      }
      return max != null ? new Date(max) : null;
    }
  };
  ZodDate.create = (params) => {
    return new ZodDate({
      checks: [],
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate,
      ...processCreateParams(params)
    });
  };
  var ZodSymbol = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodSymbol.create = (params) => {
    return new ZodSymbol({
      typeName: ZodFirstPartyTypeKind.ZodSymbol,
      ...processCreateParams(params)
    });
  };
  var ZodUndefined = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodUndefined.create = (params) => {
    return new ZodUndefined({
      typeName: ZodFirstPartyTypeKind.ZodUndefined,
      ...processCreateParams(params)
    });
  };
  var ZodNull = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodNull.create = (params) => {
    return new ZodNull({
      typeName: ZodFirstPartyTypeKind.ZodNull,
      ...processCreateParams(params)
    });
  };
  var ZodAny = class extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodAny.create = (params) => {
    return new ZodAny({
      typeName: ZodFirstPartyTypeKind.ZodAny,
      ...processCreateParams(params)
    });
  };
  var ZodUnknown = class extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  ZodUnknown.create = (params) => {
    return new ZodUnknown({
      typeName: ZodFirstPartyTypeKind.ZodUnknown,
      ...processCreateParams(params)
    });
  };
  var ZodNever = class extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  };
  ZodNever.create = (params) => {
    return new ZodNever({
      typeName: ZodFirstPartyTypeKind.ZodNever,
      ...processCreateParams(params)
    });
  };
  var ZodVoid = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  ZodVoid.create = (params) => {
    return new ZodVoid({
      typeName: ZodFirstPartyTypeKind.ZodVoid,
      ...processCreateParams(params)
    });
  };
  var ZodArray = class _ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : void 0,
            maximum: tooBig ? def.exactLength.value : void 0,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        })).then((result2) => {
          return ParseStatus.mergeArray(status, result2);
        });
      }
      const result = [...ctx.data].map((item, i) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      });
      return ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message) {
      return new _ZodArray({
        ...this._def,
        minLength: { value: minLength, message: errorUtil.toString(message) }
      });
    }
    max(maxLength, message) {
      return new _ZodArray({
        ...this._def,
        maxLength: { value: maxLength, message: errorUtil.toString(message) }
      });
    }
    length(len, message) {
      return new _ZodArray({
        ...this._def,
        exactLength: { value: len, message: errorUtil.toString(message) }
      });
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodArray.create = (schema, params) => {
    return new ZodArray({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray,
      ...processCreateParams(params)
    });
  };
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject({
        ...schema._def,
        shape: () => newShape
      });
    } else if (schema instanceof ZodArray) {
      return new ZodArray({
        ...schema._def,
        type: deepPartialify(schema.element)
      });
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  var ZodObject = class _ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape = this._def.shape();
      const keys = util.objectKeys(shape);
      return this._cached = { shape, keys };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs3 = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs3.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs3.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip")
          ;
        else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs3.push({
            key: { status: "valid", value: key },
            value: catchall._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs3) {
            const key = await pair.key;
            syncPairs.push({
              key,
              value: await pair.value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs3);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message) {
      errorUtil.errToObj;
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strict",
        ...message !== void 0 ? {
          errorMap: (issue, ctx) => {
            var _a, _b, _c, _d;
            const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
            if (issue.code === "unrecognized_keys")
              return {
                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
              };
            return {
              message: defaultError
            };
          }
        } : {}
      });
    }
    strip() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "strip"
      });
    }
    passthrough() {
      return new _ZodObject({
        ...this._def,
        unknownKeys: "passthrough"
      });
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new _ZodObject({
        ...this._def,
        shape: () => ({
          ...this._def.shape(),
          ...augmentation
        })
      });
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new _ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: () => ({
          ...this._def.shape(),
          ...merging._def.shape()
        }),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
      return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index) {
      return new _ZodObject({
        ...this._def,
        catchall: index
      });
    }
    pick(mask) {
      const shape = {};
      util.objectKeys(mask).forEach((key) => {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    omit(mask) {
      const shape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => shape
      });
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    required(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new _ZodObject({
        ...this._def,
        shape: () => newShape
      });
    }
    keyof() {
      return createZodEnum(util.objectKeys(this.shape));
    }
  };
  ZodObject.create = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject({
      shape: () => shape,
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject,
      ...processCreateParams(params)
    });
  };
  var ZodUnion = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = void 0;
        const issues = [];
        for (const option of options) {
          const childCtx = {
            ...ctx,
            common: {
              ...ctx.common,
              issues: []
            },
            parent: null
          };
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = { result, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  ZodUnion.create = (types, params) => {
    return new ZodUnion({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion,
      ...processCreateParams(params)
    });
  };
  var getDiscriminator = (type2) => {
    if (type2 instanceof ZodLazy) {
      return getDiscriminator(type2.schema);
    } else if (type2 instanceof ZodEffects) {
      return getDiscriminator(type2.innerType());
    } else if (type2 instanceof ZodLiteral) {
      return [type2.value];
    } else if (type2 instanceof ZodEnum) {
      return type2.options;
    } else if (type2 instanceof ZodNativeEnum) {
      return Object.keys(type2.enum);
    } else if (type2 instanceof ZodDefault) {
      return getDiscriminator(type2._def.innerType);
    } else if (type2 instanceof ZodUndefined) {
      return [void 0];
    } else if (type2 instanceof ZodNull) {
      return [null];
    } else {
      return null;
    }
  };
  var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      const optionsMap = /* @__PURE__ */ new Map();
      for (const type2 of options) {
        const discriminatorValues = getDiscriminator(type2.shape[discriminator]);
        if (!discriminatorValues) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type2);
        }
      }
      return new _ZodDiscriminatedUnion({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap,
        ...processCreateParams(params)
      });
    }
  };
  function mergeValues(a2, b2) {
    const aType = getParsedType(a2);
    const bType = getParsedType(b2);
    if (a2 === b2) {
      return { valid: true, data: a2 };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util.objectKeys(b2);
      const sharedKeys = util.objectKeys(a2).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = { ...a2, ...b2 };
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a2[key], b2[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a2.length !== b2.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index = 0; index < a2.length; index++) {
        const itemA = a2[index];
        const itemB = b2[index];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a2 === +b2) {
      return { valid: true, data: a2 };
    } else {
      return { valid: false };
    }
  }
  var ZodIntersection = class extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = (parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      };
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  };
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection,
      ...processCreateParams(params)
    });
  };
  var ZodTuple = class _ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema)
          return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x) => !!x);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new _ZodTuple({
        ...this._def,
        rest
      });
    }
  };
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null,
      ...processCreateParams(params)
    });
  };
  var ZodRecord = class _ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs3 = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs3.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs3);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs3);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new _ZodRecord({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(third)
        });
      }
      return new _ZodRecord({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(second)
      });
    }
  };
  var ZodMap = class extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs3 = [...ctx.data.entries()].map(([key, value], index) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs3) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = /* @__PURE__ */ new Map();
        for (const pair of pairs3) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  };
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap,
      ...processCreateParams(params)
    });
  };
  var ZodSet = class _ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = /* @__PURE__ */ new Set();
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message) {
      return new _ZodSet({
        ...this._def,
        minSize: { value: minSize, message: errorUtil.toString(message) }
      });
    }
    max(maxSize, message) {
      return new _ZodSet({
        ...this._def,
        maxSize: { value: maxSize, message: errorUtil.toString(message) }
      });
    }
    size(size, message) {
      return this.min(size, message).max(size, message);
    }
    nonempty(message) {
      return this.min(1, message);
    }
  };
  ZodSet.create = (valueType, params) => {
    return new ZodSet({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet,
      ...processCreateParams(params)
    });
  };
  var ZodFunction = class _ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error3) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error3
          }
        });
      }
      function makeReturnsIssue(returns, error3) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error3
          }
        });
      }
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me = this;
        return OK(async function(...args) {
          const error3 = new ZodError([]);
          const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
            error3.addIssue(makeArgsIssue(args, e));
            throw error3;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
            error3.addIssue(makeReturnsIssue(result, e));
            throw error3;
          });
          return parsedReturns;
        });
      } else {
        const me = this;
        return OK(function(...args) {
          const parsedArgs = me._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new _ZodFunction({
        ...this._def,
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      });
    }
    returns(returnType) {
      return new _ZodFunction({
        ...this._def,
        returns: returnType
      });
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new _ZodFunction({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction,
        ...processCreateParams(params)
      });
    }
  };
  var ZodLazy = class extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  };
  ZodLazy.create = (getter, params) => {
    return new ZodLazy({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy,
      ...processCreateParams(params)
    });
  };
  var ZodLiteral = class extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  };
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral,
      ...processCreateParams(params)
    });
  };
  function createZodEnum(values, params) {
    return new ZodEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum,
      ...processCreateParams(params)
    });
  }
  var ZodEnum = class _ZodEnum extends ZodType {
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (this._def.values.indexOf(input.data) === -1) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values) {
      return _ZodEnum.create(values);
    }
    exclude(values) {
      return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));
    }
  };
  ZodEnum.create = createZodEnum;
  var ZodNativeEnum = class extends ZodType {
    _parse(input) {
      const nativeEnumValues = util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (nativeEnumValues.indexOf(input.data) === -1) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum({
      values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
      ...processCreateParams(params)
    });
  };
  var ZodPromise = class extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data) => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  };
  ZodPromise.create = (schema, params) => {
    return new ZodPromise({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise,
      ...processCreateParams(params)
    });
  };
  var ZodEffects = class extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: (arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        },
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.issues.length) {
          return {
            status: "dirty",
            value: ctx.data
          };
        }
        if (ctx.common.async) {
          return Promise.resolve(processed).then((processed2) => {
            return this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
          });
        } else {
          return this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = (acc) => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        };
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid(base))
            return base;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid(base))
              return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
          });
        }
      }
      util.assertNever(effect);
    }
  };
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect,
      ...processCreateParams(params)
    });
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects({
      schema,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      ...processCreateParams(params)
    });
  };
  var ZodOptional = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(void 0);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodOptional.create = (type2, params) => {
    return new ZodOptional({
      innerType: type2,
      typeName: ZodFirstPartyTypeKind.ZodOptional,
      ...processCreateParams(params)
    });
  };
  var ZodNullable = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  ZodNullable.create = (type2, params) => {
    return new ZodNullable({
      innerType: type2,
      typeName: ZodFirstPartyTypeKind.ZodNullable,
      ...processCreateParams(params)
    });
  };
  var ZodDefault = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  ZodDefault.create = (type2, params) => {
    return new ZodDefault({
      innerType: type2,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default,
      ...processCreateParams(params)
    });
  };
  var ZodCatch = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = {
        ...ctx,
        common: {
          ...ctx.common,
          issues: []
        }
      };
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: {
          ...newCtx
        }
      });
      if (isAsync(result)) {
        return result.then((result2) => {
          return {
            status: "valid",
            value: result2.status === "valid" ? result2.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  ZodCatch.create = (type2, params) => {
    return new ZodCatch({
      innerType: type2,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
      ...processCreateParams(params)
    });
  };
  var ZodNaN = class extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  };
  ZodNaN.create = (params) => {
    return new ZodNaN({
      typeName: ZodFirstPartyTypeKind.ZodNaN,
      ...processCreateParams(params)
    });
  };
  var BRAND = Symbol("zod_brand");
  var ZodBranded = class extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data = ctx.data;
      return this._def.type._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  };
  var ZodPipeline = class _ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        };
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a2, b2) {
      return new _ZodPipeline({
        in: a2,
        out: b2,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  };
  var ZodReadonly = class extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      if (isValid(result)) {
        result.value = Object.freeze(result.value);
      }
      return result;
    }
  };
  ZodReadonly.create = (type2, params) => {
    return new ZodReadonly({
      innerType: type2,
      typeName: ZodFirstPartyTypeKind.ZodReadonly,
      ...processCreateParams(params)
    });
  };
  var custom = (check, params = {}, fatal) => {
    if (check)
      return ZodAny.create().superRefine((data, ctx) => {
        var _a, _b;
        if (!check(data)) {
          const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
          const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
          const p2 = typeof p === "string" ? { message: p } : p;
          ctx.addIssue({ code: "custom", ...p2, fatal: _fatal });
        }
      });
    return ZodAny.create();
  };
  var late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  var instanceOfType = (cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom((data) => data instanceof cls, params);
  var stringType = ZodString.create;
  var numberType = ZodNumber.create;
  var nanType = ZodNaN.create;
  var bigIntType = ZodBigInt.create;
  var booleanType = ZodBoolean.create;
  var dateType = ZodDate.create;
  var symbolType = ZodSymbol.create;
  var undefinedType = ZodUndefined.create;
  var nullType = ZodNull.create;
  var anyType = ZodAny.create;
  var unknownType = ZodUnknown.create;
  var neverType = ZodNever.create;
  var voidType = ZodVoid.create;
  var arrayType = ZodArray.create;
  var objectType = ZodObject.create;
  var strictObjectType = ZodObject.strictCreate;
  var unionType = ZodUnion.create;
  var discriminatedUnionType = ZodDiscriminatedUnion.create;
  var intersectionType = ZodIntersection.create;
  var tupleType = ZodTuple.create;
  var recordType = ZodRecord.create;
  var mapType = ZodMap.create;
  var setType = ZodSet.create;
  var functionType = ZodFunction.create;
  var lazyType = ZodLazy.create;
  var literalType = ZodLiteral.create;
  var enumType = ZodEnum.create;
  var nativeEnumType = ZodNativeEnum.create;
  var promiseType = ZodPromise.create;
  var effectsType = ZodEffects.create;
  var optionalType = ZodOptional.create;
  var nullableType = ZodNullable.create;
  var preprocessType = ZodEffects.createWithPreprocess;
  var pipelineType = ZodPipeline.create;
  var ostring = () => stringType().optional();
  var onumber = () => numberType().optional();
  var oboolean = () => booleanType().optional();
  var coerce = {
    string: (arg) => ZodString.create({ ...arg, coerce: true }),
    number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
    boolean: (arg) => ZodBoolean.create({
      ...arg,
      coerce: true
    }),
    bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
    date: (arg) => ZodDate.create({ ...arg, coerce: true })
  };
  var NEVER = INVALID;
  var z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid,
    isAsync,
    get util() {
      return util;
    },
    get objectUtil() {
      return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind() {
      return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
  });

  // website/src/types/SaveFile.ts
  var SAVE_FILE_SCHEMA = z.object({
    AchievementTracker: z.object({
      persistent: z.object({
        seed: z.number().int(),
        randomizerMode: z.nativeEnum(RandomizerMode),
        objectiveIDToUnlockIDMap: z.record(z.string(), z.string()),
        completedObjectiveIDs: z.record(z.string(), z.string())
      })
    }),
    StatsTracker: z.object({
      persistent: z.object({
        stats: z.object({
          numCompletedRuns: z.number().int(),
          numDeaths: z.number().int(),
          gameFramesElapsed: z.number().int(),
          currentStreak: z.number().int(),
          bestStreak: z.number().int(),
          usedIllegalPause: z.boolean(),
          usedSaveAndQuit: z.boolean(),
          doubleUnlocked: z.boolean(),
          usedMods: z.boolean(),
          generatedWithCheat: z.boolean()
        })
      })
    })
  });

  // website/src/main.ts
  var CHOOSE_SAVE_FILE_BUTTON_ID = "choose-save-file";
  var CHOOSE_SAVE_FILE_ERROR_ID = "choose-save-file-error";
  var CHOOSE_SAVE_FILE_ERROR_TEXT_ID = "choose-save-file-error-text";
  window.addEventListener("load", () => {
    selectSaveFileButtonInit();
  });
  function selectSaveFileButtonInit() {
    const chooseSaveFileButton = getElement(CHOOSE_SAVE_FILE_BUTTON_ID);
    chooseSaveFileButton.addEventListener("change", chooseSaveFileButtonChanged);
  }
  function chooseSaveFileButtonChanged(event) {
    if (event.target === null) {
      return;
    }
    const inputElement = event.target;
    const { files } = inputElement;
    if (files === null) {
      return;
    }
    const file = files[0];
    if (file === void 0) {
      return;
    }
    readFile(file);
  }
  async function readFile(file) {
    const text = await file.text();
    try {
      const object = JSON.parse(text);
      if (!isObject(object)) {
        throw new Error("The selected file is not a valid JSON file.");
      }
      const saveFile = SAVE_FILE_SCHEMA.parse(object);
      fillPage(saveFile);
    } catch (error3) {
      selectSaveFileError(error3);
    }
  }
  function selectSaveFileError(error3) {
    const errorElement = getElement(CHOOSE_SAVE_FILE_ERROR_ID);
    show(errorElement);
    const errorTextElement = getElement(CHOOSE_SAVE_FILE_ERROR_TEXT_ID);
    errorTextElement.innerHTML = `${error3}`;
  }
})();
//# sourceMappingURL=main.js.map
